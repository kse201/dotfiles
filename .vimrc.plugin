" Last Change: 15-Jun-2012.
autocmd MyAutoCmd BufWritePost $MYVIMRCPLUGIN  source $MYVIMRC |
            \ if has('gui_running') |
            \ source $MYGVIMRC
" vimproc.vim{{{
if has('win32') 
    set shellslash
    let g:vimproc_dll_path = $VIMFILE_DIR . '/autoload/vimproc_win32.dll'
elseif has('win64')
    set shellslash
    let g:vimproc_dll_path = $VIMFILE_DIR . '/autoload/vimproc_win64.dll'
elseif has('mac')
    let g:vimproc_dll_path = $VIMFILE_DIR . '/bundle/vimproc/autoload/vimproc_mac.so'
else
    " let g:vimproc_dll_path = $VIMFILE_DIR . '/bundle/vimproc/autoload/proc.dll'
    let g:vimproc_dll_path = $VIMFILE_DIR . '/bundle/vimproc/autoload/vimproc_mac.so'
endif
" }}}

" neobundle.vim{{{
set nocompatible
filetype off
filetype plugin indent off
if has('win32') || has('win64')
    set rtp+=~/vimfiles/bundle/neobundle.vim/
    " let $VIMRUNTIME = $VIM .'\vimfiles\bundle\vundle\'
    call neobundle#rc(expand('~/vimfiles/bundle'))
else
    set rtp+=~/.vim/bundle/neobundle.vim
    call neobundle#rc('~/.vim/bundle')
endif

" 必須ライブラリ {{{
NeoBundle 'Shougo/vimproc'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'basyura/twibill.vim'
NeoBundle 'basyura/bitly.vim'
" }}}
" Plugin管理 {{{
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'jceb/vim-ipi'
NeoBundle 'tpope/vim-pathogen'
" }}}
" ドキュメント管理 {{{
" NeoBundleLazy 'thinca/vim-ref'
NeoBundle 'thinca/vim-ref'
NeoBundle 'vim-jp/vimdoc-ja.git'
" }}}
" 補完 {{{
NeoBundle 'neocomplcache'
NeoBundle 'Shougo/neocomplcache-snippets-complete'
NeoBundle 'Shougo/neocomplcache-clang'
NeoBundle 'clang-complete'
" }}}
" ファイラ {{{
NeoBundle 'scrooloose/nerdtree'
NeoBundleLazy 'Shougo/vimfiler'
" }}}
" 入力補助 {{{
NeoBundle 'kana/vim-smartchr'
" NeoBundleLazy 'mattn/zencoding-vim'
NeoBundle 'msanders/cocoa.vim'
NeoBundle 'jelera/vim-javascript-syntax'
NeoBundle 'neco-look'
" }}}
" unite関連 {{{
NeoBundle 'Shougo/unite.vim'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'tacroe/unite-mark'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'unite-colorscheme'
NeoBundle 'choplin/unite-vim_hacks'
NeoBundle 'ujihisa/unite-font'
" }}}
" テキスト整形 {{{
NeoBundle 'godlygeek/tabular'
NeoBundle 'The-NERD-Commenter'
NeoBundle 'vim-scripts/RST-Tables'
NeoBundle 'vim-scripts/sequence'
" }}}
" 機能追加 {{{
NeoBundle 'Shougo/vimshell'
NeoBundle 'basyura/TweetVim'
NeoBundle 'delphinus35/TweetVim-powerline-theme'
NeoBundle 'koron/chalice'
NeoBundle 'mattn/calendar-vim'
NeoBundleLazy 'thinca/vim-quickrun'
NeoBundle 'banyan/Vimpusher'
NeoBundle 'surround.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'open-browser.vim'
" NeoBundle 'YankRing.vim'
NeoBundle 'SingleCompile'
NeoBundleLazy 'taglist.vim'
NeoBundleLazy 'mbadran/headlights'
NeoBundle 'thinca/vim-prettyprint'
NeoBundle 'thinca/vim-editvar'
NeoBundle 'thinca/vim-showtime'
NeoBundle 'thinca/vim-fontzoom'
" NeoBundle 'vim-scripts/ttoc'
NeoBundleLazy 'exVim'
" }}}
" C / C++ {{{
NeoBundleLazy 'vim-scripts/Source-Explorer-srcexpl.vim'
NeoBundleLazy 'vim-scripts/trinity.vim'
NeoBundleLazy 'vim-scripts/a.vim.git'
NeoBundleLazy 'vim-scripts/c.vim.git'
NeoBundleLazy 'vim-scripts/CCTree'
NeoBundleLazy 'vim-scripts/cscope-menu'
NeoBundleLazy 'vim-scripts/gtags.vim'
" }}}
" tex {{{
NeoBundleLazy 'jcf/vim-latex'
" }}}
" 見た目 {{{
NeoBundle 'wombat256.vim'
NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'nathanaelkane/vim-indent-guides'
" }}}
" その他  {{{
NeoBundle 'dannyob/quickfixstatus'
NeoBundle 'Takazudo/outline.vim.git'
NeoBundle 'jceb/vim-hier'
NeoBundle 'mattn/mkdpreview-vim'
NeoBundle 'L9'

NeoBundle 'git://git.wincent.com/command-t.git'
" }}}
" 6/xx
NeoBundle 'osyo-manga/unite-homo.git'
NeoBundle 'osyo-manga/unite-u-nya-.git'
NeoBundle 'vimwiki'
NeoBundle 'mattn/unite-mcdonalds-vim'
NeoBundle 'mattn/gal-vim'
NeoBundle 'mattn/invader-vim'
NeoBundle 'mattn/mahjong-vim'
NeoBundle 'TeTrIs.vim'
NeoBundle 'sudoku_game'
NeoBundle 'mfumi/viminesweeper'
NeoBundle 'mfumi/snake.vim'
filetype plugin indent on
syntax on
" }}}

" neocomplcache{{{

" Use neocomplcache.
let g:neocomplcache_enable_at_startup             = 0 " 起動時に有効化
" Use smartcase.
let g:NeoComplCache_SmartCase                     = 1
let g:neocomplcache_enable_auto_select            = 1
" Use camel case completion.
let g:NeoComplCache_enable_camel_case_completion  = 0
" Use underbar completion.
let g:NeoComplCache_EnableUnderbarCompletion      = 1
" Set minimum syntax keyword length.
let g:NeoComplCache_MinSyntaxLength               = 3
" Set manual completion length.
" let g:NeoComplCache_ManualCompletionStartLength = 2
" Print caching percent in statusline.
" let g:NeoComplCache_CachingPercentInStatusline  = 1
let g:neocomplcache_lock_buffer_name_pattern      = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default'  : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme'   : $HOME.'/.gosh_completions',
            \ 'ruby'     : $VIMFILE_DIR.'/dict/ruby.dict',
            \ 'objc'     : $VIMFILE_DIR.'/dict/cocoa.dict',
            \ 'tex'      : $VIMFILE_DIR.'/dict/tex.dict'
            \ }

" Define keyword.
if !exists('g:neoComplCache_keyword_patterns')
    let g:neoComplCache_keyword_patterns = {}
endif
let g:neoComplCache_keyword_patterns['default'] = '\h\w*'
let g:NeoComplCache_SnippetsDir = $VIMFILE_DIR.'/snippets'
" ファイル名補間、オムニ補間をneocom組み込みのものに置き換え
" inoremap <expr><C-x><C-f>  neocomplcache#manual_filename_complete()
" inoremap <expr> <C-j>  &filetype == 'vim' ? "\<C-x>\<C-v>\<C-p>" : neocomplcache#manual_omni_complete()
" カーソル前の文字列がスニペットのトリガであるなら、スニペットを展開する
" imap <expr><C-k>   neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : "\<C-n>"

" init neocomplcache {{{
function! Init_neocomplcache()
    NeoComplCacheEnable
    imap <expr><C-k>   neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : "\<C-n>"
    smap <C-k>     <Plug>(neocomplcache_snippets_expand)
    " 候補の共通箇所まで補完する
    inoremap <expr><C-l> neocomplcache#complete_common_string()
    " 決定
    inoremap <expr><C-y> neocomplcache#close_popup()
    inoremap <expr><CR> neocomplcache#close_popup() . "\<CR>"

    imap <C-q>  <Plug>(neocomplcache_start_unite_complete)

    " キャンセルしてポップアップを閉じる
    inoremap <expr><C-e>  neocomplcache#cancel_popup()
    " ネオコンによって挿入した補完を元に戻す
    inoremap <expr><C-g>     neocomplcache#undo_completion()
    " ポップアップが出ているときの挙動を快適にする
    " バックスペースしたときポップアップを閉じる
    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"

    " ネオコン設定変更操作
    " スニペットを編集する
    noremap <Leader>es :<C-u>vertical belowright NeoComplCacheEditSnippets<CR>
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
endfunction
" }}}
" Term neocomplcache{{{
function! Term_neocomplcache()
    NeoComplCacheDisable
    iunmap <C-k>
    sunmap <C-k>
    iunmap <C-g>
    iunmap <C-l>
    iunmap <C-q>
    iunmap <CR>
    iunmap <TAB>
    iunmap <C-h>
    iunmap <BS>
    iunmap <C-y>
    iunmap <C-e>
endfunction
" }}}

" Enable omni completion.
augroup EnableOmniCompleteion
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END
" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

command! InitNeoComplCache call Init_neocomplcache()
command! TermNeoComplCache call Term_neocomplcache()
" }}}

" yankring{{{
if has('gui_running')
    set viminfo+=!
    let g:yankring_max_history = 50
    if has('win32') || has('win64')
        let g:yankring_history_dir = '$HOME\_vimbackup'
    else
        let g:yankring_history_dir = '$HOME/.vimbackup'
    endif
    let g:yankring_clipboard_monitor = 1
    let g:yankring_max_history=10
    let g:yankring_window_height=13
    "マッピング
    noremap <Leader>yr :<C-u>YRShow<CR>
endif
" }}}

" unite.vim{{{
" 参考:
" http://d.hatena.ne.jp/ruedap/20110110/vim_unite_plugin
" http://blog.remora.cx/2010/12/vim-ref-with-unite.html
let g:unite_source_file_mru_limit = 200
" Prefix-Key
nmap <Leader>u <SID>[unite]
nnoremap <SID>[unite] <Nop>

" ESCキーを2回押すと終了する
augroup uniteKeymap
    autocmd!
    au FileType unite nmap <silent><buffer> <ESC><ESC> <Plug>(unite_exit)
    au FileType unite nmap <silent><buffer> <C-c><C-c> <Plug>(unite_exit)
    au FileType unite imap <silent><buffer> <ESC><ESC> <Plug>(unite_exit)
    au FileType unite imap <silent><buffer> <C-c><C-c> <Plug>(unite_exit)
    au FileType unite nmap <silent><buffer> a <Plug>(unite_append_end)
    au FileType unite nmap <silent><buffer> f <Plug>(unite_quick_match_default_action)
augroup END

" 入力モードで開始する
let g:unite_enable_start_insert=1
" 垂直分割で開く
" let g:unite_enable_split_vertically=1
let g:unite_winheight=10

" バッファ一覧
" nnoremap <silent> <SID>[unite]b :<C-u>UniteWithBufferDir -buffer-name=buffer buffer<CR>
" nnoremap <silent> <SID>[unite]b :<C-u>Unite -no-start-insert -buffer-name=buffer buffer<CR>
nnoremap <silent> <SID>[unite]b :<C-u>Unite -no-start-insert -buffer-name=buffer_tab buffer_tab<CR>
" ファイル一覧
nnoremap <silent> <SID>[unite]f :<C-u>UniteWithBufferDir  -buffer-name=files file<CR>
" ファイル一覧(非同期)
nnoremap <silent> <SID>[unite]fr :<C-u>UniteWithBufferDir  -buffer-name=files_rec/hsync file_rec/async<CR>
" レジスタ一覧
nnoremap <silent> <SID>[unite]r :<C-u>Unite -buffer-name=register register<CR>
" ウィンドウ一覧
nnoremap <silent> <SID>[unite]w :<C-u>Unite -buffer-name=window window<CR>
" ジャンプ一覧
nnoremap <silent> <SID>[unite]j :<C-u>Unite -buffer-name=jump jump<CR>
" コマンド一覧
nnoremap <silent> <SID>[unite]c :<C-u>Unite -buffer-name=command command<CR>
" カラースキーム一覧
nnoremap <silent> <SID>[unite]o :<C-u>Unite -no-quit -buffer-name=font font<CR>
" Vim-Advent_Calender
" nnoremap <silent> <SID>[unite]A :<C-u>Unite -no-quit -no-start-insert -input=Vim -buffer-name=advent_calender advent_calendar<CR>
" 最近使用したファイル一覧
nnoremap <silent> <SID>[unite]m :<C-u>Unite file_mru<CR>
nnoremap <silent> <SID>[unite]u :<C-u>Unite source<CR>
" 全部乗せ
nnoremap <silent> <SID>[unite]a :<C-u>UniteWithBufferDir -winheight=100 -input= -buffer-name=files buffer file_mru bookmark file tab<CR>
nnoremap <silent>  <Leader>><Tab> :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

augroup UniteKeyMap
    autocmd!
    au FileType unite imap  <buffer>  <C-w> <Plug>(unite_delete_backward_path)
    au FileType unite nmap <buffer> - <Plug>(unite_delete_backward_path)

    " ウィンドウを分割して開く
    "au FileType unite nnoremap <silent> <buffer> <expr> <C-m> unite#do_action('split')
    "au FileType unite inoremap <silent> <buffer> <expr> <C-m> unite#do_action('split')
    " ウィンドウを縦に分割して開く
    au FileType unite nnoremap <silent> <buffer> <expr> <C-Enter> unite#do_action('vsplit')
    au FileType unite inoremap <silent> <buffer> <expr> <C-Enter> unite#do_action('vsplit')

    au FileType unite nnoremap <silent> <buffer>  <C-k> :<C-u>call unite#mappings#do_action('right')<CR>
augroup END
" 様々なショートカット
" http://d.hatena.ne.jp/thinca/20101027/1288190498
call unite#set_substitute_pattern('file', '\$\w\+', '\=eval(submatch(0))', 200)
call unite#set_substitute_pattern('file', '^@@', '\=fnamemodify(expand("#"), ":p:h")."/"', 2)
call unite#set_substitute_pattern('file', '^@', '\=getcwd()."/*"', 1)
call unite#set_substitute_pattern('file', '^;r', '\=$VIMRUNTIME."/"')
call unite#set_substitute_pattern('file', '^\~', escape($HOME, '\'), -2)
call unite#set_substitute_pattern('file', '\\\@<! ', '\\ ', -20)
call unite#set_substitute_pattern('file', '\\ \@!', '/', -30)
if has('win32') || has('win64')
    call unite#set_substitute_pattern('file', '^;p', 'C:\Program Files\')
    call unite#set_substitute_pattern('file', '^;v', '~/vimfiles/')
else
    call unite#set_substitute_pattern('file', '^;v', '~/.vim/')
endif

" コマンドを登録してuniteで選択して起動 {{{ 
let s:unite_source_shortcut ={
            \ "name" : "shortcut"
            \}

function! s:unite_source_shortcut.gather_candidates(args,conext)
    let cmds = {
                \"Unite Beatiful Attack" : "Unite -auto-preview colorscheme"
                \}
    return values(map(cmds,"{
                \ 'word' : v:key,
                \ 'source' : 'shortcut',
                \ 'kind' : 'command',
                \ 'action__command' : v:val
                \}"))
endfunction
call unite#define_source(s:unite_source_shortcut)
" }}}

" }}}

" smartchr.vim{{{
" コマンドモード時のエスケープ入力補助
cnoremap <expr> /
            \ getcmdtype()=='/' ? '\/' : '/'
cnoremap <Leader>/ /
" cnoremap <expr> / search('.*/\%#', 'bcn')? '/' : smartchr#one_of('/', '\/')
" if filereadable(expand($VIMFILES_DIR . '/bundle/vim-smartchr/autoload/smartchr.vim'))
cnoremap <expr> <  smartchr#one_of('<', '\<')
cnoremap <expr> >  smartchr#one_of('>', '\>')
cnoremap <expr> \  smartchr#one_of('\', '\' , '\\')
cnoremap <expr> (  smartchr#one_of('(' , '\(')
cnoremap <expr> )  smartchr#one_of(')' , '\)')
cnoremap <expr> %  smartchr#one_of('%' , '\%')

" 参考:http://d.hatena.ne.jp/ampmmn/20080925/1222338972
" 演算子記号の前後に空白を入れるなど
" (多分)C/C++コーディング用
function! SmartCharForC()
    "四則演算
    inoremap <buffer><expr> + smartchr#loop(' + ', '++')
    inoremap <buffer><expr> - smartchr#loop(' - ', '--')
    inoremap <buffer><expr> * smartchr#loop(' * ', '**')
    inoremap <buffer><expr> / smartchr#loop(' / ', '//')

    " =の場合、単純な代入や比較演算子として入力する場合は前後にスペースをいれる。
    " 複合演算代入としての入力の場合は、直前のスペースを削除して=を入力
    inoremap <buffer><expr> = search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\<bar>*\<bar>\) \%#', 'bcn')? '<bs>= '
                \ : smartchr#loop(' = ', ' == ', '=')
    inoremap <buffer><expr> < search('^#include\%#', 'bcn')? ' <><Left>': smartchr#loop('<', ' < ', ' << ' , '')
    inoremap <buffer><expr> > search('^#include <.*\%#', 'bcn')? '>': smartchr#loop('>', ' > ', ' >> ')

    inoremap <buffer><expr> " search('^#include\%#', 'bcn')? ' ""<Left>': smartchr#loop('"', ' " ')
    inoremap <buffer><expr> " search('^#include ".*\%#', 'bcn')? '"': smartchr#loop('"', ' " ',)

    inoremap <buffer><expr> , smartchr#loop(', ', ',')
    "inoremap <buffer><expr> / smartchr#loop('/', ' / ', '//')
    " *はポインタで使うので、空白はいれない
    inoremap <buffer><expr> & smartchr#loop('&', ' & ', ' && ')
    inoremap <buffer><expr> % smartchr#loop('%', ' % ')
    inoremap <buffer><expr> <Bar> smartchr#loop(' <Bar> ', ' <Bar><Bar> ', '<Bar>')
    " 3項演算子の場合は、後ろのみ空白を入れる
    inoremap <buffer><expr> ? smartchr#loop('?', '? ')
    inoremap <buffer><expr> : smartchr#loop(':', '::', ': ')

    " 下記の文字は連続して現れることがまれなので、二回続けて入力したら改行する
    "inoremap <buffer><expr> } smartchr#one_of('}', '}<CR>')
    "inoremap <buffer><expr> ; smartchr#one_of(';', ';<CR>')
    " 「->」は入力しづらいので、..で置換え
    inoremap <buffer><expr> . smartchr#loop('.', '->', '...')
    " 行先頭での@入力で、プリプロセス命令文を入力
    inoremap <buffer><expr> @ search('^\(#.\+\)\?\%#','bcn')? smartchr#one_of('#define', '#include', '#ifdef', '#endif', '@'): '@'
    inoremap <buffer><expr> # search('^\(#.\+\)\?\%#','bcn')? smartchr#one_of('#define', '#include', '#ifdef', '#endif', '#'): '#'

    inoremap <buffer><expr> " search('^#include\%#', 'bcn')? ' ""<Left>"': '""<Left>'
    " if文直後の(は自動で間に空白を入れる
    inoremap <buffer><expr> ( search('\<\if\%#', 'bcn')? ' ()<Left>': '()<Left>'
endfunction

" Objective-C用(未完)
function! SmartCharForObjc()
    inoremap <buffer><expr> @ search('^\(#.\+\)\?\%#','bcn')? smartchr#one_of( '@interface','@implementation', '@synthesize', '@property', '@class' , '@'): '@'
    inoremap <buffer><expr> # search('^\(#.\+\)\?\%#','bcn')? smartchr#one_of('#define', '#include', '#ifdef', '#endif', '#import' , '#'): '#'
    inoremap <buffer><expr> - search('^\(#.\+\)\?\%#','bcn')? smartchr#one_of('- ()<Left>' ,  '-') :smartchr#loop(' - ', '--')
    inoremap <buffer><expr> + search('^\(#.\+\)\?\%#','bcn')? smartchr#one_of('+ ()<Left>' ,  '+') :smartchr#loop(' + ', '++')
endfunction

" 記号入力メンドクセ イマイチ{{{
function! MySmarcchr()
    inoremap <buffer><expr> 1 smartchr#one_of('1', '!' ,'11')
    inoremap <buffer><expr> 2 smartchr#one_of('2', '"','22')
    inoremap <buffer><expr> 3 smartchr#one_of('3', '#','33')
    inoremap <buffer><expr> 4 smartchr#one_of('4', '$','44')
    inoremap <buffer><expr> 5 smartchr#one_of('5', '%','55')
    inoremap <buffer><expr> 6 smartchr#one_of('6', '&','66')
    inoremap <buffer><expr> 7 smartchr#one_of('7', '\'','77')
    inoremap <buffer><expr> 8 smartchr#one_of('8', '(','88')
    inoremap <buffer><expr> 9 smartchr#one_of('9', ')','99')
endfunction

autocmd MyAutoCmd FileType c,cpp call SmartCharForC()
" endif
" }}}
" }}}

" NERD Commenter{{{
" http://d.hatena.ne.jp/nishikawasasaki/20101226/1293374432
let g:NERDCreateDefaultMappings = 0
let NERDSpaceDelims = 1
nmap <Leader><Leader> <Plug>NERDCommenterToggle
vmap <Leader><Leader> <Plug>NERDCommenterToggle
" }}}

" QuickRun.vim{{{
try 
    if !exists("g:quickrun_config")
        let g:quickrun_config={}
    endif
    " nnoremap <silent><unique> <F5> <Plug>(quickrun)
    nnoremap <silent> <F5> :QuickRun<CR>
    nnoremap          <F6> :QuickRun -outputter error:buffer:quickfix -args ''<Left>
    nnoremap <silent> <F7> :QuickRun -outputter quickfix<CR>
    " 静的C++のシンタックスチェック {{{
    " 参考:http://d.hatena.ne.jp/osyo-manga/20110921/1316605254
    " quickfixのエラー箇所を破線でハイライト
    execute "highlight qf_error_ucurl gui=undercurl guisp=Red"
    let g:hier_highlight_group_qf = "qf_error_ucurl"
    " quickfixに出力して、ポップアップはしない outputter/quickfix
    " すでにquickfixウィンドウが開いている場合は閉じるので注意
    let s:silent_quickfix = quickrun#outputter#quickfix#new()

    function! s:silent_quickfix.finish(session)
        call call(quickrun#outputter#quickfix#new().finish, [a:session], self)
        :cclose
        " vim-hierの更新
        :HierUpdate
        " quickfixへの出力後にquickfixsatusを有効に
        :QuickfixStatusEnable
    endfunction
    " quickrunに登録
    call quickrun#register_outputter("silent_quickfix", s:silent_quickfix)
    " シンタックスチェック用のquickrun.vimのコンフィグ
    " ファイルの保存後に uickrun.vimが実行するように設定する
    autocmd MyAutoCmd BufWritePost *.cpp,*.h,*.hpp :QuickRun CppSyntaxCheck_gcc
    " }}}
    " Programごとの設定{{{
    " Markdown{{{
    " let g:quickrun_config['markdown']={
    " \'type': 'markdown/pandoc',
    " \'cmdopt' : '-s',
    " \'command': 'bluecloth',
    " \'exec': '%c -f %s', 
    " \'outputter' : 'browser'
    " \}
    let g:quickrun_config['markdown']={
                \'outputter' : 'browser'
                \}
    if has('syntax')
        augroup HankakuSpace
            autocmd!
            autocmd ColorScheme * highlight HankakuSpace term=underline ctermfg=Red gui=underline guifg=Red guibg=fg
            autocmd VimEnter,WinEnter,BufEnter *.mkd match HankakuSpace /  $/
        augroup END
    endif
    "}}}
    " gcc版{{{
    let g:quickrun_config['CppSyntaxCheck_gcc'] = {
                \ "type" : "cpp",
                \ "exec" : "%c %o $s:p",
                \ "command" : "g++",
                \ "cmdopt" : "-fsytax-only -std=gnu++0x",
                \ "outputter" : "silent_quickfix",
                \ "runner" : "vimproc"
                \}
    " }}}
    " msvc版{{{
    " .h ファイルの場合はうまく動かない
    let g:quickrun_config["Cppsyntaxcheck_msvc"] = {
                \ "type" : "cpp",
                \ "exec" : "%c %o $s:p",
                \ "command" : "cl.exe",
                \ "cmdopt" : "/Zs",
                \ "outputter" : "silent_quickfix",
                \ "runner" : "vimproc",
                \ "output_encode" : "sjis"
                \ }
    " }}}
    " TeX{{{
    " let g:quickrun_config['tex']={
    " \ "type" : "tex",
    " \ "exec" : ['%c %o %s', 'dvipdfmx -o %s:r.pdf %s:r.dvi', 'open %s:r.pdf'],
    " \ "command" : "platex-utf8",
    " \ "cmdopt" : "-output-directory %s:h",
    " \}

    let g:quickrun_config['tex']={
                \ 'command' : 'platex-utf8',
                \ 'exec' : ['%c -output-directory %s:h %s' , 'dvipdfmx -o %s:r.pdf %s:r.dvi' , 'open %s:r.pdf']
                \}
    " }}}
    " HTML{{{
    let g:quickrun_config['html'] = {
                \ "type" : "html",
                \ "exec" : "open %s",
                \ "outputter" : "browser",
                \}

    " }}}

catch /E117/
endtry
" }}}
" unite.vimでquickrun_configの列挙 {{{
" http://d.hatena.ne.jp/osyo-manga/20111012/1318377040 
" filetypeごとにquickrunのconfig名を設定する
let g:quickrun_compile_command={}
" unite.vimの設定
let s:action={
            \ 'description' : 'quickrun compile command', 
            \ 'is_selectable' : 1 , 
            \}

function! s:action.func(candidates)
    for val in a:candidates
        let g:quickrun_compile_command[&filetype] = val.word
    endfor
endfunction
call unite#custom_action('common',  'quickrun_compile_command',  s:action)
unlet s:action
let s:unite_source_quickrun = {
            \ "name" : "quickrun-select", 
            \ "default_action" : "quickrun_compile_command"
            \}

function! s:unite_source_quickrun.gather_candidates(args, context)
    let cmds = filter(deepcopy(g:quickrun_config), "exists('v:val.type') ? v:val.type == &filetype : 0")
    return sort(values(map(cmds,"{
                \ 'word' : v:key, 
                \ 'source' : 'quickrun-select', 
                \ 'kind' : 'common' , 
                \ }")))
endfunction
call unite#define_source(s:unite_source_quickrun)
" unite.vimを呼び出すキーマップ
nno <silent> <Leader>qr :Unite quickrun-select<CR>

" 実行(コンパイル)を行うキーマップ
nno <silent> <C-F7> :execute "QuickRun ".g:quickrun_compile_command[&filetype"]<CR>
" }}}
" }}}

" vimshell.vim{{{
nmap <Leader>vs <SID>[vimshell]
nnoremap <SID>[vimshell] :VimShell<CR>
" nnoremap <SID>[vimshell]c :VimShellCreate<CR>
" let g:vimshell_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
let g:vimshell_split_height = 10
let g:vimshell_disable_escape_highlight = 1
" }}}

" taglist.vim{{{
set tags=./tags
" set tags+=../../**/tags
augroup TList
    autocmd!
    au BufEnter * nnoremap <F12> :Tlist<CR>z<CR>
augroup END
autocmd MyAutoCmd BufEnter *.memo nnoremap <buffer> <F12> :<C-u>ToC<CR>
" }}}

" open-browser{{{
" disable netrw's gx mapping.
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
" }}}

" Tabularize{{{
vnoremap <Leader>t :Tabularize /
" }}}

" vimfiler{{{
let g:vimfiler_as_default_explorer=1
nnoremap <Leader>vf :<C-u>silent! NeoBundleSource vimfiler<CR>:<C-u>VimFiler -split  -winwidth=35 -no-quit<CR>
" }}}

" indent-Guides{{{
if exists(":IndentGuidesEnable")
    let g:indent_guides_enable_on_vim_startup=0
    let g:indent_guides_color_change_percent=30
    let g:indent_guides_guide_size=1
    let g:fileIndentGuide=[
                \ "c", 
                \"cpp", 
                \"java", 
                \"perl", 
                \"ruby", 
                \"vim"
                \]
    for ft in g:fileIndentGuide
        execute "augroup " . "MyIndentGuideEnable_" . ft
        execute "autocmd!"
        execute "autocmd FileType " . ft . " :IndentGuidesEnable"
        execute "autocmd BufLeave *." . ft . " :IndentGuidesDisable"
        execute "augroup END"
    endfor
    " augroup IndentGuide
    " autocmd!
    " au BufRead,BufEnter *.c,*,cpp,*.java IndentGuidesEnable
    " au BufLeave *.c,*,cpp,*.java IndentGuidesDisable
    " au FileType help IndentGuidesDisable
    " augroup END
endif
" }}}

" ttoc{{{
" メモツールとして使うhttp://nanasi.jp/articles/vim/ttoc_vim.html#id15
" configuration for filetype memo
augroup Memo
    autocmd!
    autocmd BufEnter *.memo :set filetype=markdown
augroup END
:let g:ttoc_rx_memo = '^\k\+\>'
" }}}

" calender.vim{{{
let g:calendar_diary = $DROPBOX_DIR. "/documents/diary"
" }}}

" vim-latex{{{
filetype plugin on
set shellslash
set grepprg=grep\ -nH\ $*
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_ViewRule_pdf = 'open -a Preview.app'
let g:Tex_CompileRule_dvi = 'platex-utf8 $*.tex'
let g:Tex_BibtexFlavor = 'jbibtex'
let g:Tex_FormatDependency_pfd = 'dvi,pdf'
let g:Tex_CompileRule_pdf = 'dvipdfmx $*.dvi'
" }}}

" tweetvim{{{
nnoremap <silent> <SID>[unite]t :Unite tweetvim<CR>
nnoremap <silent> ,ts :TweetVimSay<CR>
if !exists('g:neocomplcache_dictionary_filetype_lists')
    let g:neocomplcache_dictionary_filetype_lists={}
endif
let neco_dic = g:neocomplcache_dictionary_filetype_lists
let neco_dic.tweetvim_say = $HOME . '/.tweetvim/screen_name'
let g:tweetvim_include_rts = 1 "タイムラインにリツイートを含める
" }}}

" memolist.vim{{{
let g:memolist_path="~/Dropbox/documents/memo"
let g:memolist_memo_suffix = "txt"
let g:memolist_memo_date = "%Y-%m-%d %H:%M"
let g:memolist_memo_date = "epoch"
let g:memolist_memo_date = "%D %T"
" let g:memolist_prompt_tags = "true"
" let g:memolist_prompt_categories = "true"
" }}}

" vim-ipi {{{
filetype plugin indent off
let s:ipi_loaded = 0
try
    call ipi#inspect("Bundle")
    let s:ipi_loaded = 1
catch /E117/
endtry
filetype plugin indent on

function! LazyLoading(ft)
    filetype plugin indent off
    for plugin_name in g:ll_plugins[a:ft]
        execute "silent! NeoBundleSource " . plugin_name
    endfor
    filetype plugin indent on
    execute "autocmd! MyIPI_" . a:ft
    execute "set filetype=" . a:ft
    silent! ReadTypes
endfunction

let g:ll_plugins={}
let g:ll_plugins['c'] = [
            \ 'taglist.vim',
            \ 'Source-Explorer-srcexpl.vim',
            \ 'CCTree' ,
            \ 'trinity.vim' , 
            \ 'a.vim' ,
            \ 'cscope-menu',
            \ 'gtags.vim',
            \ 'c.vim' 
            \ ]

let g:ll_plugins['cpp'] = [
            \ 'taglist.vim',
            \ 'Source-Explorer-srcexpl.vim',
            \ 'trinity.vim' , 
            \ 'cscope-menu',
            \ 'gtags.vim',
            \ 'a.vim' ,
            \ 'c.vim' 
            \ ]

let g:ll_plugins['java'] = [
            \ 'taglist.vim',
            \ 'Source-Explorer-srcexpl.vim',
            \ 'trinity.vim' 
            \ ]

let g:ll_plugins['html'] = [
            \ 'zencoding.vim'
            \ ]

let g:ll_plugins['css'] = [
            \ 'zencoding.vim'
            \ ]
let g:ll_plugins['tex'] = [
            \ 'vim-latex'
            \ ]

if has('vim_starting') && s:ipi_loaded
    " lazy loading of each filetype
    if exists("g:ll_plugins")
        for k in keys(g:ll_plugins)
            execute "augroup " . "MyIPI_" . k
            execute "autocmd!"
            execute "autocmd FileType " . k . " call LazyLoading('" . k . "')"
            execute "augroup END"
        endfor
    endif

    " lazy loading for vim-ref
    nmap <silent> K :<C-u>silent! NeoBundleSource vim-ref<CR><Plug>(ref-keyword)
    vmap <silent> K :<C-u>silent! NeoBundleSource vim-ref<CR><Plug>(ref-keyword)
    command! -nargs=+ Ref
                \ execute 'silent! NeoBundleSource vim-ref'
                \ | call ref#ref(<q-args>)

    " lazy loading for neocomplcache
    augroup MyInitNeocomplcache
        autocmd!
        autocmd InsertEnter * call Init_neocomplcache() | autocmd! MyInitNeocomplcache
    augroup END

    " lazy loading for vim-quickrun
    function! LoadQuickRun()
        silent! NeoBundleSource vim-quickrun
    endfunction
    map <silent> <Leader>r :<C-u>call LoadQuickRun()<CR>:<Plug>(quickrun)<CR>
    command! -nargs=* -range=0 QuickRun
                \ call LoadQuickRun()
                \ | call quickrun#command(<q-args>, <count>, <line1>, <line2>)
endif

" }}}

" sequence {{{
let g:loaded_sequence=1
" }}}

" powerline {{{
let g:Powerline_symbols='fancy'
" }}}

" CCTree.vim:"{{{
"
if 1 && filereadable($DOTVIM . '/Bundle/CCTree/ftplugin/cctree.vim')
    source $DOTVIM/Bundle/CCTree/ftplugin/cctree.vim
endif
"}}}

" cscope_maps{{{
" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim... 
if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose

    " cscope key mappings
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif
"}}}

" Source-Explorer-srcexpl.vim:"{{{
"
" // The switch of the Source Explorer                                         "
" nmap <F8> :SrcExplToggle<CR>
"                                                                              "
" // Set the height of Source Explorer window                                  "
let g:SrcExpl_winHeight = 8
"                                                                              "
" // Set 100 ms for refreshing the Source Explorer                             "
let g:SrcExpl_refreshTime = 100
"                                                                              "
" // Set "Enter" key to jump into the exact definition context                 "
let g:SrcExpl_jumpKey = "<ENTER>"
"                                                                              "
" // Set "Space" key for back from the definition context                      "
let g:SrcExpl_gobackKey = "<SPACE>"
"                                                                              "
" // In order to Avoid conflicts, the Source Explorer should know what plugins "
" // are using buffers. And you need add their bufname into the list below     "
" // according to the command ":buffers!"                                      "
let g:SrcExpl_pluginList = [
            \ "__Tag_List__",
            \ "_NERD_tree_",
            \ "Source_Explorer"
            \ ]
"                                                                              "
" // Enable/Disable the local definition searching, and note that this is not  "
" // guaranteed to work, the Source Explorer doesn't check the syntax for now. "
" // It only searches for a match with the keyword according to command 'gd'   "
let g:SrcExpl_searchLocalDef = 1
"                                                                              "
" // Do not let the Source Explorer update the tags file when opening          "
let g:SrcExpl_isUpdateTags = 0
"                                                                              "
" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to "
" //  create/update a tags file                                                "
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
"                                                                              "
" // Set "<F12>" key for updating the tags file artificially                   "
" let g:SrcExpl_updateTagsKey = "<F12>"
"}}}

" gtags.vim:"{{{
nmap <Leader>gs :<C-u>Gtags -s <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>gg :<C-u>Gtags -g <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>gf :<C-u>Gtags -f <C-R>=expand("<cfile>")<CR><CR>
nmap <Leader>gr :<C-u>Gtags -r <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>gd :<C-u>Gtags -d <C-R>=expand("<cword>")<CR><CR>
"}}}

" ref.vim {{{
" webdict
let g:ref_source_webdict_sites ={
            \ 'wikipedia:ja' : 'http://ja.wikipedia.org/wiki/%s',
            \}
" let g:ref_source_webdict_sites = {
" \ 'wiktionary' : {
" \ 'url' : 'http://ja.wiktionary.org/wiki/%s',
" \ 'keyword_encoding' : 'utf-8',
" \ 'cache' : 1,
" \}
" \}

" 出力に対するフィルタ、最初の数行を削除
" function! g:ref_source_webdict_sites.wiktionary.filter(output)
" return join(split(a:output,"\n")[18 :], "\n")
" endfunction


" }}}

" vimwiki {{{
autocmd MyAutoCmd FileType vimwiki nnoremap <buffer> <leader>tt <Plug>VimwikiToggleListItem
" }}}

" exVim {{{
let $EX_DEV = '~/exdev'
" }}}

" fontzoom.vim {{{
function! MyPresenSetting()
    map <buffer> + <Plug>(fontzoom-larger)
    map <buffer> - <Plug>(fontzoom-smaller)
    set wrap
    set showbreak=
endfunction

function! MyShowTime()
    ShowtimeStart
    call MyPresenSetting()
    IndentGuidesDisable
endfunction

" }}}

" unite-neco {{{
" https://github.com/ujihisaより
let s:unite_source = {'name': 'neco'}

function! s:unite_source.gather_candidates(args, context)
  let necos = [
        \ "~(-'_'-) goes right",
        \ "~(-'_'-) goes right and left",
        \ "~(-'_'-) goes right quickly",
        \ "~(-'_'-) goes right then smile",
        \ "~(-'_'-)  -8(*'_'*) go right and left",
        \ "(=' .' ) ~w",
        \ ]
  return map(necos, '{
        \ "word": v:val,
        \ "source": "neco",
        \ "kind": "command",
        \ "action__command": "Neco " . v:key,
        \ }')
endfunction

"function! unite#sources#locate#define()
"  return executable('locate') ? s:unite_source : []
"endfunction
call unite#define_source(s:unite_source)
unlet s:unite_source


" }}}
"" ================================================================================ 
" vim: set tabstop=4 shiftwidth=4  fdm=marker fdl=0 :
