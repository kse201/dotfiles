;; -*- coding: utf-8 -*-
(("Emacsタグが付けられた新着投稿 - Qiita" nil nil (20693 53112 528432) feed 0 nil nil ((id nil "tag:qiita.com,2005:/tags/Emacs/feed") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://qiita.com/tags/Emacs/feed.atom"))) (title nil "Emacsタグが付けられた新着投稿 - Qiita") (description nil "QiitaでEmacsタグが付けられた新着投稿") (updated nil "2012-12-22T13:21:17+09:00") (link nil "http://qiita.com/tags/Emacs") (entry nil (id nil "tag:qiita.com,2005:Item/12179") (published nil "2012-12-22T13:21:17+09:00") (updated nil "2012-12-22T13:22:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e7e5d797ae101f13517c"))) (url nil "http://qiita.com/items/e7e5d797ae101f13517c") (title nil "emacs で動く Elserv という HTTP サーバを見つけました") (content ((type . "html")) "<p>emacs で動く Elserv という HTTP サーバを見つけました。Wanderlust で有名な Yuuichi Teranishi さん作です。elisp を学ぶうえでの参考になるかもしれません。ソースコードは<a href=\"http://elserv.sourceforge.net/index.ja.html\">公式ページ</a> からダウンロードできないようです。Ubuntu ならパッケージ化されているため、apt でインストールできます。ちなみに sudo apt-get source elserv でソースを取得できます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ sudo apt-get install elserv 
...
以下の特別パッケージがインストールされます:
  flim
提案パッケージ:
  emacs-wiki mhc xemacs21-bin semi wl wl-beta
以下のパッケージが新たにインストールされます:
  elserv flim
...
続行しますか [Y/n]? 
</pre></div></div>
<p>emacs23 でも、以下の設定で動作を確認できました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;elserv</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">elserv-start</span> <span class=\"mi\">8088</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;es-monitor</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;es-wiki</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">elserv-package-publish</span> <span class=\"p\">(</span><span class=\"nf\">elserv-find-process</span><span class=\"p\">)</span> <span class=\"s\">&quot;/wiki&quot;</span> <span class=\"s\">&quot;wiki&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;es-demo</span><span class=\"p\">)</span>
</pre></div></div>
<p>試しに、以下を評価して、http://localhost:8088/ へアクセスすると、foo と表示されました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">elserv-publish</span> <span class=\"p\">(</span><span class=\"nf\">elserv-find-process</span> <span class=\"mi\">8088</span><span class=\"p\">)</span> <span class=\"s\">&quot;/&quot;</span>
                <span class=\"nv\">:string</span> <span class=\"s\">&quot;foo&quot;</span>
                <span class=\"nv\">:content-type</span> <span class=\"s\">&quot;text/plain&quot;</span><span class=\"p\">)</span>
</pre></div></div>
<p>README.ja を引用します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Elserv -- Yet Another HTTP Server on Emacsen

Elserv は Emacs 上で常駐して動く HTTP サーバです。

Emacs 自身にはサーバの機能がありませんので、専用のサーバプロセス
(ruby スクリプト)をバックエンドで立ち上げ、そのプロセスと通信することに
よってサーバ機能を実現しています。

特徴：

* 手軽に Web サーバを立ち上げられる (Emacs のコマンドを実行するだけ)。
* Emacs lisp で動的コンテンツを作成できる。
* コンテンツの置き換えは eval するだけで OK。
* HTTP 1.1 GET, HEAD, POST に対応。

必要なもの：

* Emacs (Emacs 20 or XEmacs)
* APEL, FLIM
* ruby (1.6.3 or later)

インストール：

* アーカイブを適当なところで展開します。
* `make install&#39; を実行します。
(XEmacs パッケージとしてインストールする場合は `make install-package&#39;
 を実行します。)

使い方：

(require &#39;elserv) したあと関数 elserv-start を実行すると
サーバが立ち上がります。
デフォルトのままだとポート番号は 8000 番となります。

そのままではほとんどコンテンツがありませんので、
関数 elserv-publish を使ってコンテンツを登録してください。

es- で始まるファイルに定義されたアプリケーションは、
関数 elserv-package-publish で登録できます。
例えば、es-wiki.el に定義された wiki サーバを /wiki に登録するには
以下を実行します。

(elserv-package-publish (elserv-find-process) &quot;/wiki&quot; &quot;wiki&quot;)

関数 elserv-stop を実行するか、バッファ &quot;*elserv*..&quot; を消すと
サーバプロセスが終了します。

&quot;*Log of elserv*...&quot; というバッファにアクセスログが残ります。

アプリケーション：

es-demo.el:    デモ用のサンプルサーバです。
es-wiki.el:    emacs-wiki を使った Wiki サーバです。
es-mhc.el:     MHC を使ったスケジュールサーバです。
es-monitor.el: publish されているコンテンツの一覧を表示します。
               デフォルトで /monitor に publish されています。

remote.el:     web ブラウザ経由で Emacs を操作するためのサーバです。
web-custom.el: web ブラウザ経由で Emacs をカスタマイズするためのサーバです。
</pre></div></div>
<p>同様のツールに、<a href=\"https://github.com/nicferrier/elnode\">elnode</a> というのもあるようです。</p>
") (published nil "2012-12-22T13:21:17Z") (updated nil "2012-12-22T13:22:49Z") (author nil (name nil "mori_dev"))) (entry nil (id nil "tag:qiita.com,2005:Item/12159") (published nil "2012-12-21T21:36:23+09:00") (updated nil "2012-12-21T21:41:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/13585a5711d62e9800ef"))) (url nil "http://qiita.com/items/13585a5711d62e9800ef") (title nil "Emacs のバッファ名にヒントを追加する") (content ((type . "html")) "<h1>Emacs のバッファ名</h1>

<p>Emacs のバッファ名は基本的にファイル名になります．しかし，バッファ名がファイル名のみだとわかりにくい場合もあります．そこでヒントとなるような文字列を追加してわかりやすくしてみます．</p>

<h2>Dired バッファに [Dired] を追加する</h2>

<p>Emacs 内蔵のファイラーである dired ですが，通常のバッファ名は単純なディレクトリ名になります．このままではわかりにくいので，バッファ名にヒントを追加します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">dired-my-append-buffer-name-hint</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-my-append-buffer-name-hint</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;Append a auxiliary string to a name of dired buffer.&quot;</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"nv\">major-mode</span> <span class=\"ss\">&#39;dired-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">dir</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"nv\">list-buffers-directory</span><span class=\"p\">))</span>
           <span class=\"p\">(</span><span class=\"nv\">drive</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"ss\">&#39;system-type</span> <span class=\"ss\">&#39;windows-nt</span><span class=\"p\">)</span> <span class=\"c1\">;; Windows の場合はドライブレターを追加</span>
                           <span class=\"p\">(</span><span class=\"nv\">string-match</span> <span class=\"s\">&quot;^\\\\([a-zA-Z]:\\\\)/&quot;</span> <span class=\"nv\">dir</span><span class=\"p\">))</span>
                      <span class=\"p\">(</span><span class=\"nv\">match-string</span> <span class=\"mi\">1</span> <span class=\"nv\">dir</span><span class=\"p\">)</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)))</span>
      <span class=\"p\">(</span><span class=\"nv\">rename-buffer</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span><span class=\"p\">)</span> <span class=\"s\">&quot; [&quot;</span> <span class=\"nv\">drive</span> <span class=\"s\">&quot;Dired]&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;dired-mode-hook</span> <span class=\"ss\">&#39;dired-my-append-buffer-name-hint</span><span class=\"p\">)</span>
</pre></div></div>
<p>このコードを init.el に追加すればバッファ名の末尾に &quot; [Dired]&quot; を追加します．Windows の場合（Cygwin 除く）はドライブレターも追加します．</p>

<h2>Tramp バッファにユーザ名とホスト名を追加する</h2>

<p>Emacs でリモートファイルを編集できる tramp なんですが，これまた基本的なファイル名しか表示されません．ローカルファイルを編集してるつもりが実はリモートファイルでした，なんてことが起きないようにバッファ名にユーザ名とホスト名を追加します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">tramp-my-append-buffer-name-hint</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">tramp-my-append-buffer-name-hint</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;Append a hint (user, hostname) to a buffer name if visiting</span>
<span class=\"s\">file is a remote file (include directory).&quot;</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"nv\">list-buffers-directory</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nv\">tramp-tramp-file-p</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">tramp-vec</span> <span class=\"p\">(</span><span class=\"nv\">tramp-dissect-file-name</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
             <span class=\"p\">(</span><span class=\"nc\">method</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-method</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">))</span>
             <span class=\"p\">(</span><span class=\"nv\">host</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-real-host</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">))</span>
             <span class=\"p\">(</span><span class=\"nv\">user</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-real-user</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">)</span>
                       <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">assoc</span> <span class=\"nc\">method</span> <span class=\"nv\">tramp-default-user-alist</span><span class=\"p\">))</span>
                       <span class=\"nv\">tramp-default-user</span>
                       <span class=\"nv\">user-real-login-name</span><span class=\"p\">)))</span>
        <span class=\"p\">(</span><span class=\"nv\">rename-buffer</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span><span class=\"p\">)</span> <span class=\"s\">&quot; &lt;&quot;</span> <span class=\"nv\">user</span> <span class=\"s\">&quot;@&quot;</span> <span class=\"nv\">host</span> <span class=\"s\">&quot;&gt;&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;find-file-hook</span> <span class=\"ss\">&#39;tramp-my-append-buffer-name-hint</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;dired-mode-hook</span> <span class=\"ss\">&#39;tramp-my-append-buffer-name-hint</span><span class=\"p\">)</span>
</pre></div></div>
<p>これで tramp で開いたファイル（ディレクトリ含む）のバッファ名の末尾に &quot; &lt;user@hostname&gt;&quot; が追加されます．</p>

<h2>まとめ</h2>

<p>バッファ名にヒントを追加してわかりやすくしてみようと試みました．anything (or helm) でバッファ切り替えをしていれば，ヒントをもとにバッファを絞り込めるので非常に便利です．</p>

<ul>
<li>(buffer-file-name) でバッファに結びついているファイル名を取得</li>
<li>list-buffers-directory で Dired バッファに結びついているディレクトリ名を取得</li>
<li>(buffer-name) で現在のバッファ名を取得</li>
<li>(rename-buffer &quot;string&quot;) でバッファ名の変更</li>
</ul>

<p>ができるので，自分の好きなヒントを作ってみて find-file-hook や dired-mode-hook に引っ掛ければいいかと思います．VCS 下のファイルにブランチとリビジョンを追加するとか，プロジェクト下のファイルにプロジェクト名を追加など役に立ちそうな気がしています．</p>
") (published nil "2012-12-21T21:36:23Z") (updated nil "2012-12-21T21:41:23Z") (author nil (name nil "kbkbkbkb1"))) (entry nil (id nil "tag:qiita.com,2005:Item/12111") (published nil "2012-12-20T21:38:18+09:00") (updated nil "2012-12-20T21:38:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2bdcd9cd5b701b1112e6"))) (url nil "http://qiita.com/items/2bdcd9cd5b701b1112e6") (title nil "Emacsを使いこなすために") (content ((type . "html")) "<p>Emacsを使いこなすための tipsを示します。<br>
人それぞれのものがあると思いますので 1つの意見として<br>
受け取っていただければいいかなと思います。</p>

<h2>1つの Emacsは終了しないようにしよう</h2>

<p>使いこなすためにはやはり長く触っていなくてはいけないと思います. そのためにもなるべく<br>
終了しないようにしましょう. 特にカスタマイズをしだして, いろいろ拡張をインストール<br>
しだすとどうしても起動が遅くなります. それを何回を起動するとなると毎回毎回いらいら<br>
しますし, それを避けるために貴重な機能を削除するなんて発想になってしまうことは<br>
大変もったいないことです.</p>

<p>終了しないためのノウハウを示します.</p>

<h3>終了コマンドを無効化しよう</h3>

<p>何で Emacsを閉じてしまうかというと, 終了コマンドが押しやすいバインドだからです.<br>
<code>C-x C-c</code>は保存のコマンドなんかに近いですし, うっかり押してしまう度合いが高すぎ<br>
ます. なんでそんなキーバインドには違うコマンドを割り振ってしまいましょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>;; 好きなコマンドを割り振ろう
(global-set-key (kbd &quot;C-x C-c&quot;) &#39;helm-M-x) ;; 私は helm-M-xにしています

;; C-x C-z(suspend)も変更するのもありでしょう.
(global-set-key (kbd &quot;C-x C-z&quot;) &#39;your-favorite-command)
</pre></div></div>
<p>でもさすがに終了できないというのも困ります. <code>M-x save-buffers-kill-emacs</code>とすれば<br>
いいんですが, コマンドが長ったらしいので aliasをつけておきましょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>;; I never use C-x C-c
(defalias &#39;exit &#39;save-buffers-kill-emacs)
</pre></div></div>
<p>これで <code>M-x exit</code>で終了できます. <code>C-x C-x</code>と比べるとだいぶ面倒になったので,<br>
終了する回数が減ることでしょう.</p>

<h3>emacsclientの活用</h3>

<p>1つ Mainとなる Emacsを使おうと言っても, すべてMain Emacsからファイルを開いたり<br>
するのは面倒です. emacsclientを使えば、シェルで操作しているときこのファイルを<br>
mainの Emacsで開くということが簡単にできます。また Main Emacsの設定を引き継ぐ<br>
別 Emacsも起動することができます。</p>

<h4>サーバ側の設定</h4>

<p>serverの設定</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(require &#39;server)

(unless (server-running-p) ;; 複数サーバ起動を防ぐ
  (server-start))
</pre></div></div>
<h4>環境変数 EDITORを emacsclientにする</h4>

<p>(Windowsでは違うと思いますが), いろいろな場面でエディタが起動し,<br>
編集を迫られることがあります. Unix系の環境では, だいたいの場合,<br>
環境変数 EDITORに設定されたものが最終的に使われます(GIT用とか<br>
Subversion用とか特化したものを指定していなければ).</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nb\">export </span><span class=\"nv\">EDITOR</span><span class=\"o\">=</span><span class=\"s2\">&quot;emacsclient&quot;</span>
</pre></div></div>
<p>これで gitのコミットログを書く等で使われるエディタが emacsclientに<br>
なります. ようはそれらがサーバを起動する Mainの Emacsで編集できるように<br>
なるということです.</p>

<h4>emacsclientに aliasをつけよう</h4>

<p>emacsclientなんて打つのが面倒なので, もう &#39;e&#39;にしちゃいましょう</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nb\">alias </span><span class=\"nv\">e</span><span class=\"o\">=</span><span class=\"s1\">&#39;emacsclient&#39;</span>
</pre></div></div>
<p>これでとりあえず Emacsで開きたいときは</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre> % e ファイル名    <span class=\"c\"># 編集終了を待つ場合</span>
 % e -n ファイル名 <span class=\"c\"># 編集終了を待たない</span>
</pre></div></div>
<p>でいけるようになります.</p>

<p>Mainの Emacsで開くだけでなく, 新規にウインドウ(GUI, 非GUI両方)を開いて使うことも<br>
できます. このとき設定等の情報は Mainの Emacsのものを利用するので起動にはほとんど<br>
時間がかかりません. 個人的にあまり使いませんが, 覚えておいて損はないでしょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre> % emacsclient -nw ファイル名 <span class=\"c\"># 現在の端末でファイルを開く</span>
 % emacsclient -c  ファイル名 <span class=\"c\"># 新たにフレームを作ってファイルを開く</span>
</pre></div></div>
<h2>&#39;C-M-&#39;のキーに慣れよう</h2>

<p>&#39;C-M-&#39;というキーバインドは主に S式の移動・操作に割当たっています. Lisp系の言語を<br>
書いている人であれば, よく利用することでしょう. しかしこれらは Lisp専用のキーバインドでは<br>
ありません. C-M-a, C-M-eは大抵の言語で関数単位の移動に使えますし, C-M-f, C-M-bを<br>
使えばアンダースコアで連結された変数でも一度で移動することができます.<br>
C-M-kはアンダースコアつなぎの変数も消せますし, Lisp系以外の言語でも役立つこと<br>
間違いなしです.</p>

<p>あと <code>C-M-</code>バインドは GUI Emacsでなくても使えるキーバインドです. GUI版であれば,<br>
ファンクションキーや Controlキーと特殊なキーの組み合わせが使えますが,<br>
非 GUI環境ではそれらは基本的に使えません. ただでさえキーバインドが少ない<br>
Emacsなので, バインド候補を増やすためにも使い慣れておくとよいでしょう.</p>

<h2>良いプログラマになることを心がける</h2>

<p>個人的に心がけていることです. 三流へぼプログラマである私が言ってもあまり説得力は<br>
ありませんが・・・.</p>

<p>良いプログラマというものは良い道具にこだわり, 良い道具を使っていると思いますが,<br>
良い道具を使ったからって良いプログラマってわけではありません. 結局道具だと<br>
思いますので, そこにだけこだわってしまってはいけないと思います.</p>

<p>他人が絶賛する拡張をインストールしまくるよりは, 自分でたくさんコードを書いて<br>
「これは改善すべきだ」っていう機会をたくさん増やしてそれに応じて, カスタマイズ<br>
していった方が確実に良い Emacsができあがると思います. なんであんまりエディタを<br>
カスタマイズすることに熱を上げず, 良いプログラマになることをまず考えてください.</p>

<p>Enjoy Emacs Life!!</p>
") (published nil "2012-12-20T21:38:18Z") (updated nil "2012-12-20T21:38:39Z") (author nil (name nil "syohex@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/12070") (published nil "2012-12-20T00:43:30+09:00") (updated nil "2012-12-20T00:50:44+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f690ee08f6a32d9d03fa"))) (url nil "http://qiita.com/items/f690ee08f6a32d9d03fa") (title nil "magit の部分 stage が便利で便利で") (content ((type . "html")) "<p>スクリーンキャプチャ付きの記事は<br>
<a href=\"http://nishikawasasaki.hatenablog.com/entry/2012/12/20/004227\">http://nishikawasasaki.hatenablog.com/entry/2012/12/20/004227</a><br>
にあります。</p>

<h3>導入</h3>

<p>みなさん、 git つかってますか?</p>

<p>git を使ってらっしゃる方はコマンドで操作している方が大半だと思います。<br>
そこで Emacs をお使いのみなさんにお勧めするのが<br>
今回のテーマの magit です。</p>

<h3>magit って?</h3>

<p>Emacs から git を操作するための elisp です。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>magit/magit · GitHub - https://github.com/magit/magit
</pre></div></div>
<p>インストールには el-get を利用すると便利です。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x el-get-install
    → magit を入力してインストール
</pre></div></div>
<p>add や commit、 checkout に branch など、<br>
基本的なコマンドは<a href=\"http://daemianmack.com/magit-cheatsheet.html\">このあたり</a>をご覧ください。</p>

<h3>普通の magit</h3>

<p>そんな magit ですが今回特に紹介したいのは、<br>
&quot;部分 stage 機能&quot; です!</p>

<p>ファイルを編集後の git 管理下のファイルが変更された状態で magit-status を実行すると、<br>
magit による git 操作画面となります。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218030048.png\" alt=\"\"></p>

<p>通常であれば  Changes の中から add したいファイルにカーソルを合わせておいて<br>
s キーをタイプすることで Staged changes へとファイルが移ります。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218030525.png\" alt=\"\"></p>

<p>単純な追加や変更であれば、このまま c をタイプしてコミットメッセージを入力してしまいましょう。</p>

<h3>今回のポイント</h3>

<p>リポジトリに管理下の hoge アプリ設定ファイルに新しい設定項目を追加したという状況を考えてみましょう。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre># hoge設定ファイル
path=/hoge/piyo
newSetting=aaa
</pre></div></div>
<p>ここでは newSetting が新しい設定項目だと思ってください。</p>

<p>この時、もともとの設定項目 path が存在していますが、<br>
これが動作確認に必要な項目で<br>
ローカル特有の設定値に変更していたとしたらどうでしょうか?</p>

<p>add 前にリポジトリの内容に戻しておかないと、<br>
このローカル用設定のままコミットされてしまいます。</p>

<p>こんな時に使えるのが magit の部分 stage です。</p>

<p>使い方はいたって簡単です。<br>
編集が完了した状態で magit-status を実行します。</p>

<p>magit での git 操作画面が開きますので、部分的に stage したいファイルにカーソルを合わせます。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218031453.png\" alt=\"\"></p>

<p>この状態で M-s (alt+s, Cmd+s, Opt+s)をタイプします。<br>
するとファイルリストの下部に Diff が表示されます。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218031654.png\" alt=\"\"></p>

<p>この Diff 上でリージョン選択して s をタイプすると、<br>
リージョン選択した領域のみが stage(git add)されるのです!</p>

<p>この例の場合だと、<br>
変更として加えたいのは<br>
    newSetting=aaa<br>
の部分ですので、この行を行頭から行末までリージョンとして s をタイプします。<br>
するとどうでしょう。Staged changes として部分的に stage したファイル名があらわれます。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218032129.png\" alt=\"\"></p>

<p>あとは通常通り c をタイプしてコミットに進むだけです。<br>
もちろん他にファイルや部分を同時にコミットすることも可能です。</p>

<p>部分のみコミットするとこのようにちゃんと部分がコミットされています。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218032428.png\" alt=\"\"></p>

<p>便利ですね!!</p>

<p>ちなみに同じ要領で、リージョン選択後に<br>
ステージの s ではなく v をタイプすることで部分的にリポジトリの状態に戻す(revert)することも出来ます!</p>

<h3>おわりに</h3>

<p>magit は Emacs からとっても便利に git を操作できる素晴しい道具です。<br>
git をコマンド操作するよりも効率良く操作できると楽しいですね!!</p>

<p>最後に、 magit の Diff の色合いが気に入らない人用の情報です。<br>
色は下記のように変更可能ですのでいろいろ試してみてください。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>;; 色変更
(set-face-foreground &#39;magit-diff-add &quot;#b9ca4a&quot;) ; 追加した部分を緑に
(set-face-foreground &#39;magit-diff-del &quot;#d54e53&quot;)  ; 削除した 部分を赤に
(set-face-background &#39;magit-item-highlight &quot;#000000&quot;) ; 選択項目ハイライトがうっとうしいので背景色と同化
</pre></div></div>
<p>それではそれでは〜</p>
") (published nil "2012-12-20T00:43:30Z") (updated nil "2012-12-20T00:50:44Z") (author nil (name nil "nishikawasasaki"))) (entry nil (id nil "tag:qiita.com,2005:Item/11981") (published nil "2012-12-17T22:53:17+09:00") (updated nil "2012-12-18T00:10:12+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b10d5659cb1f1a168758"))) (url nil "http://qiita.com/items/b10d5659cb1f1a168758") (title nil "突然の死に備えて sudden-death.el を導入しよう") (content ((type . "html")) "<h1>はじめに</h1>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人人人人人人人人人人人人人人人人人＿
＞　全国 1000 万人の Emacs ユーザのみなさんこんにちは　＜
￣ＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>
<p>さて、業務内外を問わず、ふいに「<a href=\"http://dic.nicovideo.jp/a/%E7%AA%81%E7%84%B6%E3%81%AE%E6%AD%BB\" title=\"突然の死とは (トツゼンノシとは) [単語記事] - ニコニコ大百科\">突然の死</a>」ネタを貼りたくなる場面というのは少なくないと思います。<br>
<a href=\"http://starwing.net/suddenly_death.html\" title=\"突然の死ジェネレータ\">突然の死ジェネレータ</a>というものもありますが、やはり Emacs 内で完結させたいところです。</p>

<p>そういった需要にお答えするために、拙作の elisp を紹介させていただきます。</p>

<h1>sudden-death.el</h1>

<h2>インストール</h2>

<p>auto-install が導入済みであれば以下のコマンドを実行していただければ簡単にインストール出来ます。</p>

<p><code>M-x auto-install-from-url https://raw.github.com/yewton/sudden-death.el/master/sudden-death.el</code></p>

<h2>使い方</h2>

<p>「突然の死」風にしたい部分をリージョンに指定し、<code>M-x sudden-death</code>を実行するだけです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人＿
＞　突然の死　＜
￣ＹＹＹＹＹＹ￣
</pre></div></div>
<p>生成された文字列全体に対してさらに <code>M-x sudden-death</code> を実行すると以下のようになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人＿
＞　＿人人人人人人＿　＜
＞　＞　突然の死　＜　＜
＞　￣ＹＹＹＹＹＹ￣　＜
￣ＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>
<p>このように好きなだけ強調することができます。</p>

<h2>リポジトリ</h2>

<p>GitHub においてあります。</p>

<p><a href=\"https://github.com/yewton/sudden-death.el\">https://github.com/yewton/sudden-death.el</a></p>

<h1>おわりに</h1>

<p>前回に引き続き雑なネタで申し訳ありませんでした。</p>

<p>ちなみに、<a href=\"http://marmalade-repo.org/\" title=\"Marmalade: Spreadable Elisp\">Marmalade: Spreadable Elisp</a>に登録して、<br>
package-install でインストールできるようにしようかと思っていたのですが、マルチバイト文字は文字化けしてしまいました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人＿
＞　明日だれか書いて　＜
￣ＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>") (published nil "2012-12-17T22:53:17Z") (updated nil "2012-12-18T00:10:12Z") (author nil (name nil "yewton@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/11978") (published nil "2012-12-17T21:56:13+09:00") (updated nil "2012-12-17T21:56:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7e51af7cd5eb21d6cc84"))) (url nil "http://qiita.com/items/7e51af7cd5eb21d6cc84") (title nil "領域選択していないときのC-w/M-wに別の動作を割り当てる") (content ((type . "html")) "<p>この記事はEmacs Advent Calendar17日目です。</p>

<p>Qiitaに投稿するのもAdvent Calendarに参加するのも初めてなので少しどきどきしますね。</p>

<p>さて、キーバインドを割り当てて、即座にさまざまな機能にアクセスできるのがEmacsの魅力の一つだと思います。</p>

<p>そのとき、キーを押す回数はできるだけ少ないほうがいいですよね。</p>

<p>もっと言うと、Ctrl+一文字とかAlt+一文字だとうれしいですよね。</p>

<p>だけど、Ctrl/Alt+一文字だと使えるのがだいたい80前後くらいです。</p>

<p>&quot;C-aはあれに使ってるしC-bはあれだし...&quot;って考えていくと、実はそんなにあまっているキーってないです。</p>

<p>ということで、僕がしているちょっとした工夫を紹介させていただきたいと思います。</p>

<p>着目するのはC-wとM-wで、これらはデフォルトで切り取り(kill-region)とコピー(kill-ring-save)に割り当てられています。</p>

<p>切り取りもコピーも領域が選択されていないと意味がないので、領域が選択されていないときのC-w/M-wに別の機能を割り当てようというのが今回の趣旨です。</p>

<p>ということで、以下です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">kill-region-or-delete-window</span> <span class=\"p\">(</span><span class=\"nf\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">mark</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">interactive-p</span><span class=\"p\">)</span> <span class=\"nv\">transient-mark-mode</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">mark-active</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nf\">delete-window</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">kill-region</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;C-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;kill-region-or-delete-window</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">kill-ring-save-or-focus-window</span> <span class=\"p\">(</span><span class=\"nf\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">mark</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">interactive-p</span><span class=\"p\">)</span> <span class=\"nv\">transient-mark-mode</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">mark-active</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nf\">delete-other-windows</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">kill-ring-save</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;M-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;kill-ring-save-or-focus-window</span><span class=\"p\">)</span>
</pre></div></div>
<p>僕は、&quot;現在選択されているウィンドウを削除する&quot;を領域非選択時のC-wに、<br>
&quot;現在選択されているウィンドウ以外のウィンドウを削除する&quot;を領域非選択時のM-xに割り当てています。</p>

<p>僕はこれで、1ストロークで実行できる機能がすこしだけ増えて少しだけハッピーになれました。</p>
") (published nil "2012-12-17T21:56:13Z") (updated nil "2012-12-17T21:56:13Z") (author nil (name nil "t_shuuhei"))) (entry nil (id nil "tag:qiita.com,2005:Item/11950") (published nil "2012-12-17T10:06:15+09:00") (updated nil "2012-12-17T10:06:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/65db8afe0315c2d45ce2"))) (url nil "http://qiita.com/items/65db8afe0315c2d45ce2") (title nil "手元の init.el を淡々と紹介する") (content ((type . "html")) "<p>さて、今回は手元の init.el のネタを淡々と紹介してみます。<br>
みんな知っているよねというネタばかりだとは思いますが、逆に珍しかったりするものもあるかもしれないので、すこしでもお役に立てれば幸いです。</p>

<p><a href=\"http://d.hatena.ne.jp/kiwanami/20121216/1355706256\">http://d.hatena.ne.jp/kiwanami/20121216/1355706256</a></p>
") (published nil "2012-12-17T10:06:15Z") (updated nil "2012-12-17T10:06:15Z") (author nil (name nil "kiwanami"))) (entry nil (id nil "tag:qiita.com,2005:Item/11908") (published nil "2012-12-15T23:02:59+09:00") (updated nil "2012-12-15T23:02:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/db61d0e08c344afec3fd"))) (url nil "http://qiita.com/items/db61d0e08c344afec3fd") (title nil "Emacsでポモドーロテクニック") (content ((type . "html")) "<p>皆さん時間管理していますか。僕は正直いうとちゃんとできていません。<br>
ちゃんとやらないとなと思って、いくつかその手の本を探していると、<br>
ポモドーロテクニックというものがあることを知りました。大まかに<br>
いうと 25分区切りで作業を進めていくというで、これならできるかなと<br>
思って実践しています(現状あまりちゃんとできていませんが・・・)</p>

<p>作業メモは org-modeにしているので、どうせなら時間管理も Emacsで<br>
したいよね、ってなりますよね。Emacsの拡張もいくつかあったのですが、<br>
Emacs Lispでそういうのを作る場合どういうことをすればいいのかを<br>
知りたかったので自作しました。そしてできあがった pomodoro.elについて<br>
紹介します。</p>

<p><a href=\"http://d.hatena.ne.jp/syohex/20121215/1355579575\">http://d.hatena.ne.jp/syohex/20121215/1355579575</a></p>
") (published nil "2012-12-15T23:02:59Z") (updated nil "2012-12-15T23:02:59Z") (author nil (name nil "syohex@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/11824") (published nil "2012-12-14T08:10:24+09:00") (updated nil "2012-12-14T08:10:24+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/6ada48b513a6a5fd785a"))) (url nil "http://qiita.com/items/6ada48b513a6a5fd785a") (title nil "Emacs on Windows な環境で el-get する") (content ((type . "html")) "<p>本体はこっちです。<br>
Emacs on Windows な環境で el-get する - あじーん-0.0.2-SNAPSHOT<br>
<a href=\"http://nishikawasasaki.hatenablog.com/entry/2012/12/14/080727\">http://nishikawasasaki.hatenablog.com/entry/2012/12/14/080727</a></p>

<h3>導入</h3>

<p>Emacs の elisp 管理に el-get はいまやかかせないものになっています。</p>

<p>が、しかし git に依存しているため、<br>
windows では工夫してやる必要がありました。<br>
msysgit(msys) は大きな助けになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;Git for Windows&quot; - http://msysgit.github.com/
</pre></div></div>
<p>msys の環境設定を引き継いだまま Emacs を起動するには<br>
msys のプロンプト上から</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>runemacs
</pre></div></div>
<p>を実行するだけですので簡単です。</p>

<p>したがってこれで終わり……とはいかないのが windows の悩ましいところですね。</p>

<h3>問題</h3>

<p>この状態で M-! で git が使えるにも関わらず、<br>
el-get を使おうとするとエラーが発生してしまい<br>
el-get 自体の clone とインストールに失敗してしまいます。</p>

<p>この問題は msys に含まれる bin/install-info.exe が影響しています。<br>
その顛末はこれを書いている今もここでやりとりがされています。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;install-info strangeness... · Issue #861 · dimitri/el-get&quot; - https://github.com/dimitri/el-get/issues/861
</pre></div></div>
<p>問題としては、cygwin や msys が windows ネイティブの install-info.exe と<br>
混ざって呼び出してしまうことのようですが、<br>
てっとり早く回避方法を試しましょう。</p>

<h3>回避方法</h3>

<h4>その1</h4>

<p>msys の install-info.exe をリネームして使わないようにします。<br>
強引ですが手間もかからず簡単です。<br>
ただし今のところリネームによる問題は発生していませんが、<br>
もしかすると Emacs 以外で問題が発生するかもしれません。</p>

<h4>その2</h4>

<p>el-get を手動で clone します。<br>
el-get のインストールスクリプトは単純に el-get 管理下のディレクトリに<br>
まず el-get 自身を clone します。<br>
ですのでこれを手で行なってしまいます。<br>
msys のプロンプトで ~/.emacs.d/el-get などの環境に合わせた el-get の管理ディレクトリに移動して<br>
手動で clone しましょう。</p>

<p>その2の方法で入れた el-get を el-get が誤作動で吹き飛ばした経験があるので、<br>
現在は1の方法で運用しています。</p>

<h3>おまけ</h3>

<p>yasnippet は github 上で el-get でのインストールが紹介されています。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;capitaomorte/yasnippet · GitHub&quot; - https://github.com/capitaomorte/yasnippet
</pre></div></div>
<p>しかし windows 環境では使用不可能なパスの形式で<br>
一部の snippets が登録されています。<br>
これらの snippets は git submodule で管理されているのですが、<br>
公式で紹介されている el-get からのインストール方法を試すと git submodule も実行されてしまいます。<br>
git submodule が実行されたタイミングで OS がエラーを出すために、<br>
el-get が動作を停止した上 GUI では削除不可能なファイルが出来てしまいます。</p>

<p>この問題を回避するためには el-get に追加されたオプションを有効にしてインストールを行います。</p>

<p>通常、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>      (:name yasnippet
             :website &quot;https://github.com/capitaomorte/yasnippet.git&quot;
             :description &quot;YASnippet is a template system for Emacs.&quot;
             :type github
             :pkgname &quot;capitaomorte/yasnippet&quot;
             :features &quot;yasnippet&quot;
             :compile &quot;yasnippet.el&quot;
</pre></div></div>
<p>のように記述する部分に :submodule nil を追加し、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>      (:name yasnippet
             :website &quot;https://github.com/capitaomorte/yasnippet.git&quot;
             :description &quot;YASnippet is a template system for Emacs.&quot;
             :type github
             :pkgname &quot;capitaomorte/yasnippet&quot;
             :features &quot;yasnippet&quot;
             :compile &quot;yasnippet.el&quot;
             :submodule nil
</pre></div></div>
<p>というように変更します。<br>
これで git submodule は実行されないため問題が回避出来ます。<br>
(当然本来であればインストールされる snippets がインストールされません。)<br>
あくまで回避策、ですね。</p>

<h3>終わりに</h3>

<p>windows 環境は地雷がいっぱいなので、<br>
VM に Linux を入れてそこで Emacs を使うのが一番楽だなと感じる今日このごろです。</p>
") (published nil "2012-12-14T08:10:24Z") (updated nil "2012-12-14T08:10:24Z") (author nil (name nil "nishikawasasaki"))) (entry nil (id nil "tag:qiita.com,2005:Item/11785") (published nil "2012-12-13T02:41:06+09:00") (updated nil "2012-12-13T02:41:06+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5e134065a9d4478b27d2"))) (url nil "http://qiita.com/items/5e134065a9d4478b27d2") (title nil "人類滅亡までのカウントダウンを Emacs に表示する") (content ((type . "html")) "<h1>はじめに</h1>

<p>全国 1000 万人の emacs フリークの皆さん、こんにちは。<br>
人類滅亡が目の前に迫った昨今いかがお過ごしでしょうか。</p>

<p>さて、<a href=\"http://ja.wikipedia.org/wiki/2012%E5%B9%B4%E4%BA%BA%E9%A1%9E%E6%BB%85%E4%BA%A1%E8%AA%AC\" title=\"2012年人類滅亡説 - Wikipedia\">2012年人類滅亡説 - Wikipedia</a>によりますと、<br>
人類は今年の 12/21 - 23 頃に滅びるそうです。<br>
いったい残す所あと何日あるんでしょうね。見当もつきません。<br>
elisp で計算しましょう。</p>

<h1>そもそも日時・時刻の表現ってどうやるの</h1>

<p>time 構造体ともいうべきもので表現します。<br>
以下のようなリストです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">HIGH</span> <span class=\"nv\">LOW</span> <span class=\"nv\">MICROSECOND</span><span class=\"p\">)</span>
</pre></div></div>
<p>これは何かというと、UNIX タイムです。<br>
HIGH は秒数の上位 16bit の、LOW は下位 16bit を表します。<br>
MICROSECOND はそのままです。システムによっては 0 固定になります。<br>
ゆえに、MICROSECOND は省略されることもあります。</p>

<p>具体的な値を見るには以下の関数を実行してみるとよいです。<br>
ちなみに、適当なバッファに elisp を書いて、<br>
その後ろで C-u C-x で実行結果がバッファに書かれます。<br>
便利ですよ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20680 38417 442000)</span>
</pre></div></div>
<p>この他に、もう少し人が扱いやすい表現方法もあります。<br>
以下のようなリストです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">SEC</span> <span class=\"nv\">MIN</span> <span class=\"nv\">HOUR</span> <span class=\"nv\">DAY</span> <span class=\"nv\">MON</span> <span class=\"nv\">YEAR</span> <span class=\"nv\">DOW</span> <span class=\"nv\">DST</span> <span class=\"nv\">TZ</span><span class=\"p\">)</span>
</pre></div></div>
<p>これはわかりやすいですね。<br>
基本的に書いてある通りそのまんまです。<br>
DOW は Day of Week の略で、曜日を表す 0-6 の整数です。<br>
DST サマータイムに t、そうでない場合は nil となります。日本だとあんま関係無いですね。<br>
TZ はグリニッジ標準時からのオフセット秒数を表す整数です。</p>

<p>具体的な値を見るには以下の関数を実行してみてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">decode-time</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (46 37 23 12 12 2012 3 nil 32400)</span>
<span class=\"c1\">;; ちなみに 324000 は</span>
<span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"mi\">32400</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; 9</span>
<span class=\"c1\">;; +9 時間ってことですね</span>
</pre></div></div>
<p>ちなみに decode-time は (HIGH LOW MICROSECOND) を<br>
(SEC MIN HOUR DAY MON YEAR DOW DST TZ) 形式のリストに変換する関数で、<br>
引数を省略した場合は (decode-time (current-time)) と同義になります。</p>

<p>懸命な読者の皆様であれば decode-time があるなら encode-time もあるだろうと察しが付くと思いますが、そのとおり。<br>
decode-time とは逆で、SEC MIN HOUR DAY MON YEAR DOW DST TZ を引数に取って (HIGH LOW MICROSECOND) 形式に変換します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">encode-time</span> <span class=\"mi\">46</span> <span class=\"mi\">37</span> <span class=\"mi\">23</span> <span class=\"mi\">12</span> <span class=\"mi\">12</span> <span class=\"mi\">2012</span> <span class=\"mi\">3</span> <span class=\"no\">nil</span> <span class=\"mi\">32400</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20680 38586)</span>
<span class=\"c1\">;; もちろん decode すると、</span>
<span class=\"p\">(</span><span class=\"nv\">decode-time</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">20680</span> <span class=\"mi\">38586</span><span class=\"p\">))</span> <span class=\"c1\">; =&gt; (46 37 23 12 12 2012 3 nil 32400)</span>
<span class=\"c1\">;; となります</span>
</pre></div></div>
<p>時刻を扱う関数はたいてい、このようなリストを引数にとったり、返したりします。<br>
手で書くのはしんどいので、上に上げたような関数の他にも幾つか便利な関数が定義されています。</p>

<h2>parse-time-string</h2>

<p>文字列をパースして decode-time 形式にしてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">parse-time-string</span> <span class=\"s\">&quot;2012-12-21&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (nil nil nil 21 12 2012 nil nil nil)</span>
<span class=\"p\">(</span><span class=\"nv\">parse-time-string</span> <span class=\"s\">&quot;2012-12-21 23:59:59&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (59 59 23 21 12 2012 nil nil nil)</span>
</pre></div></div>
<p>どんなフォーマットをパース出来るかはソース嫁状態なのですが、<br>
とりあえず MySQL DATETIME 的なのは解釈できるようです。</p>

<h2>date-to-time</h2>

<p>文字列をパースして time 形式にしてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">date-to-time</span> <span class=\"s\">&quot;2012-12-21 00:00:00&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20691 10224)</span>
</pre></div></div>
<p>これもどんなフォーマットをパース出来るかはソース嫁です。<br>
とりあえず時刻は省略出来なさそうです。</p>

<h1>日時・時刻を見やすく整形</h1>

<p>計算するのに便利でもこんな内部表現は人が読むに絶えません。<br>
見やすく整形するには以下の関数を使います。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"c1\">;; time 形式を引数に取ります</span>
<span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span><span class=\"c1\">; =&gt; &quot;2012-12-13 00:11:48&quot;</span>
<span class=\"c1\">;; decode-time 形式は encode してから渡します</span>
<span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nb\">apply</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">encode-time</span> <span class=\"p\">(</span><span class=\"nv\">decode-time</span><span class=\"p\">)))</span><span class=\"c1\">; =&gt; &quot;2012-12-13 00:13:11&quot;</span>
</pre></div></div>
<p>こちらはどんな書式文字列が使えるか、ヘルプに詳しく載っています。<br>
describe-function しましょう。</p>

<h1>時刻を秒に換算</h1>

<p>time 形式よりも単純に秒数になっていたほうがなにかと計算しやすいです。<br>
time を秒に変換するには以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">float-time</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span> <span class=\"c1\">; =&gt; 1355332701.567</span>
</pre></div></div>
<h1>日付・時刻計算</h1>

<h2>ある時刻から n 日後の時刻を取得</h2>

<p>たとえば、今日から 10 日後の日付を取得したいとしましょう。<br>
以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d&quot;</span> <span class=\"p\">(</span><span class=\"nv\">time-add</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">days-to-time</span> <span class=\"mi\">10</span><span class=\"p\">)))</span> <span class=\"c1\">; =&gt; &quot;2012-12-23&quot;</span>
</pre></div></div>
<p>time-add と days-to-time を組み合わせると可能です。</p>

<p>time-add はその名の通り、time + time を計算します。<br>
time-subtract という time - time を計算する関数もあります。</p>

<p>days-to-time もその名の通り、日数を time 形式(要は秒数換算)に変換して返します。</p>

<h2>ある日付からある日付の間に何日あるかを取得</h2>

<p>たとえば、1999年7月、空から恐怖の大王が降りてきてたらしい日から今日まで何日経過しているか数えてみましょう。<br>
以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">days-between</span> <span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span> <span class=\"s\">&quot;1999-07-01 00:00:00&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; 4914</span>
</pre></div></div>
<p>4914 日も生き延びることができていることに感謝しなければなりませんね。<br>
でももうすぐ人類滅亡です。</p>

<h2>ある時刻になったらある関数を実行する</h2>

<p>ちょっと日付計算とは離れますが、タイマー実行のようなことができます。<br>
たとえば、1 週間の間、毎日 15 時にメッセージを表示したい場合、以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">oyatsu-timer</span>
    <span class=\"p\">(</span><span class=\"nv\">run-at-time</span> <span class=\"s\">&quot;15:00pm&quot;</span> <span class=\"mi\">7</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">message</span> <span class=\"s\">&quot;おやつの時間です&quot;</span><span class=\"p\">))</span>
</pre></div></div>
<p>これを実行すると、午後 15 時におやつの時間をミニバッファで 7 日間知らせてくれます。</p>

<p>run-at-time はタイマーオブジェクトを返します。<br>
これは cancel-timer の引数に渡すことで、タイマー実行をキャンセルすることができます。<br>
逆に言うと、run-at-time の返り値を保存しておかないとキャンセルできません<br>
(cancel-function-timers で、指定した関数を実行しているタイマーをすべて止める、ということは出来ます)。</p>

<p>run-at-time の第二引数には、以下のものが渡せます。</p>

<ol>
<li>&quot;11:23pm&quot; のような時刻絶対指定</li>
<li>&quot;2 hours 35 minutes&quot; のような時刻相対指定</li>
<li>現在時刻からの秒数</li>
<li>time 形式</li>
<li>nil で即時実行</li>
<li>t にすると、第三引数に与えた秒数ごとに無限に繰り返し</li>
</ol>

<p>第三引数はタイマーの繰り返し回数を指定しますが、<br>
第二引数に t が指定された場合、実行間隔秒数を表します。</p>

<p>そして、第四引数に実行したい関数、以降にはその関数に渡したい引数を指定します。</p>

<h1>人類滅亡へのカウントダウン</h1>

<p>それでは人類滅亡までの短い時間を有意義に過ごすため、<br>
以下のような関数を定義して実行しましょう。<br>
下記を適当なバッファにコピペして評価しましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">metsubo-countdown-timer</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">start-metsubo-countdown</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">metsubo-countdown-timer</span>
          <span class=\"p\">(</span><span class=\"nv\">run-at-time</span>
           <span class=\"no\">t</span> <span class=\"mi\">1</span>
           <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
             <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">parse-time-zoneinfo</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"s\">&quot;jst&quot;</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">*</span> <span class=\"mi\">+9</span> <span class=\"mi\">3600</span><span class=\"p\">))</span> <span class=\"nv\">parse-time-zoneinfo</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">judgement-time</span> <span class=\"s\">&quot;2012-12-21 00:00:00 JST&quot;</span><span class=\"p\">)</span>
                    <span class=\"p\">(</span><span class=\"nv\">time-remain</span>
                     <span class=\"p\">(</span><span class=\"nv\">float-time</span>
                      <span class=\"p\">(</span><span class=\"nv\">time-subtract</span> <span class=\"p\">(</span><span class=\"nv\">date-to-time</span> <span class=\"nv\">judgement-time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))))</span>
                    <span class=\"p\">(</span><span class=\"nv\">seconds-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">minutes-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"mi\">60</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">hours-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"mi\">24</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">days-remain</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">24</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)))</span>
               <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;人類滅亡まであと %d 日 %d 時間 %d 分 %d 秒です。&quot;</span>
                        <span class=\"nv\">days-remain</span> <span class=\"nv\">hours-remain</span> <span class=\"nv\">minutes-remain</span> <span class=\"nv\">seconds-remain</span><span class=\"p\">))))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">stop-metsubo-countdown</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">metsubo-countdown-timer</span>
    <span class=\"p\">(</span><span class=\"nv\">cancel-timer</span> <span class=\"nv\">metsubo-countdown-timer</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">start-metsubo-countdown</span><span class=\"p\">)</span>
</pre></div></div>
<h1>おわりに</h1>

<p>雑なネタで申し訳ありませんでした。</p>
") (published nil "2012-12-13T02:41:06Z") (updated nil "2012-12-13T02:41:06Z") (author nil (name nil "yewton@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/11756") (published nil "2012-12-12T11:32:39+09:00") (updated nil "2012-12-12T11:46:33+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/dfa63a971f4d44d2e29f"))) (url nil "http://qiita.com/items/dfa63a971f4d44d2e29f") (title nil "動画で見るemacs") (content ((type . "html")) "<p><a href=\"http://blog.handlena.me/entry/2011/12/11/214923\">去年</a>、<a href=\"http://blog.handlena.me/entry/20101210/1291979501\">一昨年</a>にひき続き、こりずに紹介系です。</p>

<p>百聞は一見にしかずというとおり、<br>
聞いた(読んだ)だけではよくわからない拡張elispは結構あるものです。</p>

<p>「何をするものなのかよくわからないから」という食わず嫌いで<br>
便利な機能を使わないのはもったいない！</p>

<p>今回は便利な機能を実演している動画をいくつか紹介したいと思います。</p>

<h2>smartchr</h2>

<p><a href=\"http://vimeo.com/7832017\">smartchr.el on Vimeo</a></p>

<p>単一キーの連続押しに機能を割り当てる拡張。<br>
具体例があるとどのような使い方をすればいいのかがすぐわかりますね。</p>

<ul>
<li>関連: <a href=\"http://tech.kayac.com/archive/emacs-tips-smartchr.html\">smartchr.el を使って生産性を上げる</a></li>
<li><a href=\"https://github.com/imakado/emacs-smartchr\">smartchr</a></li>
</ul>

<h2>yasnippet</h2>

<p><a href=\"http://www.youtube.com/watch?v=ZCGmZK4V7Sg\">Yasnippet Screencast - YouTube</a></p>

<p>はじめて「emacsすげー！！！」と思った動画。</p>

<p>単なる定型文貼り付けにとどまらないyasnippetの威力がよくわかります。</p>

<ul>
<li><a href=\"https://github.com/capitaomorte/yasnippet\">yasnippet</a></li>
</ul>

<h2>undo-tree</h2>

<p><a href=\"http://www.youtube.com/watch?v=EUuTZMuCZ_w\">15:40～ Emacsデモ - YouTube</a></p>

<p>undoの分岐を見える化した上で自在に辿れる便利機能。<br>
動画は第2会関西アンカンファレンスでの、id:tomoyaさんの発表で、4:40あたりから紹介されてます。</p>

<ul>
<li>関連記事: <a href=\"http://d.hatena.ne.jp/tomoya/20110117/1295242639\">Emacs デモ on 第2回関西アンカンファレンス。</a></li>
<li><a href=\"http://www.emacswiki.org/emacs/UndoTree\">undo-tree</a></li>
</ul>

<h2>cua-mode</h2>

<p><a href=\"http://vimeo.com/1168225\">Emacs Column Editing on Vimeo</a></p>

<p>Windows形式のショートカット(<code>C-c</code>でコピー、とか)を使えるようにするモードの、<br>
矩形選択機能だけ使ってます。</p>

<p>複数行をまとめて、インタラクティブに編集するときに非常に便利。</p>

<ul>
<li><a href=\"http://www.emacswiki.org/CuaMode\">cua-mode</a></li>
</ul>

<h2>multiple-cursors</h2>

<p><a href=\"http://www.youtube.com/watch?v=jNa3axo40qM\">Emacs Rocks! Episode 13: multiple-cursors - YouTube</a></p>

<p>インタラクティブな置換インターフェイスを提供する拡張。<br>
これと <code>replace-regexp</code>、<code>cua-mode</code> があれば複数行にまたがる編集はなんとかなります。</p>

<p>(1日目に id:tuto0621 さんが <code>mark-multiples.el</code> を紹介されていましたが、<br>
どちらも同じ作者によるもので、<code>multiple-cursors.el</code> はその後継にあたるようです)</p>

<ul>
<li>関連記事: <a href=\"http://emacsrocks.com/e13.html\">Emacs Rocks! Episode 13: multiple-cursors</a></li>
<li><a href=\"https://github.com/magnars/multiple-cursors.el\">multiple-cursors.el</a></li>
</ul>

<h2>3dmaze</h2>

<p><a href=\"http://www.youtube.com/watch?v=ckOpWQYpKjo\">3D maze by Emacs (single player) - YouTube</a></p>

<p>いみがわからないよ！</p>

<ul>
<li>関連記事: <a href=\"http://d.hatena.ne.jp/kiwanami/20110413/1302709536\">Emacsで3DなマルチプレイヤーなFPSを作ってみた</a></li>
</ul>

<h2>おわり</h2>

<p>いかがでしょうか。</p>

<p>他人のエディタをじっくり覗きこむ機会はなかなかないので、<br>
動画を漁ってみると今まで知らなかったemacsのチカラが見つかるかもしれません。</p>
") (published nil "2012-12-12T11:32:39Z") (updated nil "2012-12-12T11:46:33Z") (author nil (name nil "handlename"))) (entry nil (id nil "tag:qiita.com,2005:Item/11727") (published nil "2012-12-11T23:53:29+09:00") (updated nil "2012-12-11T23:53:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7c8e01a67107c6600480"))) (url nil "http://qiita.com/items/7c8e01a67107c6600480") (title nil "DDSKKが棋譜入力に対応していた") (content ((type . "html")) "<p>&quot;４二銀&quot; を入力するのは大変です。<br>
まず全角の数字が打てないので &quot;4&quot; を入力したあと M-x japanese-zenkaku-region で全角にします。<br>
そこで、そういや /4 で &quot;４&quot; に変換すりゃよかったと気づきます。<br>
あとは &quot;二&quot; と &quot;銀&quot; を一つずつ入力します。</p>

<p>なんかこう、/42gin なんて入力して一発変換できたら楽なのになー<br>
と思いながらやったら普通にできました。</p>
") (published nil "2012-12-11T23:53:29Z") (updated nil "2012-12-11T23:53:29Z") (author nil (name nil "akicho8"))) (entry nil (id nil "tag:qiita.com,2005:Item/11679") (published nil "2012-12-10T20:56:05+09:00") (updated nil "2012-12-10T20:56:05+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/cbd636bd3e529ae7fcf3"))) (url nil "http://qiita.com/items/cbd636bd3e529ae7fcf3") (title nil "emacsの設定ファイルをどうするかというのはおそらく共通の悩み") (content ((type . "html")) "<p>最近少しだけemacsから離れていました。<br>
離れている間に分からないことが増えたりなどして、環境整備をしようと思ったりしたのですが。<br>
その時どうしようかななどと考えたことについて書いてみました。emacsの設定をどのように管理するかというのはおそらく共通の悩みだろうと思うので、他の方がどうしているかは聞いてみたいです。<br>
<a href=\"http://pod.hatenablog.com/entry/2012/12/10/204538\">http://pod.hatenablog.com/entry/2012/12/10/204538</a></p>
") (published nil "2012-12-10T20:56:05Z") (updated nil "2012-12-10T20:56:05Z") (author nil (name nil "podhmo"))) (entry nil (id nil "tag:qiita.com,2005:Item/11652") (published nil "2012-12-10T02:55:15+09:00") (updated nil "2012-12-10T23:59:57+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d9e686d2f2a092321e34"))) (url nil "http://qiita.com/items/d9e686d2f2a092321e34") (title nil "コードリーディングにとっても便利な GNU GLOBAL と gtags.el (と anything-gtags.el) をつかおう") (content ((type . "html")) "<h1>はじめに</h1>

<p>全国 1000 万人の emacs ユーザのみなさんこんにちは。</p>

<p>お題とは全く関係ないですが、今年のテキストエディタ界隈の検索トレンドを見てみました。</p>

<p><img src=\"http://f.cl.ly/items/2f2X3I0D2o1f0g3n0H28/trend.png\" alt=\"trend\"><br>
<a href=\"http://www.google.com/trends/explore?hl=ja#q=emacs%2C%20vim%2C%20%E7%A7%80%E4%B8%B8%2C%20sublime%20text&amp;date=1%2F2012%2012m&amp;cmpt=q\">リンクはこちら</a></p>

<p><a href=\"http://www.sublimetext.com/\" title=\"Sublime Text: The text editor you&#39;ll fall in love with\">Sublime Text</a>が伸びていますね。<br>
ちなみに Sublime Text 2 の拡張は Python で書くそうです。<br>
全くの余談ですが Emacs ユーザのための Sublime Text 2 の紹介スライドが<a href=\"https://speakerdeck.com/kentaro/sublime-text-2-for-emacsers\" title=\"Sublime Text 2 for Emacsers // Speaker Deck\">こちら</a>です。<br>
完全に蛇足ですが Sublime Text 2 の API リファレンスは<a href=\"http://www.sublimetext.com/docs/2/api_reference.html\" title=\"API Reference - Sublime Text 2 Documentation\">こちら</a>です。</p>

<h1>さて</h1>

<p>コードリーディングに便利な<a href=\"http://www.gnu.org/software/global/\" title=\"GNU GLOBAL source code tagging system\">GNU GLOBAL</a>と、それを emacs から使うための gtags.el 、及びさらに便利に使うための <a href=\"http://www.emacswiki.org/cgi-bin/wiki/anything-gtags.el\" title=\"EmacsWiki: anything-gtags.el\">anything-gtags.el</a>について書きたいと思います。</p>

<h2>GNU GLOBAL</h2>

<p>GNU GLOBAL はソースコードタグ付けシステムです。<br>
C, C++, Yacc, Java, PHP, アセンブリに対応しているそうです。</p>

<p>GNU GLOBAL について調べようと思って「GLOBAL」で検索しても、<br>
包丁の製造会社やおしゃれなアパレルサイトがヒットしがちなので気をつけましょう。</p>

<h2>gtags.el</h2>

<p>GNU GLOBAL に同梱されている、emacs から GLOBAL の機能を使うための elisp です。</p>

<p>が、最新の GNU GLOBAL に同梱の gtags.el は、<br>
global-client というスクリプトに依存していたり(Windows だと動かない)、TRAMP とうまく動かなかったりしたので、<br>
<a href=\"https://github.com/voins/gtags\" title=\"voins/gtags · GitHub\">voins/gtags · GitHub</a>を使います。</p>

<h2>anything-gtags.el</h2>

<p>るびきちさんお手製の、gtags.el を anything インタフェースで使えるようにする elisp です。</p>

<p>が、TRAMP 環境でちょっと困る部分があるので少し手を入れます。</p>

<h1>使用イメージ</h1>

<p>ニコ動に使用イメージの動画を上げてみました。<br>
ちなみにタイマー公開機能を使いました。</p>

<p><a href=\"http://www.nicovideo.jp/watch/sm19546665\">http://www.nicovideo.jp/watch/sm19546665</a></p>

<h1>やってみよう</h1>

<h2>GNU GLOBAL を導入する</h2>

<p><a href=\"http://www.gnu.org/software/global/download.html\" title=\"Getting GLOBAL\">Getting GLOBAL</a>にあるとおりですが、<br>
make できる環境の方はソースを落として ./configure &amp; make &amp; make install してください。<br>
Windows の方は<a href=\"http://adoxa.3eeweb.com/global/index.html\" title=\"GLOBAL\">ここ</a>からバイナリを落として、パスの通った場所に置くのが楽です。</p>

<p>あとは global --version とかで動くのを確認しましょう。</p>

<h2>gtags.el を導入する</h2>

<p>先程も書きましたが、同梱の gtags.el ではなく、<br>
<a href=\"https://github.com/voins/gtags\" title=\"voins/gtags · GitHub\">voins/gtags · GitHub</a>を使います。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x auto-install-from-url https://raw.github.com/voins/gtags/master/gtags.el
</pre></div></div>
<p>なりなんなりで入れましょう(適当)。</p>

<h2>anything-gtags.el を導入する</h2>

<p>auto-install-from-emacs-wiki で anything-gtags を探して入れましょう。</p>

<p>先程も書きましたが、TRAMP と一緒に使うとちょっと上手くないので、<br>
以下のように編集します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Diff files</span></div><div class=\"highlight\"><pre><span class=\"gd\">--- a/anything-gtags.el 2012-12-10 02:34:04.037695300 +0900</span>
<span class=\"gi\">+++ b/anything-gtags.el 2012-12-10 02:33:27.235754100 +0900</span>
<span class=\"gu\">@@ -225,7 +225,7 @@</span>
          (gtags-select-buffer buffer)
          (anything-candidate-number-limit 9999)
          (bfn (with-current-buffer c-source-file buffer-file-name))
<span class=\"gd\">-         (pwd (with-current-buffer gtags-select-buffer (file-name-directory bfn)))</span>
<span class=\"gi\">+         (pwd (with-current-buffer gtags-select-buffer (gtags-get-rootpath)))</span>
          (basename (substring bfn (length pwd)))
          (lineno (with-current-buffer c-source-file
                    (save-restriction
</pre></div></div>
<h2>.elsp なりなんなりを編集する</h2>

<p>所々の設定を有効化するために以下を追記します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gtags-prefix-key</span> <span class=\"s\">&quot;\\C-c&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;gtags</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;anything-gtags</span><span class=\"p\">)</span>
<span class=\"c1\">;; キーバインド</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gtags-mode-hook</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
         <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cs&quot;</span> <span class=\"ss\">&#39;gtags-find-symbol</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cr&quot;</span> <span class=\"ss\">&#39;gtags-find-rtag</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-ct&quot;</span> <span class=\"ss\">&#39;gtags-find-tag</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cf&quot;</span> <span class=\"ss\">&#39;gtags-parse-file</span><span class=\"p\">)))</span>
<span class=\"c1\">;; gtags-mode を使いたい mode の hook に追加する</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;c-mode-common-hook</span>
          <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span>
             <span class=\"p\">(</span><span class=\"nv\">gtags-mode</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>
</pre></div></div>
<p>これで gtags.el を使う準備が整いました。</p>

<h1>もう少し便利にする</h1>

<p>以上で基本的には終わりなのですが、<br>
さらに便利に使えるようにする方法を紹介したいのでもう少しだけお付き合いください。</p>

<h2>GTAGS を自動で更新する</h2>

<p>GTAGS は自動では更新されませんので、なんとかして更新する必要があります。</p>

<p>例えば、crontab 等に登録してしまうのもひとつの手です。<br>
毎分更新するようにしておけばそうそう困らないでしょう。</p>

<p>他には、保存するたびに GTAGS を更新するようにする手があります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"c1\">;; update GTAGS</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">update-gtags</span> <span class=\"p\">(</span><span class=\"k\">&amp;optional</span> <span class=\"nv\">prefix</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;P&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">rootdir</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">args</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nv\">prefix</span> <span class=\"s\">&quot;-v&quot;</span> <span class=\"s\">&quot;-iv&quot;</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">rootdir</span>
      <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"nv\">rootdir</span><span class=\"p\">)</span>
             <span class=\"p\">(</span><span class=\"nv\">buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer-create</span> <span class=\"s\">&quot;*update GTAGS*&quot;</span><span class=\"p\">)))</span>
        <span class=\"p\">(</span><span class=\"nv\">save-excursion</span>
          <span class=\"p\">(</span><span class=\"nv\">set-buffer</span> <span class=\"nv\">buffer</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"nv\">erase-buffer</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">result</span> <span class=\"p\">(</span><span class=\"nv\">process-file</span> <span class=\"s\">&quot;gtags&quot;</span> <span class=\"no\">nil</span> <span class=\"nv\">buffer</span> <span class=\"no\">nil</span> <span class=\"nv\">args</span><span class=\"p\">)))</span>
            <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"mi\">0</span> <span class=\"nv\">result</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;GTAGS successfully updated.&quot;</span><span class=\"p\">)</span>
              <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;update GTAGS error with exit status %d&quot;</span> <span class=\"nv\">result</span><span class=\"p\">))))))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;after-save-hook</span> <span class=\"ss\">&#39;update-gtags</span><span class=\"p\">)</span>
</pre></div></div>
<p>こんな elisp をぺろりと .emacs あたりに追記しておくと、<br>
保存するたびに gtags がインクリメンタル更新されます。</p>

<p>一応、interactive に呼べるようにしてあるので手動更新も可能です。<br>
C-u M-x update-gtags という風に呼び出すと、インクリメンタルではなくフル更新します。</p>

<p>gtags の実行結果は *update GTAGS* というバッファに書かれます。</p>

<h2>カレントバッファのメソッド一覧を見る</h2>

<p>gtags-parse-file という関数で指定ファイルのメソッド定義一覧が見られるのですが、<br>
いちいちファイル名を指定する必要があります。</p>

<p>また、TRAMP 環境でうまく動かない場合があります。</p>

<p>そのへんの問題を解決したのが以下の関数です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">gtags-parse-file2</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"k\">let*</span>
          <span class=\"p\">((</span><span class=\"nv\">root</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">))</span>
           <span class=\"p\">(</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">))</span>
           <span class=\"p\">(</span><span class=\"nv\">gtags-path-style</span> <span class=\"ss\">&#39;root</span><span class=\"p\">)</span>
           <span class=\"p\">(</span><span class=\"nv\">gtags-rootdir</span> <span class=\"nv\">root</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">string-match</span> <span class=\"p\">(</span><span class=\"nv\">regexp-quote</span> <span class=\"nv\">root</span><span class=\"p\">)</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
            <span class=\"p\">(</span><span class=\"nv\">gtags-goto-tag</span>
             <span class=\"p\">(</span><span class=\"nv\">replace-match</span> <span class=\"s\">&quot;&quot;</span> <span class=\"no\">t</span> <span class=\"no\">nil</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
             <span class=\"s\">&quot;f&quot;</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
          <span class=\"c1\">;; delegate to gtags-parse-file</span>
          <span class=\"p\">(</span><span class=\"nv\">gtags-parse-file</span><span class=\"p\">)))</span>
    <span class=\"c1\">;; delegate to gtags-parse-file</span>
    <span class=\"p\">(</span><span class=\"nv\">gtags-parse-file</span><span class=\"p\">)))</span>
</pre></div></div>
<p>これを gtags-parse-file の代わりに使うと、<br>
カレントバッファのメソッド一覧を一発で出してくれます<br>
(なんか上手くいかないときは gtags-parse-file を呼び出します)。</p>

<h1>終わりに</h1>

<p>GNU GLOBAL, gtags.el, anything-gtags.el について紹介してきました。<br>
ソースコードリーディングには欠かせないツールだと思います。</p>

<p>拙い文章を最後までお読みいただき、ありがとうございました。</p>

<p>間違いや質問等がありましたらコメントにてお願いいたします。<br>
他にももっと良いやり方があるよ！等のコメントもお待ちしております。</p>

<p>来年も Sublime Text 2 から目離せません。</p>
") (published nil "2012-12-10T02:55:15Z") (updated nil "2012-12-10T23:59:57Z") (author nil (name nil "yewton@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/11601") (published nil "2012-12-08T23:29:47+09:00") (updated nil "2012-12-08T23:41:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/17464754663936cb7895"))) (url nil "http://qiita.com/items/17464754663936cb7895") (title nil "color-themeでEmacsの見た目をきれいにする") (content ((type . "html")) "<h1>はじめに</h1>

<p>Emacsを使い慣れてくると、なんだかいつも見ている画面が物足りなくなり、Emacsの見た目を変えたくなってくると思います。</p>

<p>ここでは、簡単にEmacsの見た目を変える「color-theme.el」の紹介と、color-themeの作り方を少しだけ書いていきます。</p>

<h1>color-theme.elのインストール</h1>

<p>まずは、<a href=\"http://code.google.com/p/gnuemacscolorthemetest/\" title=\"gnuemacscolorthemetest - GNU Emacs Color Theme Test - Google Project Hosting\">gnuemacscolorthemetest - GNU Emacs Color Theme Test - Google Project Hosting</a>のDownloadsから「color-theme-6.6.0-mav.zip(※執筆時点)」をダウンロードします。</p>

<p>ダウンロードしたzipファイルは解凍し、「~/.emacs.d/site-lisp」内などにディレクトリごと置いてください。</p>

<h1>テーマを置くディレクトリ</h1>

<p>color-themeディレクトリの中に、themesというディレクトリがあると思いますが、そこにダウンロードしてきたテーマや自作テーマを置いていきます。</p>

<p>使う場合は、下記の.init.elなどの設定変更を忘れないようにしてください。</p>

<h1>.init.elなどに書いておく設定</h1>

<p>以下のように書いておきます。上の2行は書いておくことが必須となります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>(require &#39;color-theme)
(color-theme-initialize)

(color-theme-molokai) ;; 使うカラーテーマ名
</pre></div></div>
<h1>カラーテーマを作ってみよう！</h1>

<p>今回このAdvent Calendarを書くにあたって、Vimのカラースキームの中でも有名と思われる「<a href=\"https://github.com/tomasr/molokai\">molokai</a>」をEmacsに移植してみました。</p>

<p>コードは以下の通りとなっています。適宜コメントを付けていますので、改造して自分好みのカラーテーマを作ってみてください！<br>
もちろんそのまま使うのもありです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">color-theme-molokai.el</span></div><div class=\"highlight\"><pre>(eval-when-compile
  (require &#39;color-theme))

(defun color-theme-molokai () 
  &quot;Color theme based on the Molokai color scheme for vim.&quot;
  (interactive)
  (color-theme-install
   &#39;(color-theme-molokai ;; カラーテーマ名
     ;; 背景・文字・カーソル
     ((background-color . &quot;#1B1D1E&quot;)
      (background-mode . dark)
      (foreground-color . &quot;#F8F8F2&quot;)
      (cursor-color . &quot;#F8F8F0&quot;))

     (default ((t (:background &quot;#1B1D1E&quot; :foreground &quot;#F8F8F2&quot;))))

     ;; 選択範囲
     (region ((t (:background &quot;#403D3D&quot;))))

     ;; モードライン
     (mode-line ((t (:foreground &quot;#F8F8F2&quot; :background &quot;#000000&quot;
                                 :box (:line-width 1 :color &quot;#000000&quot; :style released-button)))))
     (mode-line-buffer-id ((t (:foreground nil :background nil))))
     (mode-line-inactive ((t (:foreground &quot;#BCBCBC&quot; :background &quot;#333333&quot;
                                          :box (:line-width 1 :color &quot;#333333&quot;)))))

     ;; ハイライト
     (highlight ((t (:foreground &quot;#000000&quot; :background &quot;#C4BE89&quot;))))
     (hl-line ((t (:background &quot;#293739&quot;))))

     ;; 関数名
     (font-lock-function-name-face ((t (:foreground &quot;#FFFFFF&quot;))))

     ;; 変数名・変数の内容
     (font-lock-variable-name-face ((t (:foreground &quot;#FFFFFF&quot;))))
     (font-lock-string-face ((t (:foreground &quot;#E6DB74&quot;))))

     ;; 特定キーワード
     (font-lock-keyword-face ((t (:foreground &quot;#F92672&quot;))))

     ;; Boolean
     (font-lock-constant-face((t (:foreground &quot;#AE81BC&quot;))))

     ;; 括弧
     (show-paren-match-face ((t (:foreground &quot;#1B1D1E&quot; :background &quot;#FD971F&quot;))))
     (paren-face ((t (:foreground &quot;#A6E22A&quot; :background nil))))

     ;; コメント
     (font-lock-comment-face ((t (:foreground &quot;#74715D&quot;))))

     ;; CSS
     (css-selector ((t (:foreground &quot;#66D9EF&quot;))))
     (css-property ((t (:foreground &quot;#FD971F&quot;))))

     ;; nXML-mode
     ;; タグ名
     (nxml-element-local-name ((t (:foreground &quot;#F92672&quot;))))
     ;; 属性
     (nxml-attribute-local-name ((t (:foreground &quot;#66D9EF&quot;))))
     ;; 括弧
     (nxml-tag-delimiter ((t (:foreground &quot;#A6E22A&quot;))))
     ;; DOCTYPE宣言
     (nxml-markup-declaration-delimiter ((t (:foreground &quot;#74715D&quot;))))

     ;; dired
     (dired-directory ((t (:foreground &quot;#A6E22A&quot;))))
     (dired-symlink ((t (:foreground &quot;#66D9EF&quot;))))

     ;; MMM-mode
     (mmm-default-submode-face ((t (:foreground nil :background &quot;#000000&quot;))))
     )))

(provide &#39;color-theme-molokai) ;; カラーテーマ名
</pre></div></div>") (published nil "2012-12-08T23:29:47Z") (updated nil "2012-12-08T23:41:04Z") (author nil (name nil "kubosho_"))) (entry nil (id nil "tag:qiita.com,2005:Item/11563") (published nil "2012-12-07T22:07:02+09:00") (updated nil "2012-12-07T22:07:02+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8107a0d717ab894608a6"))) (url nil "http://qiita.com/items/8107a0d717ab894608a6") (title nil "おすすめの helm拡張") (content ((type . "html")) "<p>拙作の helmプラグインを紹介しようかと思ったのですが、そもそも<br>
あまり helm(anything)を使っている人がそこまで多くなさそうなので<br>
私が使っているものの中でおすすめの拡張を紹介することにしました。</p>

<p><a href=\"http://d.hatena.ne.jp/syohex/20121207/1354885367\">おすすめの helm拡張</a></p>
") (published nil "2012-12-07T22:07:02Z") (updated nil "2012-12-07T22:07:02Z") (author nil (name nil "syohex@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/11523") (published nil "2012-12-06T22:56:53+09:00") (updated nil "2012-12-07T19:11:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0b717ad1d0488b74429d"))) (url nil "http://qiita.com/items/0b717ad1d0488b74429d") (title nil "「タスク」から「予定」を分離してカレンダー表示，Org-mode仕立てで") (content ((type . "html")) "<h1>はじめに</h1>

<p>Org-modeを使って「予定」だけをカレンダーに表示するお話です．途中，Org-mode ユーザしかわからない単語が乱舞しますが，知らなくても大丈夫だと思います．</p>

<blockquote>
<p>キーワード：Emacs, Org-mode, Calfw-org, iCal, Google Calendar, Calendar.app, Dropbox</p>
</blockquote>

<h2>なぜこんなことをするか</h2>

<p>Org-mode で GTD を始めると，すぐにアジェンダ機能を使うようになります．org-agenda によって提供されるアジェンダ機能は，日付に紐付いた「タスク」を一つのバッファに集約することです．</p>

<p>一方，Org-mode の「タスク」は，日付だけではなく時刻や行動の内容も表現できるため，「予定」として扱うこともできます．例えば，次のようなエントリーは，会議の予定を表す情報として適切です．</p>

<blockquote>
<p>** TODO 定例会に出席する<br>
   DEADLINE: &lt;2012-12-06 Thu 14:00-15:30 +1w&gt;<br>
1. 前回議事録確認<br>
2. 議論<br>
3. まとめ</p>
</blockquote>

<p>これは「毎週木曜日の午後2時から，90分間の会議をやる」という予定です．org-agenda でこのような予定を管理する最大の欠点は「管理するタスク項目が増えると他のタスクの中に埋もれていく」という点です．せっかく集中管理しているにも関わらず，重要な予定を見逃すのは嫌ですし，一覧表示した大量の「タスク」から重要な「予定」がどこに配置されているかを探し出すのも嫌です．</p>

<p>そこで，「タスク」群から「予定」だけを切り出して，スケジュールソフトあるいはEmacs上でチェックするというフローがあれば有用です．</p>

<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-01.png\" alt=\"予定をカレンダーに\"></p>

<h1>「タスク」ではなく「予定」をチェックしたい</h1>

<p>やることは簡単です．org-agenda で扱う orgファイルとは別に，重要な予定（カレンダー）だけを扱うファイルを作るだけです．Org-mode のエクスポート機能で簡単にical形式に変換できますから，あとはgoogleカレンダーで見たり，Calendar.appで見たりできます．Emacs の中で完結したい人は，calfw-org を使えばいいのです．</p>

<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-02.png\" alt=\"データフロー\"></p>

<h1>カレンダーの元となるorgファイルを作る</h1>

<p>まず重要な予定を格納するOrgファイルを作ります．org-directory 直下に org-ical.org というファイルを作成したとしましょう．</p>

<h2>とりあえず org-agenda でも扱えるようにする</h2>

<p>org-agenda でも表示されるように，org-agenda-files を設定します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-agenda-files</span>
         <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span> <span class=\"s\">&quot;~/Dropbox/org/next.org&quot;</span>
           <span class=\"s\">&quot;~/Dropbox/org/work.org&quot;</span> <span class=\"s\">&quot;~/Dropbox/org/research.org&quot;</span><span class=\"p\">))</span>
</pre></div></div>
<h2>バッファにキーバインドを当てておく（オプション）</h2>

<p>以下の例では，C-M-cを押すと，一発で「予定」専用のorgファイルが開きます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">show-org-buffer</span> <span class=\"p\">(</span><span class=\"nv\">file</span><span class=\"p\">)</span>
    <span class=\"s\">&quot;Show an org-file on the current buffer&quot;</span>
    <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>
          <span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"nv\">buffer</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"nv\">file</span><span class=\"p\">))</span>
     <span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;~/Dropbox/org/&quot;</span> <span class=\"nv\">file</span><span class=\"p\">))))</span> 
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-c&quot;</span><span class=\"p\">)</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
                                  <span class=\"p\">(</span><span class=\"nv\">show-org-buffer</span> <span class=\"s\">&quot;org-ical.org&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<h1>orgファイルに「予定」を追加する</h1>

<h2>サクッと予定を追加できるようにする（オプション）</h2>

<p>org-capture を使って，Emacsのどこからでも予定を追加できるようにします．この場合は，<code>C-c r c</code> と打つと新しい予定を編集するためのバッファが開かれ，編集後<code>C-c C-c</code>すれば，先ほど作成した org-ical.org に格納されます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">org-capture-ical-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">org-directory</span> <span class=\"s\">&quot;org-ical.org&quot;</span><span class=\"p\">))</span>
 <span class=\"c1\">;; see org.pdf:p73</span>
 <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-capture-templates</span>
      <span class=\"o\">`</span><span class=\"p\">((</span><span class=\"s\">&quot;t&quot;</span> <span class=\"s\">&quot;TODO 項目を INBOX に貼り付ける&quot;</span> <span class=\"nv\">entry</span>
         <span class=\"p\">(</span><span class=\"nv\">file+headline</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;INBOX&quot;</span><span class=\"p\">)</span> <span class=\"s\">&quot;** TODO %?\\n\\t&quot;</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"s\">&quot;c&quot;</span> <span class=\"s\">&quot;同期カレンダーにエントリー&quot;</span> <span class=\"nv\">entry</span>
          <span class=\"p\">(</span><span class=\"nv\">file+headline</span> <span class=\"o\">,</span><span class=\"nv\">org-capture-ical-file</span> <span class=\"s\">&quot;Schedule&quot;</span><span class=\"p\">)</span>
          <span class=\"s\">&quot;** TODO %?\\n\\t&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<h2>どこかで見つけたタスクを予定専用のorgファイルに飛ばせるようにする（オプション）</h2>

<p>org-refile を使うと，カレンダーに表示したいタスクをどこかのバッファで見つけた時に，瞬時に登録できます．登録したいタスクにカーソルを置いて，<code>C-c C-w</code> して予定専用のorgファイルを選べば，当該タスクが予定専用のorgファイルに転送されます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre> <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-refile-targets</span>
       <span class=\"p\">(</span><span class=\"k\">quote</span> <span class=\"p\">((</span><span class=\"s\">&quot;org-ical.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"s\">&quot;next.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"s\">&quot;sleep.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
</pre></div></div>
<h1>iCalを生成する</h1>

<h2>ical ファイル生成のヘルパー関数を実装する</h2>

<p>次の関数を実装しておけば，<code>C-c 1</code> を押すだけで ical 形式のファイルが生成されます．後段の転送方法と組み合わせれば，どこにでも公開できます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;org-icalendar</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">my-org-export-icalendar</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">org-export-icalendar</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">org-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c 1&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;my-org-export-icalendar</span><span class=\"p\">)</span>
</pre></div></div>
<h2>生成される ical ファイルのプロパティを設定する</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; iCal の説明文</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-combined-description</span> <span class=\"s\">&quot;OrgModeのスケジュール出力&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; カレンダーに適切なタイムゾーンを設定する（google 用には nil が必要）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-timezone</span> <span class=\"s\">&quot;Asia/Tokyo&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; DONE になった TODO は出力対象から除外する</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-include-todo</span> <span class=\"no\">t</span><span class=\"p\">)</span>  
<span class=\"c1\">;; （通常は，&lt;&gt;--&lt;&gt; で区間付き予定をつくる．非改行入力で日付がNoteに入らない）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-use-scheduled</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">event-if-todo</span><span class=\"p\">))</span>
<span class=\"c1\">;; DL 付きで終日予定にする：締め切り日（スタンプで時間を指定しないこと）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-use-deadline</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">event-if-todo</span><span class=\"p\">))</span>
</pre></div></div>
<h1>カレンダーを公開する</h1>

<h2>Dropbox 経由で公開するアプローチ</h2>

<p>生成した ical を Dropbox の Public フォルダに置けば，外部サービスからそのファイルを参照できます．セキュリティの問題があるので，例えば次のようなディレクトリを生成して配置すればよいでしょう．ディレクトリの名称をpwgenなどのコマンドを使って作成します．</p>

<blockquote>
<p>~/Dropbox/Public/ical/03zxQZ1abIyPOMFM/org-ical.ics</p>
</blockquote>

<h2>自分のサーバを経由して公開するアプローチ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; エクスポート後に外部サーバに飛ばす</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;org-after-save-iCalendar-file-hook</span>
          <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
            <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
             <span class=\"s\">&quot;scp ~/Dropbox/org/org-ical.ics hoge:~/public_html/ical&quot;</span><span class=\"p\">)</span>
            <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Uploading ... [DONE]&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<p>毎度パスワードを入力したくないので，鍵交換で自動ログインできるようにしておきます．また，次のように .ssh/config を書き込んでおけば，エイリアスを使ってサーバを指定できますね．</p>

<blockquote>
<p>Host hoge<br>
   HostName hoge.org<br>
   User hoge<br>
   Port 2222</p>
</blockquote>

<h2>定期的に公開する（オプション）</h2>

<p>定期的にヘルパー関数を呼べば，常に同期出来ます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">run-with-idle-timer</span> <span class=\"mi\">600</span> <span class=\"no\">t</span> <span class=\"ss\">&#39;reload-ical-export</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">reload-ical-export</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;Export org files as an iCal format file&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">string=</span> <span class=\"nv\">major-mode</span> <span class=\"ss\">&#39;org-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">my-org-export-icalendar</span><span class=\"p\">)))</span>
</pre></div></div>
<h1>カレンダーを見る</h1>

<h2>カレンダーソフトで閲覧する</h2>

<ul>
<li><p>google<br>
グーグルカレンダーを開いて「他のカレンダー」から「URLから追加」を選びます．ただし，グーグルカレンダーは，参照したカレンダーをリアルタイムで更新してくれないので，orgで予定を変更しても反映されるまでに時間がかかることがあります．</p></li>
<li><p>Calendar.app<br>
「ファイル」 =&gt; 「新しいカレンダーの購読」でファイルの場所を指定します．こちらは強制リロードができるので，比較的リアルタイムに情報を更新できます．</p></li>
</ul>

<h2>calfw-org で見る</h2>

<p>calfw-org で見ると，こうなります．</p>

<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-03.png\" alt=\"Calfwでみる\"></p>

<p>このようにcalfw-orgを使うと，orgバッファにある予定を綺麗なインターフェイスでEmacsに表示できます．<a href=\"https://github.com/kiwanami/emacs-calfw\">Kiwanami先生</a>のファイルに，今回の記事で紹介している特別なOrgファイルをカレンダーとして利用するための修正とリンク機能の強化を行なっています．導入してみてください．</p>

<blockquote>
<p><a href=\"https://github.com/takaxp/emacs-calfw/blob/master/calfw-org.el\">https://github.com/takaxp/emacs-calfw/blob/master/calfw-org.el</a></p>
</blockquote>

<p>その上で，以下の設定を.emacsに追加してください．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">autoload-if-found</span> <span class=\"ss\">&#39;cfw:open-org-calendar</span> <span class=\"s\">&quot;calfw-org&quot;</span>
                         <span class=\"s\">&quot;Rich calendar for org-mode&quot;</span> <span class=\"no\">t</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">eval-after-load</span> <span class=\"s\">&quot;calfw-org&quot;</span>
    <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">progn</span>
       <span class=\"c1\">;; calfw-org で表示する org バッファを指定する</span>
       <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cfw:org-icalendars</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span><span class=\"p\">))</span>  
       <span class=\"c1\">;; org で使う表にフェイスを統一</span>
       <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cfw:fchar-junction</span> <span class=\"nv\">?+</span>
               <span class=\"nv\">cfw:fchar-vertical-line</span> <span class=\"nv\">?|</span>
<span class=\"nv\">               cfw:fchar-horizontal-line ?-</span>
<span class=\"nv\">               cfw:fchar-left-junction ?|</span>
               <span class=\"nv\">cfw:fchar-right-junction</span> <span class=\"nv\">?|</span>
<span class=\"nv\">               cfw:fchar-top-junction ?+</span>
<span class=\"nv\">               cfw:fchar-top-left-corner ?|</span>
               <span class=\"nv\">cfw:fchar-top-right-corner</span> <span class=\"nv\">?</span><span class=\"err\">|</span> <span class=\"p\">))))</span>
</pre></div></div>
<p>変数cfw:org-icalendarsは，上記のパッチにしかありませんので気をつけてください．</p>

<p>この状態で，M-x open-org-calendar とすれば，リッチなカレンダーで予定を見られます．</p>

<h2>予定を編集する</h2>

<p>calfw-org でリッチなカレンダーを表示したら，気になる予定にカーソルを置いて（<code>C-c C-o</code>）すると，対応する「予定」にバッファが移動します（これもパッチで追加した機能です）．適当に予定を編集して（<code>C-c &amp;</code>）を押すと，カレンダーに戻れます．表示をリフレッシュするために（<code>r</code>）を押してください．（そのうち自動化したいところ）</p>

<h1>おわりに</h1>

<p>今回の記事は，Org-modeを利用する上で「タスク」と「予定」を区別しませんか？という提案です．そのために専用のバッファを作り，iCal形式のファイルを出力する手順を示しました．少し手を加えたcalfw-org.elを利用することで，「タスクはagendaで確認／編集」し，「予定はcalfw-orgで確認／編集」する手順について説明しました．</p>

<p>マニアックな方，どうですか！</p>

<p>なお，<a href=\"http://orgmode.org/worg/\">worg</a> に calfw-org についてオープンに議論するページを近々設ける予定です．コメントがある方はぜひお願いします m(_ _)m</p>

<p>P.S.</p>

<p>org界隈ではカレンダー周りが少しホットです．<br>
  - <a href=\"https://github.com/dengste/org-caldav/blob/master/README.md\">org-caldav</a><br>
  - <a href=\"https://github.com/llvilanova/org-gnome-calendar/blob/master/README.md\">org-gnome-calendar</a></p>
") (published nil "2012-12-06T22:56:53Z") (updated nil "2012-12-07T19:11:39Z") (author nil (name nil "takaxp"))) (entry nil (id nil "tag:qiita.com,2005:Item/11435") (published nil "2012-12-05T10:56:56+09:00") (updated nil "2012-12-05T10:56:56+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7bcfcb67f8c792b37dbb"))) (url nil "http://qiita.com/items/7bcfcb67f8c792b37dbb") (title nil "Emacsでリファクタリングに超絶便利なmark-multiple (複数行同時編集)") (content ((type . "html")) "<p>テキストを選択 → 同時に変更したい箇所を追加 → テキストを編集すると → 選択した箇所も一緒に書き換え！・・が出来るようになります。変数名の一括変換等に便利です。</p>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20121205/1354672102\">Emacsでリファクタリングに超絶便利なmark-multiple (複数行同時編集)</a> </p>
") (published nil "2012-12-05T10:56:56Z") (updated nil "2012-12-05T10:56:56Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/11375") (published nil "2012-12-04T02:29:35+09:00") (updated nil "2012-12-04T02:29:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/554f78d0e63bfb7f48c1"))) (url nil "http://qiita.com/items/554f78d0e63bfb7f48c1") (title nil "Emacsの設定を便利に変えられるcustomize-groupの紹介 ") (content ((type . "html")) "<h1>はじめに</h1>

<p>Emacsを使っている時、ちょっとここの色変えたい、とか、ここの動作を変えたい、というのがよくあると思います。そういう時皆さんどうしてますか？elispがあんまり分からない僕なんかはぐぐっては見つかった設定をコピペする、見つからなかったら諦める日々を過ごしていました。<br>
で、そんな中知ったcustomize-groupという関数。これを使うと、そんな生活とはおさらば出来るんです。</p>

<p>具体例で示しましょう。例えば、現在行のハイライトの色設定を変えてみます。</p>

<h1>現在行のハイライトの色を変える</h1>

<p>まず、customize-groupでは、いろんな設定がgroup分けされているので、今から変える設定がどのgroupに属しているのか考えます。大体その設定が書かれているelispのファイル名やmode名です。<br>
現在行のハイライトはhl-line-modeなので、hl-lineというgroupかな、と目星をつけます。</p>

<p>で、<code>M-x customize-group</code>します。するとgroup名の入力を求められるので、<code>hl-line</code>と入力し、<code>Enter</code>を押します。<br>
すると以下のような画面が出てくるはずです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>To apply changes, use the Save or Set buttons.                                                
For details, see [Saving Customizations] in the [Emacs manual].

                                         [ Search ]

 Operate on all settings in this buffer:
 [ Set for current session ] [ Save for future sessions ]
 [ Undo edits ] [ Reset to saved ] [ Erase customizations ]   [ Exit ]


Parent groups: [Convenience]

Hl Line group: Highlight the current line.
      [ State ]: something in this group has been changed outside customize.

Hide Global Hl Line Mode: [Toggle]  on (non-nil)
   [ State ]: CHANGED outside Customize.
   Non-nil if Global-Hl-Line mode is enabled. More

Show Value Global Hl Line Sticky Flag
   Non-nil means the Global HL-Line mode highlight appears in all windows. More

Show Hl Line face: [sample]
   Face to use for `hl-line-face&#39;.

Show Value Hl Line Face
   Face with which to highlight the current line in Hl-Line mode.

Show Value Hl Line Sticky Flag
   Non-nil means the HL-Line mode highlight appears in all windows. More
</pre></div></div>
<p>ここに色んなカスタマイズ出来る項目が載っているので、これをいじって、動作の確認して、保存する、という流れになります。</p>

<p>今設定したい項目は<code>Hl Line face</code>です。ここの<code>Show</code>にカーソルを合わせて<code>Enter</code>を押すと詳細が見れます。僕の場合以下のようになりました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Hide Hl Line face: [sample]                                                                   

   Face to use for `hl-line-face&#39;.
   [X] Underline: [Value Menu] Off
   [X] Background: #262626    [ Choose ]  (sample)
   Show All Attributes
</pre></div></div>
<p>次に<code>Background</code>の<code>Choose</code>にカーソルを合わせて<code>Enter</code>を押すと、色見本が出てくるので、好みの色の上でEnterを押すと選択出来ます。今は例なので、使いませんが青色を選んでみました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>   [X] Background: lightsteelblue [ Choose ]  (sample) 
</pre></div></div>
<p>これで設定を変えましたが、まだ反映されていません。反映させるためには<code>[ State ]</code>の上にカーソルを合わせて<code>Enter</code>を押します。すると以下のような選択肢が表示されるはずです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Available choices:

0 = Set for Current Session
1 = Save for Future Sessions
2 = Undo Edits
4 = Erase Customization
6 = Add Comment
9 = For All Kinds of Displays
: = Show Lisp Expression

C-g = Quit
</pre></div></div>
<p>今はとりあえず、現在のセッションだけ有効にしてみます。そのために<code>0</code>を入力します。<br>
すると、現在行の色が変わったはずです。この設定が気に食わなかったらまた設定を変えて、現在のセッションだけ有効にして確認、というのを繰り返します。それで気に入った設定を見つけたら、また<code>[ State ]</code>にカーソルを合わせ<code>Enter</code>を押した後<code>1</code>を押します。すると勝手にinit.elに設定が書き込まれ、次にEmacsを起動させた時もこの設定が有効になります。これで現在行の色設定の変更が完了しました。</p>

<p>また、この例では使いませんでしたが、<code>Show All Attibutes</code>にカーソルを合わせて<code>Enter</code>を押すと全てのカスタマイズ出来る項目が出てくるので、更に細かい設定が可能になります。</p>

<h1>おわりに</h1>

<p>こんな感じで色設定だけでなく、色んな設定をいじることが出来ます。ぐぐって出て来なかった設定は諦める、なんて生活とはおさらばですよ！</p>
") (published nil "2012-12-04T02:29:35Z") (updated nil "2012-12-04T02:29:35Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/11357") (published nil "2012-12-03T17:15:26+09:00") (updated nil "2012-12-03T17:25:24+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/39ee50df454e2ac6d24b"))) (url nil "http://qiita.com/items/39ee50df454e2ac6d24b") (title nil "ange-ftpのタイムスタンプ取得バグ修正") (content ((type . "html")) "<p>これは<a href=\"http://qiita.com/items/acbef2bc5a0293dc8268\" title=\"Mac版EmacsのTRAMP (ange-ftp) とExtended Passive Mode\">前回</a>からの続きです。</p>

<p>ange-ftpにはタイムスタンプ取得にバグがあります。こいつのせいでsave-buffer時のみならず編集していると随時</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&lt;filename&gt; changed on disk; really edit the buffer?
</pre></div></div>
<p>と聞かれるので非常に鬱陶しいです。</p>

<p>ぐぐると<a href=\"http://smallsteps.seesaa.net/archives/200812-1.html\" title=\"ange-ftp&#39;s always &#39;&#39;really edit the buffer?&#39;&#39; problem\">解決策</a>が出てきますが、Emacs同梱のange-ftp.elを直接修正すると何かと問題が起きます。なので該当関数を丸ごと置き換えます。</p>

<p>以下のelispを~/.emacs.d/init.elに書いておくなりすれば良いかと思います。まとまった量のコードですが実質ange-ftp.elから該当関数をコピーしてきて上記解決策を適用 (1行追加) し、<code>eval-after-load</code>で確実にange-ftpのロード後に評価されるようにしただけです。 </p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">ange-ftp-patch.el</span></div><div class=\"highlight\"><pre>;;; 
;;; ange-ftpがリモートのタイムスタンプ取扱に失敗して、頻繁に
;;; &quot;blahblah changed on disk; really edit the buffer?&quot;
;;; と身に覚えのないことを言ってくるバグを回避するためのパッチ
;;;
;;; cf. http://smallsteps.seesaa.net/archives/200812-1.html
(eval-after-load &quot;ange-ftp&quot;
  &#39;(progn
     (message &quot;patching ange-ftp...&quot;)
     (defun ange-ftp-write-region (start end filename &amp;optional append visit)
       (setq filename (expand-file-name filename))
       (let ((parsed (ange-ftp-ftp-name filename)))
         (if parsed
             (let* ((host (nth 0 parsed))
                    (user (nth 1 parsed))
                    (name (ange-ftp-quote-string (nth 2 parsed)))
                    (temp (ange-ftp-make-tmp-name host))
                    ;; What we REALLY need here is a way to determine if the mode
                    ;; of the transfer is irrelevant, i.e. we can use binary mode
                    ;; regardless. Maybe a system-type to host-type lookup?
                    (binary (ange-ftp-binary-file filename))
                    (cmd (if append &#39;append &#39;put))
                    (abbr (ange-ftp-abbreviate-filename filename))
                    ;; we need to reset `last-coding-system-used&#39; to its
                    ;; value immediately after calling the real write-region,
                    ;; so that `basic-save-buffer&#39; doesn&#39;t see whatever value
                    ;; might be used when communicating with the ftp process.
                    (coding-system-used last-coding-system-used))
               (unwind-protect
                   (progn
                     (let ((filename (buffer-file-name))
                           (mod-p (buffer-modified-p)))
                       (unwind-protect
                           (progn
                             (ange-ftp-real-write-region start end temp nil
                                                         (or visit &#39;quiet))
                             (setq coding-system-used last-coding-system-used))
                         ;; cleanup forms
                         (setq coding-system-used last-coding-system-used)
                         (setq buffer-file-name filename)
                         (set-visited-file-modtime (ange-ftp-file-modtime filename))
                         (restore-buffer-modified-p mod-p)))
                     (if binary
                         (ange-ftp-set-binary-mode host user))

                     ;; tell the process filter what size the transfer will be.
                     (let ((attr (file-attributes temp)))
                       (if attr
                           (ange-ftp-set-xfer-size host user (nth 7 attr))))

                     ;; put or append the file.
                     (let ((result (ange-ftp-send-cmd host user
                                                      (list cmd temp name)
                                                      (format &quot;Writing %s&quot; abbr))))
                       (or (car result)
                           (signal &#39;ftp-error
                                   (list
                                    &quot;Opening output file&quot;
                                    (format &quot;FTP Error: \\&quot;%s\\&quot;&quot; (cdr result))
                                    filename)))))
                 (ange-ftp-del-tmp-name temp)
                 (if binary
                     (ange-ftp-set-ascii-mode host user)))
               (if (eq visit t)
                   (progn
                     (set-visited-file-modtime (ange-ftp-file-modtime filename))
                     (ange-ftp-set-buffer-mode)
                     (setq buffer-file-name filename)
                     (set-buffer-modified-p nil)))
               ;; ensure `last-coding-system-used&#39; has an appropriate value
               (setq last-coding-system-used coding-system-used)
               (ange-ftp-message &quot;Wrote %s&quot; abbr)
               (ange-ftp-add-file-entry filename))
           (ange-ftp-real-write-region start end filename append visit))))
     (defun ange-ftp-passive-mode (proc on-or-off)
       (if (string-match (concat &quot;Passive mode:? &quot; on-or-off)
                         (cdr (ange-ftp-raw-send-cmd
                               proc (concat &quot;passive &quot; on-or-off)
                               &quot;Trying passive mode...&quot; nil)))
           (ange-ftp-message (concat &quot;Trying passive mode...&quot; on-or-off))
         (error &quot;Trying passive mode...failed&quot;)))))
</pre></div></div>") (published nil "2012-12-03T17:15:26Z") (updated nil "2012-12-03T17:25:24Z") (author nil (name nil "hage@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/11328") (published nil "2012-12-02T20:44:44+09:00") (updated nil "2012-12-03T02:49:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/16bd5cb65be18e804c63"))) (url nil "http://qiita.com/items/16bd5cb65be18e804c63") (title nil "Emacs で自動的にキーバインドをポップアップする guide-key") (content ((type . "html")) "<p>Emacs で自動的にキーバインドをポップアップするライブラリ，<a href=\"https://github.com/kbkbkbkb1/guide-key\">guide-key.el</a> を自作したので紹介したいと思います．<a href=\"http://emacswiki.org/emacs/one-key.el\">one-key.el</a> の代替ライブラリのつもりです．詳しくは<a href=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/?p=356\">自分のブログ</a>に書いたので，こちらでは軽く導入と設定を書いておきます．</p>

<h2>guide-key.el の導入</h2>

<p>guide-key.el は <a href=\"http://melpa.milkbox.net/\">MELPA</a> に登録しているので，package.el を使ってインストールできます．<a href=\"https://github.com/m2ym/popwin-el\">popwin</a> に依存しているので，package.el でインストールすれば自動的に popwin もインストールされます．</p>

<p>package.el がない人は <a href=\"https://github.com/m2ym/popwin-el\">m2ym/popwin-el</a> と <a href=\"https://github.com/kbkbkbkb1/guide-key\">kbkbkbkb1/guide-key</a> から popwin.el と guide-key.el を直接ダウンロードしてきて，適当に <code>load-path</code> が通っているところに保存してください．</p>

<h2>使い方</h2>

<p><code>guide-key/guide-key-sequence</code> にポップアップして欲しいキーシーケンス（プレフィックスキー）を登録してください．<code>guide-key/highlight-command-regexp</code> に一致するコマンドはハイライトされます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;guide-key</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">guide-key/guide-key-sequence</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;C-x r&quot;</span> <span class=\"s\">&quot;C-x 4&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">guide-key/highlight-command-regexp</span> <span class=\"s\">&quot;rectangle&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">guide-key-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\">; guide-key-mode を有効にする</span>
</pre></div></div>
<p>これで <code>C-x r</code> や <code>C-x 4</code> を押した時に，次に続くキーを表示するウィンドウが自動的にポップアップされます．実際に <code>C-x r</code> を押した様子はこのようになります．</p>

<p><img src=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/wp-content/uploads/2012/12/wpid-guide-key-example2.png\" alt=\"C-x r を押した様子\" title=\"guide-key.el 動作例2\"></p>

<h2>特定のモードで設定を追加</h2>

<p><code>guide-key/add-local-guide-key-sequence</code> と<br>
<code>guide-key/add-local-highlight-command-regexp</code> に特定のモードのフックと組み合<br>
わせれば，特定のモードに対して設定を追加できます．例えば org-mode を例にとって<br>
見ると，以下のような設定になります．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">guide-key/my-hook-function-for-org-mode</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-guide-key-sequence</span> <span class=\"s\">&quot;C-c&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-guide-key-sequence</span> <span class=\"s\">&quot;C-c C-x&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-highlight-command-regexp</span> <span class=\"s\">&quot;org-&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;org-mode-hook</span> <span class=\"ss\">&#39;guide-key/my-hook-function-for-org-mode</span><span class=\"p\">)</span>
</pre></div></div>
<p>この設定をした後，org-mode のバッファで <code>C-c C-x p</code> を押して <code>org-set-property</code> が実行される様子が以下の図です．</p>

<p><img src=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/wp-content/uploads/2012/12/wpid-guide-key-example-org-anime.gif\" alt=\"C-c C-x p を押した様子\" title=\"guide-key.el 動作例3\"></p>

<h2>まとめ</h2>

<p>guide-key の特徴をまとめておきます．</p>

<ul>
<li><p>現在入力しているキーシケンスに続くキーを自動的にポップアップします．ポップアップさせたいプレフィックスを設定するだけで使えます．また動的にキーバインドを調べているので，キーバインドが変更されても動的に追随できます．</p></li>
<li><p>特定のコマンドを色付けすることできます．いま注目している機能に関するコマンドだけを色付けすることにより，キーバインドを探しやすくなり体で覚えることができます．</p></li>
<li><p>既存のコマンドを上書きしないので，<code>describe-key</code> や <code>describe-bindings</code> などに影響が出ません．</p></li>
</ul>
") (published nil "2012-12-02T20:44:44Z") (updated nil "2012-12-03T02:49:09Z") (author nil (name nil "kbkbkbkb1"))) (entry nil (id nil "tag:qiita.com,2005:Item/11307") (published nil "2012-12-02T12:54:38+09:00") (updated nil "2012-12-02T12:54:38+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5c97b02dcc3c7fd20279"))) (url nil "http://qiita.com/items/5c97b02dcc3c7fd20279") (title nil "C++でプログラミングコンテストをする時用のflymakeの設定") (content ((type . "html")) "<p>出来るようになること</p>

<ul>
<li>タイプしている途中にエラーを表示してハイライトしてくれる(flymakeの機能)</li>
<li>flymakeに通常必要なMakefileを用意しなくて良くなる</li>
<li>next-error(<code>\\C-e</code>にバインド), prev-error(<code>\\M-e</code>にバインド)でミニバッファにエラーを表示</li>
</ul>
<div class=\"code-frame\"><div class=\"highlight\"><pre>;;;flymake                                                                                                                                                                                    
(require &#39;flymake)

;;エラーメッセージをミニバッファで表示させる                                                                                                                                                  
(global-set-key &quot;\\C-e&quot; &#39;flymake-goto-next-error)
(global-set-key &quot;\\M-e&quot; &#39;flymake-goto-prev-error)

;; gotoした際にエラーメッセージをminibufferに表示する                                                                                                                                         
(defun display-error-message ()
  (message (get-char-property (point) &#39;help-echo)))
(defadvice flymake-goto-prev-error (after flymake-goto-prev-error-display-message)
  (display-error-message))
(defadvice flymake-goto-next-error (after flymake-goto-next-error-display-message)
  (display-error-message))
(ad-activate &#39;flymake-goto-prev-error &#39;flymake-goto-prev-error-display-message)
(ad-activate &#39;flymake-goto-next-error &#39;flymake-goto-next-error-display-message)

;;c++のflymakeでmakefileを不要にする                                                                                                                                                          
(defun flymake-cc-init ()
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                       &#39;flymake-create-temp-inplace))
         (local-file  (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
    (list &quot;g++&quot; (list &quot;-Wall&quot; &quot;-Wextra&quot; &quot;-fsyntax-only&quot; local-file))))

(push &#39;(&quot;\\\\.cc$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push &#39;(&quot;\\\\.cpp$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push &#39;(&quot;\\\\.h$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push &#39;(&quot;\\\\.hpp$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
</pre></div></div>
<p>昔2箇所ぐらいからとってきて合体したんだけどソースがわからない。ごめんなさい。。。</p>
") (published nil "2012-12-02T12:54:38Z") (updated nil "2012-12-02T12:54:38Z") (author nil (name nil "awakia"))) (entry nil (id nil "tag:qiita.com,2005:Item/11299") (published nil "2012-12-02T05:22:43+09:00") (updated nil "2012-12-02T05:25:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b836e7792be0a7c65fd4"))) (url nil "http://qiita.com/items/b836e7792be0a7c65fd4") (title nil "Emacsで1行の文字数が指定値をオーバーしていたらハイライトする") (content ((type . "html")) "<p>具体的なコード例を示します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>;;; C系統,Pythonにて1行80文字を超えるとハイライト
(add-hook &#39;c-mode-hook
  (lambda ()
    (font-lock-add-keywords nil
      &#39;((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
(add-hook &#39;c++-mode-hook
  (lambda ()
    (font-lock-add-keywords nil
      &#39;((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
(add-hook &#39;python-mode-hook
  (lambda ()
    (font-lock-add-keywords nil
      &#39;((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))

;;; Javaで1行100文字を超えるとハイライト
(add-hook &#39;java-mode-hook
  (lambda ()
    (font-lock-add-keywords nil
      &#39;((&quot;^[^\\n]\\\\{100\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
</pre></div></div>
<p>ちなみに、C++, Pythonで1行80文字、Javaで1行100文字までというのはGoogleで使われているスタイルガイドに即しています。</p>

<ul>
<li><a href=\"http://code.google.com/p/google-styleguide/\">http://code.google.com/p/google-styleguide/</a></li>
<li><a href=\"http://source.android.com/source/code-style.html\">http://source.android.com/source/code-style.html</a></li>
</ul>
") (published nil "2012-12-02T05:22:43Z") (updated nil "2012-12-02T05:25:17Z") (author nil (name nil "awakia"))) (entry nil (id nil "tag:qiita.com,2005:Item/11253") (published nil "2012-12-01T12:07:19+09:00") (updated nil "2012-12-01T12:07:19+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/be13aade42c996d80d14"))) (url nil "http://qiita.com/items/be13aade42c996d80d14") (title nil "文字列に同じ処理を繰り返し実行したい時に便利なキーボードマクロ") (content ((type . "html")) "<p>数百件程度の改行区切りのデータをカンマ区切りにしたいとか，「文字列に対して簡単な処理を数十回/数百回実行したい，でもプログラムを書くほどでもない」というときはキーボードマクロが便利．<br>
キーボードマクロとは一連のキーボード操作をコマンドに定義したもの．定義したコマンド(キーボードマクロ)は簡単に繰り返し実行ができる．</p>

<h2>利用例</h2>

<p>以下では改行区切りのデータをquoteしてカンマ区切りにする，という処理を例に説明する．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">処理前</span></div><div class=\"highlight\"><pre>foo
bar
baz
...
</pre></div></div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">処理後</span></div><div class=\"highlight\"><pre>&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, ...
</pre></div></div>
<h3>作業手順</h3>

<ol>
<li>適当なバッファ(*scratch*とか)に処理したい文字列を貼る(今回は<code>foo\\nbar\\nbaz</code>...)</li>
<li>繰り返し実行したいキーボード処理を考える．今回ならば以下の作業で1行目(foo)の処理が終わる．(スタート時にカーソルは1行目の<code>f</code>にあるとする)

<ul>
<li><code>&#39;</code>を入力</li>
<li>C-eで行末に移動(カーソルは<code>o</code>に移動する)</li>
<li><code>&#39;,</code>を入力</li>
<li>C-dで改行を削除</li>
</ul></li>
<li>2の処理をキーボードマクロに定義する．定義方法は簡単で，<code>C-x(</code> -&gt; 定義したいキーボード処理を操作 -&gt; <code>C-x)</code>とするだけ．</li>
<li>定義したマクロの実行は<code>C-xe</code>(execution)．連続実行は<code>C-xeeeee...</code>.</li>
<li>大量に実行したい時は<code>C-u100C-xe</code>などとすればよい</li>
</ol>

<p>他のキーバインドなど，詳細は <a href=\"http://www.bookshelf.jp/texi/emacs-man/21-3/jp/emacs_16.html\">GNU Emacsマニュアル: M. キーボードマクロ</a></p>
") (published nil "2012-12-01T12:07:19Z") (updated nil "2012-12-01T12:07:19Z") (author nil (name nil "yaotti"))) (entry nil (id nil "tag:qiita.com,2005:Item/11232") (published nil "2012-11-30T18:52:49+09:00") (updated nil "2012-11-30T18:54:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b92e9ce4b941545c8af5"))) (url nil "http://qiita.com/items/b92e9ce4b941545c8af5") (title nil " マインドマップから全てを紡ぎ出す - XMind+Pandocのドキュメント作成術 -") (content ((type . "html")) "<h2>前書き</h2>

<p>ぶっちゃけると、この記事が書きたかっただけです。<br>
その勢いでAdvent Calendarを作ってしまいました。</p>

<p>とはいえ、もう少し「ドキュメントを作る」ことに注目が集まってもいいのではないかと思います。<br>
Markdownが流行っていることですし、LaTeXユーザもたくさんいますし。</p>

<p>というわけで、ドキュメント作成Tips Advent Calendarの第1回では、<br>
「マインドマップであらゆる文書を書く方法」について、<br>
自作ツールの宣伝も兼ねてお送りします。</p>

<h2>あらすじ</h2>

<h3>マインドマップを使った文書作成フロー</h3>

<p>この画像を順に追う形で説明していきます。</p>

<p><img src=\"http://cl.ly/image/20132W013343/12.11.30_doc_advent.png\" alt=\"マインドマップを使った文書作成フロー\"></p>

<h3>誰に読んでほしいか</h3>

<ul>
<li>報告書やブログ記事・プレゼン資料など、章立てやしっかりとした論理構成をもつ文書を作りたい全ての人</li>
<li>白紙のWordやエディタを前にして、呆然としたことのある人</li>
<li>とにかく文書作成で楽したい人</li>
</ul>

<h2>マインドマップ作成ソフト XMind</h2>

<h3>そもそもマインドマップとは</h3>

<p>マインドマップとは、元々はトニー・ブザン(Tony Buzan)が提唱した思考・発想法の一つです。<br>
表現したい概念の中心となるキーワードやイメージを中央に置き、<br>
そこから放射状にキーワードやイメージを広げ、つなげていきます。<br>
このようにマップを広げることで、効率的かつ創造的なブレインストリーミングが可能になります。</p>

<p>マインドマップには、ブザンが考案したオリジナル・本家のマインドマップと、その派生があります：</p>

<ul>
<li>オリジナルの方（ブザンのマインドマップ）は、描き方や色の使い方など細かいルールがある</li>
<li>そこから派生した（広義の）マインドマップは、アウトラインの一形式として広まっている

<ul>
<li>次に紹介するXMindは、どちらかといえば派生版マインドマップです</li>
</ul></li>
</ul>

<h3>XMind</h3>

<p>XMindは、（広義の）マインドマップを作成するソフトです。<br>
XMindの詳しい情報・ダウンロードは以下を参照してください： <a href=\"http://jp.xmind.net/\">日本語版公式サイト</a></p>

<ul>
<li>【注意】最新版 (XMind2012) は日本語入力のバグがあるので、前バージョンのXMind3.2の使用を推奨します</li>
</ul>

<h3>スクリーンショット</h3>

<p>今書いているこの文書（書きかけ）のスクリーンショットはこんな感じです。</p>

<p><img src=\"http://cl.ly/image/1S2F3j2q2O3q/12.11.30_XMind_ScreenShot.png\" alt=\"XMindのスクリーンショット\"></p>

<h3>XMindの良さ</h3>

<p>類似のソフトとしてFreeMindなどがありますが、私があえてXMindを好んで使っているのには、いくつか理由があります。</p>

<h4>マップがカラフルで美しい</h4>

<p>ブザンのマインドマップでは、カラフルであることが重要です。<br>
なぜなら、色は右脳に訴えかけ、想像力を豊かにするからです。</p>

<p>Xmindはカラフルなテーマが付属しています。見た目も美しく、気持ちよく使用できます。<br>
また、備え付けマーカー（アイコン）がカラフルで使いやすいのも特徴です（必要であれば、自分でマーカーを追加することも可能です）。<br>
一方、FreeMindはグラフィカルな面で貧弱な点が否めません。</p>

<h4>アウトラインエディタとして優れている</h4>

<p>これはFreeMindでもあてはまりますが、<br>
ドラッグ＆ドロップでブランチ（枝）の配置を直感的に変えられるのが最大の魅力です。<br>
この機能は文章の章立てを考えるときに便利で、文書の構造を大胆に変えられるのは大きなメリットです。</p>

<p>例えば、一度Word文書に書いたものについて、節単位の入れ替えなど大幅な修正をする場面を想像してみてください。<br>
「はじめに」という節に書いた文を「おわりに」という節に移すだけでも、Wordだと一苦労だと思います。<br>
マインドマップ上では、項目をドラッグ＆ドロップするだけで簡単に修正できます。</p>

<h4>マルチプラットフォーム</h4>

<p>XMindは、Windows, Mac, Linux(Debian/Ubuntu)という、現代で使われるPC環境のほとんどをカバーしています。<br>
Javaで動作しているので、Debian系以外のLinuxユーザでも使えます。</p>

<h4>基本機能は無料</h4>

<p>普段使うような機能については、無料で使用できます。<br>
PDFエクスポートなど一部有料の機能がありますが、画像エクスポートは無料のため十分使えます。</p>

<h2>XMorgDown</h2>

<p>しかし、XMindのエクスポート機能は正直言って貧弱です。<br>
HTMLについてはH3タグまでしかエクスポートできず、それ以下はべた書きになってしまいます。</p>

<p>そこで、XMorgDownという自作ツールをRubyで書きました。<br>
このツールは、XMindファイルを色々なフォーマットに変換します。</p>

<ul>
<li>出力フォーマット： Markdown, Org-mode, LaTeX, HTML, etc...</li>
</ul>

<p>このツールは、実はPandocという神のようなツールの助けを借りています。<br>
PandocはHTMLやMarkdown・LaTeXなどの文書を、多種多様なフォーマットに変換するHaskell製ツールです。<br>
開発も活発に行われており、今後注目されるべき激アツなツールの一つです。<br>
詳しくはこちらを参照してください：</p>

<ul>
<li><a href=\"http://johnmacfarlane.net/pandoc/index.html\">About pandoc</a></li>
</ul>

<h3>XMorgDownの中でやっていること：XSLT + Pandoc</h3>

<p>XMorgDownは以下のような処理を行っています：</p>

<ol>
<li>XMindのファイルからXMLを抽出</li>
<li>XSLT (XML Stylesheet Language Transformations) でXMLをHTMLに変換</li>
<li>PandocにHTMLを食わせて、色々なフォーマットに変換</li>
</ol>

<h3>使い方・インストール方法</h3>

<p>詳しい使い方・インストール方法は以下をご覧ください：</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/sky-y/20121012/1350731032\">XMorgDown：マインドマップをOrgやMarkdownに変換するスクリプト - 雲行きそらゆきココロイキ</a></li>
</ul>

<p>リリースしたてなので、インストール出来ないとか不具合あったら、どんどん報告なりpull requestなりしてください！</p>

<h2>Edit &amp; Publish</h2>

<p>マインドマップから生成した文書は、まだ骨格のみの状態です。<br>
次の段階では、この骨格に対して、MarkdownやOrg-modeなどで文書の肉付けしていきます。<br>
最後に、肉付けした文書を適当な形式にエクスポートし、体裁を整えて完成です！</p>

<h3>Markdown</h3>

<p>Markdownは、GithubやQiitaで採用されている軽量マークアップ言語です。もはや説明不要ですが、一応。</p>

<ul>
<li>Pandocオプション： -t markdown</li>
</ul>

<h4>出力</h4>

<h5>HTML</h5>

<p>PandocやMarkdownエディタ(Mouなど)でHTMLに変換できるので便利です。<br>
私はMac用Markdownエディタの<a href=\"http://mouapp.com/\">Mou</a>で編集した後、<br>
プレビュー画面のHTMLをコピーしてEvernoteに貼り付けたりしています。</p>

<h5>WordPress</h5>

<p>WordPressのプラグインを使うと、Markdownで記事が書けます。<br>
私が使っているのは、このプラグインです（管理画面でプラグインを検索したら出てくると思います）。</p>

<ul>
<li>Markdown on Save Improved</li>
<li>Markdown QuickTags</li>
</ul>

<h5>HatenaDiary</h5>

<p>markdown2hatena (@joker1007 さん作) を使用すると、Markdownをはてな記法に変換出来ます。</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/sky-y/20120830/1346329634\">（ツール紹介）Markdown記法をはてな記法に変換するツール - 雲行きそらゆきココロイキ</a></li>
</ul>

<h3>Org-mode</h3>

<p>Org-modeはEmacs公式の文書作成・TODO管理モードです。<br>
Markdownによく似た（しかし遥かに高機能な）Org-mode用の記法があります。<br>
ドキュメントの日本語訳が追いつかないほど、多機能で奧の深いツールです。</p>

<p>個人的には、編集機能が強力なのでMarkdownよりも好きです。<br>
見出し表示をまとめる機能があり、Org-mode単独でアウトラインエディタとして十分使えます。</p>

<p>まだ開発段階ですが、Vimにも一応Orgクローンがあるらしいです。</p>

<ul>
<li><a href=\"http://www.vim.org/scripts/script.php?script_id=3342\">VimOrganizer : An Emacs&#39; Org-mode clone for Vim</a></li>
</ul>

<p>Pandocのオプションは以下の通りです：</p>

<ul>
<li>Pandocオプション： -t org</li>
</ul>

<h4>出力</h4>

<p>エクスポート形式が豊富なのも、Org-modeの特徴です。<br>
エクスポートは C-c C-e で選択用バッファが開きます。</p>

<h5>LaTeX</h5>

<p>Org-modeはLaTeXと非常に相性がよく、強力な連携機能（RefTeX、数式埋め込みなど）も魅力です。<br>
プレゼン用スタイルファイルBeamerにも対応しています。</p>

<h5>HTML</h5>

<p>HTMLエクスポートにも対応しています。<br>
適当なCSSを自分で指定すれば、きれいに表示できます。</p>

<h5>OpenDocument形式</h5>

<p>OpenDocumentはLibreOffice/OpenOffice.orgのファイル形式です。<br>
Org-modeではWriter形式に対応しています。<br>
アウトライン構造まで忠実にエクスポートしてくれるのが、非常にうれしいです。</p>

<p>さらに、LibreOfficeを用いてMS Word形式にエクスポート可能なので、<br>
事務や共同作業の都合でWord形式の提出を迫られても安心です。</p>

<h3>LaTeX</h3>

<p>実はPandoc(XMorgDown)の段階で、直接LaTeXを出力できます。</p>

<ul>
<li>Pandocオプション： -t latex</li>
</ul>

<p>Beamerにも対応しています。</p>

<ul>
<li>Pandocオプション： -t beamer</li>
</ul>

<p>つまり、以下のうちから好みで選べることになります：</p>

<ul>
<li>Org文書を編集してからLaTeX出力する</li>
<li>Pandocで直接LaTeX出力して編集する</li>
</ul>

<h3>その他</h3>

<p>その他、Pandocに対応しているものは何でもOKです。<br>
詳しくは以下のサイトを見てください。</p>

<ul>
<li><a href=\"http://johnmacfarlane.net/pandoc/README.html\">Pandoc User’s Guide</a></li>
</ul>

<blockquote>
<p>It can read markdown and (subsets of) Textile, reStructuredText, HTML, LaTeX, and DocBook XML;</p>

<p>and it can write plain text, markdown, reStructuredText, XHTML, HTML 5, LaTeX (including beamer slide shows), ConTeXt, RTF, DocBook XML, OpenDocument XML, ODT, Word docx, GNU Texinfo, MediaWiki markup, EPUB, Textile, groff man pages, Emacs Org-Mode, AsciiDoc, and Slidy, Slideous, DZSlides, or S5 HTML slide shows. It can also produce PDF output on systems where LaTeX is installed.</p>
</blockquote>

<h2>終わりに</h2>

<p>最後に、ここまで説明した文書作成フローをおさらいしましょう。</p>

<p><img src=\"http://cl.ly/image/20132W013343/12.11.30_doc_advent.png\" alt=\"マインドマップを使った文書作成フロー\"></p>

<p>私はいつもあらゆる文書をこのフローで作成しています。<br>
もちろん、この記事も同じフローに乗っています。<br>
セットアップ（特にXMorgDownのインストール）が大変だと思いますが、<br>
そこを乗り越えると非常に快適なWriting Lifeが待っています。</p>

<p>もちろん、そこまで行かなくても、紹介したツールや言語のどれかに興味を持ってもらえれば幸いです。<br>
（特に、Pandocはもっと知ってもらいたいです！）<br>
ぜひ興味を持ったツールを試してみてください！</p>
") (published nil "2012-11-30T18:52:49Z") (updated nil "2012-11-30T18:54:00Z") (author nil (name nil "sky_y"))) (entry nil (id nil "tag:qiita.com,2005:Item/11102") (published nil "2012-11-27T02:05:48+09:00") (updated nil "2012-11-27T02:05:48+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/acebbdae04994de16c6d"))) (url nil "http://qiita.com/items/acebbdae04994de16c6d") (title nil "Emacsを軽くした") (content ((type . "html")) "<h1>結論</h1>

<p>linum-mode重いからoffにする。使いたいなら以下をinit.elに追加して使うと良い。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(setq linum-delay t)
(defadvice linum-schedule (around my-linum-schedule () activate)
  (run-with-idle-timer 0.2 nil #&#39;linum-update-current))
</pre></div></div>
<p>その他の対策としてフォントをいじらない、再起動する、マシンスペック上げる等考えられる。</p>

<h1>詳細というかブログエントリ的な何か</h1>

<p>サーバのEmacsが重たくて仕方なかった。サーバにコードが置いてあるので、sshfsでサーバをマウントしてローカルのEmacs使ったり、ローカルのEmacsからTRAMPでサーバに繋いでみたり、とかやってたけど、これだとサーバのtmuxで作業状態が完結しないから切り替えが面倒だったり、サーバにあるコマンドを利用するEmacsの機能が使えなかったりして困ってた。<br>
でサーバのemacsをinit.elを読まずに起動したらそれなりに軽いので、どの機能が思い原因かをinit.elをちょっとずつコメントアウトしてついに原因を突き止めた。<br>
linum-mode (行番号表示)が原因だった。これをoffにすると軽い。しかし行番号の表示は欲しい。でぐぐると、init.elに以下を追加すると軽くなる、という記事を見つけて試してみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(setq linum-delay t)
(defadvice linum-schedule (around my-linum-schedule () activate)
  (run-with-idle-timer 0.2 nil #&#39;linum-update-current))
</pre></div></div>
<p><a href=\"http://d.hatena.ne.jp/daimatz/20120215/1329248780\">http://d.hatena.ne.jp/daimatz/20120215/1329248780</a><br>
これがビンゴで、凄く軽くなった。こんな神エントリがはてブ３しかないのが信じられなかった。</p>

<p>で、僕の話は終わりなんだけれども、他に重い原因調べて出てきたのには、フォントをいじると重い、という話や、段々重くなる、という症状なら再起動しろ、というかそもそもマシンスペック上げろ、という感じ。ちなみに僕の場合CPUがボトルネックだった。</p>
") (published nil "2012-11-27T02:05:48Z") (updated nil "2012-11-27T02:05:48Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/10734") (published nil "2012-11-14T22:51:56+09:00") (updated nil "2012-11-14T22:51:56+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/acbef2bc5a0293dc8268"))) (url nil "http://qiita.com/items/acbef2bc5a0293dc8268") (title nil "Mac版EmacsのTRAMP (ange-ftp) とExtended Passive Mode") (content ((type . "html")) "<h2>困ってること</h2>

<p>Mac OS XのEmacsでTRAMP (ange-ftp) を使っているとたまに<code>Entering Extended Passive Mode</code>などと言われて操作がブロックされることがある (接続先のサーバによるようです)。</p>

<p>Extended Passive Modeを切ってやる、具体的にはftpプロセスに対して<code>epsv4 off</code>を送りつけてやるとこれが解決する。が、ange-ftpにそのような機能はない。</p>

<p><a href=\"http://www.kit.hi-ho.ne.jp/amist/\" title=\"idx\">解決策</a>らしきものを見つけたのだがどうもhookを実行してくれていない。何故なのか深く追いかけていないので謎。ange-ftpのコードを読む限りでは呼んでるっぽいんですがね…。しょうがないのでadviceを使ってやることにした。</p>

<h2>解決</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre>;;;                                                                                                                                    
;;; TRAMP関連の設定                                                                                                                    
;;;                                                                                                                                    
(setq ange-ftp-try-passive-mode t)      ; 必ずpassive modeに                                                                           
(when (equal system-type &#39;darwin)       ; Macのftpはextended passivemodeで酷いことになるのでそれをoffにする                            
  (defadvice ange-ftp-passive-mode (before ange-ftp-epsv4-off)
    (ange-ftp-raw-send-cmd proc &quot;epsv4 off&quot;))
  (ad-activate &#39;ange-ftp-passive-mode))
</pre></div></div>
<p>見ればわかるが、passive modeにするための関数 (<code>ange-ftp-passive-mode</code>) に引っかけている。なので<code>ange-ftp-try-passive-mode</code>や<code>ange-ftp-passive-host-alist</code>などを使ってpasive modeでやりとりするように設定しなければなりません。</p>

<h2>バージョン</h2>

<p>これはGnu Emacs 24.2.1とMac OS X 10.7.5 (Lion) での話です。でも多分他のバージョンでも起こると思います。</p>

<h2>参考文献</h2>

<ul>
<li><a href=\"http://www.kit.hi-ho.ne.jp/amist/\">idx</a> <code>add-hook</code>を使った解決策。でもうちのでは動かない。why?</li>
<li><a href=\"http://d.hatena.ne.jp/mir/20070622/p2\">Entering Extended Passive Modeで詰まった場合</a> </li>
<li><a href=\"http://d.hatena.ne.jp/obache/20071123/1195795599\">pkgsrc 関連のネットワークの設定</a> 最後の方にextended passive modde及びftpの初期化ファイル~/.netrcについての記述がある。ただしange-ftpは<code>macdef init</code>行以下を無視するので設定したとしても解決しない。</li>
</ul>
") (published nil "2012-11-14T22:51:56Z") (updated nil "2012-11-14T22:51:56Z") (author nil (name nil "hage@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/10577") (published nil "2012-11-08T15:46:23+09:00") (updated nil "2012-11-08T15:47:12+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d26f1c87fb8b88fd5b2b"))) (url nil "http://qiita.com/items/d26f1c87fb8b88fd5b2b") (title nil "Tclのflymake と org-modeの併用") (content ((type . "html")) "<p>tclのソースが含まれるorg-modeのテキストを、exportしようとするとflymake-get-file-name-mode-and-masksでエラーになります。<br>
エラー発生箇所はここ</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">flymake.el</span></div><div class=\"highlight\"><pre>(defun flymake-get-file-name-mode-and-masks (file-name)
  &quot;Return the corresponding entry from `flymake-allowed-file-name-masks&#39;.&quot;
  (unless (stringp file-name)
    (error &quot;Invalid file-name&quot;))
</pre>
</div>
</div>
<p>Emacsのトレースはこれ</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">*Backtrace*</span></div><div class=\"highlight\"><pre>Debugger entered--Lisp error: (error &quot;Invalid file-name&quot;)
  signal(error (&quot;Invalid file-name&quot;))
  error(&quot;Invalid file-name&quot;)
  (if (stringp file-name) nil (error &quot;Invalid file-name&quot;))
  (unless (stringp file-name) (error &quot;Invalid file-name&quot;))
  flymake-get-file-name-mode-and-masks(nil)
  (nth 0 (flymake-get-file-name-mode-and-masks file-name))
  (let* ((init-f ...)) init-f)
</pre>
</div>
</div>
<p>.emacsに以下のコード追加し、org-modeからtcl-modeが呼ばれた時はflymakeを無効にして対応しました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(defvar on-org-mode nil)
(defadvice org-export (around flymake-off activate)
    (setq on-org-mode t)
    ad-do-it
    (setq on-org-mode nil))

; org-modeから呼ばれていないときのみflymakeを有効にする。
(add-hook &#39;tcl-mode-hook
      (lambda ()
        (unless on-org-mode
          (flymake-mode t))))
</pre>
</div>
</div>") (published nil "2012-11-08T15:46:23Z") (updated nil "2012-11-08T15:47:12Z") (author nil (name nil "natsutan"))) (entry nil (id nil "tag:qiita.com,2005:Item/10557") (published nil "2012-11-07T19:02:32+09:00") (updated nil "2012-11-07T19:02:32+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/00f679a5771604c4feb1"))) (url nil "http://qiita.com/items/00f679a5771604c4feb1") (title nil "リージョンを複数選択して同時にリアルタイム編集出来る mark-multiple.el") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/abd1016bf484c4e05ab1\">昨日のexpand-region</a> に引き続き、これもいいです。</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/syohex/20120206/1328540927\">mark-multiple.elの mark-more-like-thisの紹介 - Life is very short</a> </li>
</ul>

<p>まずは <a href=\"http://emacsrocks.com/e08.html\">動画</a> をどうぞ。特にすごいのは20秒～30秒の辺り！</p>

<h2>インストール</h2>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120613/1339607400\">package.el</a> に入っていたのでそっちを使いました。</p>

<p><code>M-x package-list-packages</code> で <code>mark-multiple</code> にカーソルを合わせてEnter</p>

<h2>設定</h2>

<p>基本はデフォルト設定のままですが、<code>rename-sgml-tag</code>をhtml-modeで使えるようにしています。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>;; mark-multiple
(require &#39;inline-string-rectangle)
(global-set-key (kbd &quot;C-x r t&quot;) &#39;inline-string-rectangle)

(require &#39;mark-more-like-this)
(global-set-key (kbd &quot;C-&lt;&quot;) &#39;mark-previous-like-this)
(global-set-key (kbd &quot;C-&gt;&quot;) &#39;mark-next-like-this)
;; (global-set-key (kbd &quot;C-M-m&quot;) &#39;mark-more-like-this) ; like the other two, but takes an argument (negative is previous)
(global-set-key (kbd &quot;C-*&quot;) &#39;mark-all-like-this)

;; (add-hook &#39;sgml-mode-hook
;;           (lambda ()
;;             (require &#39;rename-sgml-tag)
;;             (define-key sgml-mode-map (kbd &quot;C-c C-r&quot;) &#39;rename-sgml-tag)))
(add-hook &#39;html-mode-hook
          (lambda ()
            (require &#39;rename-sgml-tag)
            (define-key html-mode-map (kbd &quot;C-c C-r&quot;) &#39;rename-sgml-tag)))
</pre>
</div>
</div>
<h2>リンク</h2>

<ul>
<li><a href=\"https://github.com/magnars/mark-multiple.el\">magnars/mark-multiple.el</a>  - 本家</li>
</ul>
") (published nil "2012-11-07T19:02:32Z") (updated nil "2012-11-07T19:02:32Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/10516") (published nil "2012-11-06T17:58:27+09:00") (updated nil "2012-11-12T18:40:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/abd1016bf484c4e05ab1"))) (url nil "http://qiita.com/items/abd1016bf484c4e05ab1") (title nil "Emacsで選択範囲をインタラクティブに広げる expand-region") (content ((type . "html")) "<p>久しぶりにいいelispに出会いました。</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/syohex/20120117/1326814127\">expand-region.elの紹介 - Life is very short</a> </li>
</ul>

<h2>インストール</h2>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120613/1339607400\">package.el</a> に入っていたのでそっちを使いました。</p>

<p><code>M-x package-list-packages</code> で <code>expand-region</code> にカーソルを合わせてEnter</p>

<h2>設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>;; expand-region
(require &#39;expand-region)
(global-set-key (kbd &quot;C-@&quot;) &#39;er/expand-region)
(global-set-key (kbd &quot;C-M-@&quot;) &#39;er/contract-region)
</pre>
</div>
</div>
<h2>リンク</h2>

<ul>
<li><a href=\"https://github.com/magnars/expand-region.el\">magnars/expand-region.el</a> - 本家</li>
<li><a href=\"http://emacsrocks.com/e09.html\">Episode 09: expand-region - Emacs Rocks!</a> - 動画</li>
</ul>

<h2>あわせてどうぞ</h2>

<ul>
<li><a href=\"http://qiita.com/items/00f679a5771604c4feb1\">リージョンを複数選択して同時にリアルタイム編集出来る mark-multiple.e</a> </li>
</ul>
") (published nil "2012-11-06T17:58:27Z") (updated nil "2012-11-12T18:40:13Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/10492") (published nil "2012-11-05T15:03:57+09:00") (updated nil "2012-11-07T00:31:41+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f0db094fde6640143f42"))) (url nil "http://qiita.com/items/f0db094fde6640143f42") (title nil "OS XのEmacs.appで${HOME}配下にインストールしたMewを動かす") (content ((type . "html")) "<p>そもそもOS XでEmacs.appをインストールしているのにMewを${HOME}配下にインストールしないといけない理由がわからないという人もいるかもしれませんが、Emacs.appにmewを混ぜたくないがあまり適当なディレクトリがない、というわけで、私はHomebrewでインストールしたEmacs.appと${HOME}に野良ビルドしたMewという組み合わせでメールを読み書きしています（会社でのみ）。</p>

<p>ところで、何も考えずにこの組み合わせでMewを使うと、~/bin配下にインストールしたバイナリを呼び出す必要があるときに「mewl: command not found」などのエラーに遭遇してしまうことがあります。これは、launchdから引き継いだPATHをEmacs.appが（事実上）そのまま使ってしまうためです。</p>

<p>（Emacs.appはbash等を経由して起動されるわけではないため、PATHを変更できるよいタイミングがありません。/etc/launchd.confを修正しても目的は達成できるのですが、/etc/launchd.confのsetenv PATH行に${HOME}配下のパスを書き加えるのは抵抗がありますので、私はこの方法を採用しませんでした。なお、launchdは${HOME}/.launchd.confを読みません）</p>

<p>つまり問題は「Emacsにコマンドサーチパスを追加するにはどうしたらよいか」なのですが、<br>
この問題を解決するには、~/.emacs.d/init.el等に以下のコードを入れるのがよいようです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-directory-p</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"s\">&quot;~/bin&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"k\">progn</span> 
      <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;exec-path</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"s\">&quot;~/bin&quot;</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">exec-path</span> <span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"p\">(</span><span class=\"nv\">cdr-safe</span> <span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"nv\">exec-path</span><span class=\"p\">)))))</span>
        <span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;PATH&quot;</span> <span class=\"p\">(</span><span class=\"nv\">mapconcat</span> <span class=\"ss\">&#39;identity</span> <span class=\"nv\">exec-path</span> <span class=\"nv\">path-separator</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>関数add-to-listは第1引数（ここではexec-path。関数実行前に展開されないようquoteし、シンボルとしておく）の要素に第2引数（ここでは&quot;~/bin&quot;をexpand-file-nameしたもの）がない場合に限り第1引数のリストに第2引数を追加するという挙動を示します。</p>

<p>exec-pathに${HOME}/binが追加されたら、Emacs.Appの子プロセスからも使えるように環境変数PATHをexec-pathに合わせます（exec-pathはもともとPATHの値をもとに設定されます）。それがsetenv行で、setenvの第2引数に対しexec-pathを「:」でmapconcatした結果を返しますが、mapconcatそれ自体は関数に対して引数を渡す関数なので、引数をそのまま返すだけの関数であるidentifyを介すことでsetenvを成立させています。</p>

<p>（2012年11月6日修正）exec-pathをそのまま使うとEmacsのlibexecディレクトリ（HomebrewでEmacs 24.1を入れたOS X 10.8の場合は/usr/local/Cellar/emacs/24.1/libexec/emacs/24.1/x86_64-apple-darwin12.2.0）もPATHに含まれてしまうため、letで束縛したexec-pathをreverseで一旦逆さにしてから最初の要素だけを排除（cdr）し、再度reverseすることで順序をもとに戻したものを設定し、PATHの生成に利用しています。また、path-separatorを使いました。</p>
") (published nil "2012-11-05T15:03:57Z") (updated nil "2012-11-07T00:31:41Z") (author nil (name nil "h12o"))) (entry nil (id nil "tag:qiita.com,2005:Item/10455") (published nil "2012-11-03T02:09:09+09:00") (updated nil "2012-11-04T00:06:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/548be51137e5fecad68a"))) (url nil "http://qiita.com/items/548be51137e5fecad68a") (title nil "Emacsで、node.jsのrequire()にカーソルがあるとき、定義元へ飛ぶ (ffap)") (content ((type . "html")) "<p>node.jsには、require.resolve という、ライブラリのパスを返す関数があるので、<br>
Emacsから使うと便利。</p>

<p>Emacsに標準で入っているffap.el は、カーソル位置の文字からファイルを探して開くためのAPIを提供していて、簡単に設定できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ffap-nodejs</span> <span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
   <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;node -e &#39;try { require(\\&quot;util\\&quot;).print(require.resolve(\\&quot;%s\\&quot;)) } catch(e) {}&#39;&quot;</span>
           <span class=\"nv\">name</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;ffap-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">js3-mode</span> <span class=\"o\">.</span> <span class=\"nv\">ffap-nodejs</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-11-03T02:09:09Z") (updated nil "2012-11-04T00:06:15Z") (author nil (name nil "hadashiA"))) (entry nil (id nil "tag:qiita.com,2005:Item/10346") (published nil "2012-10-29T03:06:11+09:00") (updated nil "2012-10-29T03:12:52+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d8e0f9133d73e4f42de8"))) (url nil "http://qiita.com/items/d8e0f9133d73e4f42de8") (title nil "smart-mode-line.elの設定いじったらphpファイル編集する時の動作がおかしくなった") (content ((type . "html")) "<p>[追記]<br>
やっぱり設定云々の前に、smart-mode-line使った時点で動作がおかしかったので、そもそも使うのやめた<br>
[追記終わり]</p>

<p>smart-mode-line.elのfile名を表示する長さとmodeを表示する長さを↓のようにいじった。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(custom-set-variables
略
 &#39;(sml/mode-width 30)
 &#39;(sml/name-width 70))
</pre>
</div>
</div>
<p>そしたらphpファイル編集する時の動作がおかしくなって、とても使い物にならなくなったので戻した。<br>
phpファイル編集する時のどれかのmodeとバッティングしてるんだと思う。それ調べる気力はないので、この部分をコメントアウトして放置。<br>
この設定が原因だと突き止めるだけで大分時間食った。。。</p>
") (published nil "2012-10-29T03:06:11Z") (updated nil "2012-10-29T03:12:52Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/10318") (published nil "2012-10-27T13:56:33+09:00") (updated nil "2012-10-27T13:58:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c314dfee1e9b10cb39a9"))) (url nil "http://qiita.com/items/c314dfee1e9b10cb39a9") (title nil "jojo-modeのセリフ「次にお前は「xx」という！」のひな形") (content ((type . "html")) "<p>.emacsなど設定ファイルに以下を追加</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">twittering-jojo-tweet</span></div><div class=\"highlight\"><pre>(defun twittering-jojo-tweet (msg)
  (interactive &quot;s相手が言うセリフ: &quot;)
  (when (and (string= &quot;Japanese&quot; current-language-environment)
             (or (&lt; 21 emacs-major-version)
                 (eq &#39;utf-8 (terminal-coding-system))))
    (let ((text
           (concat
            (concat
             (concat
              &quot;お前は次に「&quot;) msg &quot;」という！&quot;))))
    (twittering-call-api &#39;update-status `((status . ,text))))))
</pre>
</div>
</div>
<p>あとは</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(let km twittering-mode-map
  (define-key km (kbd &quot;\\C-c j&quot;) &#39;twittering-jojo-tweet)
  nil)
</pre>
</div>
</div>
<p>と設定しておけば来る2部TLに備えられる。</p>
") (published nil "2012-10-27T13:56:33Z") (updated nil "2012-10-27T13:58:15Z") (author nil (name nil "akihumi@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/10269") (published nil "2012-10-25T00:53:22+09:00") (updated nil "2012-10-25T05:33:44+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/114ffe6bb645551268dd"))) (url nil "http://qiita.com/items/114ffe6bb645551268dd") (title nil "Emacsの分割ウィンドウを←↓↑→で移動") (content ((type . "html")) "<p>Emacs では <code>C-x 2</code> や <code>C-x 3</code> で画面を複数のウィンドウに分割することができ、これらの間は <code>C-x o</code> でトグルして移動することができます。しかし、みっつ以上に分割した場合には <code>C-x o</code> といふ2ストロークのキーバインドを連打する必要があり、戻りたいときにも標準では <code>C-u C-x o</code> も利かない不親切仕様です。</p>

<p>ところで、 <code>tmux</code> といふターミナルマルチプレクサ (GNU Screen のご同類です) には、複数の分割した領域を <code>C-b [←↓↑→]</code> で移動できる設定が標準であります。これを拝借してきませう。</p>

<p>Emacs には標準で <code>windmove</code> といふ機能が標準で含まれてゐます。 <code>M-x windmove</code> と押すと、特に設定してなくとも <code>windmove-{left,down,up,right}</code> 函数がご利用いただけることが確認できると思ひます。これがまさに <code>tmux</code> の移動と同様のものですので、ここにキーバインドを設定してやれば良さげですね。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">keybindings-windmove.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;left&gt;&quot;</span><span class=\"p\">)</span>  <span class=\"ss\">&#39;windmove-left</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;down&gt;&quot;</span><span class=\"p\">)</span>  <span class=\"ss\">&#39;windmove-down</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;up&gt;&quot;</span><span class=\"p\">)</span>    <span class=\"ss\">&#39;windmove-up</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;right&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;windmove-right</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>できましたー。</p>

<p>しかし…</p>

<p><a href=\"http://www.emacswiki.org/emacs/WindMove\">EmacsWiki: Wind Move</a></p>

<p>あれっ、まったく同じことやってた…</p>

<p>ちなみに最初はプレフィックス <code>C-c</code> じゃなくて <code>C-x</code> でやってましたが、最近ちょっと使ひ始めてみた <a href=\"http://www.emacswiki.org/emacs/BackButton\">EmacsWiki: Back Button</a> の標準キーバインドと衝突してたので、晴れて EmacsWiki 版と同じに戻ってしまひましたとさ。ちゃんちゃん。</p>
") (published nil "2012-10-25T00:53:22Z") (updated nil "2012-10-25T05:33:44Z") (author nil (name nil "tadsan"))) (entry nil (id nil "tag:qiita.com,2005:Item/10144") (published nil "2012-10-19T23:41:58+09:00") (updated nil "2012-10-19T23:42:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d2fb36414d39dd5c5b3a"))) (url nil "http://qiita.com/items/d2fb36414d39dd5c5b3a") (title nil "Emacs cc-mode系便利キーバインドメモ") (content ((type . "html")) "<p>cc-mode系からはなれるとすぐ忘れてしまうのでメモ</p>

<p>M-C-a : beginning-of-defun  : 関数定義の先頭へ<br>
M-C-e : end-of-defun          : 関数定義の終わりへ<br>
M-C-p : backward-list          : 直前の開きカッコへ<br>
M-C-n : forward-list            : 直後の閉じカッコへ<br>
M-C-b : backward-sexp       : 直前のトークンへ<br>
M-C-f : forward-sexp          : 直後のトークンへ<br>
M-C-u : backward-up-list     : ネストから出る<br>
M-C-d : down-list                : ネストに入る</p>

<p>MはMetaキー、CはCtrlキー。</p>

<p>他、便利な情報<br>
<a href=\"http://www.jitu.org/%7Etko/doc-jp/cc-mode.html\">http://www.jitu.org/~tko/doc-jp/cc-mode.html</a></p>
") (published nil "2012-10-19T23:41:58Z") (updated nil "2012-10-19T23:42:49Z") (author nil (name nil "10nin@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/10136") (published nil "2012-10-19T20:53:33+09:00") (updated nil "2012-10-19T21:02:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/25127dc1e5872e963ec1"))) (url nil "http://qiita.com/items/25127dc1e5872e963ec1") (title nil "Qiita-mode.el 作りました ") (content ((type . "html")) "<p>gongoさんに先を越されてしまいましたが、一応公開します。<br>
<a href=\"https://github.com/uk-ar/qiita-mode\">https://github.com/uk-ar/qiita-mode</a></p>

<h1>これは何か</h1>

<p>Emacs から qiita を操作出来ます。</p>

<h1>使い方</h1>

<h2>投稿</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-post-buffer
</pre>
</div>
</div>
<p>で現在開いているバッファを qiita に投稿します。<br>
* 先頭行がタイトル<br>
* 先頭行のなかで#を使用してタグを指定する<br>
* 2行目以降のテキストが本文<br>
になります。</p>

<p>例を出すと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Qiita-mode.el 作りました #qiita #markdown
https://github.com/uk-ar/qiita-mode

# これは何か
...
</pre>
</div>
</div>
<p>のようになります。</p>

<p>初回投稿時に記事のidがコメントとして埋め込まれるので、再度編集後に</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-post-buffer
</pre>
</div>
</div>
<p>とすることで更新ができます。</p>

<h2>一覧</h2>

<p>anything.elのインストールした環境では</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-my-items
</pre>
</div>
</div>
<p>で自分の記事一覧</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-all-items
</pre>
</div>
</div>
<p>ですべての記事一覧</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-tags-items emacs
</pre>
</div>
</div>
<p>でemacsのタグがついた記事一覧が取れます。</p>

<h3>回覧</h3>

<p>一覧でエンターを押すとデフォルトブラウザで記事を開きます。</p>

<h3>削除</h3>

<p>未実装です。</p>

<h1>今後の予定</h1>

<p>実用性を考えると投稿や一覧も非同期にしたいところです。<br>
が、deferred.elを使おうとするとcurlを直に呼び出すのではなくurl-retrieve互換の層が欲しくなります。<br>
モチベーションが続けば、そのあたりをがんばろうと思います。</p>

<p>&lt;!--<br>
Local Variables:<br>
qiita-file-uuid: &quot;25127dc1e5872e963ec1&quot;<br>
End:<br>
--&gt;</p>
") (published nil "2012-10-19T20:53:33Z") (updated nil "2012-10-19T21:02:39Z") (author nil (name nil "uk_ar"))) (entry nil (id nil "tag:qiita.com,2005:Item/10019") (published nil "2012-10-17T02:41:52+09:00") (updated nil "2012-10-28T01:23:20+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/16ddb32870459cb0d405"))) (url nil "http://qiita.com/items/16ddb32870459cb0d405") (title nil "Emacsと色設定と$TERM") (content ((type . "html")) "<p>Emacsの色設定には環境変数の$TERMが関係してくる。僕は普段solarizedを使っているが、環境変数の$TERMが違うと、色も全然変わってくる。しかも、$TERMによって、色が256色使えたり、5色しか使えなかったりする。<br>
で、よく色んなサイトで紹介されるEmacsで256色使うためにTERMに設定する値として、xterm-256colorとかscreen-256colorというのがある。なんだけど、この2つに設定すると本来の色にならない。</p>

<p>本来のsolarized<br>
<img src=\"http://ethanschoonover.com/solarized/img/solarized-vim.png\" alt=\"本来のsolarized\" title=\"本来のsolarized\"><br>
$TERM=xterm-256colorのsolarized<br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/takc923/20121021/20121021020322.png\" alt=\"$TERM=xterm-256colorのsolarized\" title=\"$TERM=xterm-256colorのsolarized\"></p>

<p>$TERMをxtermにしたら、256色は使えないが本来の色になるので、そうやって我慢していた。<br>
で、さっき256色使って自分の好みな色を使う設定を見つけた。それは<code>TERM=xterm-256color</code>の環境下で、Emacsを<code>env xterm emacs</code>で起動するという方法。<br>
正直なんでこうすれば色が変わるのか分からんけど、これで色々捗りそう。</p>

<p>ちなみにaliasは本当は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>alias emacsd=&#39;env TERM=xterm emacs --daemon&#39;
alias emacs=&#39;emacsclient -t&#39;
</pre>
</div>
</div>
<p>としている。</p>
") (published nil "2012-10-17T02:41:52Z") (updated nil "2012-10-28T01:23:20Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/9888") (published nil "2012-10-13T13:30:19+09:00") (updated nil "2012-10-14T21:10:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4b0c5b71b49c6000d2e2"))) (url nil "http://qiita.com/items/4b0c5b71b49c6000d2e2") (title nil "Qiita.el 作りました!!") (content ((type . "html")) "<p><a href=\"https://github.com/gongo/qiita-el\">https://github.com/gongo/qiita-el</a></p>

<h2>これは何か</h2>

<p>emacs から qiita を操作出来ます</p>

<h2>必要なもの</h2>

<ul>
<li>Emacs

<ul>
<li>24.2 でしかテストしていませんが、きっと 24 系なら大丈夫。23 はどうだろう。</li>
</ul></li>
<li>Emacs lisp

<ul>
<li><a href=\"https://github.com/emacs-helm/helm\">helm</a></li>
<li><a href=\"https://github.com/defunkt/markdown-mode\">markdown-mode</a></li>
<li>いずれも、最近流行りの package.el や el-get、auto-install でどうにかなります</li>
</ul></li>
</ul>

<h2>使い方</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(require &#39;qiita)
(setq qiita-&gt;token &quot;xxxxxxxxxxx&quot;)
</pre>
</div>
</div>
<p>token は無くても動く機能はあります(一覧表示とか)。もちろん投稿や更新、削除では必須です。</p>

<h3>投稿記事一覧(新着順)</h3>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita:items
</pre>
</div>
</div>
<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-items.jpg\" alt=\"\"></p>

<p>アイテムを選択して Enter を押すと、ブラウザでその記事が表示されます。</p>

<h3>自身の投稿記事一覧(新着順)</h3>
<div class=\"code-frame\"><div class=\"highlight\"><pre>C-u M-x qiita:items
</pre>
</div>
</div>
<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-my-items.jpg\" alt=\"\"></p>

<p>この状態で TAB を押すと、ブラウザを開く以外に、選択した記事を削除できるアクションが確認できます。</p>

<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-my-items-actions.jpg\" alt=\"\"></p>

<p>Delete を選択して Enter を押すと、その記事を削除できます(y-or-n 確認あり)</p>

<h3>投稿</h3>

<p>現在開いているバッファ上で</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita:post
</pre>
</div>
</div>
<p>と実行すると <strong>限定共有モード</strong> で投稿されます。<br>
公開モードで投稿する場合は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>C-u M-x qiita:post
</pre>
</div>
</div>
<p>と実行します。</p>

<h4>投稿記事のルールについて</h4>

<ol>
<li>開いているバッファの中で header-1 の記法 (# hoge とか ====== が下線の文字列) の箇所を、記事のタイトルとして認識します(その箇所は本文には入りません)</li>
<li><code>&lt;!-- tags hoge,fuga --&gt;</code> とすると、その記事のタグとして登録されます。</li>
</ol>

<p>どちらも</p>

<ul>
<li>必須項目(無いとエラー)</li>
<li>文書中で最初に現れたのを取得する(2回目以降の header-1 や tags はそのまま本文に残ります)</li>
</ul>

<p>というわけで markdown 例です</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>qiita-el テスト投稿
====================

みなさまお疲れ様です。

&lt;!-- tags Emacs,Ruby --&gt;

[gongo/qiita-el · GitHub](https://github.com/gongo/qiita-el)

- List1
- List2
- List3

1. hoge
    1. hoge1
2. fuga
    1. fuga2
3. hago
    1. hago1
    1. hago2
    1. hago3

```c
#include &lt;stdio.h&gt;

int main(void)
{
    printf(&quot;Hello, World!!&quot;);
}
```

```ruby
p &#39;Hello, Wo\\&#39;rld!&#39;
```

&gt; 1
&gt; 2
&gt; 3
</pre>
</div>
</div>
<p>これを投稿すると、 <a href=\"http://qiita.com/items/ee796188dc4945769282\">http://qiita.com/items/ee796188dc4945769282</a> のようになります。</p>

<h3>更新</h3>

<p>更新も同じく <code>M-x qiita:post</code> (<code>C-u M-x qiita:post</code> ) を使用します。<br>
本文中に<code>&lt;!-- uuid xxxxxxxx --&gt;</code> が存在する場合、その記事 <code>http://qiita.com/items/xxxxxxxx</code> に対する <code>更新</code> と見なされます。</p>

<p>先程の文書を例にすると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>みなさまお疲れ様です。

&lt;!-- tags Emacs,Ruby --&gt;
&lt;!-- uuid ee796188dc4945769282 --&gt;
</pre>
</div>
</div>
<p>という感じで uuid を埋めこみます。</p>

<h2>まとめ</h2>

<ul>
<li><a href=\"https://github.com/gongo/qiita-el/issues\">https://github.com/gongo/qiita-el/issues</a>

<ul>
<li>まだ実装してない、実装する予定の API 一覧</li>
<li>何か要望があれば ↑ に登録お願いします</li>
</ul></li>
</ul>
") (published nil "2012-10-13T13:30:19Z") (updated nil "2012-10-14T21:10:17Z") (author nil (name nil "gongo@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/9877") (published nil "2012-10-13T08:40:48+09:00") (updated nil "2012-10-13T12:24:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ebb63c695e194efb6da8"))) (url nil "http://qiita.com/items/ebb63c695e194efb6da8") (title nil "APIのテスト ") (content ((type . "html")) "<h1>hoge</h1>

<p>新規<br>
更新<br>
2回目の更新<br>
3回目の更新<br>
4回目の更新<br>
5回目の更新<br>
6回目の更新<br>
ファイルからuuidの読み込み<br>
uuidのコメントアウト<br>
markdownのコメントアウト<br>
OK?dayo</p>

<p>&lt;!--<br>
Local Variables:<br>
qiita-file-uuid: &quot;ebb63c695e194efb6da8&quot;<br>
End:<br>
 --&gt;</p>
") (published nil "2012-10-13T08:40:48Z") (updated nil "2012-10-13T12:24:59Z") (author nil (name nil "uk_ar"))) (entry nil (id nil "tag:qiita.com,2005:Item/9875") (published nil "2012-10-13T08:23:27+09:00") (updated nil "2012-10-13T08:23:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4e57a712c71512bc4a2b"))) (url nil "http://qiita.com/items/4e57a712c71512bc4a2b") (title nil "APIのテスト ") (content ((type . "html")) "<h1>hoge</h1>
") (published nil "2012-10-13T08:23:27Z") (updated nil "2012-10-13T08:23:27Z") (author nil (name nil "uk_ar"))) (entry nil (id nil "tag:qiita.com,2005:Item/9826") (published nil "2012-10-12T18:21:12+09:00") (updated nil "2012-10-13T13:35:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ee796188dc4945769282"))) (url nil "http://qiita.com/items/ee796188dc4945769282") (title nil "qiita-el テスト投稿") (content ((type . "html")) "<p>みなさまお疲れ様です。</p>

<p><a href=\"https://github.com/gongo/qiita-el\">gongo/qiita-el · GitHub</a></p>

<ul>
<li>List1</li>
<li>List2</li>
<li>List3</li>
</ul>

<ol>
<li>hoge

<ol>
<li>hoge1</li>
</ol></li>
<li>fuga

<ol>
<li>fuga2</li>
</ol></li>
<li>hago

<ol>
<li>hago1</li>
<li>hago2</li>
<li>hago3</li>
</ol></li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">C</span></div><div class=\"highlight\"><pre><span class=\"cp\">#include &lt;stdio.h&gt;</span>

<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>
<span class=\"p\">{</span>
    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello, World!!&quot;</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"nb\">p</span> <span class=\"s1\">&#39;Hello, Wo\\&#39;rld!&#39;</span>
</pre>
</div>
</div>
<blockquote>
<p>1<br>
2<br>
3</p>
</blockquote>
") (published nil "2012-10-12T18:21:12Z") (updated nil "2012-10-13T13:35:29Z") (author nil (name nil "gongo@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/9634") (published nil "2012-10-07T16:42:29+09:00") (updated nil "2012-10-07T16:42:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ea37f18a8aeb86bd6f9b"))) (url nil "http://qiita.com/items/ea37f18a8aeb86bd6f9b") (title nil "yasnippet 0.8.0 (beta) で C-i が効かない場合の対処方法") (content ((type . "html")) "<p>0.6.x から 0.8.0 (beta) に上げたら ruby-mode や org-mode と干渉して C-i が効かなくなっていて、ぐぐるとadviceでラップする方法などが上げられていましたが、<code>&lt;tab&gt;</code> を <code>TAB</code> に変更して、<code>(setq yas-trigger-key &quot;TAB&quot;)</code> としたら C-i が効くようになりました。</p>
") (published nil "2012-10-07T16:42:29Z") (updated nil "2012-10-07T16:42:29Z") (author nil (name nil "akicho8"))) (entry nil (id nil "tag:qiita.com,2005:Item/9614") (published nil "2012-10-06T18:23:13+09:00") (updated nil "2012-10-06T18:23:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/bc7c4cbecd6e12b9973c"))) (url nil "http://qiita.com/items/bc7c4cbecd6e12b9973c") (title nil "mcompleteとhelmがバッティングして使いづらいことこの上なかったのでmcomplete消した") (content ((type . "html")) "<p>タイトル通り。<br>
もうちょっと経緯を書くと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">customize</span><span class=\"o\">-</span><span class=\"n\">group</span>
</pre>
</div>
</div>
<p>してgroupを選ぶ時、helmとmcompleteがどっちも動いて、helmの候補が表示されるのにC-n,pするとmcompleteが反応してhelmの候補を選べなかったので、mcompleteを消した。</p>

<p>mcompleteなんかいらんかったんや！</p>

<p>mcompleteに知らない人用 → <a href=\"http://www.bookshelf.jp/soft/meadow_27.html#SEC339\">http://www.bookshelf.jp/soft/meadow_27.html#SEC339</a></p>
") (published nil "2012-10-06T18:23:13Z") (updated nil "2012-10-06T18:23:13Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/9562") (published nil "2012-10-04T13:40:21+09:00") (updated nil "2012-10-06T16:20:57+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b5a8291dffc5a53fa695"))) (url nil "http://qiita.com/items/b5a8291dffc5a53fa695") (title nil "packageをupdateしたあとに古いパッケージを見に行ってエラーになる問題の対処") (content ((type . "html")) "<p>Emacsで</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">list</span><span class=\"o\">-</span><span class=\"n\">packages</span>
</pre>
</div>
</div>
<p>して、<code>U</code>押したらパッケージの更新があったか確認してくれます。で、更新があったら<code>x</code>で更新を実行してくれます。<br>
このあと、更新されたパッケージに関連したfunctionを使おうとすると古いパッケージを見に行ってエラーが出ることがあるみたいです。<br>
こういう時は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span>
</pre>
</div>
</div>
<p>したら直る。</p>
") (published nil "2012-10-04T13:40:21Z") (updated nil "2012-10-06T16:20:57Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/9479") (published nil "2012-09-29T19:12:20+09:00") (updated nil "2012-10-02T13:31:34+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/69376945f20da77c34fa"))) (url nil "http://qiita.com/items/69376945f20da77c34fa") (title nil "anythingから、ローカルにあるrubygemsのファイル開く。bundlerも対応") (content ((type . "html")) "<p>以下を評価して、<br>
M-x anything-local-gems<br>
すると、インストールされているgemの一覧が出るので、選択すると、 そのgemのlib/を開く。</p>

<p>また、カレントバッファの祖先ディレクトリにGemfileがみつかった場合、bundlerで管理されている方のgemが選択されまうす。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-sources-local-gem-file</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;rubygems&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
              <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">gemfile-dir</span> <span class=\"p\">(</span><span class=\"k\">block</span> <span class=\"ss\">&#39;find-gemfile</span>
                                   <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">cur-dir</span> <span class=\"p\">(</span><span class=\"nv\">file-name-directory</span>
                                                    <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">)</span>
                                                                          <span class=\"nv\">default-directory</span><span class=\"p\">))))</span>
                                          <span class=\"p\">(</span><span class=\"nv\">cnt</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
                                     <span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cnt</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"mi\">1</span> <span class=\"nv\">cnt</span><span class=\"p\">))</span> <span class=\"mi\">10</span><span class=\"p\">)</span>
                                                 <span class=\"p\">(</span><span class=\"nb\">not</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">cur-dir</span> <span class=\"s\">&quot;/&quot;</span><span class=\"p\">)))</span>
                                       <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">member</span> <span class=\"s\">&quot;Gemfile&quot;</span> <span class=\"p\">(</span><span class=\"nv\">directory-files</span> <span class=\"nv\">cur-dir</span><span class=\"p\">))</span>
                                         <span class=\"p\">(</span><span class=\"k\">return-from</span> <span class=\"ss\">&#39;find-gemfile</span> <span class=\"nv\">cur-dir</span><span class=\"p\">))</span>
                                       <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cur-dir</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">cur-dir</span> <span class=\"s\">&quot;/..&quot;</span><span class=\"p\">))))</span>
                                     <span class=\"p\">))))</span>
                <span class=\"p\">(</span><span class=\"nv\">anything-attrset</span> <span class=\"ss\">&#39;gem-command</span>
                                  <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nv\">gemfile-dir</span>
                                              <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;BUNDLE_GEMFILE=&quot;</span> <span class=\"nv\">gemfile-dir</span> <span class=\"s\">&quot;/Gemfile &quot;</span>
                                                      <span class=\"s\">&quot;bundle exec &quot;</span><span class=\"p\">)</span>
                                            <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
                                          <span class=\"s\">&quot;gem 2&gt;/dev/null&quot;</span><span class=\"p\">))</span>
                <span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">)</span>
                  <span class=\"p\">(</span><span class=\"nv\">call-process-shell-command</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">anything-attr</span> <span class=\"ss\">&#39;gem-command</span><span class=\"p\">)</span> <span class=\"s\">&quot; list&quot;</span><span class=\"p\">)</span>
                                              <span class=\"no\">nil</span>
                                              <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">&#39;local</span><span class=\"p\">))))))</span>
    <span class=\"p\">(</span><span class=\"nv\">action</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">gem-name</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">file-name-directory</span>
                             <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
                              <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">anything-attr</span> <span class=\"ss\">&#39;gem-command</span><span class=\"p\">)</span> <span class=\"s\">&quot; which &quot;</span>
                                      <span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"s\">&quot;\\s+(.+)$&quot;</span> <span class=\"s\">&quot;&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">))))))</span>
                  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">path</span><span class=\"p\">))</span>
                      <span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
                    <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;no such file or directory: \\&quot;%s\\&quot;&quot;</span> <span class=\"nv\">path</span><span class=\"p\">))</span>
                  <span class=\"p\">)))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-local-gems</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span>
   <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">anything-c-sources-local-gem-file</span><span class=\"p\">)</span>
   <span class=\"s\">&quot;*anything local gems*&quot;</span>
  <span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-09-29T19:12:20Z") (updated nil "2012-10-02T13:31:34Z") (author nil (name nil "hadashiA"))) (entry nil (id nil "tag:qiita.com,2005:Item/9442") (published nil "2012-09-27T17:17:24+09:00") (updated nil "2012-09-27T17:17:24+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9ba5eb157e09463740f4"))) (url nil "http://qiita.com/items/9ba5eb157e09463740f4") (title nil "Emacsにzshの環境変数PATHを取り込む") (content ((type . "html")) "<p>Ruby や Python を <code>/usr/bin</code> や <code>/usr/local/bin</code> などのシステムディレクトリではなく、バージョンごとにホームディレクトリ内にインストールして環境変数 <code>PATH</code> を通して使用する、なんてひとも少なくはないですね。筆者も rbenv や Pythonz 、 nodebrew に頼りきりです。</p>

<p>ところで Ubuntu で GTK 版の Emacs をデスクトップのランチャーから起動すると、ユーザのログインシェルを <code>/bin/zsh</code> などに設定してても、 環境変数をちゃんと引き継いでくれません。これは困った！ 特に <code>/usr/bin/ruby</code> には何もありませんし。</p>

<p>Emacs から <code>term</code> などで、 <code>zsh</code> を起動する場合はその中で <code>.zshenv</code> を読んでくれるのでまた困らないんですけど、 Emacs のシェルと言ったら Eshell なので、こっちの <code>PATH</code> は確実に設定しておきたいところです。</p>

<p>あ、Zsh の <code>PATH</code> はちゃんと <code>.zshenv</code> とかに設定しといてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">set_path.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">zshpath</span> <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
         <span class=\"s\">&quot;/usr/bin/env zsh -c &#39;printenv PATH&#39;&quot;</span><span class=\"p\">))</span>
       <span class=\"p\">(</span><span class=\"nv\">pathlst</span> <span class=\"p\">(</span><span class=\"nv\">split-string</span> <span class=\"nv\">zshpath</span> <span class=\"s\">&quot;:&quot;</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">exec-path</span> <span class=\"nv\">pathlst</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">eshell-path-env</span> <span class=\"nv\">zshpath</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;PATH&quot;</span> <span class=\"nv\">zshpath</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これを評価すると</p>

<ol>
<li><code>zsh</code> を起動して、出力される <code>$PATH</code> を文字列として受け取る</li>
<li><strong>1</strong> で取得した <code>PATH</code> 環境変数を Emacs の環境にも設定する</li>
<li><code>PATH</code> は <code>:</code> 区切り形式の文字列なのでリストに変換する</li>
<li><strong>2</strong> のリストを Emacs の <code>exec-path</code> 、 <code>eshell-path-env</code> に設定する</li>
</ol>

<p>って流れで設定していきます。 </p>

<p>練習がてらにもうちょっと汎用性持たせて Windows のこともちょびっと考慮しつつ Emacs Lisp としてまとめてみるのも良いですかね。</p>
") (published nil "2012-09-27T17:17:24Z") (updated nil "2012-09-27T17:17:24Z") (author nil (name nil "tadsan"))) (entry nil (id nil "tag:qiita.com,2005:Item/9308") (published nil "2012-09-21T11:12:43+09:00") (updated nil "2012-09-21T11:12:43+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/68aaf54d557bc19d7051"))) (url nil "http://qiita.com/items/68aaf54d557bc19d7051") (title nil "start-process でプロセスの起動ディレクトリ(current directory)を変更する方法") (content ((type . "html")) "<p>default-directory に値を設定してからstart-processを呼び出す。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">run</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"p\">()</span> 
  <span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">directory</span> &quot;<span class=\"n\">c</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span> &quot;<span class=\"n\">dir</span>&quot; &quot;<span class=\"o\">*</span><span class=\"n\">dir</span><span class=\"o\">*</span>&quot; &quot;<span class=\"n\">dir</span>&quot;<span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"n\">run</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-09-21T11:12:43Z") (updated nil "2012-09-21T11:12:43Z") (author nil (name nil "natsutan"))) (entry nil (id nil "tag:qiita.com,2005:Item/9199") (published nil "2012-09-17T09:51:50+09:00") (updated nil "2012-09-17T14:22:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4d3a86a6ff91cf8d0de8"))) (url nil "http://qiita.com/items/4d3a86a6ff91cf8d0de8") (title nil "flymake のエラーを見やすくする") (content ((type . "html")) "<p><img src=\"http://24.media.tumblr.com/tumblr_magxpwfs7A1qz64n4o1_r2_1280.png\" alt=\"flymake のエラーメッセージを popup.el に表示してるスクリーンショット\"></p>

<p>↑こんな感じにする。</p>

<h2>導入方法</h2>

<ul>
<li><a href=\"https://gist.github.com/292827\">miyucy&#39;s gist: 292827 — Gist</a> </li>
</ul>

<p>これを、<code>.emacs</code> なり <code>init.el</code> にコピペ。</p>

<p>表示に使ってる <code>popup.el</code> は、<code>auto-complete.el</code> にも使われてる。なので、<code>auto-complete.el</code> 使ってる人は、上記 Gist の elisp 以外に導入するものないはず。</p>

<p>念の為 <code>(when (require &#39;popup nil t) ... )</code> で括ると良いかも。</p>

<h2>使い方</h2>

<p>スクリーンショットのように、赤いところにカーソル置いて少し待つと、黄色いツールチップでエラーメッセージでてくる。</p>

<h2>困ってる</h2>

<p>見づらいけど、スクリーンショットの右端見る通り、現在列ハイライトと相性悪い。</p>
") (published nil "2012-09-17T09:51:50Z") (updated nil "2012-09-17T14:22:35Z") (author nil (name nil "k_ui"))) (entry nil (id nil "tag:qiita.com,2005:Item/9193") (published nil "2012-09-16T23:27:22+09:00") (updated nil "2012-09-16T23:27:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4b489c0abbb39a5dcc45"))) (url nil "http://qiita.com/items/4b489c0abbb39a5dcc45") (title nil "Emacs の Commands History を再起動後も使用する") (content ((type . "html")) "<p>以下を .emacs に記述することで M-x のコマンド履歴を永続的に残すことができる。anything なんかを使っていると、Emacs Commands History が Emacs を再起動しても残るためちょっと便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">desktop-globals-to-save</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">extended-command-history</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">desktop-files-not-to-save</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">desktop-save-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>desktop-save-mode というものが Emacs で標準に付いているのだが、標準だと Commands History 以外の情報まで永続的に残してしまうので、上2行で他の情報を保存しないようにしている。desktop-save-mode ではバッファなども保存可能なので、詳しく知りたい人は <a href=\"http://www.emacswiki.org/DeskTop\">http://www.emacswiki.org/DeskTop</a> を読んでみるといいだろう。</p>
") (published nil "2012-09-16T23:27:22Z") (updated nil "2012-09-16T23:27:49Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/9167") (published nil "2012-09-15T01:16:31+09:00") (updated nil "2012-09-15T01:16:31+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7c0010bcf1c8e89aba6f"))) (url nil "http://qiita.com/items/7c0010bcf1c8e89aba6f") (title nil "filecacheを使って作業用ディレクトリのファイルにアクセスする") (content ((type . "html")) "<h2>filecache?</h2>

<p>filecacheとはemacsに標準で付いている使用頻度の高いファイルに簡単にアクセスする為の仕組みです。<br>
通常は特定のディレクトリ(~ とか ~/binとか)に限って使うものなのでディレクトリを再帰的に辿れません。</p>

<p>そこでこのfilecacheをディレクトリを再帰的に辿ってcacheを作る方法です。</p>

<h3>前提</h3>

<p>filecacheは指定されたディレクトリ内のファイル名をキャッシュする為、<br>
ディレクトリを大量に指定すると一気にディスクアクセスが増えます。<br>
その為、再帰的指定するディレクトリは、SSDなどの高速なディスク上にあることを前提にしています。</p>

<h3>作業用ディレクトリ?</h3>

<p>プロジェクトファイルとかgitとかsvnのworking copyとか<br>
ディレクトリが再帰的に一杯あるよね?</p>

<h2>概要</h2>

<p>以下の処理をinit.el内で実行する</p>

<ol>
<li>shellスクリプトで対象ディレクトリを再帰スキャン</li>
<li>スキャン結果からディレクトリ一覧のelファイルを作成</li>
<li>filecacheの対象リストに追加</li>
</ol>

<h2>設定</h2>

<h4>再帰スキャン用のshellスクリプト</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/filecachedir.sh</span></div><div class=\"highlight\"><pre><span class=\"c\">#!/bin/sh</span>

<span class=\"k\">function </span>abs_path<span class=\"o\">()</span> <span class=\"o\">{</span>
  <span class=\"nv\">d</span><span class=\"o\">=</span><span class=\"k\">$(</span>dirname <span class=\"nv\">$0</span><span class=\"k\">)</span>
  <span class=\"o\">(</span><span class=\"nb\">cd</span> <span class=\"nv\">$d</span>;<span class=\"nb\">pwd</span><span class=\"o\">)</span>
<span class=\"o\">}</span>

<span class=\"nv\">TARGET_DIR</span><span class=\"o\">=</span>~/work
<span class=\"nv\">EXCLUDE_DIR</span><span class=\"o\">=</span><span class=\"s2\">&quot;target log logs .git tmp mnt .settings document documents doc .svn *.bak&quot;</span>
<span class=\"nv\">OUTPUT</span><span class=\"o\">=</span><span class=\"s2\">&quot;$(basename $0 .sh).el&quot;</span>

<span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span>

<span class=\"k\">for </span>d in <span class=\"nv\">$EXCLUDE_DIR</span>; <span class=\"k\">do</span>
<span class=\"k\">  if</span> <span class=\"o\">[</span> -n <span class=\"s2\">&quot;$EXC&quot;</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">      </span><span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;$EXC -o -name $d&quot;</span>
  <span class=\"k\">else</span>
<span class=\"k\">      </span><span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;-name $d&quot;</span>
  <span class=\"k\">fi</span>
<span class=\"k\">done</span>

<span class=\"nb\">cd</span> <span class=\"k\">$(</span>abs_path<span class=\"k\">)</span>
<span class=\"o\">[</span> -r <span class=\"nv\">$OUTPUT</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> rm -f <span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"o\">{</span>,c<span class=\"o\">}</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot;(setq my-filedir&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot; &#39;(&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
find <span class=\"nv\">$TARGET_DIR</span> <span class=\"se\">\\(</span> <span class=\"nv\">$EXC</span> <span class=\"se\">\\)</span> -prune -o -path <span class=\"s2\">&quot;*/git/*&quot;</span> -type d -print0 <span class=\"se\">\\</span>
| perl -0 -ne <span class=\"s1\">&#39;chomp;print qq{ &quot;$_&quot;\\n}&#39;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot;))&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
</pre>
</div>
</div>
<p>$TARGET_DIR 以下をfindしてディレクトリ名を一覧<br>
my-filedirデータをセットするelファイルを作る<br>
対象外のファイル・フォルダは$EXCLUDE_DIRで指定する</p>

<h4>filecacheの設定</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;filecache</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">prg</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;filecachedir.sh&quot;</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">file-readable-p</span> <span class=\"nv\">prg</span><span class=\"p\">)</span>
    <span class=\"c1\">;; ディレクトリを追加</span>
    <span class=\"c1\">;; ディレクトリの更新は filecachedir.sh を使う</span>
    <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"nv\">prg</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">load-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;filecachedir.el&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nv\">file-cache-add-directory-list</span>
     <span class=\"nv\">my-filedir</span><span class=\"p\">)</span>
    <span class=\"p\">)</span>
  <span class=\"p\">)</span>
</pre>
</div>
</div>
<p>call-process で ~/.emacs.d/filecachedir.sh を呼び出す<br>
生成された~/.emacs.d/filecachedir.elを読み込んでfilecacheのディレクトリリストに追加する</p>

<h4>anythingの設定</h4>

<p>anythingもfilecacheに対応しているのでソースに足してあげる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
        <span class=\"o\">&#39;</span><span class=\"p\">(</span>
<span class=\"o\">...</span>
          <span class=\"nv\">anything-c-source-file-cache</span>
<span class=\"o\">...</span>
          <span class=\"p\">)</span>
        <span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-09-15T01:16:31Z") (updated nil "2012-09-15T01:16:31Z") (author nil (name nil "toshikiw"))) (entry nil (id nil "tag:qiita.com,2005:Item/9149") (published nil "2012-09-14T00:59:14+09:00") (updated nil "2012-11-05T19:11:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/dd4022725f3cab4537ae"))) (url nil "http://qiita.com/items/dd4022725f3cab4537ae") (title nil "(normal-top-level-add-subdirs-to-load-path)を使うときはdefault-directoryをletで束縛しておく必要がある") (content ((type . "html")) "<p>(normal-top-level-add-subdirs-to-load-path)を使うときはdefault-directoryをletで束縛しておく必要がある。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">major</span> <span class=\"nv\">name</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">major</span> <span class=\"p\">(</span><span class=\"nv\">number-to-string</span> <span class=\"nv\">emacs-major-version</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;emacs&quot;</span> <span class=\"nv\">major</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;~/share/&quot;</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">my-user-lisp-dir</span>
    <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">path</span> <span class=\"s\">&quot;/user-lisp&quot;</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-directory-p</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">progn</span>
        <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">))</span>
          <span class=\"p\">(</span><span class=\"nv\">normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>そうしないと何が起こるか。答えは「いまいるディレクトリ配下のすべてをload-pathに追加しようとする」。~/.emacs.d/init.elに書いてしまったらたぶん、Emacsが始まらなくなる。</p>
") (published nil "2012-09-14T00:59:14Z") (updated nil "2012-11-05T19:11:39Z") (author nil (name nil "h12o"))) (entry nil (id nil "tag:qiita.com,2005:Item/9088") (published nil "2012-09-12T01:41:54+09:00") (updated nil "2012-09-12T01:41:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/389430db19561307d037"))) (url nil "http://qiita.com/items/389430db19561307d037") (title nil "malabar-modeでjavaを書く") (content ((type . "html")) "<h2>設定する前に</h2>

<p>emacsでjavaを書くにはそれなりにjavaに習熟してる必要があると思う</p>

<h3>おすすめできない人</h3>

<ul>
<li>eclipseやnetbeansなどのインテリジェンスな補完がないとjavaを書けない人</li>
<li>javaのソースから継承ツリーが辿れない人</li>
<li>java se,java eeなどのコアなクラス群をいつ使えばいいのかぱっと出てこない人</li>
<li>プロジェクトで使用してるライブラリを把握できない人</li>
</ul>

<p>つまりIDEまかせでソースの大雑把なマッピングが脳内で出来てない人は今使ってるIDEを使いづづけた方がいいです。</p>

<h3>メリット</h3>

<ul>
<li>emacsからmavenが呼び出せる(eclipseもnetbeansも出来るけど)</li>
<li>IDEほど重くない</li>
</ul>

<p>あとなんだろう?<br>
コマンド併用でeclipseってエディタだよね? って言う人には向いてます。</p>

<h2>malabar-mode?</h2>

<p>malabar-mode はemacsに昔からあったjdeeの変りにemacsでjavaを書くモード<br>
jdeeはjdk5以降に対応してないので諦めた方がいいかも</p>

<h3>malabar-modeの導入</h3>

<p><a href=\"https://github.com/espenhw/malabar-mode\">配布元</a>を見るがあまりアクティブではないので<a href=\"https://github.com/buzztaiki/malabar-mode\">こっち</a>を使ってる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% git clone  https://github.com/buzztaiki/malabar-mode.git malabar-mode
% <span class=\"nb\">cd </span>malabar-mode
% vi pom.xml
</pre>
</div>
</div>
<p>emacsの設定を弄る<br>
私のはhomebrew使ってるので↓こうなってる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">XML</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;plugin&gt;</span>
 <span class=\"nt\">&lt;groupId&gt;</span>org.codehaus.mojo<span class=\"nt\">&lt;/groupId&gt;</span>
 <span class=\"nt\">&lt;artifactId&gt;</span>exec-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>
 <span class=\"nt\">&lt;version&gt;</span>1.1.1<span class=\"nt\">&lt;/version&gt;</span>
 <span class=\"nt\">&lt;executions&gt;</span>
  <span class=\"nt\">&lt;execution&gt;</span>
…
   <span class=\"nt\">&lt;configuration&gt;</span>
    <span class=\"nt\">&lt;executable&gt;</span>/usr/local/Cellar/emacs/23.4/Emacs.app/Contents/MacOS/Emacs<span class=\"nt\">&lt;/executable&gt;</span>…
…
   <span class=\"nt\">&lt;/configuration&gt;</span>
  <span class=\"nt\">&lt;/execution&gt;</span>
…
 <span class=\"nt\">&lt;/executions&gt;</span>
<span class=\"nt\">&lt;/plugin&gt;</span>
</pre>
</div>
</div>
<p>ビルド</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% mvn package
% ls target/malabar-1.5-SNAPSHOT-dist.zip
% cp target/malabar-1.5-SNAPSHOT-dist.zip ~/.emacs.d/lisp
% <span class=\"nb\">cd</span> ~/.emacs.d/lisp
% unzip malabar-1.5-SNAPSHOT-dist.zip
</pre>
</div>
</div>
<p>ビルドに成功すればzipファイルが出来る<br>
load-path が通っている場所に解凍</p>

<h3>設定</h3>

<p>付属のドキュメントに目を通してから設定すること</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;cedet</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">semantic-load-enable-minimum-features</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;malabar-mode</span> <span class=\"no\">nil</span> <span class=\"no\">t</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-groovy-lib-dir</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;lisp/malabar-1.5-SNAPSHOT/lib&quot;</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;auto-mode-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\.java\\\\&#39;&quot;</span> <span class=\"o\">.</span> <span class=\"nv\">malabar-mode</span><span class=\"p\">))</span>
  <span class=\"c1\">;; 日本語だとコンパイルエラーメッセージが化けるのでlanguageをenに設定</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-groovy-java-options</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;-Duser.language=en&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; 普段使わないパッケージを import 候補から除外</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-import-excluded-classes-regexp-list</span>
        <span class=\"p\">(</span><span class=\"nb\">append</span> 
         <span class=\"o\">&#39;</span><span class=\"p\">(</span>
           <span class=\"s\">&quot;^java\\\\.awt\\\\..*$&quot;</span>
           <span class=\"s\">&quot;^com\\\\.sun\\\\..*$&quot;</span>
           <span class=\"s\">&quot;^org\\\\.omg\\\\..*$&quot;</span>
           <span class=\"p\">)</span> <span class=\"nv\">malabar-import-excluded-classes-regexp-list</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;malabar-mode-hook</span>
            <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
              <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;after-save-hook</span> <span class=\"ss\">&#39;malabar-compile-file-silently</span>
                        <span class=\"no\">nil</span> <span class=\"no\">t</span><span class=\"p\">)))</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>使い方</h2>

<p>だんだんメンドーになってきたので付属ドキュメントからよく使うコマンドを転記</p>

<p>malabar-groovy-restart<br>
他のコマンドが動かない場合はmalabarが使ってるgroovyを再起動させると動く。よく使う。<br>
malabar-import-one-class (C-c C-v C-z)<br>
カーソル位置のクラスをインポート<br>
補完対象が複数ある場合minibufferに出るのでパッケージ名を入力する<br>
malabar-run-maven-command<br>
mavenコマンドを実行する編集→compile or installを繰替えせるので便利<br>
ただ構文エラーがあると動かないのでmalabar-groovy-restartする<br>
malabar-jump-to-thing (C-c C-v C-y)<br>
カーソル位置のクラスに移動する<br>
プロジェクトが違うと上手く動かない</p>
") (published nil "2012-09-12T01:41:54Z") (updated nil "2012-09-12T01:41:54Z") (author nil (name nil "toshikiw"))) (entry nil (id nil "tag:qiita.com,2005:Item/9052") (published nil "2012-09-11T01:07:06+09:00") (updated nil "2012-09-12T00:15:25+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5008ac8c4c5dda1cf5a0"))) (url nil "http://qiita.com/items/5008ac8c4c5dda1cf5a0") (title nil "カスタムlocatedbを作ってanythingで利用する") (content ((type . "html")) "<p>カスタムlocateで高速にファイル検索 → anythingで利用</p>

<h2>メリット</h2>

<ul>
<li>カスタムlocatedbを設定することでインデックス生成・更新を高速化</li>
<li>範囲を限定することでanythingで誤選択を減らす</li>
</ul>

<h2>locatedb更新設定</h2>

<p>/etc/locate.rc をコピーして編集</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% cp /etc/locate.rc <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
% vi <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">$HOME/Library/Preferences/locate.rc</span></div><div class=\"highlight\"><pre><span class=\"c\">#</span>
<span class=\"c\"># All commented values are the defaults</span>
<span class=\"c\">#</span>
<span class=\"c\"># temp directory</span>
<span class=\"c\">#TMPDIR=&quot;/tmp&quot;</span>

<span class=\"c\"># the actual database</span>
<span class=\"nv\">FCODES</span><span class=\"o\">=</span><span class=\"s2\">&quot;$HOME/Library/Caches/com.apple.locate.db&quot;</span>

<span class=\"c\"># directories to be put in the database</span>
<span class=\"nv\">SEARCHPATHS</span><span class=\"o\">=</span><span class=\"s2\">&quot;$HOME&quot;</span>

<span class=\"c\"># directories unwanted in output</span>
<span class=\"c\">#PRUNEPATHS=&quot;/tmp /var/tmp&quot;</span>

<span class=\"c\"># filesystems allowed. Beware: a non-listed filesystem will be pruned</span>
<span class=\"c\"># and if the SEARCHPATHS starts in such a filesystem locate will build</span>
<span class=\"c\"># an empty database.</span>
<span class=\"c\">#</span>
<span class=\"c\"># be careful if you add &#39;nfs&#39;</span>
<span class=\"c\">#FILESYSTEMS=&quot;hfs ufs&quot;</span>
</pre>
</div>
</div>
<p>$HOMEは環境に合せて変更する<br>
FCODES を $HOME/Library/Caches/com.apple.locate.db<br>
SEARCHPATHS を$HOME以下に限定</p>

<h2>locatedbを更新する為のlaunchdの設定</h2>

<p>locatedbを定期的に更新する為の設定</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">$HOME/Library/LaunchAgents/com.apple.locate.plist</span></div><div class=\"highlight\"><pre><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class=\"cp\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class=\"nt\">&lt;plist</span> <span class=\"na\">version=</span><span class=\"s\">&quot;1.0&quot;</span><span class=\"nt\">&gt;</span>
<span class=\"nt\">&lt;dict&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>AbandonProcessGroup<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;true/&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>Disabled<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;true/&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>KeepAlive<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;dict&gt;</span>
                <span class=\"nt\">&lt;key&gt;</span>PathState<span class=\"nt\">&lt;/key&gt;</span>
                <span class=\"nt\">&lt;dict&gt;</span>
                        <span class=\"nt\">&lt;key&gt;</span>/var/db/locate.database<span class=\"nt\">&lt;/key&gt;</span>
                        <span class=\"nt\">&lt;false/&gt;</span>
                <span class=\"nt\">&lt;/dict&gt;</span>
        <span class=\"nt\">&lt;/dict&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>Label<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;string&gt;</span>com.apple.locate<span class=\"nt\">&lt;/string&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>LowPriorityIO<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;true/&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>Nice<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;integer&gt;</span>5<span class=\"nt\">&lt;/integer&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>ProgramArguments<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;array&gt;</span>
                <span class=\"nt\">&lt;string&gt;</span>/usr/libexec/locate.updatedb<span class=\"nt\">&lt;/string&gt;</span>
        <span class=\"nt\">&lt;/array&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>StartInterval<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;integer&gt;</span>7200<span class=\"nt\">&lt;/integer&gt;</span>
<span class=\"nt\">&lt;/dict&gt;</span>
<span class=\"nt\">&lt;/plist&gt;</span>
</pre>
</div>
</div>
<p>$HOME/Library/LaunchAgentsが無い場合、mkdirする<br>
↑は2時間毎にlocatedbを更新する設定<br>
詳しくは man launchd.plist</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% defaults write ~/.MacOSX/environment LOCATE_CONFIG <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
% defaults write ~/.MacOSX/environment LOCATE_PATH <span class=\"nv\">$HOME</span>/Library/Caches/com.apple.locate.db
</pre>
</div>
</div>
<p>設定ファイルとlocatedbのパスを設定 → 設定後再ログインが必要</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% /usr/libexec/locate.updatedb
% ls <span class=\"nv\">$HOME</span>/Library/Caches/com.apple.locate.db
</pre>
</div>
</div>
<p>手動実行してlocatedbが生成されることを確認する</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% launchctl load -w ~/Library/LaunchAgents/com.apple.locate.plist 
</pre>
</div>
</div>
<p>launchdに登録</p>

<h2>emacs設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs/init.el</span></div><div class=\"highlight\"><pre>  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
        <span class=\"o\">&#39;</span><span class=\"p\">(</span>
<span class=\"o\">...</span>
          <span class=\"nv\">anything-c-source-locate</span>
<span class=\"o\">...</span>
          <span class=\"p\">)</span>
        <span class=\"p\">)</span>
  <span class=\"c1\">;; locate db</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">locatedb</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">getenv</span> <span class=\"s\">&quot;HOME&quot;</span><span class=\"p\">)</span> <span class=\"s\">&quot;/Library/Caches/com.apple.locate.db&quot;</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">file-readable-p</span> <span class=\"nv\">locatedb</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;LOCATE_PATH&quot;</span> <span class=\"nv\">locatedb</span><span class=\"p\">)</span>
      <span class=\"p\">)</span>
    <span class=\"p\">)</span>
</pre>
</div>
</div>
<p>anything-sourcesにanything-c-source-locate追加<br>
locatedbのパスを指定</p>

<p>後はemacsを再起動後anythingを起動すればlocatedbが使える</p>
") (published nil "2012-09-11T01:07:06Z") (updated nil "2012-09-12T00:15:25Z") (author nil (name nil "toshikiw"))) (entry nil (id nil "tag:qiita.com,2005:Item/8922") (published nil "2012-09-07T15:25:51+09:00") (updated nil "2012-09-07T15:25:51+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/41af818b76145b255ea7"))) (url nil "http://qiita.com/items/41af818b76145b255ea7") (title nil "flymakeでエラーになり、またバッファーを開こうとするとEmacsが固まるときの対処") (content ((type . "html")) "<p>あるソースファイルを読み込んだ時にflymakeでエラーになり、またファイルを開こうとするとEmacsがフリーズして使えなくなる状態が起きていました。</p>

<p>どうも次の設定をしておくと幸せになれるみたいです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">flymake-config.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">flymake-post-syntax-check</span> <span class=\"p\">(</span><span class=\"nv\">before</span> <span class=\"nv\">flymake-force-check-was-interrupted</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-check-was-interrupted</span> <span class=\"no\">t</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">ad-activate</span> <span class=\"ss\">&#39;flymake-post-syntax-check</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>情報の参照元: <a href=\"http://d.hatena.ne.jp/sugyan/20100705/1278306885\">http://d.hatena.ne.jp/sugyan/20100705/1278306885</a></p>
") (published nil "2012-09-07T15:25:51Z") (updated nil "2012-09-07T15:25:51Z") (author nil (name nil "quwa"))) (entry nil (id nil "tag:qiita.com,2005:Item/8743") (published nil "2012-09-04T16:56:03+09:00") (updated nil "2012-09-04T16:56:03+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/61645dce9dd950737b4d"))) (url nil "http://qiita.com/items/61645dce9dd950737b4d") (title nil "Tclでflymakeを使う") (content ((type . "html")) "<h1>Tclでflymakeを使う</h1>

<h2>準備</h2>

<ul>
<li>AcitiveStateからTcl Dev Kitを購入する。ここが一番難易度が高いです。</li>
<li>tclchecker.exeにPATHを通す</li>
</ul>

<h2>flymake.elを修正する。</h2>

<p>warning の文字列定義を修正。他の言語のWanringを完全に殺してしまうので、思い切りが必要です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Diff files</span></div><div class=\"highlight\"><pre>963c963,964
&lt;         (if (and err-text (string-match &quot;^[wW]arning&quot; err-text))
<span class=\"gd\">---</span>
&gt; ;       (if (and err-text (string-match &quot;^[wW]arning&quot; err-text))
&gt;         (if (and err-text (string-match &quot;^(warn&quot; err-text))
</pre>
</div>
</div>
<h2>.emacsに追加</h2>

<p>tclcheckerへのオプションはいろいろ試してみましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;flymake</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-allowed-file-name-masks</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;.+\\\\.tcl$&quot;</span> <span class=\"nv\">flymake-simple-make-init</span><span class=\"p\">)</span> <span class=\"nv\">flymake-allowed-file-name-masks</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">flymake-get-make-cmdline</span> <span class=\"p\">(</span><span class=\"nv\">source</span> <span class=\"nv\">base-dir</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;tclchecker&quot;</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;-quiet&quot;</span> <span class=\"s\">&quot;-W3&quot;</span> <span class=\"s\">&quot;-suppress&quot;</span> <span class=\"s\">&quot;nonPortFile&quot;</span> <span class=\"s\">&quot;-suppress&quot;</span> <span class=\"s\">&quot;nonPortCmd&quot;</span>  <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">base-dir</span> <span class=\"nv\">source</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-err-line-patterns</span>
 <span class=\"p\">(</span><span class=\"nb\">cons</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\(.+\\\\):\\\\([0-9]+\\\\) \\\\(.+\\\\)&quot;</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"no\">nil</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
  <span class=\"nv\">flymake-err-line-patterns</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<h2>実行の様子</h2>

<p><img src=\"https://www.evernote.com/shard/s25/sh/5eabd813-8aee-4c4a-8ed8-05d38327a99f/4d95819026aacaa40e6146faa5592eb0/res/f785dbcc-06d7-4550-954c-455af08da5c2/ScreenClip.png\" alt=\"実行中\"></p>
") (published nil "2012-09-04T16:56:03Z") (updated nil "2012-09-04T16:56:03Z") (author nil (name nil "natsutan"))) (entry nil (id nil "tag:qiita.com,2005:Item/8407") (published nil "2012-08-26T11:05:34+09:00") (updated nil "2012-08-27T10:57:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b2d930bdc5967eaf25cc"))) (url nil "http://qiita.com/items/b2d930bdc5967eaf25cc") (title nil "tmux入れた on OS X") (content ((type . "html")) "<p>ふとscreenからtmuxにしようと思ったので、ついでに色々やった。エントリにするのめんどいから箇条書きで。</p>

<ul>
<li>tmux ぶっこむ

<ul>
<li>brew install tmux だけ</li>
<li>プレフィクスは.tmux.conf で <code>set -g prefix ^Z</code> と <code>bind ^Z send-prefix</code> で変更</li>
<li>後はデフォルトで、PREFIX + ? でヘルプ見て頑張る感じ</li>
<li>Option, Command+カーソルキーでpaneのサイズ変更が割り当てられてるけどOS Xのキーバインドと被ってるのでカーソルキーに割り当て直した</li>
</ul></li>
<li>Cocoa Emacs やめてターミナルから使ってみる

<ul>
<li><code>/Applications/Emacs.app/Contents/MacOS/Emacs -nw</code> とすればターミナルから普通に立ち上がる</li>
<li>.emacs はフォントの設定を<code>(window-system)</code>でスキップさせただけで他はそのままで動いた</li>
<li>クリップボードの操作を考えるとCommandをメタキーにすると苦しいと思ったのでメタキーはOptionに戻し</li>
<li>Terminal.app の 「メタキーとしてOptionキーを使用」 を有効</li>
<li>Command + w だけは踏むとやばそうだったので <a href=\"http://apple.stackexchange.com/questions/44412/disable-command-w-in-the-terminal\">http://apple.stackexchange.com/questions/44412/disable-command-w-in-the-terminal</a> 見て無効化(メニュー名は「ウインドウを閉じる」)</li>
</ul></li>
<li>Emacsからシェル叩けるように改善(ずっと昔から困ってた)

<ul>
<li><code>shell</code>ではなく<code>term</code>コマンドを使う</li>
<li><a href=\"http://sakito.jp/emacs/emacsshell.html#id11\">http://sakito.jp/emacs/emacsshell.html#id11</a> 見てterminfo 作成</li>
</ul></li>
<li>Terminal.app は全画面モードで常駐</li>
</ul>

<p>結局tmuxよりEmacs周り弄ってた時間の方が長いっぽい。</p>
") (published nil "2012-08-26T11:05:34Z") (updated nil "2012-08-27T10:57:00Z") (author nil (name nil "hiratara"))) (entry nil (id nil "tag:qiita.com,2005:Item/8384") (published nil "2012-08-25T00:26:49+09:00") (updated nil "2012-09-21T23:16:31+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9a7351c0d14ec9fdf8df"))) (url nil "http://qiita.com/items/9a7351c0d14ec9fdf8df") (title nil "setup Emacs24 for Windows") (content ((type . "html")) "<p>この文書は、Windows7(64bit) で Emacs24 を使う際の備忘録です。<br>
最新の情報ではない場合があるので注意。</p>

<p>快適に使うために必要なとにかく色んな設定が無いので、本当に入れただけです。</p>

<h1>参照サイト</h1>

<ul>
<li><a href=\"http://code.google.com/p/emacs-for-windows\">emacs-for-windows</a>

<ul>
<li>Windows 用のコンパイル済 Emacs</li>
</ul></li>
<li><a href=\"https://github.com/technomancy/emacs-starter-kit\">emacs-starter-kit</a>

<ul>
<li>Emacs24 から標準添付になった package.el を使う便利設定集</li>
</ul></li>
</ul>

<h1>emacs-for-windows</h1>

<p>やることはダウンロードして展開するだけですね…</p>

<h2>fetch</h2>

<p><a href=\"http://code.google.com/p/emacs-for-windows\">emacs-for-windows</a>からコンパイル済の Emacs を取得。<br>
私の時は <em>Emacs24.BZR.106722.Win32.20111223</em> が最新でした…ちょっと古い…</p>

<h2>unpack</h2>

<p>適当なディレクトリに展開します。<br>
私は <em>d:\\bin\\Emacs</em> にしました。<br>
Mac みたいに <em>c:\\Applications\\Emacs</em> とかにする人もいるみたいですね(<a href=\"http://sinewalker.wordpress.com/2012/02/13/install-emacs24-snapshot-on-debian-ubuntu-and-windows-7/\">こことか</a>)</p>

<h2>use</h2>

<p><em>emacs.exe</em> で起動するとウインドウが二つ開きます(Emacs本体とコンソールウインドウ)。<br>
ダサい<br>
なので、<em>d:\\bin\\Emacs\\runemacs.exe</em> で起動します。</p>

<p>送るメニューからファイルを開けるようにしたいので、<em>emacsclientw.exe</em> を SendTo に置きます。<br>
<em>emacsclient.exe</em> は標準エラーがコンソールになってて、w のほうはメッセージボックスになってるとかだった気がする。<br>
PuTTY の <em>plink.exe</em> と <em>plinkw.exe</em> も同じ。</p>

<p>この時初めて気づいたのですが、<em>.emacs.d</em> は <em>c:\\Users\\ユーザ名.emacs.d</em> ではなく、_c:\\Users\\ユーザ名\\AppData\\Roaming.emacs.d_になるのですね…<br>
誰得だこれ。</p>

<h1>emacs-starter-kit</h1>

<p>使ったことなかったのですが、せっかく空の環境から始めるので試します。</p>

<p>README にこんなことが書いてありました。<br>
* Emacs24 が必要(package.el使うから)<br>
* Emacs23 とか 22 とかと共有したければ古いやつ使え<br>
* モジュール分かれてるし好きなの選べ<br>
* ~/.emacs.d/$USER.el は自動的にロードする<br>
* ~/.emacs.d/$USER/ の下に置いた .el も自動的にロードする<br>
* .el の前にホスト名が付いてるやつをそのホストの設定としてロードする<br>
* Starter Kit を自分の .emacs.d として使ってもいいけどきっとグチャるから Upgrading の説明を読んどけ<br>
まぁ、気に留めておきましょう。</p>

<p>Installation 読んでると、どうも git リポジトリを clone しなくてもよさそうです。<br>
具体的には init.el に次のコードを書いて、後は package.el でなんとかする、と。<br>
(先頭の一行は自分で足しました。おまじない)</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;</span> <span class=\"o\">-*-</span> <span class=\"n\">coding</span><span class=\"p\">:</span> <span class=\"n\">iso</span><span class=\"o\">-</span>2022<span class=\"o\">-</span>7<span class=\"n\">bit</span><span class=\"p\">;</span> <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">lisp</span><span class=\"o\">-</span><span class=\"n\">interaction</span> <span class=\"o\">-*-</span>
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;package)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span>
             <span class=\"s\">&#39;</span><span class=\"err\">(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;) t)</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>Windows だと &quot;.emacs.d&quot; が作れない!とか困るかもしれませんが、<br>
Emacs 起動して M-x make-directory すれば作れます。</p>

<p>書いたので M-x eval-buffer して、エラーが無ければ先に進みます。<br>
package.el の情報(インデックスか何かでしょう)を最新化するため、M-x package-refresh-contents するそうです。</p>

<p>M-x package-install すると、ミニバッファに &quot;Install package:&quot; とか出て止まるので、<strong>starter-kit</strong> と入力しましょう。<br>
補完が利くので適当に Tab 打ってればいいです。</p>

<p>あ…他のモジュールも package-install するのか…</p>

<ul>
<li>starter-kit-bidings</li>
<li>starter-kit-eshell</li>
<li>starter-kit-js</li>
<li>starter-kit-ruby</li>
<li>starter-kit-lisp</li>
</ul>

<p>あとはなんか自分でインストールしたことあるパッケージのリストをメンテしておけばいいんじゃない？という感じで<br>
次のようなコードを init.el に書いておくことを薦めてた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archive</span><span class=\"o\">-</span><span class=\"n\">contents</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">refresh</span><span class=\"o\">-</span><span class=\"n\">contents</span><span class=\"p\">))</span>

<span class=\"p\">;;</span> <span class=\"n\">Add</span> <span class=\"n\">in</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">as</span> <span class=\"n\">you</span> <span class=\"n\">wish</span><span class=\"p\">:</span>
<span class=\"p\">(</span><span class=\"n\">defvar</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">packages</span> <span class=\"s\">&#39;</span><span class=\"err\">(starter-kit starter-kit-lisp starter-kit-bindings)</span>
  &quot;<span class=\"n\">A</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">packages</span> <span class=\"n\">to</span> <span class=\"n\">ensure</span> <span class=\"n\">are</span> <span class=\"n\">installed</span> <span class=\"n\">at</span> <span class=\"n\">launch</span><span class=\"p\">.</span>&quot;<span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"n\">dolist</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">installed</span><span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">p</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<h1>Color Theme</h1>

<p>色が寂しいので <a href=\"http://www.nongnu.org/color-theme/\">color-theme</a> しましょう。</p>

<h2>fetch</h2>

<p><a href=\"http://www.nongnu.org/color-theme/\">color-theme</a> のページを見て必要なものを取得。<br>
私が見たときは color-theme-6.6.0 でした。</p>

<h2>unpack</h2>

<p>常識の範囲内で好きなところに置けばいいでしょう。<br>
私は <em>d:\\bin\\Emacs\\site-lisp\\color-theme</em> にしました。<br>
<em>~/.emacs.d</em> の下はスラム化しそうなので分けたほうがよいかと。</p>

<p>subdir.el があるとはいえ、起動時に load-path に足してくれるだけです。<br>
Emacs を再起動しましょう。</p>

<h2>use</h2>

<p>init.el に次のコードを追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;</span><span class=\"err\">color-theme)</span>
<span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">theme</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>あとは M-x color-theme-xxx から何か選んで評価すればテーマが変わります。</p>

<p>私は color-theme-dark-laptop が好きなので、最初から設定されるよう init.el に次の式を書いてます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">theme</span><span class=\"o\">-</span><span class=\"n\">dark</span><span class=\"o\">-</span><span class=\"n\">laptop</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h1>skk</h1>

<p>文字入力が skk でなければ Emacs を使う意味が半分くらいになるくらい、skk に依存していますので使えるようにします。</p>

<h2>fetch</h2>

<p><a href=\"http://openlab.ring.gr.jp/skk/ddskk-ja.html\">Daredevil SKK(DDSKK)</a> のページから、ダウンロードサイトへ。<br>
私は ddskk-14.4.tar.bz2 にしました。<br>
(chrome のせいか tar.bz2 を保存すると何故か拡張子が tar.bz2.tar.bz2 とかになってしまう不思議!)</p>

<h2>unpack</h2>

<p>展開してすぐ使えるパッケージじゃないので、とりあえず展開します。</p>

<p>READMEs/README.w32.ja を読めばどうすればいいのかはすぐ分かりますね。</p>

<ol>
<li><a href=\"http://openlab.jp/skk/dic/SKK-JISYO.L.gz\">L辞書</a>をダウンロードして dic の下に解凍</li>
<li>make what-where EMACS=d:/where/to/emacs.exe</li>
<li>make install EMACS=d:/where/to/emacs.exe</li>
</ol>

<h2>use</h2>

<p>etc/dot.skk を HOME に .skk としてコピーしましょう。</p>

<p>だいたい元のままでもなんとかなるのです。<br>
ただ、92 行目の skk-show-tooltip は f または nil にしないと、変換候補がちゃんと表示されなくて悲しいので注意。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">skk</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">tooltip</span> <span class=\"n\">nil</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-08-25T00:26:49Z") (updated nil "2012-09-21T23:16:31Z") (author nil (name nil "yujiorama@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/8274") (published nil "2012-08-22T10:58:03+09:00") (updated nil "2012-08-22T10:58:03+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/bb50d84af4d01a2eb5c2"))) (url nil "http://qiita.com/items/bb50d84af4d01a2eb5c2") (title nil "scss-mode.elを使う") (content ((type . "html")) "<p>compassを使ってsass(scss)を書くようことにしたので設定</p>

<p>scss-mode.elを取得<br>
<a href=\"https://github.com/antonj/scss-mode\">https://github.com/antonj/scss-mode</a></p>

<p>emacs-lispファイル用のパスの通ったところに置く</p>

<p>下記を.emacsに加える</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>;; パスを指定
(add-to-list &#39;load-path &quot;~/.emacs.d/vendor&quot;)

(require &#39;scss-mode)
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\\\.scss$&quot; . scss-mode))

;; インデント幅を2にする
;; コンパイルは compass watchで行うので自動コンパイルをオフ
(defun scss-custom ()
  &quot;scss-mode-hook&quot;
  (and
   (set (make-local-variable &#39;css-indent-offset) 2)
   (set (make-local-variable &#39;scss-compile-at-save) nil)
   )
  )
(add-hook &#39;scss-mode-hook
  &#39;(lambda() (scss-custom)))
</pre>
</div>
</div>
<p>そのうちscss-modeを改造して保存時に<code>compass watch</code>が走るcompass-modeを作りたい</p>
") (published nil "2012-08-22T10:58:03Z") (updated nil "2012-08-22T10:58:03Z") (author nil (name nil "sawamur@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/8219") (published nil "2012-08-19T17:03:52+09:00") (updated nil "2012-09-24T07:48:53+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d63861293fd6bde1b0d8"))) (url nil "http://qiita.com/items/d63861293fd6bde1b0d8") (title nil "コマンドが存在するかしないかを判定して, 条件分岐する構文のまとめ") (content ((type . "html")) "<h1>Vim</h1>

<hr>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.vimrc</span></div><div class=\"highlight\"><pre><span class=\"c\">&quot; コマンドが存在すれば</span>
<span class=\"k\">if</span> executable<span class=\"p\">(</span><span class=\"s1\">&#39;git&#39;</span><span class=\"p\">)</span>
    Bundle <span class=\"s1\">&#39;mattn/gist-vim&#39;</span>
<span class=\"k\">endif</span>
</pre>
</div>
</div>
<h1>Emacs</h1>

<hr>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">executable-find</span> <span class=\"s\">&quot;pandoc&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; コマンドが存在すれば</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">markdown-command</span> <span class=\"s\">&quot;pandoc&quot;</span><span class=\"p\">)</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>
<h1>sh</h1>

<hr>

<h3>ワンライナー</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo </span>Success !
 <span class=\"c\"># コマンドが存在すれば</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null <span class=\"o\">||</span> <span class=\"nb\">echo </span>Error !
 <span class=\"c\"># コマンドが存在しなければ</span>
</pre>
</div>
</div>
<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null
<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$?</span> -eq 0 <span class=\"o\">]</span> ; <span class=\"k\">then</span> <span class=\"c\"># コマンドが存在すれば</span>
    <span class=\"nb\">echo </span>Success !
    <span class=\"nb\">alias </span><span class=\"nv\">top</span><span class=\"o\">=</span>htop
<span class=\"k\">else</span>                   <span class=\"c\"># コマンドが存在しなければ</span>
    <span class=\"nb\">echo </span>Error ! &gt;&amp;2
    <span class=\"nb\">exit </span>1
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<p>簡潔に書くと:</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">if </span>which htop &gt; /dev/null ; <span class=\"k\">then</span> <span class=\"c\"># コマンドが存在すれば</span>
    <span class=\"nb\">echo </span>Success !
    <span class=\"nb\">alias </span><span class=\"nv\">top</span><span class=\"o\">=</span>htop
<span class=\"k\">else</span>                             <span class=\"c\"># コマンドが存在しなければ</span>
    <span class=\"nb\">echo </span>Error ! &gt;&amp;2
    <span class=\"nb\">exit </span>1
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<h1>PowerShell</h1>

<hr>

<h3>ワンライナー</h3>

<p><code>&amp;&amp;</code>や<code>||</code>に対応するものはたぶんない ?</p>

<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"n\">gcm</span> <span class=\"n\">perldoc</span> <span class=\"n\">-ea</span> <span class=\"n\">SilentlyContinue</span> <span class=\"p\">|</span> <span class=\"nb\">Out-Null</span>
<span class=\"k\">if</span> <span class=\"p\">($?</span> <span class=\"o\">-eq</span> <span class=\"nv\">$true</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c\"># コマンドが存在すれば</span>
    <span class=\"nb\">Write-Output</span> <span class=\"s1\">&#39;Success !&#39;</span>
    <span class=\"n\">perldoc</span> <span class=\"n\">perldoc</span>
<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"c\"># コマンドが存在しなければ</span>
    <span class=\"nb\">Write-Error</span> <span class=\"s1\">&#39;Error !&#39;</span>
    <span class=\"n\">exit</span> <span class=\"n\">1</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<p>簡潔に書くと:</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">gcm</span> <span class=\"n\">perldoc</span> <span class=\"n\">-ea</span> <span class=\"n\">SilentlyContinue</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c\"># コマンドが存在すれば</span>
    <span class=\"nb\">Write-Output</span> <span class=\"s1\">&#39;Success !&#39;</span>
    <span class=\"n\">perldoc</span> <span class=\"n\">perldoc</span>
<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                                <span class=\"c\"># コマンドが存在しなければ</span>
    <span class=\"nb\">Write-Error</span> <span class=\"s1\">&#39;Error !&#39;</span>
    <span class=\"n\">exit</span> <span class=\"n\">1</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<h1>コマンドプロンプト</h1>

<hr>

<p><code>WHERE</code>コマンドがあるなら:</p>

<h3>ワンライナー</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc &amp;&amp; <span class=\"k\">ECHO</span> Success !
<span class=\"c\">REM コマンドが存在すれば</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc |<span class=\"p\">|</span> <span class=\"n\">ECHO</span> Error !
<span class=\"c\">REM コマンドが存在しなければ</span>
</pre>
</div>
</div>
<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc
<span class=\"k\">IF</span> <span class=\"nv\">%ERRORLEVEL%</span> <span class=\"o\">==</span> <span class=\"m\">0</span> ( <span class=\"c\">:: コマンドが存在すれば</span>
    <span class=\"k\">ECHO</span> Success !
    perldoc perldoc
) <span class=\"k\">ELSE</span> (               <span class=\"c\">:: コマンドが存在しなければ</span>
    <span class=\"k\">ECHO</span> Error ! &gt;&amp;<span class=\"m\">2</span>
    EXIT <span class=\"n\">/B</span> <span class=\"m\">1</span>
)
</pre>
</div>
</div>
<h2>追記</h2>

<ul>
<li>2012年9月: PowerShellの部分を書き換え</li>
</ul>
") (published nil "2012-08-19T17:03:52Z") (updated nil "2012-09-24T07:48:53Z") (author nil (name nil "skkzsh@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/7915") (published nil "2012-08-08T12:30:12+09:00") (updated nil "2012-08-08T13:42:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/94b992d7f11a4ad746ff"))) (url nil "http://qiita.com/items/94b992d7f11a4ad746ff") (title nil "正規表現にマッチした部分を自動ハイライトする: highlight-regexp") (content ((type . "html")) "<p>highlight-regexpを使えば、ソースを読んでいるときなど特定のキーワードに注目したいときに色をつけることができます。</p>

<p>標準の機能なので特にインストールは不要です。下記で実行します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">highlight</span><span class=\"o\">-</span><span class=\"n\">regexp</span>
</pre>
</div>
</div>
<p>キーワードの入力が求められるので、色をつけたいキーワードを正規表現で入力します。次に背景色を指定することができます。<code>hl-色</code>もしくは<code>hl-色-b</code>という形式で指定します。</p>
") (published nil "2012-08-08T12:30:12Z") (updated nil "2012-08-08T13:42:45Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7888") (published nil "2012-08-07T15:17:57+09:00") (updated nil "2012-08-07T15:17:57+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5be6467d0947a057c807"))) (url nil "http://qiita.com/items/5be6467d0947a057c807") (title nil "現在桁をハイライトする: col-highlight.el") (content ((type . "html")) "<p>Emacsではインデントが分かりづらいことがあるので、現在桁をハイライトしてくれるcol-highlight.elをいれました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">marker</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; col-highlight.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;col-highlight</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>必要な時に<code>M-x column-highlight-mode</code>をします。</p>

<p>常にハイライトしたい場合は下記を設定ファイルに追加するとできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">column-highlight-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>また、下記の様にすると5秒間何もしないでいるとハイライトするようにすることもできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">toggle-highlight-column-when-idle</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">col-highlight-set-interval</span> <span class=\"mi\">6</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>よくHTMLを編集していての閉じ忘れで体裁が崩れたり苦労することがよくあるのですがそのような時に重宝しそうです。</p>
") (published nil "2012-08-07T15:17:57Z") (updated nil "2012-08-07T15:17:57Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7883") (published nil "2012-08-07T14:55:39+09:00") (updated nil "2012-08-07T14:55:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/19be55b78a4022dc4962"))) (url nil "http://qiita.com/items/19be55b78a4022dc4962") (title nil "複数ファイルの置換: grep-edit.el") (content ((type . "html")) "<p>複数ファイルの置換ができるようにgrep-edit.elをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"nb\">grep</span><span class=\"o\">-</span><span class=\"n\">edit</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; grep-edit.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;grep-edit</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-x grep</code>でテキストを検索します。検索結果の<code>*grep*</code>バッファを編集します。<code>C-c C-e</code>をすると、編集を該当ファイルに反映します。この状態ではまだ変更が保存されていないので、<code>C-x s</code>をすると変更されたファイルが保存されます。</p>
") (published nil "2012-08-07T14:55:39Z") (updated nil "2012-08-07T14:55:39Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7775") (published nil "2012-08-03T13:03:17+09:00") (updated nil "2012-08-03T13:03:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4406d1cd656c6abf8544"))) (url nil "http://qiita.com/items/4406d1cd656c6abf8544") (title nil "複数のgrepバッファを使えるようにする: grep-a-lot.el") (content ((type . "html")) "<p>標準のgrepだと、繰り返してgrepコマンドをすると前回の結果が上書きされてしまいます。バッファの名前を変えればいいのですがいちいち面倒です。自動でバッファー名がかぶらないようにするためにgrep-a-lotをいれました。</p>

<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>grep-a-lot</code>をインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; grep-a-lot</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;grep-a-lot</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">grep-a-lot-setup-keys</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">grep-a-lot-advise</span> <span class=\"nv\">igrep</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>M-x igrep</code>を複数回繰り返しても、複数の検索結果のバッファが保持されるようになります。</p>
") (published nil "2012-08-03T13:03:17Z") (updated nil "2012-08-03T13:03:17Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7774") (published nil "2012-08-03T12:50:34+09:00") (updated nil "2012-08-03T12:50:34+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e60970251502fdee081e"))) (url nil "http://qiita.com/items/e60970251502fdee081e") (title nil "grep検索を使いやすくする: igrep.el") (content ((type . "html")) "<p>Emacsから<code>M-x grep</code>だとコマンドラインを打つだけなので、パターンをクオートしたり大変です。igrepをいれて対話的なインターフェースにします。</p>

<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>igrep</code>をインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; igrep.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;igrep</span><span class=\"p\">)</span>
<span class=\"c1\">; lgrepの出力をUTF-8にする</span>
<span class=\"p\">(</span><span class=\"nv\">igrep-define</span> <span class=\"nv\">lgrep</span> <span class=\"p\">(</span><span class=\"nv\">igrep-use-zgrep</span> <span class=\"no\">nil</span><span class=\"p\">)(</span><span class=\"nv\">igre-regex-option</span> <span class=\"s\">&quot;-n -Ou8&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">igrep-find-define</span> <span class=\"nv\">lgrep</span> <span class=\"p\">(</span><span class=\"nv\">igrep-use-zgrep</span> <span class=\"no\">nil</span><span class=\"p\">)(</span><span class=\"nv\">igrep-regex-option</span> <span class=\"s\">&quot;-n -Ou8&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p><code>M-x igrep</code>をします。そうすると、正規表現と検索対象のファイルの入力がうながされるので、それぞれ入力します。</p>
") (published nil "2012-08-03T12:50:34Z") (updated nil "2012-08-03T12:50:34Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7703") (published nil "2012-08-01T14:47:40+09:00") (updated nil "2012-08-01T14:47:40+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8cacf69fbcc7fc4f2ea5"))) (url nil "http://qiita.com/items/8cacf69fbcc7fc4f2ea5") (title nil "color-moccur.elの結果を編集する: moccur-edit.el") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/e5fd73e03323f3d8f7bc\">先日のポスト</a>でいれたcolor-moccurの結果を編集できるようにmoccur-edit.elをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">moccur</span><span class=\"o\">-</span><span class=\"n\">edit</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; moccur-edit.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;moccur-edit</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>M-x occur-by-moccur</code>で検索をし、そのバッファで<code>r (moccur-edit-mode-in)</code>を押します。すると、バッファを編集することができます。通常のバッファと同じように<code>M-% (query-replace)</code>なども使用できます。変更点もわかりやすいようにハイライトされます。</p>

<p>変更が完了したら、<code>C-c C-c (moccur-edit-finish-edit)</code>をすると変更箇所がファイルに反映されます。もしくは、<code>C-c C-k (moccur-edit-kill-all-change)</code>をすると変更を取り消せます。</p>

<p>これで、プログラミンをしているときなどクラスやメソッドの名前などがだいぶ変更しやすくなりました。</p>
") (published nil "2012-08-01T14:47:40Z") (updated nil "2012-08-01T14:47:40Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7645") (published nil "2012-07-30T15:33:15+09:00") (updated nil "2012-07-30T15:33:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/aff8048f7037c86ee05a"))) (url nil "http://qiita.com/items/aff8048f7037c86ee05a") (title nil "正規表現置換をする: C-M-%") (content ((type . "html")) "<p>正規表現で置換をするキーバインドは<code>C-M-%</code>で、これまた押しにくいので、「Emacsテクニックバイブル」を参考に、下記の通り短い別名を定義することにしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">; M-x qrr for query-replace-regexp</span>
<span class=\"p\">(</span><span class=\"nv\">defalias</span> <span class=\"ss\">&#39;qrr</span> <span class=\"ss\">&#39;query-replace-regexp</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-07-30T15:33:15Z") (updated nil "2012-07-30T15:33:15Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7644") (published nil "2012-07-30T15:26:02+09:00") (updated nil "2012-07-30T15:26:02+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5062bbb3d8810b9326af"))) (url nil "http://qiita.com/items/5062bbb3d8810b9326af") (title nil "文字列変換: M-%") (content ((type . "html")) "<p>前々から文字列置換のキーバインド(<code>M-%</code>)が、使用頻度が高いわりには押しづらいと思ってました。</p>

<p>そこで、「Emacsテクニックバイブル」を参考に、<code>C-c r</code>に割り当てることにしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">; C-c r aka M-%</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c r&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;query-replace</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>だいぶ押しやすくなった。</p>
") (published nil "2012-07-30T15:26:02Z") (updated nil "2012-07-30T15:26:02Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7595") (published nil "2012-07-28T21:32:59+09:00") (updated nil "2012-07-28T21:32:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c090d0733ec6ccab4724"))) (url nil "http://qiita.com/items/c090d0733ec6ccab4724") (title nil "Emacs 初心者はいかにして変態キーバインドを覚えるか") (content ((type . "html")) "<p>Emacs 使い始めはついついカーソルキーや BS、Enter キーを使ってしまいがちだ。それだと、いつまで経っても Emacs のキーバインドを覚えることはできない。基本的なキーバインドを使えなければ Emacs を使う価値などない。</p>

<p>では Emacs 使い始めの初心者はどのようにキーバインドを覚えればよいか。答えは簡単。普段使っているキーを Emacs で使えないようにすればいいのだ。つまり、Emacs 内では下にカーソルキーを移動するのに C-n 以外のキーの使用を認めないということだ。</p>

<p>そのような厳しい指導をしてくれるのが <a href=\"https://github.com/k1LoW/emacs-drill-instructor\">鬼軍曹.el</a> である。<a href=\"https://raw.github.com/k1LoW/emacs-drill-instructor/master/drill-instructor.el\">Elisp</a> をパスのあるところに置き、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;drill-instructor</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">drill-instructor-global</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を記述すると、カーソルキー、BackSpaceキー、Enterキー、TABキーが使用できなくなり、代わりにどのキーを使えばいいかミニバッファに表示してくれる。詳しくは <a href=\"https://github.com/k1LoW/emacs-drill-instructor/wiki/\">Wiki</a> を見てほしい。</p>

<p>Emacs を使うのであれば、これらの基本キーは必須だ。まだ覚えていない Emacs ユーザは、厳しい教官の指導のもと、是非 Emacs キーバインドをマスターしてほしい。</p>
") (published nil "2012-07-28T21:32:59Z") (updated nil "2012-07-28T21:32:59Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/7548") (published nil "2012-07-27T16:10:33+09:00") (updated nil "2012-07-30T16:00:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e5fd73e03323f3d8f7bc"))) (url nil "http://qiita.com/items/e5fd73e03323f3d8f7bc") (title nil "バッファ内で正規表現にマッチする行を出力する: color-moccur.el") (content ((type . "html")) "<p>バッファ内で正規表現にマッチする行を出力するには<code>occur</code>というのがデフォルトではいっているのですが、より操作性が優れている<code>color-moccur</code>をいれます。</p>

<p>インストールは下記を実行します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">moccur</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; color-occur.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;color-moccur</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">moccur-split-word</span> <span class=\"no\">t</span><span class=\"p\">)</span> <span class=\"c1\">;スペースで区切られた複数の単語にマッチさせる</span>
</pre>
</div>
</div>
<p><code>M-x occur-by-moccur</code>で起動します。検索したい単語を入力します。複数の単語の入力もできます。単語を入力したらマッチした行の一覧が表示されるので、<code>n</code>や<code>p</code>でマッチした箇所をいきいきできます。</p>

<p>また、isearch実行時に<code>M-o</code>を押すと、<code>M-x occur-by-moccur</code>に切り替えてくれます。</p>

<p><code>color-moccur</code>の特徴として、Migemoをいれていればローマ字でも検索してくれるそうなのですが、残念ながら私の環境ではできませんでした。cmigemoだとだめなのかな。</p>
") (published nil "2012-07-27T16:10:33Z") (updated nil "2012-07-30T16:00:45Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7499") (published nil "2012-07-26T10:32:59+09:00") (updated nil "2012-07-26T10:32:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ec59978a7ac3d4ad13c1"))) (url nil "http://qiita.com/items/ec59978a7ac3d4ad13c1") (title nil ".emacs.d/init.el を複数のプラットフォームで安定して動かすためのplatform-p") (content ((type . "html")) "<p>platform-p.el というライブラリをGithubに置きました。</p>

<p>EmacsにはOS固有の機能が実装されていることがありますが、それらの関数を呼び出す時に<code>platform-darwin-p</code>等で囲んでおくと<code>.emacs.d/init.el</code>を他プラットフォームに移植した時に変なエラーに悩まされずに済みます。</p>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120725/1343232098\">.emacs.d/init.el を複数のプラットフォームで安定して動かすためのplatform-p - おんがえしの日記</a> </p>
") (published nil "2012-07-26T10:32:59Z") (updated nil "2012-07-26T10:32:59Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/7413") (published nil "2012-07-23T15:34:20+09:00") (updated nil "2012-07-23T15:34:20+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ecf43284633ba03a60af"))) (url nil "http://qiita.com/items/ecf43284633ba03a60af") (title nil "正規表現を対話的に作成する: M-x re-builder") (content ((type . "html")) "<p><code>M-x re-builder</code>とすると、対話的に正規表現を作成できて便利です。使い方を簡単にまとめておきます。</p>

<p>新しく開かれたバッファ内の&quot;&quot;に正規表現を入力していくと、バッファ内でマッチした文字列がハイライトされます。<code>C-c C-r (reb-prev-match)</code>や<code>C-c C-s (reb-next-match)</code>でマッチ部分へジャンプします。<code>C-c C-w (reb-copy)</code>で作成した正規表現をコピーすることができます。<code>C-c C-q (reb-quit)</code>で終了します。</p>

<p>Emacsの標準機能なのですね。長年Emacs使っていましたが知らなかった。。。</p>
") (published nil "2012-07-23T15:34:20Z") (updated nil "2012-07-23T15:34:20Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7342") (published nil "2012-07-20T15:37:35+09:00") (updated nil "2012-07-20T15:37:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/97a45253b44cc0ac53f6"))) (url nil "http://qiita.com/items/97a45253b44cc0ac53f6") (title nil "補完候補を一覧で表示: auto-complete.el") (content ((type . "html")) "<p>テキスト入力中に補完候補を出してくれる<code>auto-complete.el</code>をいれましました。</p>

<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>auto-complete</code>をインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-complete-config</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-auto-complete-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで文字を入力していくと、<code>dabbrev-expand</code>の候補がポップアップで一覧が表示されるようになります。</p>

<p><a href=\"http://d.hatena.ne.jp/tkng/20090207/1234020003\">ここ</a>を参考に、rubyのコードを補完できる<code>auto-complete-ruby</code>をいれたかったのですが、<code>auto-complete-ruby</code>のページがNot Foundになってしまっていますね。便利そうなのにな。</p>
") (published nil "2012-07-20T15:37:35Z") (updated nil "2012-07-20T15:37:35Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7283") (published nil "2012-07-18T16:58:02+09:00") (updated nil "2012-07-18T16:58:02+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/81ffd42b7edc75264079"))) (url nil "http://qiita.com/items/81ffd42b7edc75264079") (title nil "Rail用のスニペット: yasnippet-rails") (content ((type . "html")) "<p>yasnippetにはruby-mode用のスニペットは標準でついているのですが、Railsには最適されていないので別途いれます。</p>

<p>まず、rhtml編集用のモードをいれます。</p>

<p>インストールはMELPAでパッケージがなかったので手動でいれます。<a href=\"http://qiita.com/items/4c652ad4afccae5fe2ef\">こちら</a>の設定をしているディレクトリにcloneします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"nv\">$</span> <span class=\"nv\">cd</span> <span class=\"o\">.</span><span class=\"n\">emacs</span><span class=\"o\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">eslip</span>
<span class=\"nv\">$</span> <span class=\"nv\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git:</span><span class=\"sr\">//gi</span><span class=\"n\">thub</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"sr\">/eschulte/</span><span class=\"n\">rhtml</span><span class=\"o\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.e</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; rhtml-mode</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;rhtml-mode</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>次に、yasnippet-railsをいれます。インストールするディレクトリは<code>.emacs.d/snippets</code>にいれる事にしました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"nv\">$</span> <span class=\"nv\">cd</span> <span class=\"o\">.</span><span class=\"n\">emacs</span><span class=\"o\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">snippets</span>
<span class=\"nv\">$</span> <span class=\"nv\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https:</span><span class=\"sr\">//gi</span><span class=\"n\">thub</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"sr\">/eschulte/</span><span class=\"n\">yasnippets</span><span class=\"o\">-</span><span class=\"n\">rails</span><span class=\"o\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.e</span></div><div class=\"highlight\"><pre><span class=\"c1\">; yasnippets-rails</span>
<span class=\"p\">(</span><span class=\"nv\">yas/load-directory</span> <span class=\"s\">&quot;~/.emacs.d/snippets/yasnippets-rails&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>rhtml-modeでファイルを開いて、<code>%if</code>と入力して<code>TAB</code>を押すと以下で補完されます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"o\">&lt;</span><span class=\"sx\">% if </span><span class=\"n\">cond</span> <span class=\"o\">-</span><span class=\"sx\">%&gt;</span>

<span class=\"sx\">&lt;% end -%&gt;</span>
</pre>
</div>
</div>
<p>ただ、なぜか同じ内容の候補が2つでます。これは、<code>~/.emacs.d/snippets/yasnippets-rails/rails-snippets</code>で<code>html-mode</code>が<code>rhtml-mode</code>にシンボリックリンクされているからのようです。私の場合は、<code>html-mode</code>では使わないのでシンボリックリンクを削除しました。そうすると候補が2つ出てこなくなります。</p>
") (published nil "2012-07-18T16:58:02Z") (updated nil "2012-07-18T16:58:02Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7282") (published nil "2012-07-18T16:44:11+09:00") (updated nil "2012-07-18T16:44:11+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4c652ad4afccae5fe2ef"))) (url nil "http://qiita.com/items/4c652ad4afccae5fe2ef") (title nil "特定のディレクトリ配下のディレクトリをload-pathに追加する") (content ((type . "html")) "<p>手動でelispをいれる際に、いちいちload-pathを指定するのが面倒だったので下記の設定をしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; load-pathを追加する関数を定義</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">add-to-load-path</span> <span class=\"p\">(</span><span class=\"k\">&amp;rest</span> <span class=\"nv\">paths</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">path</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nb\">dolist</span> <span class=\"p\">(</span><span class=\"nv\">path</span> <span class=\"nv\">paths</span> <span class=\"nv\">paths</span><span class=\"p\">)</span>
     <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"nv\">path</span><span class=\"p\">))))</span>
        <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"nv\">default-directory</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">fboundp</span> <span class=\"ss\">&#39;normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">)</span>
             <span class=\"p\">(</span><span class=\"nv\">normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">))))))</span>

<span class=\"c1\">;;; ディレクトリをサブディレクトリごとload-pathに追加</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-load-path</span> <span class=\"s\">&quot;elisp&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>.emacs.d/elisp</code>以下にいれればload-pathに追加します。</p>
") (published nil "2012-07-18T16:44:11Z") (updated nil "2012-07-18T16:44:11Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7245") (published nil "2012-07-17T18:08:35+09:00") (updated nil "2012-07-17T18:08:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2c4f0a4a31286cf4bc51"))) (url nil "http://qiita.com/items/2c4f0a4a31286cf4bc51") (title nil "略語から定型文を入力する: yasnippet") (content ((type . "html")) "<p>定型文を入力できるようにyasnippetをいれます。</p>

<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>yasnippet-bundle</code>をインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; yasnippet</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;yasnippet-bundle</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>デフォルトでいろんなmode毎にスニペットが用意されています。</p>

<p>ここでは、ruby-modeでファイルを開いて、<code>if</code>を入力して<code>TAB</code>を押してみます。</p>

<p>そうすると、下記の様なコードが入力されます。カーソルもconditionの前に移動してくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"n\">condition</span>

<span class=\"k\">end</span>
</pre>
</div>
</div>
<p>これでだいぶプログラムする際の入力の手間が減らせそうです。</p>
") (published nil "2012-07-17T18:08:35Z") (updated nil "2012-07-17T18:08:35Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7218") (published nil "2012-07-16T23:53:26+09:00") (updated nil "2012-07-16T23:53:26+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1e4899ccb8f91cb69ff4"))) (url nil "http://qiita.com/items/1e4899ccb8f91cb69ff4") (title nil "Tramp でポート指定する方法") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"sr\">/ssh:localhost#22:/</span>
</pre>
</div>
</div>") (published nil "2012-07-16T23:53:26Z") (updated nil "2012-07-16T23:53:26Z") (author nil (name nil "biwakonbu"))) (entry nil (id nil "tag:qiita.com,2005:Item/7177") (published nil "2012-07-15T06:30:14+09:00") (updated nil "2012-07-15T06:33:21+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/505bd1bff866e59b47c3"))) (url nil "http://qiita.com/items/505bd1bff866e59b47c3") (title nil "formatの~<newline>支援コマンド") (content ((type . "html")) "<p>formatの&quot;~改行&quot;を使うと、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"no\">t</span> <span class=\"s\">&quot;tilde immediately followed by a newline ~</span>
<span class=\"s\">           ignores the newline and any ~</span>
<span class=\"s\">           following non-newline whitespace[1] ~</span>
<span class=\"s\">           characters.&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;&gt;&gt;  tilde immediately followed by a newline ignores the newline and any following non-newline whitespace[1] characters.</span>
<span class=\"c1\">;=&gt;  NIL</span>
</pre>
</div>
</div>
<p>のように長くなる行を分割して書けます。<br>
しかし、インデントが面倒臭いのであまり使われません。<br>
これがもったいないので支援のelisp書いてみました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">&#39;slime)</span>

<span class=\"s\">(define-key slime-mode-map [(control ?~)]</span>
<span class=\"s\">  (defun slime-format-ignored-newline ()</span>
<span class=\"s\">    (interactive)</span>
<span class=\"s\">    (and (in-string-p)</span>
<span class=\"s\">         (let* ((find-\\&quot; (lambda (n)</span>
<span class=\"s\">                           (string-match &quot;\\&quot;&quot; </span>
<span class=\"s\">                                         (concat (nreverse (string-to-list thing)))</span>
<span class=\"s\">                                         (or n 0) )))</span>
<span class=\"s\">                (thing (thing-at-point &#39;</span><span class=\"n\">line</span><span class=\"p\">))</span>
                <span class=\"p\">;;</span> <span class=\"n\">FIXME</span>
                <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">(</span><span class=\"n\">funcall</span> <span class=\"n\">find</span><span class=\"o\">-\\</span><span class=\"s\">&quot; </span>
<span class=\"s\">                                (1+ (funcall find-\\&quot; 0)) )))</span>
<span class=\"s\">           (insert &quot;</span><span class=\"o\">~</span><span class=\"s\">&quot;)</span>
<span class=\"s\">           (cond (start</span>
<span class=\"s\">                   (split-line)</span>
<span class=\"s\">                   (next-line)</span>
<span class=\"s\">                   (delete-backward-char (- start 2)) )</span>
<span class=\"s\">                 (t (let ((beg (string-match &quot;</span><span class=\"o\">\\\\</span><span class=\"n\">S</span> <span class=\"err\">&quot;</span> <span class=\"n\">thing</span><span class=\"p\">)))</span>
                      <span class=\"p\">(</span><span class=\"n\">newline</span><span class=\"p\">)</span>
                      <span class=\"p\">(</span><span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"n\">make</span><span class=\"o\">-</span><span class=\"n\">string</span> <span class=\"n\">beg</span> <span class=\"mi\">32</span><span class=\"p\">))</span> <span class=\"p\">)))))))</span>
</pre>
</div>
</div>
<p>かなり手抜きなので、ダブルクォートは先行して入力する必要があります。<br>
使えそうなら是非まともなコードに書き直してやって下さい。</p>
") (published nil "2012-07-15T06:30:14Z") (updated nil "2012-07-15T06:33:21Z") (author nil (name nil "g000001"))) (entry nil (id nil "tag:qiita.com,2005:Item/7164") (published nil "2012-07-14T12:51:16+09:00") (updated nil "2012-07-14T12:51:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f02ab0c38ad5e9ba385a"))) (url nil "http://qiita.com/items/f02ab0c38ad5e9ba385a") (title nil "Emacs における快適な Ruby 開発環境を求めて") (content ((type . "html")) "<p>今日は Emacs で Ruby を編集する場合に是非知っておきたい便利なツールについて紹介したいと思います．紹介するツールは以下の 3種類 + 1 です．</p>

<ul>
<li>Smart Compile</li>
<li>xmpfilter</li>
<li>what_methods (anything-ruby-methods)</li>
</ul>

<h1>Smart Compile</h1>

<p><a href=\"http://emacswiki.org/emacs/SmartCompile\">Smart Compile</a> は Emacs からキーを叩くだけで編集中のファイルをコンパイル/実行できる elisp です．これは Ruby に限らず，様々な言語での開発に使用できます．</p>

<p>Emacs には標準のコンパイル機能(M-x compile)があるのですが，これは残念ながら make -k を呼び出すだけとなっており，使用場面が限られてしまいます．C 言語であればこれでいいけど，Ruby であれば，「ruby [編集ファイル]」を呼び出したいです．Smart Compile を使用すると，プログラミング言語ごとに別々のコマンドを割り当てることができるようになります．</p>

<p>C などではコンパイルだけを行いますが，Ruby は分割されたウィンドウに結果を表示してくれます．インストール方法は以下のとおりです．</p>

<ol>
<li><a href=\"http://www.emacswiki.org/emacs/download/smart-compile.el\">smart-compile.el</a> をダウンロードして，ロードパスの通ったところに置く．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">&#39;smart-compile)</span>
<span class=\"s\">    (define-key ruby-mode-map (kbd &quot;C-c c&quot;) &#39;</span><span class=\"n\">smart</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"n\">define</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"n\">ruby</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"nb\">map</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> <span class=\"s\">&quot;C-c C-c&quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> <span class=\"s\">&quot;C-c c C-m&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これで，Ruby 編集中に C-c C-c を入力すると即座にそのファイルを実行して結果を表示してくれます．C-c c を入力すると，ミニバッファに実行するコマンドを入力した状態になるので，こっちは引数などを入力したいときにどうぞ．</p>

<p><img src=\"http://www.fastpic.jp/images.php?file=7328235544.png\" alt=\"Smart Compile 実行画面\"></p>

<h1>xmpfilter</h1>

<p><a href=\"http://d.hatena.ne.jp/keyword/xmpfilter\">xmpfilter</a> は Smart Compile よりも簡単に Ruby の実行結果を見ることができるツールで，rcodetools に付属しています．Ruby コードの行末に「# =&gt;」を入れて xmpfilter を実行すると，その行の返り値を表示してくれます．また，標準出力もコードの末尾に表示してくれます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"mi\">10</span><span class=\"o\">.</span><span class=\"n\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>
      <span class=\"n\">i</span>                             <span class=\"c1\"># =&gt;</span>
    <span class=\"k\">end</span>

    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_a</span>                 <span class=\"c1\"># =&gt;</span>
    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">map!</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">}</span>              <span class=\"c1\"># =&gt;</span>

    <span class=\"nb\">p</span> <span class=\"n\">a</span>
</pre>
</div>
</div>
<p>のコードが</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"mi\">10</span><span class=\"o\">.</span><span class=\"n\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>
      <span class=\"n\">i</span>                             <span class=\"c1\"># =&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span>
    <span class=\"k\">end</span>

    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_a</span>                 <span class=\"c1\"># =&gt; [1, 2, 3, 4, 5]</span>
    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">map!</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">}</span>              <span class=\"c1\"># =&gt; [2, 4, 6, 8, 10]</span>

    <span class=\"nb\">p</span> <span class=\"n\">a</span>
    <span class=\"c1\"># &gt;&gt; [2, 4, 6, 8, 10]</span>
</pre>
</div>
</div>
<p>となります．試行錯誤にはすごく便利! インストール方法は以下のとおりです．</p>

<ol>
<li>gem install rcodetools で rcodetools をインストール．</li>
<li>rcodetools.el をロードパスが通ったところにコピー (/usr/lib/ruby/gems/1.9.1/gems/rcodetools-0.8.5.0 の中とかにあります)．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">&#39;rcodetools)</span>
<span class=\"s\">    (define-key ruby-mode-map (kbd &quot;C-c C-d&quot;) &#39;</span><span class=\"n\">xmp</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>この設定で C-c C-d を入力すると，編集中のファイルに xmp が実行されます．「# =&gt;」を書くのが面倒だと思うかもしれませんが，コードが記述されている行で M-; を 2 回入力すれば挿入されるので大丈夫です．</p>

<p>たいていのコードの試行錯誤はこれで事足ります．ただ，唯一コマンドライン引数が入力できないのが弱点．適宜 Smart Compile と使い分けましょう．</p>

<p>余談ですが，Emacs Lisp で同じことを行える <a href=\"http://www.emacswiki.org/LispXmp\">Lisp Xmp</a> というのもあります．Emacs Lisp を書く人は是非．</p>

<h1>what_methods</h1>

<p>「このオブジェクトを○○にするメソッドって何だっけ？」ってときありますよね．そういうときに <a href=\"https://github.com/BMorearty/what_methods\">what_methods</a> の what? メソッドで簡単に調べられます．</p>

<p>例えば，「(1..3)」を「[1,2,3]」にするメソッドが思いだせないときは，irb で以下のように実行します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"n\">irb</span><span class=\"o\">&gt;</span> <span class=\"nb\">require</span> <span class=\"s1\">&#39;what_methods&#39;</span>
    <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span>
    <span class=\"n\">irb</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">what?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>
    <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">to_a</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
    <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">entries</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
    <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">sort</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
    <span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"ss\">:to_a</span><span class=\"p\">,</span> <span class=\"ss\">:entries</span><span class=\"p\">,</span> <span class=\"ss\">:sort</span><span class=\"o\">]</span>
</pre>
</div>
</div>
<h2>Emacs で what_methods を使う</h2>

<p>この what_methods を Emacs で使うとき，eshell を開いたりしてもいいのですが，anything のインターフェイスを利用して簡単に挿入できるような Elisp (<a href=\"https://github.com/akisute3/anything-ruby-methods\">anything-ruby-methods</a>) を書きました．オブジェクトの後ろで実行するとミニバッファが出力され，そこに出力結果を入力して RET を押すと，anything バッファにメソッド一覧が表示されるというものです．</p>

<p><img src=\"http://www.fastpic.jp/images.php?file=2560853622.png\" alt=\"(1..3)がメソッドによって返してほしいオブジェクトをミニバッファに入力\"></p>

<p><img src=\"http://www.fastpic.jp/images.php?file=2389010507.png\" alt=\"するとメソッドがanythingバッファに表示される．選択して挿入可能\"></p>

<p>インストール方法は以下のとおりです．</p>

<ol>
<li>anything をインストール (auto-install が入っているなら M-x auto-install-batch anything でインストールできます)．</li>
<li>gem install what_methods で what_methods をインストール．</li>
<li><a href=\"https://raw.github.com/akisute3/anything-ruby-methods/master/anything-ruby-methods.el\">anything-ruby-methods.el</a> をダウンロードして，ロードパスの通ったところに置く．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>     <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">&#39;anything-ruby-methods)</span>
<span class=\"s\">     (define-key ruby-mode-map (kbd &quot;C-c d&quot;) &#39;</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">ruby</span><span class=\"o\">-</span><span class=\"n\">methods</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-c d を入力すると，行頭からカーソルまでを self として what? を実行します．transient-mark-mode がオン (リージョンが色つき) のときは，リージョンが self となります．</p>

<p>ちなみにこれは what_methods にも言えることなのですが，お察しのとおり全メソッドを全て実行して出力が一致するか確認しています．そのため，what? に渡すオブジェクトにファイルを削除するなどの危険なコードが含まれているとそれを実行してしまうので，使用には十分注意しましょう．</p>

<h1>まとめ</h1>

<p>Emacs で Ruby の編集に便利なツールをいくつか紹介しました．その中でも断トツで xmpfilter が便利なのですが，まあ Emacs で Ruby 開発してる人ならほとんどの人が知ってますよね．「Emacs ではそんなことができるのか!?」と思った人がいれば，Emacs を使ってみるのもいいと思います．たぶん Vim でもできますが．</p>

<p>anything-ruby-methods は作ったばかりなので全く洗練されていません．Elisp のコードも非常に残念な感じです．とりあえず私自身が使っていて今のところ問題が起こったことはありません．</p>

<p>今後の機能拡張として，オブジェクトに使用可能な全てのメソッドを並べる情報源の追加はやりたいですね．これがあると，とりあえず実行してメソッドを眺めて (文字入力でメソッドを絞り込んで) 選択ってのが可能になります．ただ，メソッド補完は rcodetools とか RSense 使った方がいいような……．あとは，候補にカーソルをあわせて C-z で，そのメソッドのリファレンスを別のバッファに表示するとか．できるのかな？ そもそも本当にやるのかな？</p>
") (published nil "2012-07-14T12:51:16Z") (updated nil "2012-07-14T12:51:16Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/7147") (published nil "2012-07-13T13:55:06+09:00") (updated nil "2012-07-13T13:55:06+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3e9976bb9ae8a0b793dd"))) (url nil "http://qiita.com/items/3e9976bb9ae8a0b793dd") (title nil "Emacsで現在のキーバインドを確認する") (content ((type . "html")) "<p>Emacsで現在のキーバインドを確認するにはキーバインドの一覧を表示するか知りたいキーをタイプして確認します。</p>

<p>キーバインド一覧を表示するには、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">bindings</span>
</pre>
</div>
</div>
<p>また、特定のキーのバインドを知りたいときは、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">key</span>
</pre>
</div>
</div>
<p>と打った後に知りたいキーをタイプします。</p>
") (published nil "2012-07-13T13:55:06Z") (updated nil "2012-07-13T13:55:06Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7145") (published nil "2012-07-13T13:51:44+09:00") (updated nil "2012-07-13T13:51:44+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/cbcf021eec77f546c7b6"))) (url nil "http://qiita.com/items/cbcf021eec77f546c7b6") (title nil "redo+: undoしすぎたのを元に戻す") (content ((type . "html")) "<p>undoしすぎたのを元に戻すようにredo+をいれます。</p>

<p>インストールは<code>M-x packege-list-packages</code>の一覧から<code>redo+</code>を選択してインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; redo+</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;redo+</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-/&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;redo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-no-redo</span> <span class=\"no\">t</span><span class=\"p\">)</span> <span class=\"c1\">; 過去のundoがredoされないようにする</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-limit</span> <span class=\"mi\">600000</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-strong-limit</span> <span class=\"mi\">900000</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>C-/</code>でundoをして、undoしすぎた場合は<code>C-M-/</code>で元に戻します。</p>
") (published nil "2012-07-13T13:51:44Z") (updated nil "2012-07-13T13:51:44Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7107") (published nil "2012-07-12T13:34:13+09:00") (updated nil "2012-07-12T13:34:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7b7536e903591dd347ca"))) (url nil "http://qiita.com/items/7b7536e903591dd347ca") (title nil "ファイル作成時にテンプレートを挿入する") (content ((type . "html")) "<p>プログラムなどで新規にファイルを作成する際に、HTMLであれば<code>&lt;html&gt;&lt;head&gt;&lt;/head&gt;...&lt;/html&gt;</code>や、rubyであれば先頭に<code>#!/usr/bin/env ruby</code>など決まった内容をいれる場合が結構あるかと思います。auto-insert-modeを使うと自動でそういった内容を作成時に自動的にいれてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">auto-insert-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">auto-insert-directory</span> <span class=\"s\">&quot;~/.emacs.d/insert/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-auto-insert</span> <span class=\"s\">&quot;\\\\.rb$&quot;</span> <span class=\"s\">&quot;ruby-template.rb&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>.rb</code>のファイルを新しく作成した際に、<code>ruby-template.rb</code>の内容が自動的に挿入されます。</p>
") (published nil "2012-07-12T13:34:13Z") (updated nil "2012-07-12T13:34:13Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/7087") (published nil "2012-07-11T21:58:04+09:00") (updated nil "2012-07-11T21:58:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3790bcf9cdab7e28fb0f"))) (url nil "http://qiita.com/items/3790bcf9cdab7e28fb0f") (title nil "ファイルを保存した時にFlymakeの結果をGrowlで通知する") (content ((type . "html")) "<p>flymakeでエラーが検出されると通知される奴は自分には少しアクティブすぎたので保存した段階でエラーが検出されると通知されるようにした。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">executable</span><span class=\"o\">-</span><span class=\"n\">find</span> <span class=\"s\">&quot;growlnotify&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">growlnotify</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">count</span> <span class=\"p\">(</span><span class=\"nb\">length</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)))</span>
      <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"o\">&gt;</span> <span class=\"n\">count</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"n\">dolist</span> <span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">line</span>    <span class=\"p\">(</span><span class=\"n\">car</span> <span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">))</span>
                 <span class=\"p\">(</span><span class=\"n\">text</span>    <span class=\"p\">(</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">ler</span><span class=\"o\">-</span><span class=\"n\">text</span> <span class=\"p\">(</span><span class=\"n\">caadr</span> <span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)))</span>
                 <span class=\"p\">(</span><span class=\"n\">title</span>   <span class=\"p\">(</span><span class=\"n\">concat</span> <span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">))</span> <span class=\"s\">&quot;:&quot;</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">string</span> <span class=\"n\">line</span><span class=\"p\">))))</span>
            <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span> <span class=\"s\">&quot;emacs-flymake&quot;</span> <span class=\"n\">nil</span> <span class=\"s\">&quot;growlnotify&quot;</span>
                                         <span class=\"s\">&quot;-a&quot;</span> <span class=\"s\">&quot;Emacs&quot;</span> <span class=\"s\">&quot;-n&quot;</span> <span class=\"s\">&quot;&#39;Emacs - Flymake&#39;&quot;</span> <span class=\"s\">&quot;-p&quot;</span> <span class=\"s\">&quot;2&quot;</span> <span class=\"s\">&quot;-s&quot;</span>
                                         <span class=\"s\">&quot;-t&quot;</span> <span class=\"n\">title</span> <span class=\"s\">&quot;-m&quot;</span> <span class=\"p\">(</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">quote</span><span class=\"o\">-</span><span class=\"n\">argument</span> <span class=\"n\">text</span><span class=\"p\">)))))))</span>
  <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;after-save-hook &#39;</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">growlnotify</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>後会社ではimacで開発してるのでGrowlで<code>Emacs - Flymake</code>の通知をMusic Videoにするとかなり目立つのでオススメ</p>

<p>flymake-after-save-hookが反応しなかったので普通にafter-save-hookで書いているけど想像したhookとは別なのだろうか。</p>
") (published nil "2012-07-11T21:58:04Z") (updated nil "2012-07-11T21:58:04Z") (author nil (name nil "Daic_h"))) (entry nil (id nil "tag:qiita.com,2005:Item/7054") (published nil "2012-07-11T11:42:22+09:00") (updated nil "2012-07-17T10:44:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/6848f14a4ff89649ce44"))) (url nil "http://qiita.com/items/6848f14a4ff89649ce44") (title nil "Emacsで文字コード指定") (content ((type . "html")) "<h2>開き直し</h2>

<p>C-x RET c {文字コード} RET C-x C-v RET </p>

<p>↓ 簡単</p>

<blockquote>
<p>C-x RET r </p>
</blockquote>

<h2>文字コード指定</h2>

<blockquote>
<p>C-x RET f {文字コード} RET</p>
</blockquote>
") (published nil "2012-07-11T11:42:22Z") (updated nil "2012-07-17T10:44:09Z") (author nil (name nil "swanky_days"))) (entry nil (id nil "tag:qiita.com,2005:Item/7011") (published nil "2012-07-10T08:45:59+09:00") (updated nil "2012-07-10T08:45:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ce366054d15472134a72"))) (url nil "http://qiita.com/items/ce366054d15472134a72") (title nil "最後の変更箇所にジャンプする") (content ((type . "html")) "<p>テキストを編集していて前の編集した箇所に戻りたいときがよくあります。その際に便利なのがgoto-chg.elになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"nb\">goto</span><span class=\"o\">-</span><span class=\"n\">chg</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;goto-chg</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;&lt;f8&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;goto-last-change</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;S-&lt;f8&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;goto-last-change-reverse</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>F8</code>を押すと、前回修正した箇所に移動します。<code>F8</code>を押し続けると、さらに過去の変更箇所に移動することができます。移動しすぎた際には、<code>Shift-F8</code>で元に戻ります。</p>
") (published nil "2012-07-10T08:45:59Z") (updated nil "2012-07-10T08:45:59Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6980") (published nil "2012-07-09T00:12:45+09:00") (updated nil "2012-07-09T00:12:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/afe26bb5c8abf694425e"))) (url nil "http://qiita.com/items/afe26bb5c8abf694425e") (title nil "Emacsで hl-line-mode にしたらカーソル行の文字色が固定されちゃったので直しました") (content ((type . "html")) "<p>Emacsでカーソル行をハイライトするモード<code>hl-line-mode</code>を使っていたら、元々なのか途中からそうなってしまったのか定かではありませんが、プログラム用にハイライトされていてもカーソル行の文字色だけ全て同じになっていて見づらいことこの上無かったので直しました。というかいじってたら勝手に直りました。</p>

<p>で、直し方なんですが、<code>hl-line+.el</code>を入れたら直りました。ただ、他にもいじってたので本当にこれが原因なのか分かりません。</p>

<p>僕の環境はMacのiTerm2でEmacs24を使ってます。</p>
") (published nil "2012-07-09T00:12:45Z") (updated nil "2012-07-09T00:12:45Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/6972") (published nil "2012-07-08T14:30:22+09:00") (updated nil "2012-07-08T14:30:22+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/695f370c596cf99bd647"))) (url nil "http://qiita.com/items/695f370c596cf99bd647") (title nil "yasnippet の新しいスニペットをリージョンから作成する") (content ((type . "html")) "<p><a href=\"http://capitaomorte.github.com/yasnippet/\">yasnippet</a> は Emacs でコードを書くときに便利なツール。短い文字列を定義されたスニペットに応じて展開してくれる。</p>

<p>この新しいスニペットを作成するために、関数 yas/new-snippet が用意されているのだが、コードを書いてる時に「ここをスニペットにしておくと今後便利かもしれない」と思うことがあると思う。そういう時のために、新規スニペット作成用のバッファにリージョンの内容を展開する Elisp を書いた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">yas/new-snippet-region</span> <span class=\"p\">(</span><span class=\"k\">&amp;optional</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">no-template</span><span class=\"p\">)</span>
  <span class=\"s\">&quot;Pops a new buffer for writing a snippet.</span>

<span class=\"s\">Expands a snippet-writing snippet, unless the optional prefix arg</span>
<span class=\"s\">NO-TEMPLATE is non-nil.&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;rP&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">yas/region-string</span> <span class=\"p\">(</span><span class=\"nv\">buffer-substring-no-properties</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">guessed-directories</span> <span class=\"p\">(</span><span class=\"nv\">yas/guess-snippet-directories</span><span class=\"p\">)))</span>

    <span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"s\">&quot;*new snippet*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">erase-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">kill-all-local-variables</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">snippet-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">yas/minor-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">&#39;yas/guessed-modes</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">mapcar</span> <span class=\"nf\">#&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">d</span><span class=\"p\">)</span>
                                                              <span class=\"p\">(</span><span class=\"nb\">intern</span> <span class=\"p\">(</span><span class=\"nv\">yas/table-name</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nv\">d</span><span class=\"p\">))))</span>
                                                          <span class=\"nv\">guessed-directories</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"nv\">no-template</span> <span class=\"p\">(</span><span class=\"nv\">yas/expand-snippet</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"err\">&quot;\\</span>
<span class=\"err\">#</span> <span class=\"nv\">-*-</span> <span class=\"nv\">mode:</span> <span class=\"nv\">snippet</span> <span class=\"nv\">-*-</span>
<span class=\"err\">#</span> <span class=\"nv\">name:</span> <span class=\"nv\">$1</span>
<span class=\"err\">#</span> <span class=\"nv\">key:</span> <span class=\"nv\">${2:${1:$</span><span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"nv\">\\&quot;\\\\\\\\\\\\\\\\</span><span class=\"p\">(</span><span class=\"nv\">\\\\\\\\\\\\\\\\w+\\\\\\\\\\\\\\\\</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nv\">*\\&quot;</span> <span class=\"nv\">\\&quot;\\\\\\\\\\\\\\\\1\\&quot;</span> <span class=\"nv\">yas/text</span><span class=\"p\">)</span><span class=\"nv\">}}</span>
<span class=\"err\">#</span> <span class=\"nv\">--</span>
<span class=\"nv\">%s$0</span><span class=\"err\">&quot;</span> <span class=\"nv\">yas/region-string</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>使い方は、リージョンを指定して M-x yas/new-snippet-region でOK。</p>

<p>「書いた」といっても、yas/new-snippet に (interactive &quot;r&quot;) を追加してその間の文字列を文字列内に挿入しているだけ。また、自分は name: と key: 以外はスニペットに書くことがほとんどないので、テンプレートから残りの項目を削除している。必要なら最後の文字列を元の yas/new-snippet を参照して変更すればいい。</p>

<p>このコードは現在の最新版であるバージョン 0.7 の yas/new-snippet を参考に書いた。yasnippet はコロコロ仕様が変わるから、0.6 系だとおそらく動かない。</p>
") (published nil "2012-07-08T14:30:22Z") (updated nil "2012-07-08T14:30:22Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6913") (published nil "2012-07-06T02:09:51+09:00") (updated nil "2012-07-06T10:36:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8cbd8d3c792476c59a11"))) (url nil "http://qiita.com/items/8cbd8d3c792476c59a11") (title nil "Emacsでファイルを自動保存する auto-save-buffers-enhanced") (content ((type . "html")) "<p>auto-save-buffersの機能追加版です、私はこっちを使っています。</p>

<p><a href=\"http://d.hatena.ne.jp/antipop/20080222/1203688543\">auto-save-buffers-enhanced更新 - antipop</a></p>

<h2>インストール</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> <span class=\"s\">&quot;https://raw.github.com/kentaro/auto-save-buffers-enhanced/master/auto-save-buffers-enhanced.el&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>設定</h2>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120514/1336983541\">auto-shell-command</a>と一緒に使いたかったのでアイドルタイムを0.5→1秒に伸ばしました。ここは大切なので再調整するかも。auto-shell-commandは実行を一時的にサスペンド出来るのでその機能と組み合わせながら使うことになりそうです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"err\">&#39;</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span><span class=\"o\">-</span><span class=\"n\">interval</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">;</span> <span class=\"err\">指定のアイドル秒で保存</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span> <span class=\"n\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-07-06T02:09:51Z") (updated nil "2012-07-06T10:36:13Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/6893") (published nil "2012-07-05T14:28:13+09:00") (updated nil "2012-07-05T14:28:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/53c85841ca290a6cee52"))) (url nil "http://qiita.com/items/53c85841ca290a6cee52") (title nil "read-only-only-mode.el") (content ((type . "html")) "<p>grepから開いた時とか、自動で view-mode にしたいと思った。</p>

<p><a href=\"https://raw.github.com/10sr/emacs-lisp/master/read-only-only-mode.el\">https://raw.github.com/10sr/emacs-lisp/master/read-only-only-mode.el</a></p>

<p><code>M-x read-only-only-mode</code> でモードをトグルする。有効な時、ファイルを開くと常に view-mode が有効になる。</p>
") (published nil "2012-07-05T14:28:13Z") (updated nil "2012-07-05T14:28:13Z") (author nil (name nil "10sr"))) (entry nil (id nil "tag:qiita.com,2005:Item/6883") (published nil "2012-07-05T11:56:21+09:00") (updated nil "2012-07-05T11:56:21+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/98242b51c569e90fdde0"))) (url nil "http://qiita.com/items/98242b51c569e90fdde0") (title nil "カーソル位置を記録してハイライトする") (content ((type . "html")) "<p>ファイル内でカーソル位置を記憶して、いきいきできるようにします。さらに記憶したカーソル位置をハイライトします。</p>

<p>インストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span> <span class=\"n\">http:</span><span class=\"sr\">//c</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">savannah</span><span class=\"o\">.</span><span class=\"n\">gnu</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"sr\">/viewvc/</span><span class=\"o\">*</span><span class=\"n\">checkout</span><span class=\"o\">*</span><span class=\"sr\">/bm/</span><span class=\"n\">bm</span><span class=\"o\">/</span><span class=\"n\">bm</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">setq-default</span> <span class=\"nv\">bm-buffer-persitence</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bm-restore-repository-on-load</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;bm</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;find-file-hooks</span> <span class=\"ss\">&#39;bm-buffer-restore</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;kill-buffer-hook</span> <span class=\"ss\">&#39;bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;after-save-hook</span> <span class=\"ss\">&#39;bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;after-revert-hook</span> <span class=\"ss\">&#39;bm-buffer-restore</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;vc-before-checkin-hook</span> <span class=\"ss\">&#39;bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-SPC&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;bm-toggle</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-[&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;bm-previous</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-]&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;bm-next</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-SPC (bm-toggle)</code>でその行をハイライトします。<code>M-[ (bm-previous)</code>で前の印へ、<code>M-] (bm-next)</code>で次の印へ移動します。</p>

<p>上記の設定でEmacsを終了しても印は記録されます。</p>

<h2>参考</h2>

<p>「Emacsテクニックバイブル」P116</p>
") (published nil "2012-07-05T11:56:21Z") (updated nil "2012-07-05T11:56:21Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6859") (published nil "2012-07-04T15:40:34+09:00") (updated nil "2012-07-04T15:40:34+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7209d291655b8fdf281f"))) (url nil "http://qiita.com/items/7209d291655b8fdf281f") (title nil "Windows+Emacs+xmpfilter を改行コード LF の環境で使用する") (content ((type . "html")) "<p>xmpfilter は Ruby 開発に非常に便利なツール。「コード # =&gt;」と記述している行の末尾に，その行の返り値を出力してくれる．Emacs or Vim + Ruby な人はたいてい使っているんじゃないだろうか。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>                           <span class=\"c1\"># =&gt; 3</span>
<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">].</span><span class=\"n\">map</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">}</span>       <span class=\"c1\"># =&gt; [4, 5, 6]</span>
<span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>                          <span class=\"c1\"># =&gt; false</span>
</pre>
</div>
</div>
<p>興味があれば是非使ってみて欲しい。<br>
はてなキーワード → <a href=\"http://d.hatena.ne.jp/keyword/xmpfilter\">http://d.hatena.ne.jp/keyword/xmpfilter</a></p>

<p>さて、本題に移ろう。この xmpfilter、Windows の Emacs で改行コードが LF の環境で使用すると、改行コードを CR+LF に変換して返してくる。これは Ruby が Windows では &#39;\\n&#39; を CR+LF と認識するためである。</p>

<p>この問題は xmpfilter のソースコードを少し弄るだけでなんとかなる。rcodetools-0.8.5.0/bin/xmpfilter の最終行を以下のように変更すればいい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"c1\"># Do the job. dispatched by klass.</span>
<span class=\"c1\"># puts klass.run(targetcode, options)</span>
<span class=\"vg\">$stdout</span><span class=\"o\">.</span><span class=\"n\">binmode</span><span class=\"o\">.</span><span class=\"n\">puts</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">targetcode</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>しっかりテストしたわけでもないが、今のところは期待通りに動いている。同じ症状に困っている人がいれば参考にどうぞ。</p>
") (published nil "2012-07-04T15:40:34Z") (updated nil "2012-07-04T15:40:34Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6827") (published nil "2012-07-03T22:48:09+09:00") (updated nil "2012-07-03T22:48:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4348839edcf510bdf71d"))) (url nil "http://qiita.com/items/4348839edcf510bdf71d") (title nil "Emacs でカーソル位置のシンボルをハイライト") (content ((type . "html")) "<p>Eclipse みたいなやつ。こんなことができる → <a href=\"http://www.youtube.com/watch?v=xzJ2r4-s7fo\">Youtube</a>。</p>

<p>インストールは、<br>
M-x auto-install-from-url <a href=\"https://raw.github.com/mitsuo-saito/auto-highlight-symbol-mode/master/auto-highlight-symbol.el\">https://raw.github.com/mitsuo-saito/auto-highlight-symbol-mode/master/auto-highlight-symbol.el</a><br>
の後に以下を .emacs に記述すればOK。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-highlight-symbol</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-auto-highlight-symbol-mode</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>シンボル間のカーソル移動や、ハイライトされているシンボルを一括リネームできたりして便利。</p>
") (published nil "2012-07-03T22:48:09Z") (updated nil "2012-07-03T22:48:09Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6753") (published nil "2012-07-01T22:55:54+09:00") (updated nil "2012-07-01T22:55:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b867758fcc5106382a30"))) (url nil "http://qiita.com/items/b867758fcc5106382a30") (title nil "Emacsのclojure-modeを更新したい") (content ((type . "html")) "<p>clojure-modeはELPAパッケージを使って入れてたのだが、メンテの流れが滞ってるっぽい?!</p>

<p>ググると<a href=\"http://marmalade-repo.org/\">Marmalade</a>なるリポジトリが良いみたいな？<br>
ELPA完全互換で流れもよさげなので切り替えまする。</p>

<p>ここのサイトからpackage.elをコピペって設置してみる。<br>
書いてあるelispを記述してevalる、いやemacs再起動。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;package)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span> 
    <span class=\"s\">&#39;</span><span class=\"err\">(&quot;marmalade&quot; .</span>
      &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">marmalade</span><span class=\"o\">-</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>書いてある通りやってみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">refresh</span><span class=\"o\">-</span><span class=\"n\">contents</span>    
</pre>
</div>
</div>
<p>さっそくパッケージリスト一覧を見てみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"o\">-</span><span class=\"n\">packages</span>
</pre>
</div>
</div>
<p>リターンキーでコネクトしてくれて一覧とパッケージ情報を表示してくれるので、一覧からclojure-modeをセレクトする。</p>

<p>パッケージ情報のところの<code>Install</code>を押すとインストールしてくれる親切さ、素晴らしい (・∀・)</p>

<p>clojure-modeの設定をinit.elに記述する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;clojure-mode)</span>
<span class=\"s\">(defun turn-on-paredit () (paredit-mode 1))</span>
<span class=\"s\">(add-hook  &#39;</span><span class=\"n\">clojure</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;</span><span class=\"err\">turn-on-paedit)</span>
</pre>
</div>
</div>
<p>さっそくleiningenでClojureプロジェクトを作ってみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">&gt;</span><span class=\"n\">lein</span> <span class=\"n\">new</span> <span class=\"n\">sample</span>
</pre>
</div>
</div>
<p>emacsでフォルダを開く<br>
<code><br>
C-x C-f sample<br>
</code></p>

<p>ここで<code>M-x clojure-jack-in</code>としたらREPLが自動的に立ち上がった (<em>´∀｀</em>)<br>
こんなにお手軽になってるなんて！素晴らしい。</p>
") (published nil "2012-07-01T22:55:54Z") (updated nil "2012-07-01T22:55:54Z") (author nil (name nil "gokoku_h"))) (entry nil (id nil "tag:qiita.com,2005:Item/6680") (published nil "2012-06-28T13:40:31+09:00") (updated nil "2012-06-28T13:40:31+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5ff996a5c708631824aa"))) (url nil "http://qiita.com/items/5ff996a5c708631824aa") (title nil "カーソルの位置を戻す") (content ((type . "html")) "<p>point-undoを使うと、カーソルが変なところに行ってしまっても元の位置にに戻すことができます。</p>

<p>インストールは、</p>

<p><code>M-x install-elisp-from-emacswiki point-undo.el</code></p>

<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;point-undo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;&lt;f7&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;point-undo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;S-&lt;f7&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;point-redo</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>F7</code>を押すとカーソルが元の位置に戻ります。連続して押すこともできます。戻りすぎてしまった場合は、<code>S-F7</code>ことで戻ったのを戻すことができます。</p>

<h2>参考</h2>

<p>「Emacsテクニックバイブル」P115</p>
") (published nil "2012-06-28T13:40:31Z") (updated nil "2012-06-28T13:40:31Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6660") (published nil "2012-06-27T23:05:10+09:00") (updated nil "2012-06-27T23:05:10+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f66cb8c76cdff729826c"))) (url nil "http://qiita.com/items/f66cb8c76cdff729826c") (title nil "Windows で無変換キーをプレフィックスキーとして利用する。") (content ((type . "html")) "<p>私はこのような設定をで無変換キーをプレフィックスキーとして利用しています。</p>

<p>(when (eq system-type &#39;windows-nt)<br>
 (defvar non-convert-map (make-keymap))<br>
 (define-key global-map (kbd &quot;&quot;) non-convert-map)<br>
 )</p>

<p>これで、<br>
(define-key non-convert-map (kbd &quot;キー&quot;) &#39;関数名)<br>
のように定義できます。</p>

<p>わざわざキーマップを定義しなくても、<br>
(global-set-key (kbd &quot;キー&quot;) &#39;関数名)<br>
でもできます。</p>

<p>アプリケーションキーなども使えると思いますがそちらは試していません。</p>

<p>Emacs 側にどのような名前で認識されているかは、<br>
キーを押した時に、エコーエリアに表示されるメッセージから<br>
知ることができます。</p>
") (published nil "2012-06-27T23:05:10Z") (updated nil "2012-06-27T23:05:10Z") (author nil (name nil "Fenril058"))) (entry nil (id nil "tag:qiita.com,2005:Item/6648") (published nil "2012-06-27T18:42:03+09:00") (updated nil "2012-06-27T18:42:03+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/910b2672f5d0949c66cc"))) (url nil "http://qiita.com/items/910b2672f5d0949c66cc") (title nil "Ubuntu11.10にmigemoをいれる") (content ((type . "html")) "<p>ローマ字でインクリメンタルサーチできるようにmigemoをいれました。</p>

<p>Ubuntu11.10でRuby実装のmigemoをパッケージでいれたのですがうまく動作しなかったので、cmigemoを使うことにしました。</p>

<p>標準ではcmigemoのパッケージはないのでPPAをリポジトリに追加します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">repository</span> <span class=\"n\">ppa</span><span class=\"p\">:</span><span class=\"n\">kakurasan</span><span class=\"o\">/</span><span class=\"n\">stable</span>
$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">update</span>
</pre>
</div>
</div>
<p>elispが必要なので、migemoをいれておきます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">migemo</span>
</pre>
</div>
</div>
<p>cmigemoをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">cmigemo</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">load</span> <span class=\"s\">&quot;migemo&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-coding-system</span> <span class=\"ss\">&#39;euc-jp-unix</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-command</span> <span class=\"s\">&quot;cmigemo&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-options</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;-q&quot;</span> <span class=\"s\">&quot;--emacs&quot;</span> <span class=\"s\">&quot;-i&quot;</span> <span class=\"s\">&quot;\\a&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-user-dictionary</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-regex-dictionary</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-27T18:42:03Z") (updated nil "2012-06-27T18:42:03Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6629") (published nil "2012-06-27T02:09:22+09:00") (updated nil "2012-06-27T23:08:43+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/54f0387284ac57c106c0"))) (url nil "http://qiita.com/items/54f0387284ac57c106c0") (title nil "Flymake を有効にしていると Magit の Ediff でエラーが発生する") (content ((type . "html")) "<p>Ruby でファイルを開くと Flymake が有効になるように設定しているのだが、Magit で e を押して Ediff による比較をするとき、以下のようなエラーが発生する。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">filter</span><span class=\"p\">:</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">and</span><span class=\"o\">-</span><span class=\"n\">masks</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">filter</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">sentinel</span><span class=\"p\">:</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">and</span><span class=\"o\">-</span><span class=\"n\">masks</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">sentinel</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
</pre>
</div>
</div>
<p>Ediff が使えないわけではないのだが、Magit で Ediff を起動した直後はエラー発生で固まって非常に鬱陶しいのでいろいろ調べてみた。</p>

<p>発生箇所は magit.el の magit-show 関数内部、2769行目の (normal-mode) のようだ。ここで flymake-mode がロードされ、最終的に flymake.el の flymake-get-file-name-mode-and-masks 関数内部、289行目で引数のファイル名が不正なためにエラーを出力している。</p>

<p>ステップ実行だとエラーを出力しないので外部プロセス関連かとは思うのだが、原因究明はあまりにも面倒なので以下のように応急処置で対処することにした。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">magit-ediff</span> <span class=\"p\">(</span><span class=\"nv\">around</span> <span class=\"nv\">flymake-off</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">&#39;ruby-mode-hook</span> <span class=\"ss\">&#39;ruby-flymake-hooks</span><span class=\"p\">)</span>
  <span class=\"nv\">ad-do-it</span>
  <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;ruby-mode-hook</span> <span class=\"ss\">&#39;ruby-flymake-hooks</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>magit-ediff 開始時に Ruby の Flymake 関連のフックを削除し、Ediff の準備が完了したら元に戻すというもの。とりあえずエラーが発生しなくなったので、原因がわかるまではこれで凌ごうと思う。</p>

<p>もしも同じ問題を解決した人がいれば是非教えてほしい。</p>
") (published nil "2012-06-27T02:09:22Z") (updated nil "2012-06-27T23:08:43Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6528") (published nil "2012-06-25T06:50:04+09:00") (updated nil "2012-06-25T06:50:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c4955b7950cada2786b4"))) (url nil "http://qiita.com/items/c4955b7950cada2786b4") (title nil "リモートのファイルを操作する") (content ((type . "html")) "<p>リモートファイルを操作するときのやり方をメモしておきます。</p>

<p>リモートファイル名の書式は「/METHOD:USERNAME@HOSTNAME:FILENAME」になります。</p>

<p>ここでMETHODには、ssh ,rsh, telnet, su, sudo がはいります。</p>

<p>sshでユーザ「foo」がホスト「ruby」にある<code>~/.bash_profile</code>を編集するには、<code>C-x C-f /ssh:foo@ruby:~/.bash_profile</code>を実行します。</p>

<p>また、root権限で<code>/etc/passwd</code>を編集するときは、<code>C-x C-f /sudo:root@localhost:/etc/passwd</code>を実行します。</p>
") (published nil "2012-06-25T06:50:04Z") (updated nil "2012-06-25T06:50:04Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6525") (published nil "2012-06-25T00:47:29+09:00") (updated nil "2012-06-25T00:47:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/60f2d6b5d83db653d719"))) (url nil "http://qiita.com/items/60f2d6b5d83db653d719") (title nil "ghc-mod の flymake でファイルを勝手に保存させない") (content ((type . "html")) "<p>「&gt; Also, a timer executes syntax check automatically.」ってあるけどあんま嬉しくない。</p>

<p><a href=\"https://gist.github.com/2983617\">https://gist.github.com/2983617</a> で様子見ることにする。</p>
") (published nil "2012-06-25T00:47:29Z") (updated nil "2012-06-25T00:47:29Z") (author nil (name nil "hiratara"))) (entry nil (id nil "tag:qiita.com,2005:Item/6524") (published nil "2012-06-25T00:23:58+09:00") (updated nil "2012-06-25T00:23:58+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/139b5f4590f120c301a7"))) (url nil "http://qiita.com/items/139b5f4590f120c301a7") (title nil "flymake で一時ファイルの出力先をファイルと同じディレクトリにしない") (content ((type . "html")) "<p>Dropbox 内部でプログラムを書いていると、頻繁にファイルのアップロードと削除が行われて嫌だったので調べてみた。</p>

<p>結論としては、<code>flymake-create-temp-inplace</code> ではなく <code>flymake-create-temp-with-folder-structure</code> を使用すれば良さそうだ。例えば Ruby であればこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">flymake-ruby-init</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">temp-file</span>   <span class=\"p\">(</span><span class=\"nv\">flymake-init-create-temp-buffer-copy</span>
                       <span class=\"c1\">;; &#39;flymake-create-temp-inplace ← ここを変更</span>
                       <span class=\"ss\">&#39;flymake-create-temp-with-folder-structure</span><span class=\"p\">))</span>
         <span class=\"p\">(</span><span class=\"nv\">local-file</span>  <span class=\"p\">(</span><span class=\"nv\">file-relative-name</span>
                       <span class=\"nv\">temp-file</span>
                       <span class=\"p\">(</span><span class=\"nv\">file-name-directory</span> <span class=\"nv\">buffer-file-name</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;ruby&quot;</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;-c&quot;</span> <span class=\"nv\">local-file</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>まあ temp-file を書き換えればどうにでもなるわけだけど、わざわざ関数が用意されてるのでそれを使わせてもらうことにする。</p>

<p>ちなみに私の環境だとこの設定によって、/tmp 以下に絶対パスのディレクトリ構成を作成し、そこにソースファイルを作成するようになった。あと、パスの途中にピリオドの入ったディレクトリが存在するとエラーが出るようなので注意。</p>
") (published nil "2012-06-25T00:23:58Z") (updated nil "2012-06-25T00:23:58Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6472") (published nil "2012-06-23T01:43:25+09:00") (updated nil "2012-06-23T01:43:25+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ff857598019f07c4023a"))) (url nil "http://qiita.com/items/ff857598019f07c4023a") (title nil "terminal上のEmacsでmetaキーをoptionキーに割り当てる") (content ((type . "html")) "<p>デフォだとescキーしか反応しない</p>

<p>terminalの環境設定 &gt; 設定タブ &gt; キーボード <br>
メタキーとしてoptionキーを使用 にチェックしてOK</p>
") (published nil "2012-06-23T01:43:25Z") (updated nil "2012-06-23T01:43:25Z") (author nil (name nil "flada_auxv"))) (entry nil (id nil "tag:qiita.com,2005:Item/6462") (published nil "2012-06-22T17:40:12+09:00") (updated nil "2012-06-22T18:09:47+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7a1111408c679c4478d8"))) (url nil "http://qiita.com/items/7a1111408c679c4478d8") (title nil "ELPA (Emacs Lisp Package Archive)") (content ((type . "html")) "<p>ELPAはemacsのパッケージマネージャー。emacs24以降はbuild-inされているが、24以前は自分でインストールする必要がある。</p>

<h2>ELPAのインストール (emacs24以前)</h2>

<p>下記サイトにインストール方法が載っているのでそれに従ってインストールする。<br>
-&gt; <a href=\"http://tromey.com/elpa/install.html\">http://tromey.com/elpa/install.html</a></p>

<h2>HowTo</h2>

<p>emacsを開いて</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>M-x list-packages <span class=\"o\">[</span>ret<span class=\"o\">]</span>
</pre>
</div>
</div>
<p>で起動。インストールしたパッケージを<code>i</code> で選択する。最後に<code>x</code>を押して選択したパッケージのインストールが始まる。インストールしたパッケージはデフォルトでは<code>.emacs.d/elpa/</code>に保存される。</p>

<p>またパッケージの取得先も追加することができ、<code>.emacs.d/init.el</code>に以下を追加する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;package</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;package-archives</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;melpa&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;package-archives</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;marmalade&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://marmalade-repo.org/packages/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">package-initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ELPAを開くとパッケージ候補が増えてます。</p>
") (published nil "2012-06-22T17:40:12Z") (updated nil "2012-06-22T18:09:47Z") (author nil (name nil "y_takagi"))) (entry nil (id nil "tag:qiita.com,2005:Item/6453") (published nil "2012-06-22T12:28:49+09:00") (updated nil "2012-06-22T12:28:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2523a3ce0b712e42b720"))) (url nil "http://qiita.com/items/2523a3ce0b712e42b720") (title nil "ディレクトリ内のファイル名を一括で変更する") (content ((type . "html")) "<p>diredで開いているディレクトリを編集してファイル面を一括で変更できるようにします。</p>

<p>操作を簡単にするために下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; wdired.el</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;r&quot;</span> <span class=\"ss\">&#39;wdired-change-to-wdired-mode</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ディレクトリをdiredモードで開いた状態で<code>r</code>を押します。</p>

<p>この状態でバッファを編集し、変更したいファイル名にします。<code>M-!</code>で置換などもできます。</p>

<p><code>C-c C-c</code>か<code>C-x C-s</code>を押すと編集した内容でファイル名が変更されます。<code>C-c C-k</code>で編集した内容を破棄します。</p>

<p>これをシェルでやろうとすると結構手間です。このやり方でやるとEmacsの置換機能を最大限活用できるのですごく便利です。</p>

<h2>参考文献</h2>

<p>「Emacsテクニックバイブル」P102</p>
") (published nil "2012-06-22T12:28:49Z") (updated nil "2012-06-22T12:28:49Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6424") (published nil "2012-06-21T14:13:41+09:00") (updated nil "2012-06-21T14:13:41+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b04be54caf46d2bf721a"))) (url nil "http://qiita.com/items/b04be54caf46d2bf721a") (title nil "分割したウィンドウの大きさを変更する") (content ((type . "html")) "<p>いままでノートPCで開発をしていた時は画面も小さかったのであまりバッファは分割していませんでした。最近広いモニタにしてバッファを分割することが多くなり、分割バッファの幅を変えるのに<code>C-x {</code>や<code>C-x }</code>でやっており結構面倒でした。</p>

<p>ネットで調べていいのがあったのでその設定をメモしておきます。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">window-resizer</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;Control window size and position.&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">window-obj</span> <span class=\"p\">(</span><span class=\"nv\">selected-window</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">current-width</span> <span class=\"p\">(</span><span class=\"nv\">window-width</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">current-height</span> <span class=\"p\">(</span><span class=\"nv\">window-height</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">dx</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nv\">window-edges</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">1</span>
              <span class=\"mi\">-1</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">dy</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nv\">window-edges</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">1</span>
              <span class=\"mi\">-1</span><span class=\"p\">))</span>
        <span class=\"nv\">action</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">catch</span> <span class=\"ss\">&#39;end-flag</span>
      <span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"no\">t</span>
        <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">action</span>
              <span class=\"p\">(</span><span class=\"nv\">read-key-sequence-vector</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;size[%dx%d]&quot;</span>
                                                <span class=\"p\">(</span><span class=\"nv\">window-width</span><span class=\"p\">)</span>
                                                <span class=\"p\">(</span><span class=\"nv\">window-height</span><span class=\"p\">))))</span>
        <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">c</span> <span class=\"p\">(</span><span class=\"nb\">aref</span> <span class=\"nv\">action</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nb\">cond</span> <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?l</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">enlarge-window-horizontally</span> <span class=\"nv\">dx</span><span class=\"p\">))</span>
              <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?h</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">shrink-window-horizontally</span> <span class=\"nv\">dx</span><span class=\"p\">))</span>
              <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?j</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">enlarge-window</span> <span class=\"nv\">dy</span><span class=\"p\">))</span>
              <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?k</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">shrink-window</span> <span class=\"nv\">dy</span><span class=\"p\">))</span>
              <span class=\"c1\">;; otherwise</span>
              <span class=\"p\">(</span><span class=\"no\">t</span>
               <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">last-command-char</span> <span class=\"p\">(</span><span class=\"nb\">aref</span> <span class=\"nv\">action</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
                     <span class=\"p\">(</span><span class=\"nv\">command</span> <span class=\"p\">(</span><span class=\"nv\">key-binding</span> <span class=\"nv\">action</span><span class=\"p\">)))</span>
                 <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">command</span>
                   <span class=\"p\">(</span><span class=\"nv\">call-interactively</span> <span class=\"nv\">command</span><span class=\"p\">)))</span>
               <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Quit&quot;</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"k\">throw</span> <span class=\"ss\">&#39;end-flag</span> <span class=\"no\">t</span><span class=\"p\">)))))))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\C-c\\C-r&quot;</span> <span class=\"ss\">&#39;window-resizer</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、Emacsを再起動し、分割されたバッファで<code>C-c C-r</code>をして、<code>h</code>を押すと境界線が左に、<code>j</code>を押すと下に、<code>k</code>を押すと上に、<code>l</code>を押すと右に移動します。</p>

<p>これは直感的でわかりやすいです。</p>

<h2>参考URL</h2>

<p><a href=\"http://d.hatena.ne.jp/mooz/20100119/p1\">http://d.hatena.ne.jp/mooz/20100119/p1</a><br>
<a href=\"http://d.hatena.ne.jp/khiker/20100119/window_resize\">http://d.hatena.ne.jp/khiker/20100119/window_resize</a></p>
") (published nil "2012-06-21T14:13:41Z") (updated nil "2012-06-21T14:13:41Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6407") (published nil "2012-06-21T00:19:23+09:00") (updated nil "2012-06-21T00:19:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3737b15b37fed8f39c99"))) (url nil "http://qiita.com/items/3737b15b37fed8f39c99") (title nil "dired でファイルのフルパスを簡単に killing") (content ((type . "html")) "<p>dired は w でカーソル位置(もしくはマークしているファイル)のファイル名を killing できる。このとき、プレフィックスが 0 であればフルパスを killing するのだが、プレフィックス 0 は入力するのが面倒。なので C-u w で (すなわち、プレフィックス 4 で) フルパスを killing できるようにしてみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">dired-copy-filename-as-kill</span> <span class=\"p\">(</span><span class=\"nv\">before</span> <span class=\"nv\">four-prefix</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;P&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"mi\">4</span> <span class=\"p\">(</span><span class=\"nv\">prefix-numeric-value</span> <span class=\"p\">(</span><span class=\"nv\">ad-get-arg</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nv\">ad-set-arg</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>この設定の問題は、プレフィックスが 1 以上 (n) であればカーソル以下 n 個のファイル名を killing するという機能のうち n = 4 が使えなくなることである。また、本来 C-u を入力することで得られる default-directory からの相対パスも取得できなくなる。絶対パスを取得する機会が少ないなら設定しない方がいいかと。</p>
") (published nil "2012-06-21T00:19:23Z") (updated nil "2012-06-21T00:19:23Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6390") (published nil "2012-06-20T15:54:54+09:00") (updated nil "2012-06-20T15:54:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/572881c2c199d1239926"))) (url nil "http://qiita.com/items/572881c2c199d1239926") (title nil "Emacsのgitクライアントmagitのインストール") (content ((type . "html")) "<p>こちらのエントリを参考にEmacsのgitクライアントMagitを使い始めました。</p>

<p><a href=\"http://qiita.com/items/c7a11ff30caedc4c5ba7\">http://qiita.com/items/c7a11ff30caedc4c5ba7</a></p>

<p>私の場合、追加でいれるlisp類はユーザのディレクトリにいれるようにしているので、自分がしたインストールの仕方をメモしておきます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">cd</span> <span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">elisp</span><span class=\"o\">/</span>
$ <span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"p\">@</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"p\">:</span><span class=\"n\">magit</span><span class=\"o\">/</span><span class=\"n\">magit</span><span class=\"p\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/.emacs.d/elisp/magit&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;magit</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-20T15:54:54Z") (updated nil "2012-06-20T15:54:54Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6384") (published nil "2012-06-20T15:08:44+09:00") (updated nil "2012-06-20T15:08:44+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/97ca40dc5c44eece926e"))) (url nil "http://qiita.com/items/97ca40dc5c44eece926e") (title nil "ファイルを自動保存する") (content ((type . "html")) "<p>elispファイルをインストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">homepage3</span><span class=\"p\">.</span><span class=\"n\">nifty</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">oatu</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">/</span><span class=\"n\">archives</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; auto-save-buffers</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-save-buffers</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">run-with-idle-timer</span> <span class=\"mi\">2</span> <span class=\"no\">t</span> <span class=\"ss\">&#39;auto-save-buffers</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>アイドル2秒後に自動で保存されます。</p>

<h2>参考文献</h2>

<p>「Emacsテクニックバイブル」P94</p>
") (published nil "2012-06-20T15:08:44Z") (updated nil "2012-06-20T15:08:44Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6361") (published nil "2012-06-19T22:21:51+09:00") (updated nil "2012-06-19T22:21:51+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3aeaebcb8b03b8dc5a43"))) (url nil "http://qiita.com/items/3aeaebcb8b03b8dc5a43") (title nil "Byte を KB や GB に変換する Elisp コード") (content ((type . "html")) "<p>1024で割った結果が1024以上である度に単位を1つ上げるという簡単な手法。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;cl</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">convert-file-size</span> <span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">loop</span> <span class=\"nv\">with</span> <span class=\"nv\">size-units</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;B&quot;</span> <span class=\"s\">&quot;KB&quot;</span> <span class=\"s\">&quot;MB&quot;</span> <span class=\"s\">&quot;GB&quot;</span> <span class=\"s\">&quot;TB&quot;</span><span class=\"p\">)</span>
        <span class=\"nv\">with</span> <span class=\"nv\">first-unit</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nv\">size-units</span><span class=\"p\">)</span>
        <span class=\"nv\">with</span> <span class=\"nv\">last-unit</span> <span class=\"nb\">=</span>  <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"p\">(</span><span class=\"nb\">last</span> <span class=\"nv\">size-units</span><span class=\"p\">))</span>
        <span class=\"nv\">for</span> <span class=\"nv\">unit</span> <span class=\"nv\">in</span> <span class=\"nv\">size-units</span>
        <span class=\"nb\">and</span> <span class=\"nv\">new_size</span> <span class=\"nb\">=</span> <span class=\"nv\">size</span> <span class=\"nv\">then</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">new_size</span> <span class=\"mf\">1024.0</span><span class=\"p\">)</span>
        <span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"nv\">new_size</span> <span class=\"mf\">1024.0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">unit</span> <span class=\"nv\">last-unit</span><span class=\"p\">))</span>
        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">unit</span> <span class=\"nv\">first-unit</span><span class=\"p\">)</span> <span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%.0f%s&quot;</span> <span class=\"nv\">new_size</span> <span class=\"nv\">unit</span><span class=\"p\">)</span>
        <span class=\"nv\">else</span> <span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%.1f%s&quot;</span> <span class=\"nv\">new_size</span> <span class=\"nv\">unit</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">30</span><span class=\"p\">)</span>                  <span class=\"c1\">; =&gt; &quot;30B&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; &quot;4.9KB&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">100000000</span><span class=\"p\">)</span>           <span class=\"c1\">; =&gt; &quot;95.4MB&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mf\">10000000000000000.0</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; &quot;9094.9TB&quot;</span>
</pre>
</div>
</div>
<p>Byteのときは小数点以下を表示しないという処理のため少し冗長に。整数だとオーバフローする可能性があるので、その場合は少数を渡す工夫が必要。</p>
") (published nil "2012-06-19T22:21:51Z") (updated nil "2012-06-19T22:21:51Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6340") (published nil "2012-06-19T13:17:35+09:00") (updated nil "2012-06-19T13:18:37+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/609681b9635e5563d4a9"))) (url nil "http://qiita.com/items/609681b9635e5563d4a9") (title nil "コマンドラインから emacs (emacsclient) を read-only で開く") (content ((type . "html")) "<p>emacs 立ちあげてる状態なら <code>C-xC-r</code> (コマンド経由なら <code>C-xfind-file-read-only</code>) ってやれば、read-only でファイル開ける。じゃーそれをコマンドラインからやる時はどうするかって話。</p>

<h2>emacs ならこんな感じ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">function </span>read_only_emacs<span class=\"o\">()</span> <span class=\"o\">{</span>
    <span class=\"o\">[</span> -f <span class=\"s2\">&quot;$1&quot;</span> <span class=\"o\">]</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;ファイルが見つかりませんでした: $1&quot;</span> &gt;&amp;2; <span class=\"nb\">exit </span>1<span class=\"o\">)</span>
    emacs <span class=\"s2\">&quot;$1&quot;</span> --eval <span class=\"s1\">&#39;(setq buffer-read-only t)&#39;</span>
<span class=\"o\">}</span>
</pre>
</div>
</div>
<p>ファイル見つからなくても emacs が立ち上がってしまうので、実行前に存在チェックしてる。</p>

<h2>emacsclient ならこんな感じ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">function </span>read_only_emacsclient<span class=\"o\">()</span> <span class=\"o\">{</span>
    emacsclient -e <span class=\"s2\">&quot;(find-file-read-only \\&quot;$1\\&quot;)&quot;</span>
<span class=\"o\">}</span>
</pre>
</div>
</div>
<p>ただ、<code>emacsclient -n</code> で普段から使ってない人は、ちょっと違和感のある挙動かも。</p>
") (published nil "2012-06-19T13:17:35Z") (updated nil "2012-06-19T13:18:37Z") (author nil (name nil "k_ui"))) (entry nil (id nil "tag:qiita.com,2005:Item/6288") (published nil "2012-06-17T22:35:30+09:00") (updated nil "2012-06-17T22:35:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c287ae72f55515d9cea1"))) (url nil "http://qiita.com/items/c287ae72f55515d9cea1") (title nil "dired の隠しファイル表示をトグルする minor-mode") (content ((type . "html")) "<p><a href=\"http://d.hatena.ne.jp/sr10/20120327/1332853421\">http://d.hatena.ne.jp/sr10/20120327/1332853421</a><br>
のリンクからダウンロード。隠しファイルだらけのホームディレクトリとかを見るときに結構便利。私は C-. に割り当てている。</p>
") (published nil "2012-06-17T22:35:30Z") (updated nil "2012-06-17T22:35:30Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6287") (published nil "2012-06-17T22:00:48+09:00") (updated nil "2012-06-17T22:00:48+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/af9333eb66b56a9c62d8"))) (url nil "http://qiita.com/items/af9333eb66b56a9c62d8") (title nil "Emacs の dired でディレクトリを先に表示する") (content ((type . "html")) "<p>これについてWebを調べると、大抵</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ls-lisp-dirs-first</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を .emacs に書くという情報が見つかるが，これは Windows で ls をエミュレートするための ls-lisp の機能であり，Ubuntu などでは動かない．</p>

<p>ls が使える環境でディレクトリを先に表示したいなら，以下のように .emacs に書く．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">dired-listing-switches</span> <span class=\"s\">&quot;-AFl --group-directories-first&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>dired の ls オプションは <code>dired-listing-switches</code> で変更でき，<code>--group-directories-first</code> によってディレクトリを先に表示できる．<code>-AFl</code> は好みと環境に合わせて設定する．</p>

<p>また，ディレクトリのシンボリックリンクがファイル側に表示するのが嫌なら <code>-L</code> を追加すればよい．</p>
") (published nil "2012-06-17T22:00:48Z") (updated nil "2012-06-17T22:00:48Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6286") (published nil "2012-06-17T21:19:30+09:00") (updated nil "2012-11-12T03:38:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c7a11ff30caedc4c5ba7"))) (url nil "http://qiita.com/items/c7a11ff30caedc4c5ba7") (title nil "EmacsのGitクライアント：Magit") (content ((type . "html")) "<p>これは<a href=\"http://qiita.com/advent-calendar/git\">Gitアドベントカレンダー</a>の17日目のエントリーです。</p>

<p>このエントリーではEmacsのGitクライアントであるMagitの紹介を行います。ひよっこプログラマのエントリなので間違いがあれば指摘して下さい。逆に、ひよっこプログラマだからこそ出来る、これを見たら初心者でも出来るようなエントリを目指しました。</p>

<h2>Magitって何？</h2>

<p>EmacsのGitクライアントです。Emacsでコード編集して、ターミナルに移動せずそのままEmacs上でGitの操作を行うことが出来ます。</p>

<h2>インストール方法</h2>

<p>ソースはgithubで公開されています。<br>
<a href=\"https://github.com/magit/magit\">https://github.com/magit/magit</a><br>
インストールします。  </p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ cd
$ mkdir tmp
$ cd tmp
$ git clone git@github.com:magit/magit.git
$ cd magit
$ ./configure
$ make
$ sudo make install
</pre>
</div>
</div>
<p>で、.emacs.d/init.elに次の記述を追加します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(require &#39;magit)
</pre>
</div>
</div>
<p>これだけ！</p>

<h2>チュートリアル</h2>

<p>とりあえずgit管理下のファイルを開いている状態で、 <code>git status</code>に対応する<code>M-x magit-status</code>してみましょう。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24

Changes:                                                                                                                              
    Modified   .emacs.d/init.el
</pre>
</div>
</div>
<p>こんな画面が現れます。カーソルを<code>Modified   .emacs.d/init.el</code>の行に移動し、Tabキーを押すと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24

Changes:
    Modified   .emacs.d/init.el
diff --git a/.emacs.d/init.el b/.emacs.d/init.el
index b0db796..103a40f 100644
--- a/.emacs.d/init.el                                                                                                               
+++ b/.emacs.d/init.el                                                                                                               
@@ -1,5 +1,6 @@
 ;; .emacs                                                                                                                           

+                                                                                                                                    
 ; path                                                                                                                              
 (setq load-path (cons &quot;~/.emacs.d/site-lisp&quot; load-path))  
</pre>
</div>
</div>
<p>diffが見れます。変更が正しいことを確認したら、ファイルの行で<code>s</code>を押します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24

Staged changes:
    Modified   .emacs.d/init.el
</pre>
</div>
</div>
<p>Stageされました(<code>git add .emacs.d/init.el</code>と同じ効果)。今は<code>Changes</code>なファイルが1つですが、複数ある時は<code>S</code>で全てStage出来ます。</p>

<p>次に<code>c</code>を押すと、新しくwindowが現れます。ここでcommitコメントを書いて<code>C-c C-c</code>を入力するとcommit出来ます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     dd0f21c test

Unpushed commits:
dd0f21c * test
</pre>
</div>
</div>
<p>commit出来ました。次に<code>git pull</code>を行います。<code>git pull</code>するにはgit-status画面で<code>F</code>を入力します。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Switches
-r: Rebase (--rebase)
Actions
F: Pull
</pre>
</div>
</div>
<p>という画面が現れます。<code>git pull --rebase</code>するなら<code>-r</code>と入力します。すると<code>--rebase</code>の色が変わるので、その後<code>F</code>を押すとpull出来ます。pullする前にもう一度<code>-r</code>を入力すると<code>--rebase</code>の色が戻り普通のpullが出来ます。<br>
すると、パスフレーズが聞かれるので入力します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Password for &#39;/home/takc923/.ssh/id_rsa&#39;: ……………
</pre>
</div>
</div>
<p>pullが完了しました。<br>
次にpushします。pushするにはmagit-status画面で<code>P</code>を押します。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Switches
 -f: Force (--force)      -d: Dry run (-n)         -u: Set upstream (-u)
Actions
P: Push         t: Push tags
</pre>
</div>
</div>
<p>という画面が現れます。ここもpull同様、オプションをつけるなら<code>-f</code>,<code>-d</code>,<code>-u</code>してから<code>P</code>を入力します。やっぱりパスフレーズを聞かれるので入力するとpush出来ます。</p>

<p>チュートリアルは以上です。</p>

<h2>終わりに</h2>

<p>magitのインストール方法と、簡単な使い方だけ紹介しました。これから使う人の入り口になれば幸いです。もちろんmagitでは他にも色んな操作が可能です。ここから先は以下の参考ページや、magitでぐぐって出てきたエントリを参考に使ってみてください。<br>
参考<br>
<a href=\"http://magit.github.com/magit/magit.html\">http://magit.github.com/magit/magit.html</a></p>
") (published nil "2012-06-17T21:19:30Z") (updated nil "2012-11-12T03:38:23Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/6284") (published nil "2012-06-17T19:05:09+09:00") (updated nil "2012-06-17T19:05:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/793606be49f046c4c42b"))) (url nil "http://qiita.com/items/793606be49f046c4c42b") (title nil "初期化されていない可能性がある変数の真偽値で分岐") (content ((type . "html")) "<p>Elispで「変数が初期化されていて、かつその変数がnilでないとき」に処理を行いたいときはこんな感じで書ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">boundp</span> <span class=\"ss\">&#39;var</span><span class=\"p\">)</span> <span class=\"nv\">var</span><span class=\"p\">)</span>
  <span class=\"nv\">body...</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>(when var body)</code> としてしまうと void-variable が発生するので注意。</p>
") (published nil "2012-06-17T19:05:09Z") (updated nil "2012-06-17T19:05:30Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6224") (published nil "2012-06-16T01:48:25+09:00") (updated nil "2012-06-16T01:48:25+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0815a60f632e694fd082"))) (url nil "http://qiita.com/items/0815a60f632e694fd082") (title nil "init-loaderでgnupack用の設定を分離") (content ((type . "html")) "<p><a href=\"http://d.hatena.ne.jp/kitokitoki/20101205/p1\">init-loader</a>を使えば、Emacsの設定ファイルを簡単に分割できる。<br>
しかも特定の環境でのみ読み込ませる設定ファイルなんてのも簡単に作ることができ、設定ファイルを一元管理して複数の環境で使う場合などにとても便利。</p>

<p>init-loaderには</p>

<ul>
<li>Meadow (meadow-*.el)</li>
<li>Carbon Emacs (carbon-emacs-*.el)</li>
<li>Cocoa Emacs (cocoa-emacs-*.el)</li>
<li>no-window環境 (nw-*.el)</li>
</ul>

<p>用の設定があらかじめ用意されているが、今回これらに<a href=\"http://gnupack.sourceforge.jp/docs/latest/UsersGuide.html\">gnupack</a>用の設定を付け加えてみる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init-loader.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-*</span><span class=\"p\">.</span><span class=\"n\">el</span> という名前のファイルのみ、<span class=\"n\">gnupack</span> <span class=\"n\">Emacs</span>で読み込む
<span class=\"p\">(</span><span class=\"n\">defcustom</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">regexp</span> &quot;^<span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span>&quot;
  &quot;<span class=\"n\">MinGW</span>で起動する<span class=\"n\">Emacs</span><span class=\"p\">(</span><span class=\"n\">gnupack</span><span class=\"p\">)</span>で読み込まれる設定ファイルにマッチする正規表現&quot;
  <span class=\"p\">:</span><span class=\"n\">group</span> <span class=\"s\">&#39;init-loader</span>
<span class=\"s\">  :type &#39;</span><span class=\"n\">regexp</span><span class=\"p\">)</span>

<span class=\"p\">;;;</span> <span class=\"n\">Code</span>
<span class=\"p\">(</span><span class=\"n\">defun</span><span class=\"o\">*</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">optional</span> <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">follow</span><span class=\"o\">-</span><span class=\"n\">symlink</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"n\">assert</span> <span class=\"p\">(</span><span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">stringp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">re</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">regexp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"n\">t</span><span class=\"p\">)</span>
    <span class=\"p\">;;</span> <span class=\"o\">~</span> 略 <span class=\"o\">~</span>
    <span class=\"p\">;;</span><span class=\"o\">----</span> ここから <span class=\"o\">----</span>
    <span class=\"p\">(</span><span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">match</span> &quot;<span class=\"n\">mingw</span>&quot; <span class=\"n\">system</span><span class=\"o\">-</span><span class=\"n\">configuration</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">re</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">regexp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">))</span>
    <span class=\"p\">;;</span><span class=\"o\">---</span> ここまで <span class=\"o\">----</span>
    <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"nb\">log</span><span class=\"o\">-</span><span class=\"n\">after</span><span class=\"o\">-</span><span class=\"n\">init</span>
      <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span>  <span class=\"s\">&#39;after-init-hook &#39;</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"nb\">log</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>これでinit-loaderで読み込ませるディレクトリ(デフォルトでは .emacs.d/inits)にgnupack-emacs-*.elという設定を配置すれば、gnupack Emacs起動時にのみ読み込まれることになる。</p>
") (published nil "2012-06-16T01:48:25Z") (updated nil "2012-06-16T01:48:25Z") (author nil (name nil "usobuku"))) (entry nil (id nil "tag:qiita.com,2005:Item/6209") (published nil "2012-06-15T16:19:21+09:00") (updated nil "2012-06-15T16:19:21+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/48ac0af1e31eb9f69525"))) (url nil "http://qiita.com/items/48ac0af1e31eb9f69525") (title nil "シェルからEmacsを立ち上げるときの起動を速くする") (content ((type . "html")) "<p>Emacsを一つ立ち上げっぱなしにして、シェルからファイルを編集するときにいちいちEmacsを新しく立ち上げないで、その立ち上がっているEmacsで編集できるようにする設定をします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.d</span></div><div class=\"highlight\"><pre><span class=\"p\">;;;</span> <span class=\"n\">emacsclient</span>
<span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">start</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">when</span><span class=\"o\">-</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">done</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">unless</span> <span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">clients</span> <span class=\"p\">(</span><span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">frame</span><span class=\"p\">)))</span>
<span class=\"p\">;;</span> 編集が終了したら<span class=\"n\">Emacs</span>をアイコン化する
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;server-done-hook &#39;</span><span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">when</span><span class=\"o\">-</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">done</span><span class=\"p\">)</span>
<span class=\"p\">;;</span>  <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">c</span>に割り当てる
<span class=\"p\">(</span><span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">c</span>&quot;<span class=\"p\">)</span> <span class=\"s\">&#39;server-edit)</span>
<span class=\"s\">;; M-x exitでEmacsを終了できるようにする</span>
<span class=\"s\">(defalias &#39;</span><span class=\"n\">exit</span> <span class=\"s\">&#39;</span><span class=\"err\">save-buffers-kill-emacs)</span>
</pre>
</div>
</div>
<p>再起動してEmacsを立ち上げます。シェルから下記を実行すると最初に立ち上げたEmacsで編集ができるようになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">emacsclinet</span> <span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">txt</span>
</pre>
</div>
</div>
<p>ちょっとした設定ファイルをいじるときはemacsだと起動が遅かったのでviを使っていたのですが、これでemacsでもよくなりそうです。</p>

<h2>参照</h2>

<p>「Emacsテクニックバイブル」P91</p>
") (published nil "2012-06-15T16:19:21Z") (updated nil "2012-06-15T16:19:21Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6163") (published nil "2012-06-14T01:14:18+09:00") (updated nil "2012-06-14T01:19:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/37601adbf8ab141f7547"))) (url nil "http://qiita.com/items/37601adbf8ab141f7547") (title nil "Elisp の変数の内容が無名関数かどうかチェックする") (content ((type . "html")) "<p>変数が無名関数かどうかは funcall が invalid-function エラーを発生するかで確認できそう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lambda-p</span> <span class=\"p\">(</span><span class=\"nv\">var</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
      <span class=\"p\">(</span><span class=\"k\">progn</span>
        <span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">var</span><span class=\"p\">)</span>
        <span class=\"no\">t</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">invalid-function</span> <span class=\"no\">nil</span><span class=\"p\">)))</span>


<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">str</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-p</span> <span class=\"nv\">str</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; nil</span>

<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">lmd</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"s\">&quot;huga&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-p</span> <span class=\"nv\">lmd</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; t</span>
</pre>
</div>
</div>
<p>Elisp の変数が「文字列そのもの」と「文字列を返す関数」のどちらかに関わらず、その変数を文字列として扱いたい場合はこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lambda-to-str</span> <span class=\"p\">(</span><span class=\"nv\">str</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
      <span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">str</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">invalid-function</span> <span class=\"nv\">str</span><span class=\"p\">)))</span>


<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">str</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-to-str</span> <span class=\"nv\">str</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; &quot;hoge&quot;</span>

<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">lmd</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"s\">&quot;huga&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-to-str</span> <span class=\"nv\">lmd</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; &quot;huga&quot;</span>
</pre>
</div>
</div>") (published nil "2012-06-14T01:14:18Z") (updated nil "2012-06-14T01:19:39Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6150") (published nil "2012-06-13T17:09:27+09:00") (updated nil "2012-06-13T17:09:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/50fb48801aa41f4534fd"))) (url nil "http://qiita.com/items/50fb48801aa41f4534fd") (title nil "ブックマークを便利にする設定") (content ((type . "html")) "<p>ファイルのある位置をブックマークするのに便利な設定をしました。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; ブックマークを変更したら即保存する</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-save-flag</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"c1\">;; 超整理法</span>
<span class=\"p\">(</span><span class=\"k\">progn</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-sort-flag</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">bookmark-arrange-latest-top</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">latest</span> <span class=\"p\">(</span> <span class=\"nv\">bookmark-get-bookmark</span> <span class=\"nv\">bookmark</span><span class=\"p\">)))</span>
      <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-alist</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">latest</span> <span class=\"p\">(</span><span class=\"nv\">delq</span> <span class=\"nv\">latest</span> <span class=\"nv\">bookmark-aliset</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nv\">bookmark-save</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;bookmark-after-jump-hook</span> <span class=\"ss\">&#39;bookmark-arrange-latest-top</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>超整理法の設定をすると最近使ったブックマークを上に持ってきてくれるようになります。</p>

<p>ブックマークしたい箇所で、<code>C-x r m</code>(<code>bookmark-set</code>)をします。ブックマーク名を聞いてくるので、後で思い出しやすい名前を入力します。</p>

<p><code>C-x r l</code>(<code>bookmark-bmenu-list</code>)をすると登録しているブックマークの一覧のバッファに移動します。一覧から移動したいファイルを選択します。</p>

<h2>参照</h2>

<p>「Emacsテクニックバイブル」P89</p>
") (published nil "2012-06-13T17:09:27Z") (updated nil "2012-06-13T17:09:27Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6133") (published nil "2012-06-13T10:40:38+09:00") (updated nil "2012-06-13T10:40:38+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/34d41633b6417324ae1a"))) (url nil "http://qiita.com/items/34d41633b6417324ae1a") (title nil "Emacs: カーソル行を画面の中央/最上部/最下部に移動して再描画") (content ((type . "html")) "<p>よく忘れるのでメモ。</p>

<p>Emacsで</p>

<ul>
<li>カーソル行を画面の中央に移動(vimのzz)</li>
</ul>

<blockquote>
<p>C-l</p>
</blockquote>

<ul>
<li>カーソル行を画面の最上部に移動(vimのzt)</li>
</ul>

<blockquote>
<p>C-u 0 C-l</p>
</blockquote>

<ul>
<li>カーソル行を画面の最下部に移動(vimのzb)</li>
</ul>

<blockquote>
<p>C-u -1 C-l</p>
</blockquote>
") (published nil "2012-06-13T10:40:38Z") (updated nil "2012-06-13T10:40:38Z") (author nil (name nil "usobuku"))) (entry nil (id nil "tag:qiita.com,2005:Item/6111") (published nil "2012-06-12T23:42:53+09:00") (updated nil "2012-06-12T23:43:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/35616785f9194ca00ec1"))) (url nil "http://qiita.com/items/35616785f9194ca00ec1") (title nil "特定のメジャーモードのバッファをリスト化する Elisp 関数") (content ((type . "html")) "<p>例えば dired-mode のバッファのみをリスト化したいならこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-mode-buffer-list</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nb\">loop</span> <span class=\"nv\">for</span> <span class=\"nv\">buf</span> <span class=\"nv\">in</span> <span class=\"p\">(</span><span class=\"nv\">buffer-list</span><span class=\"p\">)</span>
        <span class=\"nv\">for</span> <span class=\"nv\">m</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">with-current-buffer</span> <span class=\"nv\">buf</span> <span class=\"nv\">major-mode</span><span class=\"p\">)</span>
        <span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"nv\">m</span> <span class=\"ss\">&#39;dired-mode</span><span class=\"p\">)</span>
        <span class=\"nv\">collect</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span> <span class=\"nv\">buf</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>5行目の <code>&#39;dired-mode</code> を別のメジャーモードに書き換えれば、そのモードのバッファをリスト化できる。リスト化したいメジャーモードが複数になるなら memq を使用するといい。</p>
") (published nil "2012-06-12T23:42:53Z") (updated nil "2012-06-12T23:43:23Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6104") (published nil "2012-06-12T21:58:23+09:00") (updated nil "2012-06-24T18:32:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/56b39ecd2507363e7976"))) (url nil "http://qiita.com/items/56b39ecd2507363e7976") (title nil "パッチ適用済みelscreenを使う") (content ((type . "html")) "<p>探してみたらgithubにあった。<br>
<a href=\"https://github.com/knu/elscreen\">elscreen patched to work with recent Emacs</a></p>

<p>elscreenの問題については既出。</p>

<ul>
<li><p><a href=\"http://d.hatena.ne.jp/klon/20110822/1314002901\">Emacs+elscreen: &quot;command-line-1: Symbol&#39;s value as variable is void: dir&quot;</a></p></li>
<li><p><a href=\"http://jyukutyo.hatenablog.com/entry/20111115/1321414549\">Emacsでファイル名指定して実行しても、Symbol&#39;s value as variable is void: dirと表示されてファイルを開けない</a></p></li>
</ul>

<p>自分でパッチを当てるのが面倒な方や、<br>
<a href=\"http://www.morishima.net/%7Enaoto/elscreen-ja/\">elscreenの本家</a>からelscreenアドオンを個別にダウンロードするのが面倒な方はどうぞ。</p>
") (published nil "2012-06-12T21:58:23Z") (updated nil "2012-06-24T18:32:17Z") (author nil (name nil "skkzsh@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6093") (published nil "2012-06-12T16:41:45+09:00") (updated nil "2012-06-12T16:41:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/257f37b795fd099c91e8"))) (url nil "http://qiita.com/items/257f37b795fd099c91e8") (title nil "anythingで前後の情報源表示のキー割り当て") (content ((type . "html")) "<p>anythingで情報源を移動するには矢印キー（<code>←</code>、<code>→</code>）を使って前後の情報源を表示します。例えば、ファイルを開く際に「最近使ったファイル」や「バッファ」から串刺しで候補を見つけられますが、「最近使ったファイル」や「バッファ」に絞って候補を探したい場合には矢印キーを使って各情報源を表示します。</p>

<p>結構使用頻度が高そうなので、ホームポジションで操作できるように、次の情報源(<code>anything-previous-source</code>)に<code>C-M-n</code>、前の情報源(<code>anything-previous-source</code>)に<code>C-M-p</code>を割り当てます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">anything-map</span> <span class=\"s\">&quot;\\C-\\M-p&quot;</span> <span class=\"ss\">&#39;anything-previous-source</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">anything-map</span> <span class=\"s\">&quot;\\C-\\M-n&quot;</span> <span class=\"ss\">&#39;anything-next-source</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-12T16:41:45Z") (updated nil "2012-06-12T16:41:45Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6092") (published nil "2012-06-12T16:40:38+09:00") (updated nil "2012-06-12T16:40:38+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b0801d406ad4d22a5c24"))) (url nil "http://qiita.com/items/b0801d406ad4d22a5c24") (title nil "anything.elを導入する") (content ((type . "html")) "<p>以前から気にはなっていたのですが、なかなか導入できずにいたanything.elをようやく導入してみました。</p>

<p>インストールはコマンド一発でします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">anything</span>
</pre>
</div>
</div>
<p><code>C-c C-c</code>でそれぞれのファイルをインストールしていきます。</p>

<p>設定は、<code>.emacs.d&#47;init.el</code>に下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;anything-startup</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これでEmacsを再起動すればanythingの世界になります。</p>
") (published nil "2012-06-12T16:40:38Z") (updated nil "2012-06-12T16:40:38Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/6077") (published nil "2012-06-12T00:59:14+09:00") (updated nil "2012-09-24T07:35:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/bbb1991ab18514f11a6c"))) (url nil "http://qiita.com/items/bbb1991ab18514f11a6c") (title nil "YaTeXのプレビュー(C-c t p)でプレビューアを追加する") (content ((type . "html")) "<h1>設定方法</h1>

<hr>

<p><strong>Emacs</strong>の<strong>YaTeXモード</strong>でプレビュー(C-c t p)を使うとき、<br>
指定したPreview Commandによっては<br>
Preview Fileの拡張子が自動補完されない場合がある。<br>
この場合には、補完リストを自分で追加する。<br>
補完リストは<code>yatex</code>ディレクトリ内にある<code>yatexprc.el</code>の849-852行目で<br>
以下のように定義されている(YaTeX 1.76)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">yatex/yatexprc.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">YaTeX-dvi2-command-ext-alist</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;[agx]dvi\\\\|dviout&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.dvi&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"s\">&quot;ghostview\\\\|gv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.ps&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"s\">&quot;acroread\\\\|pdf\\\\|Preview\\\\|TeXShop\\\\|Skim\\\\|evince&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.pdf&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>例えば、プレビューアとしてdviに<code>emacsclient</code>、<br>
pdfに<code>apvlv</code>を追加したい場合には以下の定義に変更するか、<code>~/.emacs</code>に書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">YaTeX-dvi2-command-ext-alist</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;[agx]dvi\\\\|dviout\\\\|emacsclient&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.dvi&quot;</span><span class=\"p\">)</span>
   <span class=\"p\">(</span><span class=\"s\">&quot;ghostview\\\\|gv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.ps&quot;</span><span class=\"p\">)</span>
   <span class=\"p\">(</span><span class=\"s\">&quot;acroread\\\\|pdf\\\\|Preview\\\\|TeXShop\\\\|Skim\\\\|evince\\\\|apvlv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.pdf&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以上のように設定すれば、<br>
これらのプレビューアでも拡張子が自動補完されるようになる。</p>

<h3>補足 (YaTeXモードのプレビュー)</h3>

<hr>

<p><strong>Emacs</strong>でTeXを編集するときには、<br>
入力補完の強い<strong>YaTeXモード</strong>を導入しておくと便利である。<br>
<a href=\"http://www.yatex.org/\">YaTeX</a><br>
<a href=\"http://www.nk.rim.or.jp/%7Enaru/yatex/\">YaTeX World</a><br>
C-c t pはプレビューにバインドされており、<br>
編集中のtexファイルをコンパイルして得たdviやpdfのファイルを<br>
Emacsから開いて閲覧することができる。<br>
具体的には、<code>~/.emacs</code>で設定した<code>dvi2-command</code></p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">dvi2-command</span> <span class=\"s\">&quot;xdvi&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>がEmacsの下の方にあるミニバッファに</p>

<blockquote>
<p>Preview Command: xdvi</p>
</blockquote>

<p>などと表示される。その後RETを押すと、</p>

<blockquote>
<p>Preview File: hoge.dvi</p>
</blockquote>

<p>と表示され、さらにRETを押すとそのファイルを開くことができる。</p>

<p>このとき、Preview Commandをミニバッファで編集することもでき、<br>
その場合は指定したコマンドに応じて<br>
Preview Fileの拡張子が自動補完される。例えば、</p>

<blockquote>
<p>Preview Command: xpdf</p>
</blockquote>

<p>と編集してRETを押すと、</p>

<blockquote>
<p>Preview File: hoge.pdf</p>
</blockquote>

<p>と拡張子が補完される。</p>

<h3>追記</h3>

<p>Lispのシンタックスハイライトが効いてなかったので、効くように変更。</p>
") (published nil "2012-06-12T00:59:14Z") (updated nil "2012-09-24T07:35:04Z") (author nil (name nil "skkzsh@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/6029") (published nil "2012-06-09T23:38:04+09:00") (updated nil "2012-06-09T23:38:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/39342e2a4137dde894b4"))) (url nil "http://qiita.com/items/39342e2a4137dde894b4") (title nil "MacでEmacsを使うときにCommandキーとOptionキーを入れ替える") (content ((type . "html")) "<p>デフォルトではCommandキーがSuper, OptionキーがMetaに割り当てられているため、親指が痛くてMacでのEmacs操作が苦痛。</p>

<p>なので、TerminalとCocoa EmacsでのみCommandとOptionを入れ替える方法。</p>

<h2>Terminal: KeyRemap4MacBook</h2>

<p>キーボードカスタマイズの定番KeyRemap4MacBookに、Terminal使用時のみ左Commandと左Optionを入れ替えるというありがたい設定があるので、これをオンに。<br>
<img src=\"http://4.bp.blogspot.com/-USokmhlsn6k/T9NTc6STe6I/AAAAAAAAAeM/NmjVe03B9W0/s1600/Screen+Shot+2012-06-09+at+22.34.44.png\" alt=\"KeyRemap4MacBook\"></p>

<h2>Cocoa Emacs: 設定ファイルにElispで</h2>

<p>KeyRemap4MacBookに「Command_L to Option_L (only in Emacs)」という項目もあるんだけど、これをオンにするとCommand+TabといったOSのショートカットキーが機能しなくなってしまい、ちょっと使いづらい。<br>
なので設定ファイルに以下を書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">Command</span>と<span class=\"n\">Option</span>を入れ替える
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">ns</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">-</span><span class=\"n\">modifier</span> <span class=\"p\">(</span><span class=\"n\">quote</span> <span class=\"n\">meta</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">ns</span><span class=\"o\">-</span><span class=\"n\">alternate</span><span class=\"o\">-</span><span class=\"n\">modifier</span> <span class=\"p\">(</span><span class=\"n\">quote</span> <span class=\"n\">super</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-06-09T23:38:04Z") (updated nil "2012-06-09T23:38:04Z") (author nil (name nil "usobuku"))) (entry nil (id nil "tag:qiita.com,2005:Item/5974") (published nil "2012-06-08T00:04:45+09:00") (updated nil "2012-06-08T00:04:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7b888139724240bb19ae"))) (url nil "http://qiita.com/items/7b888139724240bb19ae") (title nil "Emacs でオブジェクトを永続化するための参考コード") (content ((type . "html")) "<p>Auto Complete のコードあたりが参考になると思う。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-serialize</span> <span class=\"p\">(</span><span class=\"nv\">db</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">alist</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nb\">maphash</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nb\">push</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">)</span> <span class=\"nv\">alist</span><span class=\"p\">))</span>
             <span class=\"p\">(</span><span class=\"nv\">ac-comphist-tab</span> <span class=\"nv\">db</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">alist</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-deserialize</span> <span class=\"p\">(</span><span class=\"nv\">sexp</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
      <span class=\"p\">(</span><span class=\"nv\">ac-comphist-make</span> <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">tab</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-make-tab</span><span class=\"p\">)))</span>
                          <span class=\"p\">(</span><span class=\"nb\">mapc</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nb\">cons</span><span class=\"p\">)</span>
                                  <span class=\"p\">(</span><span class=\"nv\">puthash</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nb\">cons</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">cdr</span> <span class=\"nb\">cons</span><span class=\"p\">)</span> <span class=\"nv\">tab</span><span class=\"p\">))</span>
                                <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">0</span> <span class=\"nv\">sexp</span><span class=\"p\">))</span>
                          <span class=\"nv\">tab</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nb\">error</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Invalid comphist db.&quot;</span><span class=\"p\">)</span> <span class=\"no\">nil</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-init</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">ac-comphist-load</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;kill-emacs-hook</span> <span class=\"ss\">&#39;ac-comphist-save</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-load</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">db</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"nb\">ignore-errors</span>
                  <span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
                    <span class=\"p\">(</span><span class=\"nv\">insert-file-contents</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">)</span>
                    <span class=\"p\">(</span><span class=\"nv\">goto-char</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">ac-comphist-deserialize</span> <span class=\"p\">(</span><span class=\"nb\">read</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))))))))</span>
    <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ac-comphist</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"nv\">db</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-make</span><span class=\"p\">)))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-save</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;pp</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">ignore-errors</span>
    <span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
      <span class=\"p\">(</span><span class=\"nv\">pp</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-serialize</span> <span class=\"nv\">ac-comphist</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nv\">write-region</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-max</span><span class=\"p\">)</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2012-06-08T00:04:45Z") (updated nil "2012-06-08T00:04:45Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5956") (published nil "2012-06-07T15:08:50+09:00") (updated nil "2012-06-07T15:08:50+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ed8ff0ac0443e0a9c7da"))) (url nil "http://qiita.com/items/ed8ff0ac0443e0a9c7da") (title nil "最近使ったファイル一覧を表示") (content ((type . "html")) "<p>最近使ったファイル一覧を表示するように、<code>recentf-ext.el</code>を導入します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">recentf</span><span class=\"o\">-</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; recentf-ext</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">recentf-max-saved-items</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">recentf-exclude</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;/TAGS$&quot;</span> <span class=\"s\">&quot;/var/tmp/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;recentf-ext</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-@&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;recentf-open-files</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-x recentf-opne-files</code>とすると履歴のバッファーが開かれます。頻繁に使用しそうなので<code>C-@</code>に割り当てをしました。</p>
") (published nil "2012-06-07T15:08:50Z") (updated nil "2012-06-07T15:08:50Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/5954") (published nil "2012-06-07T13:00:55+09:00") (updated nil "2012-06-07T13:00:55+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9abe5ffb47e2b9f2df12"))) (url nil "http://qiita.com/items/9abe5ffb47e2b9f2df12") (title nil "Emacs.appを-rvで起動する") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">open</span> <span class=\"o\">-</span><span class=\"n\">a</span> <span class=\"n\">emacs</span> <span class=\"o\">--</span><span class=\"n\">args</span> <span class=\"s\">&#39;-rv&#39;</span>
</pre>
</div>
</div>") (published nil "2012-06-07T13:00:55Z") (updated nil "2012-06-07T13:00:55Z") (author nil (name nil "fumikony"))) (entry nil (id nil "tag:qiita.com,2005:Item/5895") (published nil "2012-06-06T00:13:29+09:00") (updated nil "2012-06-06T00:13:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2620874c802db60c99f9"))) (url nil "http://qiita.com/items/2620874c802db60c99f9") (title nil "Emacs の dired で現在のディレクトリを Nautilus で開く") (content ((type . "html")) "<p>以下のコードを .emacs に記述すれば、dired で e を入力したときに、現在のディレクトリを開いた Nautilus を起動できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-open-nautilus</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;nautilus&quot;</span> <span class=\"no\">nil</span> <span class=\"mi\">0</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">dired-current-directory</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;e&quot;</span> <span class=\"ss\">&#39;dired-open-nautilus</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-06T00:13:29Z") (updated nil "2012-06-06T00:13:29Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5892") (published nil "2012-06-05T23:58:46+09:00") (updated nil "2012-06-05T23:58:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e8d7194f32374ae05555"))) (url nil "http://qiita.com/items/e8d7194f32374ae05555") (title nil "Emacs の dired でファイルを拡張子に適したアプリケーションで開く(Ubuntu)") (content ((type . "html")) "<p>以下のコードを .emacs に記述すれば、dired で o を入力したときに、カーソル位置のファイルを Nautilus でダブルクリックしたときと同じアプリケーションで開ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-open-file</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;In dired, open the file named on this line.&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">file</span> <span class=\"p\">(</span><span class=\"nv\">dired-get-filename</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Opening %s...&quot;</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;gnome-open&quot;</span> <span class=\"no\">nil</span> <span class=\"mi\">0</span> <span class=\"no\">nil</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Opening %s done&quot;</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;o&quot;</span> <span class=\"ss\">&#39;dired-open-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-05T23:58:46Z") (updated nil "2012-06-05T23:58:46Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5890") (published nil "2012-06-05T23:13:49+09:00") (updated nil "2012-06-05T23:13:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/16a1014e0c8af9f89a05"))) (url nil "http://qiita.com/items/16a1014e0c8af9f89a05") (title nil "anything 導入時の describe-bindings で全てのキーバインドを表示する") (content ((type . "html")) "<p>Emacs 使いにはお馴染みの anything を導入すると、describe-bindings が descbinds-anything.el に置き換えられ、キーバインド一覧を anything インターフェイスで利用できる。</p>

<p>この describe-bindings、各モードにつきキーバインド最大表示数が 50 に制限されているため、一度に全てのキーを一覧表示することができない。その挙動に納得がいかなければ以下のコードを .emacs に記述すればよい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;descbinds-anything-source-template</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">candidate-number-limit</span> <span class=\"o\">.</span> <span class=\"mi\">9999</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>9999 は各モードの最大表示数なので、好みやスペックに合わせて好きな数に設定するのがいいだろう。</p>
") (published nil "2012-06-05T23:13:49Z") (updated nil "2012-06-05T23:13:49Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5878") (published nil "2012-06-05T14:49:46+09:00") (updated nil "2012-06-05T14:49:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d4efe31a9f62a49c9259"))) (url nil "http://qiita.com/items/d4efe31a9f62a49c9259") (title nil "バッファの切替") (content ((type . "html")) "<p>バッファの切替を便利にするために、設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">ido-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">ido-everywhere</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>C-x b</code>でデフォルトだと前方一致で補完だったのが、部分文字列に一致する候補を並べてくれます。文字列を入力して、<code>C-s</code>で次候補、<code>C-r</code>で前候補を選択してくれます。</p>
") (published nil "2012-06-05T14:49:46Z") (updated nil "2012-06-05T14:49:46Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/5871") (published nil "2012-06-04T23:57:51+09:00") (updated nil "2012-06-04T23:57:51+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d35860d844c06b40d2a5"))) (url nil "http://qiita.com/items/d35860d844c06b40d2a5") (title nil "Emacs のキーに一連の処理を割り当てる方法(及び便利なマクロ)") (content ((type . "html")) "<p>Emacs のキーには</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c r&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;query-replace</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>のように既存関数を割り当てることができるが、引数が必要な関数や一連の処理を割り当てたい場合は以下のように lambda を使用することで割り当て可能(interactive も必要)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-Z&quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>これを頻繁に記述するなら以下のようなマクロを定義するといいかもしれない。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defmacro</span> <span class=\"nv\">global-set-key-fn</span> <span class=\"p\">(</span><span class=\"nv\">key</span> <span class=\"nv\">args</span> <span class=\"k\">&amp;rest</span> <span class=\"nv\">body</span><span class=\"p\">)</span>
  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"o\">,</span><span class=\"nv\">key</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"o\">,</span><span class=\"nv\">args</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span> <span class=\"o\">,@</span><span class=\"nv\">body</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>これで先ほどのキー割り当てを以下のように書ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key-fn</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-Z&quot;</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-06-04T23:57:51Z") (updated nil "2012-06-04T23:57:51Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5861") (published nil "2012-06-04T15:41:14+09:00") (updated nil "2012-06-04T15:41:14+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/eba6bc64f66d278f0032"))) (url nil "http://qiita.com/items/eba6bc64f66d278f0032") (title nil "Emacs で作成した使い捨てファイルを簡単に開く") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/1d143b0b69e9aaf252ca\">http:&#47;&#47;qiita.com&#47;items&#47;1d143b0b69e9aaf252ca</a> で説明した open-junk-file.el だが、作成してバッファを閉じた後に再度開きたい時、ファイルパスをたどるのが面倒だったりする。</p>

<p>以下のコードを .emacs に書いておけば、<code>M-x open-last-junk-file</code> で最後に作成した使い捨てファイルを一発で開ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;em-glob</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-dir</span> <span class=\"s\">&quot;~/program/junk/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">open-last-junk-file</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"p\">(</span><span class=\"nb\">car</span>
              <span class=\"p\">(</span><span class=\"nb\">last</span> <span class=\"p\">(</span><span class=\"nv\">eshell-extended-glob</span> <span class=\"p\">(</span><span class=\"nv\">concat</span>
                                           <span class=\"p\">(</span><span class=\"nv\">file-name-as-directory</span> <span class=\"nv\">junk-file-dir</span><span class=\"p\">)</span>
                                           <span class=\"s\">&quot;*/*/????-??-??-??????.*&quot;</span><span class=\"p\">))))))</span>
</pre>
</div>
</div>
<p>(設定は上記 URL の設定に合わせているので、<code>&quot;~&#47;program&#47;junk&#47;&quot;</code> や <code>&quot;*&#47;*&#47;????-??-??-??????.*&quot;</code> の部分は設定に合わせて書き換える必要がある。)</p>

<p>また、anything を導入しているなら、以下のコードで使い捨てファイルを一覧表示するという方法もある。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;em-glob</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-dir</span> <span class=\"s\">&quot;~/program/junk/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-list</span>
  <span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"p\">(</span><span class=\"nv\">eshell-extended-glob</span> <span class=\"p\">(</span><span class=\"nv\">concat</span>
                                  <span class=\"p\">(</span><span class=\"nv\">file-name-as-directory</span> <span class=\"nv\">junk-file-dir</span><span class=\"p\">)</span>
                                  <span class=\"s\">&quot;*/*/????-??-??-??????.*&quot;</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-source-junk-files</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;Junk Files&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">candidates</span> <span class=\"o\">.</span> <span class=\"nv\">junk-file-list</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"o\">.</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-open-junk-file</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span> <span class=\"ss\">&#39;anything-c-source-junk-files</span> <span class=\"s\">&quot;*anything for junk file&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-x M-j&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;anything-open-junk-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで C-x M-j を入力すると使い捨てファイル一覧が anything で表示される。このコードでは新しいファイルを開きやすいように、リストに reverse をかけてから一覧表示している。</p>
") (published nil "2012-06-04T15:41:14Z") (updated nil "2012-06-04T15:41:14Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5860") (published nil "2012-06-04T15:24:30+09:00") (updated nil "2012-06-04T15:24:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1d143b0b69e9aaf252ca"))) (url nil "http://qiita.com/items/1d143b0b69e9aaf252ca") (title nil "Emacs で使い捨てファイルを開く") (content ((type . "html")) "<p>Emacs には使い捨て用の <em>scratch</em> バッファがあるが、せっかく書いたコードが Emacs 終了と同時に消えてしまうのはもったいないし、不意に Emacs が落ちると面倒だ。</p>

<p>そこで open-junk-file.el を使用すれば、使い捨て用のファイルをすぐに開くことができる。インストール方法は以下の通り。</p>

<ol>
<li><a href=\"http://www.emacswiki.org/emacs/open-junk-file.el\">http:&#47;&#47;www.emacswiki.org&#47;emacs&#47;open-junk-file.el</a> から open-junk-file.el を入手し、パスの通ったところに置く (auto-install を導入していれば <code>M-x install-elisp-from-emacswiki open-junk-file.el</code> などでもインストール可)。</li>
<li>.emacs に以下のような設定を記述。</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">open-junk-file-format</span> <span class=\"s\">&quot;~/program/junk/%Y/%m/%Y-%m-%d-%H%M%S.&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-x j&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;open-junk-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>この設定を行えば、Emacs で C-x j を入力すると <code>Junk Code (Enter extension): ~&#47;program&#47;junk&#47;2012&#47;06&#47;2012-06-04-152242.</code> のように表示され、拡張子を入力して RET を入力するだけで使い捨て用コードを開くことができる。</p>
") (published nil "2012-06-04T15:24:30Z") (updated nil "2012-06-04T15:24:30Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5854") (published nil "2012-06-04T02:02:27+09:00") (updated nil "2012-06-04T02:02:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0df65996288d4e110dbd"))) (url nil "http://qiita.com/items/0df65996288d4e110dbd") (title nil " Emacs のミニバッファで C-w を入力したときに区切りまでの語を削除する") (content ((type . "html")) "<p>zsh では C-w を入力すると区切りまでの文字を削除することができる。Emacs のミニバッファで同じ事をやりたい場合は、以下のコードを .emacs に記述すればよい。これを書いてると C-x C-f などで非常に便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">minibuffer-local-completion-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;backward-kill-word</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-04T02:02:27Z") (updated nil "2012-06-04T02:02:27Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5851") (published nil "2012-06-03T23:04:27+09:00") (updated nil "2012-06-03T23:04:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7e298a38f40dc2a153c3"))) (url nil "http://qiita.com/items/7e298a38f40dc2a153c3") (title nil "Emacs で root 権限が必要なファイルを編集する") (content ((type . "html")) "<p>C-x C-f でファイルを開くときに <code>&#47;sudo::&#47;etc&#47;passwd</code> のようにファイルパスの先頭に <code>&#47;sudo::</code> をつけると編集できる。</p>
") (published nil "2012-06-03T23:04:27Z") (updated nil "2012-06-03T23:04:27Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5843") (published nil "2012-06-03T01:18:27+09:00") (updated nil "2012-06-03T01:18:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f5ccc2b027a9aaa13fe4"))) (url nil "http://qiita.com/items/f5ccc2b027a9aaa13fe4") (title nil "Emacs の コピー/ペースト をクリップボードで行う") (content ((type . "html")) "<p>Emacs では コピー&#47;ペースト を独自バッファで行っているため、OSのクリップボードと文字列を共有しない。以下のコードを .emacs に記述することで、Emacs でもクリップボードを使用できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">x-select-enable-clipboard</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\C-y&quot;</span> <span class=\"ss\">&#39;x-clipboard-yank</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-03T01:18:27Z") (updated nil "2012-06-03T01:18:27Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/5759") (published nil "2012-05-30T17:36:54+09:00") (updated nil "2012-05-30T17:36:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/db1e0f7d97fcb0afe416"))) (url nil "http://qiita.com/items/db1e0f7d97fcb0afe416") (title nil "ファイル名がかぶった場合にバッファ名をわかりやすくする") (content ((type . "html")) "<p>uniquifyはEmacsに同梱されているようなので特にインストールは不要でした。</p>

<p>設定ファイルに下記を追加してEmacsを再起動します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;uniquify</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">uniquify-buffer-name-style</span> <span class=\"ss\">&#39;post-forward-angle-brackets</span><span class=\"p\">)</span><span class=\"o\">`</span>
</pre>
</div>
</div>
<p>これで同じファイル名だとディレクトリ名も表示してくれます。</p>

<p>これは便利すぎる。いままで知らなかったのが悔やまれる。</p>
") (published nil "2012-05-30T17:36:54Z") (updated nil "2012-05-30T17:36:54Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/5758") (published nil "2012-05-30T17:36:04+09:00") (updated nil "2012-05-30T17:36:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/888a0dbb451b7f9df1f0"))) (url nil "http://qiita.com/items/888a0dbb451b7f9df1f0") (title nil "C-a C-aしてバッファーの頭に移動する") (content ((type . "html")) "<p>sequential-command.elをauto-installでインストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">sequential</span><span class=\"o\">-</span><span class=\"n\">command</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;sequential-command-config</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">sequential-command-setup-keys</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>Emacsを再起動して、<code>C-a C-a C-a</code>とかすると、行頭にいって、バッファーの頭にいって、元に戻ります。</p>

<p>なにげに便利だ。</p>
") (published nil "2012-05-30T17:36:04Z") (updated nil "2012-05-30T17:36:04Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/5733") (published nil "2012-05-29T22:52:43+09:00") (updated nil "2012-06-29T13:47:56+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c1cd9f8ea77a31392159"))) (url nil "http://qiita.com/items/c1cd9f8ea77a31392159") (title nil "Rubyのflymakeが正しく動作しない時") (content ((type . "html")) "<p>具体的にはRuby1.9以降のハッシュ記法</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">hash.rb</span></div><div class=\"highlight\"><pre><span class=\"p\">{</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">value</span> <span class=\"p\">}</span>
</pre>
</div>
</div>
<p>がエラー行と見なされていた。<br>
実はflymakeはrubyを呼び出していて、Ruby1.9はrvmで入れていたので、システムのRuby1.8.7が呼び出されていた。<br>
rvm.el <a href=\"https://github.com/senny/rvm.el\">https://github.com/senny/rvm.el</a><br>
をloadpathの通った所に入れて、.emacsに</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">rvm-settings.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">rvm</span>
<span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;</span><span class=\"err\">rvm nil t)</span>
  <span class=\"p\">(</span><span class=\"n\">rvm</span><span class=\"o\">-</span><span class=\"n\">use</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>で解決。</p>
") (published nil "2012-05-29T22:52:43Z") (updated nil "2012-06-29T13:47:56Z") (author nil (name nil "nysalor"))) (entry nil (id nil "tag:qiita.com,2005:Item/5693") (published nil "2012-05-28T15:58:50+09:00") (updated nil "2012-05-28T15:58:50+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/abc8b9ce2b2ee9441141"))) (url nil "http://qiita.com/items/abc8b9ce2b2ee9441141") (title nil "auto-installのインストールおよび設定") (content ((type . "html")) "<p>auto-installをダウンロードしてバイトコンパイルします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">mkdir</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"o\">~/</span><span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
$ <span class=\"n\">cd</span> <span class=\"o\">~/</span><span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
$ <span class=\"n\">wget</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">www</span><span class=\"p\">.</span><span class=\"n\">emacswiki</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">/</span><span class=\"n\">download</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">.</span><span class=\"n\">el</span>
$ <span class=\"n\">emacs</span> <span class=\"o\">--</span><span class=\"n\">batch</span> <span class=\"o\">-</span><span class=\"n\">Q</span> <span class=\"o\">-</span><span class=\"n\">f</span> <span class=\"n\">batch</span><span class=\"o\">-</span><span class=\"n\">byte</span><span class=\"o\">-</span><span class=\"n\">compile</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>Emacsの設定ファイルに下記を追加してEmacsを再起動します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; (install-elisp-from-emacswiki &quot;auto-install.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-install</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"nv\">auto-install-directory</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">auto-install-update-emacswiki-package-name</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">auto-install-compatibility-setup</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ediff-window-setup-function</span> <span class=\"ss\">&#39;ediff-setup-windows-plain</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-05-28T15:58:50Z") (updated nil "2012-05-28T15:58:50Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/5621") (published nil "2012-05-25T15:11:35+09:00") (updated nil "2012-05-25T15:11:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e4444a498ca65021ed89"))) (url nil "http://qiita.com/items/e4444a498ca65021ed89") (title nil "markdown-modeをインストールする(Ubuntu11.10)") (content ((type . "html")) "<p>Emacsでmarkdown形式のテキストを編集したかったので、markdownモードを導入しました。</p>

<p>Ubuntuでパッケージがあったのでそちらをインストールしました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">goodies</span><span class=\"o\">-</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p><code>.emacs.d&#47;init.el</code>に下記を追加して、拡張子が<code>.text</code>のファイルは自動でmarkdownモードにするようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; markdown-mode</span>
<span class=\"p\">(</span><span class=\"nv\">autoload</span> <span class=\"ss\">&#39;markdown-mode</span> <span class=\"s\">&quot;markdown-mode.el&quot;</span>
  <span class=\"s\">&quot;Major mode for editing Markdown files&quot;</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">auto-mode-alist</span>
      <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\.text&quot;</span> <span class=\"o\">.</span> <span class=\"nv\">markdown-mode</span><span class=\"p\">)</span> <span class=\"nv\">auto-mode-alist</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-05-25T15:11:35Z") (updated nil "2012-05-25T15:11:35Z") (author nil (name nil "icb54615"))) (entry nil (id nil "tag:qiita.com,2005:Item/5615") (published nil "2012-05-25T03:53:09+09:00") (updated nil "2012-05-25T12:45:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/15a9a58cbb2b618a0069"))) (url nil "http://qiita.com/items/15a9a58cbb2b618a0069") (title nil "個人的な Emacs インターフェース") (content ((type . "html")) "<p>いつも自分で Emacs を使うときに使い回すインターフェース用 .el</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">elisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; scroll-bar-mode &quot;right&quot; or &quot;left&quot; or &quot;nil&quot;</span>
<span class=\"p\">(</span><span class=\"nf\">set-scroll-bar-mode</span> <span class=\"ss\">&#39;nil</span><span class=\"p\">)</span>

<span class=\"c1\">;; 補完で大文字小文字無視</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">read-file-name-completion-ignore-case</span> <span class=\"nv\">t</span><span class=\"p\">)</span>

<span class=\"c1\">;; 対応する括弧を光らせる。</span>
<span class=\"p\">(</span><span class=\"nf\">show-paren-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span> 

<span class=\"c1\">;; ファイル末の改行がなければ追加</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">require-final-newline</span> <span class=\"nv\">t</span><span class=\"p\">)</span> 

<span class=\"c1\">;; ウインドウ分割時に画面外へ出る文章を折り返す</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">truncate-partial-width-windows</span> <span class=\"nv\">nil</span><span class=\"p\">)</span> 

<span class=\"c1\">;; 編集行のハイライト</span>
<span class=\"p\">(</span><span class=\"nf\">global-hl-line-mode</span><span class=\"p\">)</span> 

<span class=\"c1\">;;tabは4文字分、改行後に自動インデント</span>
<span class=\"p\">(</span><span class=\"nf\">setq-default</span> <span class=\"nv\">tab-width</span> <span class=\"mi\">4</span> <span class=\"nv\">indent-tabs-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>

<span class=\"c1\">;;; キーバインド</span>
<span class=\"p\">(</span><span class=\"nf\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"s\">&quot;\\C-h&quot;</span> <span class=\"ss\">&#39;delete-backward-char</span><span class=\"p\">)</span> <span class=\"c1\">; 削除</span>

<span class=\"c1\">;;; ツールバー(add-to-list &#39;default-frame-alist &#39;(alpha . 0))を非表示</span>
<span class=\"c1\">;; M-x tool-bar-mode で表示非表示を切り替えられる</span>
<span class=\"p\">(</span><span class=\"nf\">tool-bar-mode</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>

<span class=\"c1\">;;; メニューバーを非表示</span>
<span class=\"c1\">;; M-x menu-bar-mode で表示非表示を切り替えられる</span>
<span class=\"p\">(</span><span class=\"nf\">menu-bar-mode</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>

<span class=\"c1\">;; set alpha</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">alpha</span> <span class=\"o\">.</span> <span class=\"mi\">80</span><span class=\"p\">))</span>

<span class=\"c1\">;; set font and screen</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
  <span class=\"c1\">;; 文字の色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">foreground-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;azure1&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; 背景色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">background-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;black&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; カーソルの色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">cursor-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;green&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; マウスポインタの色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">mouse-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;green&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; モードラインの文字の色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-foreground</span> <span class=\"ss\">&#39;modeline</span> <span class=\"s\">&quot;white&quot;</span><span class=\"p\">)</span>
  <span class=\"c1\">;; モードラインの背景色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">&#39;modeline</span> <span class=\"s\">&quot;DimGrey&quot;</span><span class=\"p\">)</span>
  <span class=\"c1\">;; 選択中のリージョンの色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">&#39;region</span> <span class=\"s\">&quot;Blue&quot;</span><span class=\"p\">)</span>
  <span class=\"c1\">;; モードライン（アクティブでないバッファ）の文字色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-foreground</span> <span class=\"ss\">&#39;mode-line-inactive</span> <span class=\"s\">&quot;gray30&quot;</span><span class=\"p\">)</span>
  <span class=\"c1\">;; モードライン（アクティブでないバッファ）の背景色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">&#39;mode-line-inactive</span> <span class=\"s\">&quot;gray85&quot;</span><span class=\"p\">)</span>
<span class=\"p\">)</span>

<span class=\"c1\">;====================================</span>
<span class=\"c1\">;;全角スペースとかに色を付ける</span>
<span class=\"c1\">;====================================</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-1</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-1</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-2</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-2</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-u-1</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:foreground</span> <span class=\"s\">&quot;SeaGreen&quot;</span> <span class=\"nv\">:underline</span> <span class=\"nv\">t</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-b-1</span> <span class=\"ss\">&#39;my-face-b-1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-b-2</span> <span class=\"ss\">&#39;my-face-b-2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-u-1</span> <span class=\"ss\">&#39;my-face-u-1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">font-lock-mode</span> <span class=\"p\">(</span><span class=\"nf\">before</span> <span class=\"nv\">my-font-lock-mode</span> <span class=\"p\">())</span>
  <span class=\"p\">(</span><span class=\"nf\">font-lock-add-keywords</span>
   <span class=\"nv\">major-mode</span>
   <span class=\"o\">&#39;</span><span class=\"p\">(</span>
     <span class=\"p\">(</span><span class=\"s\">&quot;　&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-b-1</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
     <span class=\"p\">(</span><span class=\"s\">&quot;\\t&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-b-2</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
     <span class=\"p\">(</span><span class=\"s\">&quot;[ ]+$&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-u-1</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
     <span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">ad-enable-advice</span> <span class=\"ss\">&#39;font-lock-mode</span> <span class=\"ss\">&#39;before</span> <span class=\"ss\">&#39;my-font-lock-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">ad-activate</span> <span class=\"ss\">&#39;font-lock-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">add-hook</span> <span class=\"ss\">&#39;find-file-hooks</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">()</span>
                              <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">font-lock-mode</span>
                                  <span class=\"nv\">nil</span>
                                <span class=\"p\">(</span><span class=\"nf\">font-lock-mode</span> <span class=\"nv\">t</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2012-05-25T03:53:09Z") (updated nil "2012-05-25T12:45:00Z") (author nil (name nil "biwakonbu"))) (entry nil (id nil "tag:qiita.com,2005:Item/5367") (published nil "2012-05-17T01:16:30+09:00") (updated nil "2012-05-17T01:16:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0502030e0875b6902fe1"))) (url nil "http://qiita.com/items/0502030e0875b6902fe1") (title nil "emacsのプラグイン置き場、MELPAに自作の.elを登録する") (content ((type . "html")) "<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">duplicate-thing.el</a> というプラグインをMELPA経由でインストール出来るようにするまでのメモ</p>

<p>MELPAに上げるとバージョンアップ時の更新がとても簡単になります。(githubのmasterにコミットするだけでバージョンアップ完了) Emacs24ではpackage.elが標準搭載されるようですし、手持ちの.elがあればアップロードしておくとたくさんの人に使ってもらえる確率が上がりそうです。</p>

<h1>melpaをforkしてcloneする</h1>

<ul>
<li><a href=\"https://github.com/milkypostman/melpa\">milkypostman&#47;melpa</a> を fork</li>
<li>fork したものを git clone </li>
</ul>

<h1>recipes&#47;duplicate-thing を追加</h1>

<ul>
<li>dulicate-thing.elの場合、こんな感じ - <a href=\"https://github.com/ongaeshi/melpa/commit/6878e9cfc903567d4a812451b674ce89e5703d48\">6878e9c</a></li>
<li>詳しくはこちらを参照 - <a href=\"https://github.com/milkypostman/melpa/blob/master/README.md\">melpa&#47;README.md</a></li>
</ul>

<h1>動作確認</h1>

<p>README.md にある</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"o\">./</span><span class=\"n\">buildpkg</span> 
</pre>
</div>
</div>
<p>が失敗したので、以下の方法で確認。</p>

<ol>
<li>M-x load-file package-build.el</li>
<li>M-x pacage-build-archive duplicate-thihng</li>
</ol>

<p>要はスクリプト内の処理を直接Emacsで行っているだけです。</p>

<h1>ソースコードを整える</h1>

<ul>
<li>先頭にコメント追加- <a href=\"https://github.com/ongaeshi/duplicate-thing/commit/42b8010fc6cc3a333a5bc6328020d30d3239e57d\">42b8010fc</a></li>
<li>autoloadマクロの挿入- <a href=\"https://github.com/ongaeshi/duplicate-thing/commit/42b8010fc6cc3a333a5bc6328020d30d3239e57d\">42b8010f</a></li>
</ul>

<h1>コミットしてpull request</h1>

<p>一時間位でpullしてもらえました。</p>

<p><a href=\"https://github.com/milkypostman/melpa/pull/118\">Pull Request #118: duplicate-thing by ongaeshi · milkypostman&#47;melpa</a></p>
") (published nil "2012-05-17T01:16:30Z") (updated nil "2012-05-17T01:16:30Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/5299") (published nil "2012-05-15T03:14:32+09:00") (updated nil "2012-05-17T01:01:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e81fca7a9797fe203e9f"))) (url nil "http://qiita.com/items/e81fca7a9797fe203e9f") (title nil "Emacs Lisp を簡単にインストールするための package.el & MELPA") (content ((type . "html")) "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120515/20120515030929_original.jpg?1337018972\" alt=\"package-list\"></p>

<h2>1. package.el をインストールする</h2>

<p><a href=\"https://github.com/technomancy/package.el\">technomancy&#47;package.el</a></p>

<p>以下のURLから.elをロードパスの通った場所に置くか</p>

<p>Emacs24 : <a href=\"http://bit.ly/pkg-el\">http:&#47;&#47;bit.ly&#47;pkg-el</a><br>
Emacs23 : <a href=\"http://bit.ly/pkg-el23\">http:&#47;&#47;bit.ly&#47;pkg-el23</a></p>

<p>auto-install がある場合は以下のS式を評価してインストールして下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;</span> <span class=\"n\">Emacs24</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">or</span><span class=\"p\">.</span><span class=\"n\">cz</span><span class=\"o\">/</span><span class=\"n\">w</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">blob_plain</span><span class=\"o\">/</span><span class=\"n\">HEAD</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">package</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>

<span class=\"p\">:</span> <span class=\"n\">Emacs23</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">or</span><span class=\"p\">.</span><span class=\"n\">cz</span><span class=\"o\">/</span><span class=\"n\">w</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">blob_plain</span><span class=\"o\">/</span>1<span class=\"n\">a0a666f941c99882093d7bd08ced15033bc3f0c</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">package</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>2. MELPAをレポジトリに追加</h2>

<p><a href=\"http://melpa.milkbox.net/#development\">MELPA</a>はgithubで管理されたパッケージレポジトリです。</p>

<p>まずは melpla.el をインストールします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">progn</span>
  <span class=\"p\">(</span><span class=\"k\">switch</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">buffer</span>
   <span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">-</span><span class=\"n\">retrieve</span><span class=\"o\">-</span><span class=\"n\">synchronously</span>
    &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">milkypostman</span><span class=\"o\">/</span><span class=\"n\">melpa</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">melpa</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">buffer</span>  <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)</span> <span class=\"s\">&#39;</span><span class=\"err\">single))</span>
</pre>
</div>
</div>
<p>package.el経由でインストールしたパッケージは<code>~&#47;.emacs.d&#47;elpa</code>以下に置かれます。</p>

<p>.emacs.d&#47;init.el に以下を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;package)</span>

<span class=\"s\">; Add package-archives</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span> <span class=\"s\">&#39;(&quot;melpa&quot; . &quot;http://melpa.milkbox.net/packages/&quot;) t)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span> <span class=\"s\">&#39;(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;)) ; ついでにmarmaladeも追加</span>

<span class=\"s\">; Initialize</span>
<span class=\"s\">(package-initialize)</span>

<span class=\"s\">; melpa.el</span>
<span class=\"s\">(require &#39;</span><span class=\"n\">melpa</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>3. 実際に使ってみる</h2>

<p><code>M-x package-list-packages</code> で一覧を取得します。ページ先頭のような画面が出るので後は選んでインストールしていきます。試しにyaml-modeをインストールしてみます。メニューから探してマウスクリックか<code>ENTER</code>を押して下さい。</p>

<p>インストール終了後、.emacs.d&#47;init.elに設定を書き加えて完了です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;yaml-mode)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">alist</span> <span class=\"s\">&#39;</span><span class=\"err\">(&quot;\\\\.yml$\\\\|\\\\.yaml$&quot; . yaml-mode))</span>
</pre>
</div>
</div>") (published nil "2012-05-15T03:14:32Z") (updated nil "2012-05-17T01:01:17Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/5280") (published nil "2012-05-14T17:27:27+09:00") (updated nil "2012-05-14T17:27:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b3f4315082c1c7942fcd"))) (url nil "http://qiita.com/items/b3f4315082c1c7942fcd") (title nil "日々の定型作業を自動化する auto-shell-command.el を作りました") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/0e45e4bfa5a813c1b9e4\">前にQiitaに投稿した記事</a> からバージョンアップしました。</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/tuto0621/20120514/1336983541\">日々の定型作業を自動化する auto-shell-command.el を作りました - おんがえしの日記</a> 

<ul>
<li>モードラインへの実行中プロセス数の表示</li>
<li>一時的なコマンドを追加 (ascmd:add)</li>
<li>ファイルを書き換えずに関連づけたコマンドを実行する (ascm:exec)</li>
</ul></li>
</ul>

<p>・・・等、色々と便利な機能を足しています。</p>
") (published nil "2012-05-14T17:27:27Z") (updated nil "2012-05-14T17:27:27Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/5266") (published nil "2012-05-14T00:40:58+09:00") (updated nil "2012-05-15T03:18:38+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3f6415732867d2ba0e27"))) (url nil "http://qiita.com/items/3f6415732867d2ba0e27") (title nil "Emacs Lisp の情報源") (content ((type . "html")) "<p>他にあれば是非とも知りたいです。 ※ 随時更新中！！</p>

<h2>便利な Emacs Lisp を探す</h2>

<ul>
<li><a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">Emacs Lisp を簡単にインストールするための package.el &amp; MELPA</a>

<ul>
<li><a href=\"http://tromey.com/elpa/package.el\">package.el</a> : Emacs24で標準搭載予定のパッケージ管理スクリプト</li>
<li><a href=\"http://melpa.milkbox.net/\">MELPA</a> : パッケージレポジトリの一つ、github管理</li>
</ul></li>
<li><a href=\"http://emacswiki.org/\">EmacsWiki: Site Map</a>

<ul>
<li>auto-intall.el 経由で直接インストール可能なwikiサイト</li>
</ul></li>
<li><a href=\"http://www.damtp.cam.ac.uk/user/sje30/emacs/ell.html\">Emacs Lisp List</a></li>
</ul>

<h2>日本語で読める情報源</h2>

<ul>
<li><a href=\"http://d.hatena.ne.jp/rubikitch/\">(rubikitch loves (Emacs Ruby CUI Books))</a>

<ul>
<li>anything.el の作者でもある、るびきちさんのblogです。<a href=\"http://d.hatena.ne.jp/rubikitch/20100201/elispsyntax\">Emacs Lisp基礎文法最速マスター</a> とかおすすめです</li>
</ul></li>
<li><a href=\"http://sakito.jp/emacs/emacs23.html\">Emacs23 (Cocoa Emacs) 入門から中毒まで : 紹介マニア</a>

<ul>
<li>OSXでEmacsを使う上で貴重な情報がたくさんあります</li>
</ul></li>
<li><a href=\"http://www.bookshelf.jp/soft/\">Meadow&#47;Emacs memo:</a>

<ul>
<li>最近は更新されていないようですが、昔よくお世話になってました</li>
</ul></li>
</ul>

<h2>書籍</h2>

<p>るびきちさんの本です。使い方からelispの書き方までほぼ網羅されていおり、私はこの二冊でほぼ事足りました。最近だと<a href=\"http://www.amazon.co.jp/Emacs%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%EF%BD%9E%E6%80%9D%E8%80%83%E3%82%92%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%AB%E3%82%B3%E3%83%BC%E3%83%89%E5%8C%96%E3%81%97%E3%80%81%E9%96%8B%E7%99%BA%E3%82%92%E5%8A%A0%E9%80%9F%E3%81%99%E3%82%8B-WEB-DB-PRESS-plus/dp/4774150029/ref=sr_1_1?ie=UTF8&amp;qid=1336923333&amp;sr=8-1\">Emacs実践入門</a>が評判よいみたいですがまだ読めていません。</p>

<ul>
<li><a href=\"http://www.amazon.co.jp/Emacs%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%83%90%E3%82%A4%E3%83%96%E3%83%AB-%EF%BD%9E%E4%BD%9C%E6%A5%AD%E5%8A%B9%E7%8E%87%E3%82%92%E3%82%AB%E3%82%A4%E3%82%BC%E3%83%B3%E3%81%99%E3%82%8B200%E3%81%AE%E6%8A%80%EF%BD%9E-%E3%82%8B%E3%81%B3%E3%81%8D%E3%81%A1/dp/4774143278/ref=sr_1_2?ie=UTF8&amp;qid=1336923333&amp;sr=8-2\">Emacsテクニックバイブル　~作業効率をカイゼンする200の技~</a></li>
<li><a href=\"http://www.amazon.co.jp/Emacs-Lisp%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%83%90%E3%82%A4%E3%83%96%E3%83%AB-%E3%82%8B%E3%81%B3%E3%81%8D%E3%81%A1/dp/4774148970/ref=sr_1_4?ie=UTF8&amp;qid=1336923333&amp;sr=8-4\">Emacs Lispテクニックバイブル</a></li>
</ul>

<h2>資料</h2>

<ul>
<li><a href=\"http://lc.linux.or.jp/lc2002/papers/komatsu0920h.pdf\">taiyaki.org&#47;elisp programming techniques</a> - Linux Conference 2002 での小松弘幸氏の発表資料(pdf)</li>
<li><a href=\"http://d.hatena.ne.jp/shigemk2/20120428/1335604884\">多様なelispインストール手法に関する一考察</a> -  #kansai_emacs - by shigemk2氏</li>
</ul>
") (published nil "2012-05-14T00:40:58Z") (updated nil "2012-05-15T03:18:38Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/5226") (published nil "2012-05-12T08:34:03+09:00") (updated nil "2012-05-12T10:08:22+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/a1a765bfb32ad04b4b04"))) (url nil "http://qiita.com/items/a1a765bfb32ad04b4b04") (title nil "Emacsユーザーのための LESS 導入") (content ((type . "html")) "<p>Emacsユーザーが快適に LESS を使えるようになるまでの導入記事です。</p>

<h2>LESS とは何か。</h2>

<p><a href=\"http://lesscss.org/\">LESS</a>とは、CSSメタ言語と呼ばれるもので、LESS の他に <a href=\"http://sass-lang.com/\">Sass(SCSS)</a> と呼ばれるものがあります(SassとSCSSはちょっとだけ文法の違う兄弟みたいなもの)。</p>

<h3>LESS と Sass の違い</h3>

<p>文法がわりと違います。詳しくは<a href=\"http://tech.naver.jp/blog/?p=951\">はじめてのCSSメタ言語はLessがおすすめ！ « NAVER Engineers&#39; Blog</a>あたりを参照。</p>

<h2>LESS の導入。</h2>

<p>LESS は JS によるクライアントサイド（要するにブラウザ上）の変換（less-&gt;css）に対応しているので、てっとり早く試してみるのに向いています。<br>
具体的には style.less ファイルと一緒に、lessサイトからダウンロードできる less.js を読み込むだけで使えます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">HTML</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet/less&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text/css&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;styles.less&quot;</span><span class=\"nt\">&gt;</span>
<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">&quot;less.js&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text/javascript&quot;</span><span class=\"nt\">&gt;&lt;/script&gt;</span>
</pre>
</div>
</div>
<h3>サーバーサイドの変換。</h3>

<p>サーバーで変換したい（要するにブラウザ以外でCSSファイルを出力したい）場合は、node.js（以下、Node）を導入する必要があります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>npm install -g less
</pre>
</div>
</div>
<p>Node を導入した上で、npm に -g を付けてコマンドラインツールをインストールすると lessc コマンドが &#47;usr&#47;local&#47;bin&#47;lessc にインストールされて、使えるようになります。<br>
-g を知らない人は、<code>$ man npm</code> で調べて下さい。</p>

<p>これは、標準出力に less ファイルを css に変換したもの出力するコマンドなので、&gt; によるリダイレクトでファイルに出力できます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc style.less &gt; style.css
</pre>
</div>
</div>
<p>という感じに、CSSファイルを出力します。<br>
引数に -x（--compress）もしくは --yui-compress を付けると圧縮して出力できます。</p>

<p>-x はセレクタ毎に1行づつ、--yui-compress は<a href=\"http://developer.yahoo.com/yui/compressor/css.html\">YUI CSS Compressor</a>のように全て1行にして圧縮することができます。</p>

<h3>圧縮サンプル。</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">example.less</span></div><div class=\"highlight\"><pre><span class=\"k\">@the-border</span><span class=\"o\">:</span> <span class=\"nt\">1px</span><span class=\"p\">;</span>
<span class=\"k\">@base-color</span><span class=\"o\">:</span> <span class=\"nf\">#111</span><span class=\"p\">;</span>
<span class=\"k\">@red</span><span class=\"o\">:</span>        <span class=\"nf\">#842210</span><span class=\"p\">;</span>

<span class=\"nf\">#header</span> <span class=\"p\">{</span>
  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">base</span><span class=\"o\">-</span><span class=\"k\">color</span> <span class=\"o\">*</span> <span class=\"m\">3</span><span class=\"p\">;</span>
  <span class=\"k\">border-left</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"k\">border</span><span class=\"p\">;</span>
  <span class=\"k\">border-right</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"k\">border</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"nf\">#footer</span> <span class=\"p\">{</span> 
  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">base</span><span class=\"o\">-</span><span class=\"k\">color</span> <span class=\"o\">+</span> <span class=\"m\">#003300</span><span class=\"p\">;</span>
  <span class=\"k\">border-color</span><span class=\"o\">:</span> <span class=\"n\">desaturate</span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"nb\">red</span><span class=\"o\">,</span> <span class=\"m\">10</span><span class=\"o\">%</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<p>上記の example.less を圧縮すると、以下のようになる。</p>

<h4>-x（--compress）の場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc -x example.less
<span class=\"c\">#header{color:#333333;border-left:1px;border-right:2px;}</span>
<span class=\"c\">#footer{color:#114411;border-color:#7d2717;}</span>
</pre>
</div>
</div>
<p>2行になる。</p>

<h4>--yui-compress の場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc --yui-compress example.less
<span class=\"c\">#header{color:#333;border-left:1px;border-right:2px}#footer{color:#141;border-color:#7d2717}</span>
</pre>
</div>
</div>
<p>1行になる。</p>

<h4>おまけ：引数なしの場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">CSS</span></div><div class=\"highlight\"><pre><span class=\"nf\">#header</span> <span class=\"p\">{</span>
  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#333333</span><span class=\"p\">;</span>
  <span class=\"k\">border-left</span><span class=\"o\">:</span> <span class=\"m\">1px</span><span class=\"p\">;</span>
  <span class=\"k\">border-right</span><span class=\"o\">:</span> <span class=\"m\">2px</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"nf\">#footer</span> <span class=\"p\">{</span>
  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#114411</span><span class=\"p\">;</span>
  <span class=\"k\">border-color</span><span class=\"o\">:</span> <span class=\"m\">#7d2717</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<h2>Emacsの LESS CSSモードについて。</h2>

<p>いまのところ、メジャーモードはひとつだけで<a href=\"https://github.com/purcell/less-css-mode/\">LESS CSSモード</a>というのがある（Emacs上のモード名は less-css-mode）。</p>

<p>less-css-mode は css-modeの派生モードとして定義されているため、css-mode を使っている人にとっては、違和感なく使うことができます。</p>

<p>導入後、拡張子 .less ファイルを開くと自動的に less-css-mode になります。</p>

<h2>LESS CSSモードの導入。</h2>

<p>GitHub から直接 less-css-mode.el ファイルをダウンロードしてインストールする方法と、package.el を使った Marmalade リポジトリからのインストール方法の2種類があります。</p>

<p>package.elが使える場合は、以下のように Marmaladeリポジトリを追加しておくと、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;package-archives</span>
<span class=\"s\"> &#39;</span><span class=\"p\">(</span>&quot;<span class=\"n\">marmalade</span>&quot; <span class=\"p\">.</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">marmalade</span><span class=\"o\">-</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>以下のコマンドで LESS CSSモードが導入できる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">RET</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span> <span class=\"n\">RET</span>
</pre>
</div>
</div>
<h2>LESS CSSモードの特徴。</h2>

<ul>
<li>Flymake による文法チェック</li>
<li>css への書き出し</li>
</ul>

<p>標準で lessc コマンドを利用した Flymake による動的文法チェックと、cssファイルへの出力に対応しています。<br>
なので、LESS CSSモードを使いたい場合は、npm による less 導入がほぼ必須です。<br>
また、Emacsで &#47;usr&#47;local&#47;bin のパスが exec-path に追加されている必要があります。まぁ、基本的には大丈夫でしょう。<br>
どうしても Flymake が嫌だという人は、以下のように less-css-mode 実行時の hook に flymake-mode-off を挟んでオフにすることもできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hooks</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">off</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;less-css-mode-hook &#39;</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hooks</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h3>CSSファイルを書き出す。</h3>

<p>less-css-compile というコマンドが定義されており、less-css-mode-map に C-c C-c というキーバインドが登録されています。<br>
なので、いつでも C-c C-c で、編集中の less ファイルを css ファイルに書き出すことができます。</p>

<h3>保存時に自動的にCSSファイルを書き出す。</h-1197742446>

<p>less-css-mode の after-save-hook に less-css-compile-maybe という関数が追加されています。<br>
これは、less-css-compile-at-save 変数が nil 以外の場合、less-css-compile が実行されるというものです。<br>
まぁ、要するに 以下のように設定しておくと、less-css-mode でファイルを保存したときに、自動的に CSSファイルを書き出してくれるようになります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">at</span><span class=\"o\">-</span><span class=\"n\">save</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">;</span> 初期値は <span class=\"n\">nil</span>
<span class=\"p\">;;</span> <span class=\"n\">lessc</span> への引数 <span class=\"s\">&#39;(&quot;arg&quot;) 形式で</span>
<span class=\"s\">;; (setq less-css-lessc-options &#39;</span><span class=\"p\">(</span>&quot;<span class=\"o\">--</span><span class=\"n\">yui</span><span class=\"o\">-</span><span class=\"n\">compress</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>また、バッファローカル変数として less-css-output-file-name というのがあるので、これに値を入れるとCSS出力時のファイル名を任意のものに変更することもできます。</p>

<h3>おまけ：CSS書き出し時のwindow分割がうざい。</h3>

<p>CSSへの書き出しは compile.el の機能を使っており、<em>compilation</em> というバッファが表示される仕様になっています。<br>
これを制御するには色々と方法がありますが、<a href=\"http://emacswiki.org/emacs/ModeCompile\">EmacsWiki: Mode Compile</a>に自動的に隠すコードがあるので、これを紹介しておきましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">fboundp</span> <span class=\"s\">&#39;winner-mode)</span>
<span class=\"s\">  (winner-mode t))</span>

<span class=\"s\">(setq compilation-finish-functions &#39;</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">autoclose</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">autoclose</span> <span class=\"p\">(</span><span class=\"n\">buffer</span> <span class=\"n\">string</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">cond</span> <span class=\"p\">((</span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">match</span> &quot;<span class=\"n\">finished</span>&quot; <span class=\"n\">string</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">bury</span><span class=\"o\">-</span><span class=\"n\">buffer</span> &quot;<span class=\"o\">*</span><span class=\"n\">compilation</span><span class=\"o\">*</span>&quot;<span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">winner</span><span class=\"o\">-</span><span class=\"n\">undo</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">Build</span> <span class=\"n\">successful</span><span class=\"p\">.</span>&quot;<span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"n\">t</span>
         <span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">Compilation</span> <span class=\"n\">exited</span> <span class=\"n\">abnormally</span><span class=\"p\">:</span> <span class=\"c\">%s&quot; string))))</span>
</pre>
</div>
</div>
<p>window分割の undo&#47;redo ができる winner-mode を使っています。<br>
C-c left と C-c right で window 分割状態を undo&#47;redo できます。<br>
これについてはいつか書きましょう。</p>

<h3>おまけ2：less-css-mode で auto-complete を使う。</h3>

<p>auto-complete-config.el をインストールしている前提だと、以下の設定で可能です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;ac-modes &#39;</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;less-css-mode-hook &#39;</span><span class=\"n\">ac</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">setup</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-05-12T08:34:03Z") (updated nil "2012-05-12T10:08:22Z") (author nil (name nil "tomoyaton"))) (entry nil (id nil "tag:qiita.com,2005:Item/5186") (published nil "2012-05-10T18:46:18+09:00") (updated nil "2012-05-10T18:51:37+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5d593c7d96d63ed4b92c"))) (url nil "http://qiita.com/items/5d593c7d96d63ed4b92c") (title nil "flymakeのデバッグmessage設定") (content ((type . "html")) "<p><code>M-:</code>(eval-expression)などで</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">elisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-log-level</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を評価する。flymakeが走るたびに<code>*Messages*</code>bufferにログ情報が出力される。どんな一時ファイルが作成されてどんなコマンドが実行されているのか、確認できる。</p>

<p>log levelは以下のようになっていて、defaultは<code>-1</code>。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">-</span>1 <span class=\"p\">=</span> <span class=\"n\">NONE</span><span class=\"p\">,</span>
 0 <span class=\"p\">=</span> <span class=\"n\">ERROR</span><span class=\"p\">,</span>
 1 <span class=\"p\">=</span> <span class=\"n\">WARNING</span><span class=\"p\">,</span>
 2 <span class=\"p\">=</span> <span class=\"n\">INFO</span><span class=\"p\">,</span>
 3 <span class=\"p\">=</span> <span class=\"n\">DEBUG</span>
</pre>
</div>
</div>") (published nil "2012-05-10T18:46:18Z") (updated nil "2012-05-10T18:51:37Z") (author nil (name nil "sugyan"))) (entry nil (id nil "tag:qiita.com,2005:Item/5132") (published nil "2012-05-08T23:16:23+09:00") (updated nil "2012-05-08T23:16:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/98c7cd3349bfd79e0d9b"))) (url nil "http://qiita.com/items/98c7cd3349bfd79e0d9b") (title nil "折り畳み表示する見出しレベルを切り返えるコマンド") (content ((type . "html")) "<p>以前、<a href=\"http://d.hatena.ne.jp/kitokitoki/20120206/p1/\">markdown-mode の折りたたみ表示機能 - わからん</a> というブログ記事を書きました。# の見出しだけを表示, # と ## の見出しだけを表示, # と ## と ### の見出しだけを表示、をクルクルと一つのコマンドで実行できると一覧性があがります。次のように実現してみました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nf\">make-variable-buffer-local</span> <span class=\"ss\">&#39;my-outline-level</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">setq-default</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">)</span>

    <span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">my-global-cycle-md</span> <span class=\"p\">()</span>
      <span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">cond</span>
       <span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
       <span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
       <span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2012-05-08T23:16:23Z") (updated nil "2012-05-08T23:16:23Z") (author nil (name nil "mori_dev"))) (entry nil (id nil "tag:qiita.com,2005:Item/5090") (published nil "2012-05-07T00:23:50+09:00") (updated nil "2012-05-07T00:28:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0e45e4bfa5a813c1b9e4"))) (url nil "http://qiita.com/items/0e45e4bfa5a813c1b9e4") (title nil "自動テストやコンパイルを簡単に記述するためのauto-shell-command.elを作った") (content ((type . "html")) "<p>&#39;auto-shell-command.el&#39;は、ファイルセーブ時に指定したシェルコマンドを実行することが出来るものです。似たようなツールとしては flymake や autotest、Guard があります。</p>

<p><a href=\"https://github.com/ongaeshi/auto-shell-command\">ongaeshi&#47;auto-shell-command - Github</a></p>

<h2>特徴</h2>

<ol>
<li><strong>ファイル名単位</strong> で実行するコマンドを指定することが出来る</li>
<li><strong>一時的にコマンドの実行をON&#47;OFF</strong>することが出来る(まとめて複数のファイルを編集する時に便利)</li>
<li>ファイルの監視からプロセスの実行までEmacsの機能でまかなっているため安定して動作する。Emacsが動く全てのOSで動作する。</li>
<li>外部ツールによるファイル書き換えによって起こる期待していなかったコマンドの誤作動が起きない</li>
<li>Emacs再起動時に消える一時的なコマンドを登録することが出来る</li>
</ol>

<h2>インストール</h2>

<p>&#39;emacs-deferred&#39;が必要です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">kiwanami</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">deferred</span><span class=\"o\">/</span><span class=\"n\">raw</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">deferred</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>インストール後、<code>auto-shell-command</code>をインストールして下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ongaeshi</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>初期設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;auto-shell-command)</span>

<span class=\"s\">;; キーバインドの設定 (一時的にauto-shell-commandの実行をON/OFFする)</span>
<span class=\"s\">(global-set-key &quot;\\C-c\\C-m&quot; &#39;</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">toggle</span><span class=\"p\">)</span>

<span class=\"p\">;;</span> 結果の通知を<span class=\"n\">Growl</span>で行う <span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">notify</span> <span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">deferred</span><span class=\"p\">:</span><span class=\"n\">process</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"p\">(</span><span class=\"n\">format</span> &quot;<span class=\"n\">growlnotify</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"c\">%s -t emacs&quot; msg))))</span>

<span class=\"p\">;;</span> エラー時のポップアップを見やすくする <span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"p\">,</span> <span class=\"s\">&#39;(require &#39;</span><span class=\"n\">popwin</span><span class=\"p\">)</span><span class=\"o\">&#39;</span>が必要です<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">push</span> <span class=\"s\">&#39;</span><span class=\"err\">(&quot;*Auto Shell Command*&quot; :height 20) popwin:special-display-config)</span>
</pre>
</div>
</div>
<h2>コマンドリストの設定</h2>

<p>コマンドリストを設定すると色々なことが出来ます。</p>

<p>とある<strong>C言語のプロジェクト</strong>の設定例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> 下が優先高
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/to/dir&quot;                  &quot;make&quot;))     ; 基本は&#39;</span><span class=\"n\">make</span><span class=\"o\">&#39;</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/to/dir/.gitignore&quot;       &quot;make run&quot;)) ; ルートフォルダ直下の&#39;</span><span class=\"p\">.</span><span class=\"n\">gitignore</span><span class=\"o\">&#39;</span>を触ったら<span class=\"s\">&#39;make run&#39;</span><span class=\"p\">(</span>実行<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/to/dir/doc&quot;              &quot;make doc&quot;)) ; &#39;</span><span class=\"n\">doc</span><span class=\"o\">&#39;</span>以下を触ったら<span class=\"s\">&#39;make doc&#39;</span><span class=\"p\">(</span>ドキュメント生成<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;</span><span class=\"err\">(&quot;/path/to/dir/BBB&quot;              &quot;(cd /path/to/dir/AAA &amp;&amp; make &amp;&amp; cd ../BBB &amp;&amp; make)&quot;)) ; BBBをビルドする時は先にAAAをビルドする必要が・・・(良くあることだよね？)</span>
</pre>
</div>
</div>
<p>とある<strong>Rubyプロジェクト</strong>の設定例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/test/runner.rb&quot;          &quot;rake test&quot;))                     ; &#39;</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"p\">.</span><span class=\"n\">rb</span><span class=\"o\">&#39;</span>を触ったらフルテスト<span class=\"p\">(</span>時間がかかる<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/test/test_/.*\\.rb&quot;       &quot;ruby -I../lib -I../test $FILE&quot;)) ; &#39;</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">test_</span><span class=\"o\">*</span><span class=\"p\">.</span><span class=\"n\">rb</span><span class=\"o\">&#39;</span>を触ったら編集したファイルだけを単体でテスト<span class=\"p\">(</span>時間節約<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ブラウザとの連携</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;Resources/.*\\.js&quot; &quot;wget -O /dev/null http://0.0.0.0:9090/run&quot;)) ; &#39;</span><span class=\"n\">Resources</span><span class=\"o\">/*</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"o\">&#39;</span>以下を触ったら<span class=\"s\">&#39;http://0.0.0.0:9090/run&#39;</span>にアクセス
</pre>
</div>
</div>
<h2>ご意見募集中</h2>

<p>わかりにくい部分やバグがありましたらコメント等でお知らせ下さい。</p>
") (published nil "2012-05-07T00:23:50Z") (updated nil "2012-05-07T00:28:16Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/5021") (published nil "2012-05-03T16:50:20+09:00") (updated nil "2012-05-05T01:08:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7a832e99d18cc8e507fd"))) (url nil "http://qiita.com/items/7a832e99d18cc8e507fd") (title nil "anythingから、ローカルにあるrubygemsのソースを開く") (content ((type . "html")) "<p>すでに誰か作ってるかもしれんけど、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-sources-local-gem-file</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;gems (local)&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
              <span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"nv\">call-process-shell-command</span>
                 <span class=\"s\">&quot;gem list&quot;</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">&#39;global</span><span class=\"p\">)</span>
                 <span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nv\">action</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">gem-name</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gem-name</span> <span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"s\">&quot;\\s+(.+)$&quot;</span> <span class=\"s\">&quot;&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">))</span>
                <span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
                  <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;gem&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">t</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;which&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">)</span>
                  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">buffer-substring-no-properties</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">)</span>
                                                              <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"p\">(</span><span class=\"nv\">point-max</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
                    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
                        <span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
                      <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;no such file or directory:\\&quot;%s\\&quot;&quot;</span> <span class=\"nv\">path</span><span class=\"p\">))))</span>
                <span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-local-gems</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span>
   <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">anything-c-sources-local-gem-file</span><span class=\"p\">)</span>
   <span class=\"s\">&quot;*anything local gems*&quot;</span>
  <span class=\"p\">))</span>
</pre>
</div>
</div>
<p>M-x anything-local-gems で、インストールされているgemの一覧が出るので、選ぶと、それのソース開きます。</p>

<p>ffap + devel-whichあればそんなに必要ないか…</p>
") (published nil "2012-05-03T16:50:20Z") (updated nil "2012-05-05T01:08:45Z") (author nil (name nil "hadashiA"))) (entry nil (id nil "tag:qiita.com,2005:Item/4938") (published nil "2012-04-30T16:15:49+09:00") (updated nil "2012-04-30T16:15:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b6f40f344ee7e3573993"))) (url nil "http://qiita.com/items/b6f40f344ee7e3573993") (title nil "yaottiさんの便利なanything-git-projectコマンドを、 anything したときの情報源としてつかう") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/d0d4959510acd9fd1abf#comment-9c3dfc76132f8f3b088a\">http:&#47;&#47;qiita.com&#47;items&#47;d0d4959510acd9fd1abf#comment-9c3dfc76132f8f3b088a</a><br>
↑これがとても使いやすので、独立したコマンドとしてでなく、普通にanythingしたときに出てくれるよう、情報源として定義しなおしてみる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">dolist</span> <span class=\"p\">(</span><span class=\"nb\">elt</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;modified&quot;</span> <span class=\"s\">&quot;Modified files (%s)&quot;</span> <span class=\"s\">&quot;--modified&quot;</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"s\">&quot;untracked&quot;</span> <span class=\"s\">&quot;Untracked files (%s)&quot;</span> <span class=\"s\">&quot;--others --exclude-standard&quot;</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"s\">&quot;all &quot;&quot;All controlled files in this project (%s)&quot;</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nb\">destructuring-bind</span> <span class=\"p\">(</span><span class=\"nv\">suffix</span> <span class=\"nv\">name</span> <span class=\"nv\">options</span><span class=\"p\">)</span> <span class=\"nb\">elt</span>
    <span class=\"p\">(</span><span class=\"nb\">eval</span> <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">intern</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;anything-c-source-git-project-for-&quot;</span> <span class=\"nv\">suffix</span><span class=\"p\">))</span>
             <span class=\"o\">`</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"nv\">name</span> <span class=\"nv\">default-directory</span><span class=\"p\">))</span>
               <span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
                         <span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">string=</span> <span class=\"nv\">options</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"c1\">;update candidate buffer every time except for that of all project files</span>
                                      <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">))</span>
                           <span class=\"p\">(</span><span class=\"nv\">with-current-buffer</span>
                               <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">&#39;global</span><span class=\"p\">)</span>
                             <span class=\"p\">(</span><span class=\"nv\">insert</span>
                              <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
                               <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;git ls-files $(git rev-parse --show-cdup) %s&quot;</span>
                                        <span class=\"nv\">options</span><span class=\"p\">)))))))</span>
               <span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"o\">.</span> <span class=\"nv\">file</span><span class=\"p\">))</span>
             <span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-git-project</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">sources</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">anything-c-source-git-project-for-modified</span>
                   <span class=\"nv\">anything-c-source-git-project-for-untracked</span>
                   <span class=\"nv\">anything-c-source-git-project-for-all</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span> <span class=\"nv\">sources</span>
     <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;*Anything git project in %s*&quot;</span> <span class=\"nv\">default-directory</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>anything-c-sources に追加。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
      <span class=\"o\">`</span><span class=\"p\">(</span> 
        <span class=\"nv\">anything-c-source-git-project-for-modified</span>
        <span class=\"c1\">;; anything-c-source-git-project-for-untracked</span>
        <span class=\"c1\">;; anything-c-source-git-project-for-all</span>
        <span class=\"nv\">anything-c-source-buffers</span>
        <span class=\"c1\">;; などなど、いつもの情報源いろいろ</span>
        <span class=\"p\">))</span>
</pre>
</div>
</div>
<p>M-x anything したとき、なによりも先に gitのmodifiedファイルが表示される。(存在すれば)</p>
") (published nil "2012-04-30T16:15:49Z") (updated nil "2012-04-30T16:15:49Z") (author nil (name nil "hadashiA"))) (entry nil (id nil "tag:qiita.com,2005:Item/4921") (published nil "2012-04-30T00:28:25+09:00") (updated nil "2012-04-30T00:31:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5591e4c4c0bfdc558641"))) (url nil "http://qiita.com/items/5591e4c4c0bfdc558641") (title nil "Emacsでvimのf、F、; を") (content ((type . "html")) "<p>vimで、カーソル行の <strong>1文字</strong> を検索して飛ぶコマンドがとても便利なのでEmacsでもできる限り再現しようと試みた。</p>

<p>M-j 押した後、次に押した文字がカーソルより右にあればそこに飛ぶ。<br>
M-k 押した後、次に押した文字がカーソルより左にあればそこに飛ぶ。<br>
M-u は前回のコマンドを繰り返す。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">vimlike-f-recent-char</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">vimlike-f-recent-func</span> <span class=\"no\">nil</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-f</span> <span class=\"p\">(</span><span class=\"nb\">char</span><span class=\"p\">)</span>
  <span class=\"s\">&quot;search to forward char into current line and move point (vim &#39;f&#39; command)&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;cSearch to forward char: &quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">char-after</span> <span class=\"p\">(</span><span class=\"nv\">point</span><span class=\"p\">))</span> <span class=\"nb\">char</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">forward-char</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nv\">search-forward</span> <span class=\"p\">(</span><span class=\"nv\">char-to-string</span> <span class=\"nb\">char</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-at-eol</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
  <span class=\"c1\">;; (migemo-forward (char-to-string char) (point-at-eol) t 1)</span>
  <span class=\"p\">(</span><span class=\"nv\">backward-char</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">vimlike-f-recent-search-char</span> <span class=\"nb\">char</span>
        <span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"ss\">&#39;vimlike-f</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-F</span> <span class=\"p\">(</span><span class=\"nb\">char</span><span class=\"p\">)</span>
  <span class=\"s\">&quot;search to forward char into current line and move point. (vim &#39;F&#39; command)&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;cSearch to backward char: &quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">search-backward</span> <span class=\"p\">(</span><span class=\"nv\">char-to-string</span> <span class=\"nb\">char</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-at-bol</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
  <span class=\"c1\">;; (migemo-backward (char-to-string char) (point-at-bol) t 1)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">vimlike-f-recent-search-char</span> <span class=\"nb\">char</span>
        <span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"ss\">&#39;vimlike-F</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-semicolon</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;search repeat recent vimlike &#39;f&#39; or &#39;F&#39; search char (vim &#39;;&#39; command)&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">vimlike-f-recent-search-char</span>
             <span class=\"nv\">vimlike-f-recent-search-func</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"nv\">vimlike-f-recent-search-char</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Empty recent search char.&quot;</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-j&quot;</span> <span class=\"ss\">&#39;vimlike-f</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-k&quot;</span> <span class=\"ss\">&#39;vimlike-F</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-u&quot;</span> <span class=\"ss\">&#39;vimlike-semicolon</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-sなどの普通のインクリメンタルサーチと違って、Enter押す必要がない。<br>
検索コマンドじゃなくてカーソル移動コマンドとして使う。</p>
") (published nil "2012-04-30T00:28:25Z") (updated nil "2012-04-30T00:31:09Z") (author nil (name nil "hadashiA"))) (entry nil (id nil "tag:qiita.com,2005:Item/4920") (published nil "2012-04-30T00:22:59+09:00") (updated nil "2012-04-30T00:22:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2e35fe8f74a12281e101"))) (url nil "http://qiita.com/items/2e35fe8f74a12281e101") (title nil "キーワード引数を取る関数の、interactiveにリストを渡す") (content ((type . "html")) "<p>関数をコマンド化する、interactive。<br>
これの引数にリストを渡すと、コマンド実行した場合の引数リストとして解釈してくれる。マニュアルに書いてる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">fuga</span> <span class=\"p\">(</span><span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nv\">command-execute</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">unko</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; (1 2 3)</span>
</pre>
</div>
</div>
<p>ではキーワード引数ではどうかというと、以下のやり方でいける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defun*</span> <span class=\"nv\">unko</span> <span class=\"p\">(</span><span class=\"k\">&amp;key</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"ss\">:a</span> <span class=\"mi\">1</span> <span class=\"ss\">:b</span> <span class=\"mi\">2</span> <span class=\"ss\">:c</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nv\">command-execute</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">unko</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; (1 2 3)</span>
<span class=\"p\">(</span><span class=\"nv\">unko</span> <span class=\"ss\">:a</span> <span class=\"mi\">4</span> <span class=\"ss\">:b</span> <span class=\"mi\">5</span> <span class=\"ss\">:c</span> <span class=\"mi\">6</span><span class=\"p\">)</span>                   <span class=\"c1\">; =&gt; (4 5 6)</span>
</pre>
</div>
</div>
<p>ちなみに、この話は、interactiveだけでなく、applyとか、引数をリストとして取る関数全般にあてはまる。</p>

<p>ところで、:a っていうのはどうやらシンボルらしい。<br>
&gt;|lisp|<br>
(type-of :a) ; =&gt; symbol<br>
||&lt;</p>

<p>あー。 :a は単体で評価してもエラーにならない。単に :a が返る。</p>
") (published nil "2012-04-30T00:22:59Z") (updated nil "2012-04-30T00:22:59Z") (author nil (name nil "hadashiA"))) (entry nil (id nil "tag:qiita.com,2005:Item/4888") (published nil "2012-04-28T23:10:00+09:00") (updated nil "2012-04-28T23:10:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/562836a08a64c74e2a11"))) (url nil "http://qiita.com/items/562836a08a64c74e2a11") (title nil "Parallels Desktop for Mac を使ってOSXとWin7のEmacsを横に並べてみた") (content ((type . "html")) "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120428/20120428224407_original.jpg?1335620672\" alt=\"parallels_shell\"></p>

<p>左上 : OSXのターミナル<br>
右上 : OSX, Cocoa Emacs<br>
左下 : cygwinのbash<br>
右下 : Win7 Emacs, gnupack</p>

<p><em>iMac (Late 2009)</em> ですがOSXとWinのEmacsで動作速度の違いはほぼ体感出来ません。起動速度でいえばWin版の方が早い位。</p>

<p>これでやっと、<strong>作成したソフトウェアのMac版とWin版の動作確認がマシン一台で</strong>出来るようになりました、万歳！！</p>

<p>Linuxはもちろん、Win8 Preview版もインストール出来るようなので機会があれば試してみようと思います。</p>

<p>洞窟物語も動きました。(Mac版あるじゃん！とかいっちゃ駄目です)</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120428/20120428230440_original.jpg?1335621903\" alt=\"洞窟物語\"></p>
") (published nil "2012-04-28T23:10:00Z") (updated nil "2012-04-28T23:10:00Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/4868") (published nil "2012-04-27T23:23:03+09:00") (updated nil "2012-04-27T23:23:03+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f7b82dd9466276840a44"))) (url nil "http://qiita.com/items/f7b82dd9466276840a44") (title nil "Emacsで現在行や選択範囲を簡単に複製する duplicate-thing.el をパワーアップさせました") (content ((type . "html")) "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120427/20120427232210.jpg?1335536582\" alt=\"duplicate-line.el\"></p>

<p>現在行や選択範囲を簡単に複製するためのEmacsLispです。 <a href=\"http://qiita.com/items/3c783e47f0b9ccf8183e\">過去の記事</a></p>

<h2>更新内容</h2>

<ul>
<li>&#39;C-u&#39;(コメントアウト)と&#39;C-u 4&#39;(4回繰り返し)の違いを判別出来るように (thanks a_ars)</li>
<li>githubに <a href=\"https://github.com/ongaeshi/duplicate-thing\">README.markdown</a> を追加</li>
</ul>

<h2>インストール＆設定</h2>

<p> <a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">こちらの記事</a> をどうぞ</p>
") (published nil "2012-04-27T23:23:03Z") (updated nil "2012-04-27T23:23:03Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/4723") (published nil "2012-04-25T13:33:46+09:00") (updated nil "2012-04-25T13:33:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4707451ac48a5890d482"))) (url nil "http://qiita.com/items/4707451ac48a5890d482") (title nil "apt-get で ddskk をインストールすると発生するエラーを解決") (content ((type . "html")) "<p>ddskk をインストールすると以下のようなエラーが出力されて困っていた．</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">...</span>
<span class=\"n\">ddskk</span> <span class=\"p\">(</span>14<span class=\"p\">.</span>3<span class=\"o\">-</span>1<span class=\"p\">)</span> を設定しています <span class=\"p\">...</span>
<span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span><span class=\"p\">:</span> <span class=\"n\">Handling</span> <span class=\"n\">install</span> <span class=\"k\">for</span> <span class=\"n\">emacsen</span> <span class=\"n\">flavor</span> <span class=\"n\">emacs23</span>
<span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span><span class=\"p\">:</span> <span class=\"n\">Handling</span> <span class=\"n\">install</span> <span class=\"k\">for</span> <span class=\"n\">emacsen</span> <span class=\"n\">flavor</span> <span class=\"n\">xemacs21</span>
<span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">emacsen</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span> <span class=\"n\">xemacs21</span> <span class=\"n\">emacs23</span> <span class=\"n\">xemacs21</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">emacsen</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">line</span> 30<span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">TSORT</span><span class=\"o\">&gt;</span> <span class=\"n\">line</span> 1<span class=\"p\">.</span>
<span class=\"n\">dpkg</span><span class=\"p\">:</span> <span class=\"n\">ddskk</span> の処理中にエラーが発生しました <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">configure</span><span class=\"p\">):</span>
 サブプロセス インストール済みの <span class=\"n\">post</span><span class=\"o\">-</span><span class=\"n\">installation</span> スクリプト はエラー終了ステータス 255 を返しました
<span class=\"n\">MaxReports</span> にすでに達しているため、レポートは書き込まれません
以下のパッケージの処理中にエラーが発生しました<span class=\"p\">:</span>
 <span class=\"n\">ddskk</span>
<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"n\">Sub</span><span class=\"o\">-</span><span class=\"n\">process</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">dpkg</span> <span class=\"n\">returned</span> <span class=\"n\">an</span> <span class=\"n\">error</span> <span class=\"n\">code</span> <span class=\"p\">(</span>1<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>原因は apel を remove してしまったことらしい．apel をインストールすれば解決する．</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">apel</span>
</pre>
</div>
</div>") (published nil "2012-04-25T13:33:46Z") (updated nil "2012-04-25T13:33:46Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/4689") (published nil "2012-04-24T16:48:01+09:00") (updated nil "2012-04-24T16:48:01+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ff3a4f2ed6d5ec4f726e"))) (url nil "http://qiita.com/items/ff3a4f2ed6d5ec4f726e") (title nil "emacsの起動時にemacs: Cannot open termcap database fileというエラーが出る") (content ((type . "html")) "<p>emacs23.4をさくらVPSのCentOSにソースからコンパイルしてインストールする</p>

<p>$.&#47;configure --without-x<br>
$make<br>
$make install</p>

<p>しかし実行時<br>
$emacs<br>
emacs: Cannot open termcap database file</p>

<p>となって起動できない。<br>
調べるとlibncurses5-devが必要らしいがyumにない。<br>
yumだとncurses-develが対応しているらしい<br>
$sudo yum install ncurses-devel<br>
再コンパイル<br>
$.&#47;configure --without-x<br>
$make<br>
$make install</p>

<p>無事起動できた</p>
") (published nil "2012-04-24T16:48:01Z") (updated nil "2012-04-24T16:48:01Z") (author nil (name nil "ysekkyy"))) (entry nil (id nil "tag:qiita.com,2005:Item/4649") (published nil "2012-04-24T00:02:56+09:00") (updated nil "2012-04-24T00:02:56+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/da23c80d334139194a4d"))) (url nil "http://qiita.com/items/da23c80d334139194a4d") (title nil "TeX Live 2011 ユーザが org 文書を pdf に出力するための設定") (content ((type . "html")) "<p>org-export-as-pdf(C-c C-e p) は pdflatex コマンドを使って pdf 出力しようとするため、これを platex &amp; dvipdfmx に変更するための設定。</p>

<p>まずパスの通ったところに以下のシェルスクリプトを作成し、実行権限を付ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">mypdflatex</span></div><div class=\"highlight\"><pre><span class=\"c\">#!/bin/bash</span>

<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;${1##*.}&quot;</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;tex&#39;</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;A&quot;</span>
    <span class=\"nv\">src</span><span class=\"o\">=</span><span class=\"s2\">&quot;$1&quot;</span>
    <span class=\"nv\">basename</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1%%.tex}&quot;</span>
<span class=\"k\">elif</span> <span class=\"o\">[</span> -r <span class=\"s2\">&quot;${1}.tex&quot;</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;B&quot;</span>
    <span class=\"nv\">src</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1}.tex&quot;</span>
    <span class=\"nv\">basename</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1}&quot;</span>
<span class=\"k\">else</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;file not found: $1&quot;</span> 1&gt;&amp;2
    <span class=\"nb\">exit </span>8
<span class=\"k\">fi</span>

platex <span class=\"s2\">&quot;$basename&quot;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>
platex <span class=\"s2\">&quot;$basename&quot;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>
dvipdfmx <span class=\"s2\">&quot;$basename&quot;</span>
</pre>
</div>
</div>
<p>org-export-as-pdf でこのシェルスクリプトを使用するように、.emacs に以下を記述。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-latex-to-pdf-process</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;mypdflatex %f&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これで pdf 出力が1発で行えるようになる。</p>

<p>org-export-as-pdf-and-open(C-c C-e d) を使用するなら、pdf を開くソフトの設定もしておくといい。例えば evince で開くなら .emacs に以下のように記述するとか。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-file-apps</span>
      <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;pdf&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;evince %s&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>") (published nil "2012-04-24T00:02:56Z") (updated nil "2012-04-24T00:02:56Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/4615") (published nil "2012-04-23T15:48:30+09:00") (updated nil "2012-04-23T15:48:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/23a4ea56e8cafeb19336"))) (url nil "http://qiita.com/items/23a4ea56e8cafeb19336") (title nil "Emacs 起動時の .emacs 読み込みが終わらない原因の1つ") (content ((type . "html")) "<p>Emacs に auto-install をインストールしていて，.emacs に</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">auto-install-update-emacswiki-package-name</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を記述していると，emacswiki が接続できない場合に .emacs の読み込みがいつまで経っても終わらない．<br>
そのときは上のコードをコメントアウトするだけで解決するのだが，エラーを発生してくれないため，知らないと解決に時間がかかる．頭の片隅にでも置いておくといいかと．</p>
") (published nil "2012-04-23T15:48:30Z") (updated nil "2012-04-23T15:48:30Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/4568") (published nil "2012-04-22T16:31:33+09:00") (updated nil "2012-04-22T16:31:33+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0d04acdc627f0817fc15"))) (url nil "http://qiita.com/items/0d04acdc627f0817fc15") (title nil "org-modeでmulticolumnな表を扱う") (content ((type . "html")) "<p>org-modeでLaTeX出力するための文書を書くとき、\\multicolumnを使用する表が必要な時がある。org-modeには一部のセルをつなげた表を書くことが(おそらく)できないので、そういう時は諦めが肝心。org文書にLaTeXを埋め込んでしまうのが手っ取り早い。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>#+begin<span class=\"nb\">_</span>latex
  <span class=\"k\">\\begin</span><span class=\"nb\">{</span>table<span class=\"nb\">}</span>[b]
    <span class=\"k\">\\caption</span><span class=\"nb\">{</span>caption<span class=\"nb\">}</span> <span class=\"k\">\\label</span><span class=\"nb\">{</span>label<span class=\"nb\">}</span>
    <span class=\"k\">\\begin</span><span class=\"nb\">{</span>center<span class=\"nb\">}</span>
      <span class=\"k\">\\begin</span><span class=\"nb\">{</span>tabular<span class=\"nb\">}{</span>|l|cc|cc|<span class=\"nb\">}</span>
        <span class=\"k\">\\hline</span>
        <span class=\"nb\">&amp;</span> <span class=\"k\">\\multicolumn</span><span class=\"nb\">{</span>2<span class=\"nb\">}{</span>|c|<span class=\"nb\">}{</span>multi1<span class=\"nb\">}</span> <span class=\"nb\">&amp;</span> <span class=\"k\">\\multicolumn</span><span class=\"nb\">{</span>2<span class=\"nb\">}{</span>|c|<span class=\"nb\">}{</span>multi2<span class=\"nb\">}</span> <span class=\"k\">\\\\</span>
        <span class=\"nb\">&amp;</span>  1-1  <span class=\"nb\">&amp;</span>  1-2  <span class=\"nb\">&amp;</span>  2-1  <span class=\"nb\">&amp;</span>  2-2  <span class=\"k\">\\\\</span>
        <span class=\"k\">\\hline</span>
        a  <span class=\"nb\">&amp;</span>     1  <span class=\"nb\">&amp;</span>      2  <span class=\"nb\">&amp;</span>    3  <span class=\"nb\">&amp;</span>      4  <span class=\"k\">\\\\</span>
        b  <span class=\"nb\">&amp;</span>     5  <span class=\"nb\">&amp;</span>      6  <span class=\"nb\">&amp;</span>    7  <span class=\"nb\">&amp;</span>      8  <span class=\"k\">\\\\</span>
        <span class=\"k\">\\hline</span>
      <span class=\"k\">\\end</span><span class=\"nb\">{</span>tabular<span class=\"nb\">}</span>
    <span class=\"k\">\\end</span><span class=\"nb\">{</span>center<span class=\"nb\">}</span>
  <span class=\"k\">\\end</span><span class=\"nb\">{</span>table<span class=\"nb\">}</span>
#+end<span class=\"nb\">_</span>latex    
</pre>
</div>
</div>
<p>このように、#+begin_latex と #+end_latex で挟むことで LaTeX 記述を埋め込める。後はその間にカーソルを合わせて C-c &#39; を入力して、latex-mode で内容を編集しよう。</p>
") (published nil "2012-04-22T16:31:33Z") (updated nil "2012-04-22T16:31:33Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/4548") (published nil "2012-04-21T18:19:26+09:00") (updated nil "2012-04-21T18:23:01+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/bfb250aa76107a036127"))) (url nil "http://qiita.com/items/bfb250aa76107a036127") (title nil "iTerm2 で emacs で C-tab で other-window") (content ((type . "html")) "<p>C-x o で other-window するのは2ストロークでつらいので Chrome みたいに C-tab とか1ストロークにしたい。</p>

<p>ただ、iTerm2 でターミナル内の emacs で C-tab は、tab が C-i 扱いなのでとれない。そこで</p>

<ul>
<li>iTerm2 の preference の keys で C-tab に別のキーを送るようにカスタマイズ
** 自分は M-p にした</li>
<li>そのキーに、other-window を割り当て</li>
</ul>

<p>で ok</p>

<p>ついでなので <a href=\"http://d.hatena.ne.jp/rubikitch/20100210/emacs\">http:&#47;&#47;d.hatena.ne.jp&#47;rubikitch&#47;20100210&#47;emacs</a> から other-window-or-split も拝借。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">split</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">one</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"n\">split</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">horizontally</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">window</span> 1<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">p</span>&quot;<span class=\"p\">)</span> <span class=\"s\">&#39;</span><span class=\"err\">other-window-or-split)</span>
</pre>
</div>
</div>
<p>tab が C-i なのに気づかなくて3時間くらいはまりました...。</p>
") (published nil "2012-04-21T18:19:26Z") (updated nil "2012-04-21T18:23:01Z") (author nil (name nil "naoya@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/4520") (published nil "2012-04-20T23:26:04+09:00") (updated nil "2012-04-20T23:26:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b4959e4ce9f4317c4d07"))) (url nil "http://qiita.com/items/b4959e4ce9f4317c4d07") (title nil "MacのターミナルでEmacsを使う場合 C-@ と C-space は同じコマンドとして認識されるらしい") (content ((type . "html")) "<p>表題の通り。<br>
MacのターミナルだけなのかEmacsだけなのかなど詳しいことは分からない。</p>

<p>普段Emacsのキーバインドにanything起動を C-@ に設定していて、ターミナル上ではなくEmacs.appを使っていたが、この設定のままターミナル上でEmacsを使ったらC-spaceでMarksetされなくて大分長い時間四苦八苦しちゃったんでメモとして残しておく。<br>
anythingを別のキーにバインドしたら直った。</p>
") (published nil "2012-04-20T23:26:04Z") (updated nil "2012-04-20T23:26:04Z") (author nil (name nil "takc923"))) (entry nil (id nil "tag:qiita.com,2005:Item/4476") (published nil "2012-04-19T21:49:55+09:00") (updated nil "2012-04-19T21:49:55+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b953621e255cc471024f"))) (url nil "http://qiita.com/items/b953621e255cc471024f") (title nil "デフォルトのカレントディレクトリ変更") (content ((type . "html")) "<p>M-x cd　ぱす　</p>
") (published nil "2012-04-19T21:49:55Z") (updated nil "2012-04-19T21:49:55Z") (author nil (name nil "flada_auxv"))) (entry nil (id nil "tag:qiita.com,2005:Item/4471") (published nil "2012-04-19T20:18:19+09:00") (updated nil "2012-04-19T20:18:19+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/874d2542facaa5993032"))) (url nil "http://qiita.com/items/874d2542facaa5993032") (title nil "ハッシュのキーをシンボルに統一するメソッド") (content ((type . "html")) "<p>Railsに用意されているメソッドに再帰を加えたもの。YAMLをパースした後などに便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">hash.rb</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Hash</span>
  <span class=\"k\">def</span> <span class=\"nf\">symbolize_keys</span>
    <span class=\"n\">inject</span><span class=\"p\">({})</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">|</span>
      <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span> <span class=\"k\">if</span> <span class=\"n\">defined?</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span><span class=\"p\">)</span>
      <span class=\"n\">options</span><span class=\"o\">[</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">to_sym</span> <span class=\"k\">rescue</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">key</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>
      <span class=\"n\">options</span>
    <span class=\"k\">end</span>
  <span class=\"k\">end</span>
<span class=\"k\">end</span>
</pre>
</div>
</div>
<p>例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">example.rb</span></div><div class=\"highlight\"><pre><span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;a&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&quot;aaa&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ccc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;d&quot;</span><span class=\"o\">=&gt;</span><span class=\"s2\">&quot;ddd&quot;</span><span class=\"p\">},</span> <span class=\"s2\">&quot;e&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&quot;eee&quot;</span><span class=\"p\">}</span>
<span class=\"c1\"># =&gt; {&quot;a&quot;=&gt;&quot;aaa&quot;, &quot;b&quot;=&gt;{:c=&gt;&quot;ccc&quot;, &quot;d&quot;=&gt;&quot;ddd&quot;}, &quot;e&quot;=&gt;&quot;eee&quot;}</span>
<span class=\"nb\">hash</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span>
<span class=\"c1\"># =&gt; {:a=&gt;&quot;aaa&quot;, :b=&gt;{:c=&gt;&quot;ccc&quot;, :d=&gt;&quot;ddd&quot;}, :e=&gt;&quot;eee&quot;}</span>
</pre>
</div>
</div>") (published nil "2012-04-19T20:18:19Z") (updated nil "2012-04-19T20:18:19Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/4436") (published nil "2012-04-19T11:07:30+09:00") (updated nil "2012-04-19T18:48:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e6978008253ba70c037c"))) (url nil "http://qiita.com/items/e6978008253ba70c037c") (title nil "C-w を少し賢くする") (content ((type . "html")) "<p>C-w に少し空気を読んでもらうようにする。（transient-mark-mode 使ってるの前提）</p>

<ul>
<li><strong>region がアクティブじゃない時</strong> は、CLI の C-w と同じく、カーソル左の一単語を削除</li>
<li>region がアクティブの時は、通常の C-w</li>
<li>transient-mark-mode が無効の時も、通常の C-w</li>
</ul>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">backward-kill-word-or-kill-region</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">or </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">transient-mark-mode</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">region-active-p</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nf\">kill-region</span> <span class=\"p\">(</span><span class=\"nf\">region-beginning</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">region-end</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">backward-kill-word</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"s\">&quot;\\C-w&quot;</span> <span class=\"ss\">&#39;backward-kill-word-or-kill-region</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>こうでもしないと、region がアクティブじゃない時に Emacs 標準のマークセットで kill-region 発動して「うわあああああ」ってなる。</p>
") (published nil "2012-04-19T11:07:30Z") (updated nil "2012-04-19T18:48:45Z") (author nil (name nil "k_ui"))) (entry nil (id nil "tag:qiita.com,2005:Item/4409") (published nil "2012-04-18T22:30:22+09:00") (updated nil "2012-04-18T22:30:22+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/647abd9f481e6010c4fc"))) (url nil "http://qiita.com/items/647abd9f481e6010c4fc") (title nil "load-pathの追加を便利にするマクロ") (content ((type . "html")) "<p>add-to-listは1つのパスしかload-pathに追加できない。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/.emacs.d&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/.emacs.d/elisp&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>そこで、以下のマクロを定義しておくと、複数のパスをまとめて追加できて便利(もちろん、load-path以外のリストにも使用可能)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defmacro</span> <span class=\"nv\">append-to-list</span> <span class=\"p\">(</span><span class=\"nv\">to</span> <span class=\"nv\">lst</span><span class=\"p\">)</span>
  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"o\">,</span><span class=\"nv\">to</span> <span class=\"p\">(</span><span class=\"nb\">append</span> <span class=\"o\">,</span><span class=\"nv\">lst</span> <span class=\"o\">,</span><span class=\"nv\">to</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以下のように使用する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">append-to-list</span> <span class=\"nv\">load-path</span>
                <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;~/.emacs.d&quot;</span>
                  <span class=\"s\">&quot;~/.emacs.d/elisp&quot;</span>
                  <span class=\"s\">&quot;~/.emacs.d/elisp/my&quot;</span>
                  <span class=\"s\">&quot;~/.emacs.d/inits&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-04-18T22:30:22Z") (updated nil "2012-04-18T22:30:22Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/4368") (published nil "2012-04-18T00:10:13+09:00") (updated nil "2012-04-18T00:10:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/a9f84d1b652c5a72123b"))) (url nil "http://qiita.com/items/a9f84d1b652c5a72123b") (title nil ".emacsでダウンロードが必要なコードの管理") (content ((type . "html")) "<p>auto-install(install-elisp)をEmacsにインストールしているなら、.emacsで使用しているダウンロードが必要なrequireに対しては、インストールするためのS式をコメントとして記述しておくのがオススメ。</p>

<p>S式のあるコメント行で C-e C-x C-e (すなわち、S式の閉括弧の後ろで C-x C-e) を入力するだけで、新しい環境に移行した時に足りなかったelispファイルをインストールしたり、古くなったelispファイルを更新したりできる。</p>

<p>例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; (install-elisp &quot;https://raw.github.com/hoge/hoge.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;hoge</span><span class=\"p\">)</span>

<span class=\"c1\">;; (install-elisp-from-emacswiki &quot;huga.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;huga</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-04-18T00:10:13Z") (updated nil "2012-04-18T00:10:13Z") (author nil (name nil "akisute3@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/4148") (published nil "2012-04-13T15:56:30+09:00") (updated nil "2012-04-13T15:56:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b7d20bc95c27cd645bcd"))) (url nil "http://qiita.com/items/b7d20bc95c27cd645bcd") (title nil "CarbonEmacs / CocoaEmacs で emacsclient") (content ((type . "html")) "<p>いろいろ試みたけれど，シェルの alias を使うのが一番素直な気がする．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"nb\">alias </span><span class=\"nv\">emacsclient</span><span class=\"o\">=</span>/Applications/Emacs.app/Contents/MacOS/bin/emacsclient
</pre>
</div>
</div>") (published nil "2012-04-13T15:56:30Z") (updated nil "2012-04-13T15:56:30Z") (author nil (name nil "monamour555"))) (entry nil (id nil "tag:qiita.com,2005:Item/4044") (published nil "2012-04-11T17:56:46+09:00") (updated nil "2012-04-11T17:56:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d05e1ce07ad632c94720"))) (url nil "http://qiita.com/items/d05e1ce07ad632c94720") (title nil "TRAMPを使ってリモートのファイルを弄る") (content ((type . "html")) "<p>TRAMPなるリモートのものも透過的に扱えるようにしてくれるすばらしいソフトがあるらしい。<a href=\"\" title=\"http:&#47;&#47;tramp.sourceforge.net&#47;tramp_ja.html\">TRAMPの日本語マニュアル</a><br>
で、これをemacsから使えるelispがあるらしいと本で見つけ、早速つかってみた。<br>
最近のemacs23.4.1では標準でそのelispが入ってる模様で私の環境ではそのままうごいた。<a href=\"\" title=\"http:&#47;&#47;www.bookshelf.jp&#47;texi&#47;tramp&#47;tramp_ja_5.html\">日本語解説ページ</a></p>

<h2>使い方</h2>

<h3>基本的な使い方</h3>

<p>C-x C-fでファイルを開くときに<br>
&#47;ssh:username@hostname:path&#47;to&#47;file<br>
こうしてやればリモートのファイルを開くことができる。<br>
また、リモートファイルのパスを指定せずにhostname後の:でRETをおしてDiredを表示することもできる。<br>
また、.ssh&#47;configの設定がそのまま反映さえるのでaliasを設定してあったりするとかなり楽めに開ける。</p>

<p>基本的な使い方は以上。</p>

<h3>一般ユーザでしかログインできないサーバーでroot権限でファイルを編集する方法。</h3>

<p>リモートのサーバーがrootでのログインを許可してない場合、このままでは利用することができない。どうしたら、sshでログイン後root権限でファイルを編集できるようになるだろうか？<br>
いくつかの前のバージョンまで多段階にプロトコルをチェーンできるmultiプロトコルが使えたらしいが、使おうとするとdepricatedになったよとメッセージがでて使えない。</p>

<p>tramp-default-proxies-alist に (HOST USER PROXY) というエントリを追加する．こいつは，USER@HOST にあるファイルにアクセスするには PROXY を経由しろということを意味する．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;tramp-default-proxies-alist</span>
<span class=\"s\">             &#39;</span><span class=\"p\">(</span>&quot;<span class=\"n\">host1</span>&quot; &quot;<span class=\"n\">user2</span>&quot; &quot;<span class=\"o\">/</span><span class=\"n\">ssh</span><span class=\"p\">:</span><span class=\"n\">user1</span><span class=\"p\">@</span><span class=\"n\">host1</span><span class=\"p\">:</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>しかし、この方法だと複数のサーバーを扱っているとすべてのものに対してエントリを書かなければならなくなりかなり面倒になってしまう。</p>

<p>そこで以下の様にしてやると汎用的に使えるようにできる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;tramp-default-proxies-alist</span>
<span class=\"s\">             &#39;</span><span class=\"p\">(</span><span class=\"n\">nil</span> &quot;<span class=\"o\">\\\\</span>`<span class=\"n\">root</span><span class=\"o\">\\\\</span><span class=\"s\">&#39;&quot; &quot;/ssh:%h:&quot;))</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">tramp</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">proxies</span><span class=\"o\">-</span><span class=\"n\">alist</span>
             <span class=\"s\">&#39;(&quot;localhost&quot; nil nil))</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">tramp</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">proxies</span><span class=\"o\">-</span><span class=\"n\">alist</span>
             <span class=\"s\">&#39;</span><span class=\"err\">((regexp-quote (system-name)) nil nil))</span>
</pre>
</div>
</div>
<p>これで<br>
&#47;sudo:hostnameとすることでリモートでログインできるようになる。</p>

<p><a href=\"\" title=\"http:&#47;&#47;dukeiizu.blogspot.jp&#47;2011&#47;05&#47;emacs-tramp-sudo.html\">参考にしたページ</a></p>
") (published nil "2012-04-11T17:56:46Z") (updated nil "2012-04-11T17:56:46Z") (author nil (name nil "miyakou1982"))) (entry nil (id nil "tag:qiita.com,2005:Item/3919") (published nil "2012-04-09T18:54:59+09:00") (updated nil "2012-04-09T18:54:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/192ff9df05681563c2f5"))) (url nil "http://qiita.com/items/192ff9df05681563c2f5") (title nil "Emacs memo") (content ((type . "html")) "<h3>Grep setting</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">grep</span>結果バッファでのカーソル移動でダイナミックにファイルを開いてくれる
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;</span><span class=\"err\">color-grep)</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"o\">-</span><span class=\"n\">kill</span><span class=\"o\">-</span><span class=\"n\">buffer</span> <span class=\"n\">t</span><span class=\"p\">)</span>
<span class=\"p\">;;</span> <span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"nb\">find</span>で<span class=\"n\">Perl</span>の<span class=\"n\">ack</span>コマンドを使うよう変更
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"nb\">find</span><span class=\"o\">-</span><span class=\"n\">command</span> &quot;<span class=\"n\">ack</span> <span class=\"o\">--</span><span class=\"n\">nocolor</span> <span class=\"o\">--</span><span class=\"n\">nogroup</span> &quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h3>Reference page</h3>

<p><a href=\"http://www23.atwiki.jp/selflearn/pages/41.html#id_15e2b62b\">http:&#47;&#47;www23.atwiki.jp&#47;selflearn&#47;pages&#47;41.html#id_15e2b62b</a></p>
") (published nil "2012-04-09T18:54:59Z") (updated nil "2012-04-09T18:54:59Z") (author nil (name nil "chabashilah"))) (entry nil (id nil "tag:qiita.com,2005:Item/3540") (published nil "2012-04-03T14:02:10+09:00") (updated nil "2012-04-04T17:07:34+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/63d7379664fae0d54bfd"))) (url nil "http://qiita.com/items/63d7379664fae0d54bfd") (title nil "Emacs tips") (content ((type . "html")) "<h1>Emacs関係のメモ</h1>

<h2>文字コード変更</h2>

<p>C-x [RET] fで文字コード入力<br>
その後C-x C-s</p>

<h2>正規表現で置換</h2>

<p>M-x replace-regexp</p>

<p>()を使う場合は¥(¥)にする</p>

<h3>置換文字列</h3>

<p>マッチ全体は¥&amp; (Ruby,Perlの$&amp;)</p>

<p>()参照は¥1,¥2,¥3... (Ruby,Perlの$1,$2,$3...)</p>
") (published nil "2012-04-03T14:02:10Z") (updated nil "2012-04-04T17:07:34Z") (author nil (name nil "nysalor"))) (entry nil (id nil "tag:qiita.com,2005:Item/3365") (published nil "2012-03-25T02:55:37+09:00") (updated nil "2012-03-25T02:55:37+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1f315165bd93b231bc6b"))) (url nil "http://qiita.com/items/1f315165bd93b231bc6b") (title nil "quickrunの言語ごとのコマンドの設定には関数も使える") (content ((type . "html")) "<p>例えば以下の設定を</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span>&quot;<span class=\"n\">python</span>&quot; <span class=\"p\">.</span> <span class=\"p\">((:</span><span class=\"n\">command</span> <span class=\"p\">.</span> &quot;<span class=\"n\">python</span>&quot;<span class=\"p\">)</span> <span class=\"p\">(:</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">only</span> <span class=\"p\">.</span> &quot;<span class=\"n\">pyflakes</span> <span class=\"c\">%s&quot;)</span>
             <span class=\"p\">(:</span><span class=\"n\">description</span> <span class=\"p\">.</span> &quot;<span class=\"n\">Run</span> <span class=\"n\">Python</span> <span class=\"n\">script</span>&quot;<span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以下のような感じに変えても動く</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span>&quot;<span class=\"n\">python</span>&quot; <span class=\"p\">.</span> <span class=\"p\">((:</span><span class=\"n\">command</span> <span class=\"p\">.</span> <span class=\"p\">(</span><span class=\"n\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"n\">print</span> &quot;<span class=\"n\">hey</span>&quot;<span class=\"p\">)</span> &quot;<span class=\"n\">python</span>&quot;<span class=\"p\">))</span> <span class=\"p\">(:</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">only</span> <span class=\"p\">.</span> &quot;<span class=\"n\">pyflakes</span> <span class=\"c\">%s&quot;)</span>
             <span class=\"p\">(:</span><span class=\"n\">description</span> <span class=\"p\">.</span> &quot;<span class=\"n\">Run</span> <span class=\"n\">Python</span> <span class=\"n\">script</span>&quot;<span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>現在のファイルパスや状況に合わせてコマンドのパスなどを変えることができる。</p>
") (published nil "2012-03-25T02:55:37Z") (updated nil "2012-03-25T02:55:37Z") (author nil (name nil "podhmo"))) (entry nil (id nil "tag:qiita.com,2005:Item/3324") (published nil "2012-03-22T01:58:57+09:00") (updated nil "2012-03-22T02:03:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3c783e47f0b9ccf8183e"))) (url nil "http://qiita.com/items/3c783e47f0b9ccf8183e") (title nil "Emacsで現在行や選択範囲を簡単に複製するためのduplicate-thing.el") (content ((type . "html")) "<p>行や範囲のコピー＆ペーストを一手で出来るようにしました。<br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120321/20120321001639.png\" alt=\"コピー前\"> <br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120321/20120321001641.png\" alt=\"コピー後\"> </p>

<h2>インストール</h2>

<p>下記のS式を評価(C-xC-e)して下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">install.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ongaeshi</span><span class=\"o\">/</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>.emacs.d&#47;init.el</h2>

<p>好きなキーを割り当てて下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;duplicate-thing)</span>
<span class=\"s\">(global-set-key (kbd &quot;M-c&quot;) &#39;</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>詳しい使い方は<a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">コチラをどうぞ</a></p>
") (published nil "2012-03-22T01:58:57Z") (updated nil "2012-03-22T02:03:15Z") (author nil (name nil "ongaeshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/3149") (published nil "2012-03-13T07:41:33+09:00") (updated nil "2012-03-13T07:41:33+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4ce169901c1a16ab3b1f"))) (url nil "http://qiita.com/items/4ce169901c1a16ab3b1f") (title nil "emacs使っている人へのいたずら") (content ((type . "html")) "<p>以下のコードをC-x C-e すると縦書きしかできなくなります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;</span><span class=\"err\">after-change-functions (lambda (&amp;rest args) (insert &quot;\\n&quot;)))</span>
</pre>
</div>
</div>") (published nil "2012-03-13T07:41:33Z") (updated nil "2012-03-13T07:41:33Z") (author nil (name nil "podhmo"))) (entry nil (id nil "tag:qiita.com,2005:Item/3109") (published nil "2012-03-11T00:38:49+09:00") (updated nil "2012-03-11T00:38:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4ce0d15bf15b6434d7b1"))) (url nil "http://qiita.com/items/4ce0d15bf15b6434d7b1") (title nil "ctags で CoffeeScript のタグを生成") (content ((type . "html")) "<p>~&#47;.ctags に以下を追加</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">--</span><span class=\"n\">langdef</span><span class=\"p\">=</span><span class=\"n\">coffee</span>
<span class=\"o\">--</span><span class=\"n\">langmap</span><span class=\"p\">=</span><span class=\"n\">coffee</span><span class=\"p\">:.</span><span class=\"n\">coffee</span>

<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span><span class=\"n\">class</span> <span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">.]</span><span class=\"o\">+</span><span class=\"p\">)</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">class</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">.*</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">namespace</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">zA</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">class</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*-&gt;.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"k\">function</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">:</span><span class=\"o\">.*-&gt;.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">method</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"n\">var</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">(@[</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"nb\">i</span><span class=\"p\">,</span><span class=\"n\">ivar</span><span class=\"o\">/</span>
</pre>
</div>
</div>") (published nil "2012-03-11T00:38:49Z") (updated nil "2012-03-11T00:38:49Z") (author nil (name nil "aki77@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/3031") (published nil "2012-03-06T18:43:31+09:00") (updated nil "2012-03-06T18:47:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2b5b0303f5a7aa69392a"))) (url nil "http://qiita.com/items/2b5b0303f5a7aa69392a") (title nil "coffee-modeのタブ幅を2にする") (content ((type . "html")) "<p>emacsでcoffeescriptを書く時には下記のcoffee-mode.elを使うのがおすすめ<br>
<a href=\"https://github.com/defunkt/coffee-mode\">https://github.com/defunkt/coffee-mode</a></p>

<p>デフォルトだとタブ幅がひろいので2に変更したい。.emacsに下記のように記述する。<br>
※READMEにある通りに書くと改行動作の時にインデントが引き継がれない</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">coffee-custom</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;coffee-mode-hook&quot;</span>
  <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">&#39;tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
       <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">&#39;coffee-tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
  <span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;coffee-mode-hook</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">coffee-custom</span><span class=\"p\">)))</span>
</pre>
</div>
</div>") (published nil "2012-03-06T18:43:31Z") (updated nil "2012-03-06T18:47:15Z") (author nil (name nil "sawamur@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/2991") (published nil "2012-03-04T21:05:07+09:00") (updated nil "2012-03-04T21:06:10+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7d4eeba7c812ae89cc34"))) (url nil "http://qiita.com/items/7d4eeba7c812ae89cc34") (title nil "Qiita Markdown で Emacs Lisp のシンタックスハイライト") (content ((type . "html")) "<p>Scheme としてシンタックスハイライトしてもらう。</p>

<p>つまり</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>```<span class=\"n\">scm</span>
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;</span><span class=\"err\">cl)</span>
<span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">foo</span>&quot;<span class=\"p\">)</span>
```
</pre>
</div>
</div>
<p>って書くと</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;cl</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>scm</code> じゃなくて <code>scheme</code> でもいける。</p>

<p>参考: <a href=\"http://pygments.org/docs/lexers/\">Pygments — Python syntax highlighter</a></p>
") (published nil "2012-03-04T21:05:07Z") (updated nil "2012-03-04T21:06:10Z") (author nil (name nil "k_ui"))) (entry nil (id nil "tag:qiita.com,2005:Item/2988") (published nil "2012-03-04T16:06:00+09:00") (updated nil "2012-03-04T16:06:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ba0d018a03381a964f24"))) (url nil "http://qiita.com/items/ba0d018a03381a964f24") (title nil "cocoa emacs の透明度を変更する elisp") (content ((type . "html")) "<p>M-x set-alpha で mini buffer に透明度を入力すると(80とか90とか)変更できるよ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">alpha.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">alpha</span> <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"p\">)</span>
  &quot;<span class=\"n\">set</span> <span class=\"n\">frame</span> <span class=\"n\">parameter</span> <span class=\"s\">&#39;alpha&quot;</span>
<span class=\"s\">  (interactive &quot;nAlpha: &quot;)</span>
<span class=\"s\">  (set-frame-parameter nil &#39;</span><span class=\"n\">alpha</span> <span class=\"p\">(</span><span class=\"n\">cons</span> <span class=\"n\">alpha</span><span class=\"o\">-</span><span class=\"n\">num</span> <span class=\"s\">&#39;</span><span class=\"err\">(90))))</span>
</pre>
</div>
</div>") (published nil "2012-03-04T16:06:00Z") (updated nil "2012-03-04T16:06:00Z") (author nil (name nil "marcy@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/2940") (published nil "2012-03-02T17:25:52+09:00") (updated nil "2012-04-30T16:04:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d0d4959510acd9fd1abf"))) (url nil "http://qiita.com/items/d0d4959510acd9fd1abf") (title nil "今いるgitレポジトリ内のファイルを一瞬で開くelisp") (content ((type . "html")) "<p>自分で書いたelispの中で一番重宝しているもの．<br>
以下のコードを適当なところ(init.elなど)に貼れば，<code>C-;</code>でそのプロジェクト内のファイルをanything絞りこみして開ける．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">anything-git-project.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">sources</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"o\">-</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"k\">for</span> <span class=\"n\">elt</span> <span class=\"n\">in</span>
        <span class=\"s\">&#39;((&quot;Modified files (%s)&quot; . &quot;--modified&quot;)</span>
<span class=\"s\">          (&quot;Untracked files (%s)&quot; . &quot;--others --exclude-standard&quot;)</span>
<span class=\"s\">          (&quot;All controlled files in this project (%s)&quot; . &quot;&quot;))</span>
<span class=\"s\">        collect</span>
<span class=\"s\">        `((name . ,(format (car elt) pwd))</span>
<span class=\"s\">          (init . (lambda ()</span>
<span class=\"s\">                    (unless (and ,(string= (cdr elt) &quot;&quot;) ;update candidate buffer every time except for that of all project files</span>
<span class=\"s\">                                 (anything-candidate-buffer))</span>
<span class=\"s\">                      (with-current-buffer</span>
<span class=\"s\">                          (anything-candidate-buffer &#39;</span><span class=\"k\">global</span><span class=\"p\">)</span>
                        <span class=\"p\">(</span><span class=\"n\">insert</span>
                         <span class=\"p\">(</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">string</span>
                          <span class=\"p\">,(</span><span class=\"n\">format</span> &quot;<span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"o\">-</span><span class=\"n\">files</span> $<span class=\"p\">(</span><span class=\"n\">git</span> <span class=\"n\">rev</span><span class=\"o\">-</span><span class=\"n\">parse</span> <span class=\"o\">--</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">cdup</span><span class=\"p\">)</span> <span class=\"c\">%s&quot;</span>
                                   <span class=\"p\">(</span><span class=\"n\">cdr</span> <span class=\"n\">elt</span><span class=\"p\">))))))))</span>
          <span class=\"p\">(</span><span class=\"n\">candidates</span><span class=\"o\">-</span><span class=\"n\">in</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"p\">.</span> <span class=\"n\">file</span><span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">pwd</span> <span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">sources</span> <span class=\"p\">(</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">sources</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"o\">-</span><span class=\"k\">for</span> <span class=\"n\">pwd</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">buffer</span> <span class=\"n\">sources</span>
     <span class=\"p\">(</span><span class=\"n\">format</span> &quot;<span class=\"o\">*</span><span class=\"n\">Anything</span> <span class=\"n\">git</span> <span class=\"n\">project</span> <span class=\"n\">in</span> <span class=\"c\">%s*&quot; pwd))))</span>
<span class=\"p\">(</span><span class=\"n\">define</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">C</span><span class=\"o\">-</span><span class=\"p\">;</span>&quot;<span class=\"p\">)</span> <span class=\"s\">&#39;</span><span class=\"err\">anything-git-project)</span>
</pre>
</div>
</div>
<p>実行すると以下のようにそのレポジトリ内のファイルが一覧表示され，そこから絞り込んでファイルを開ける．</p>

<p><img src=\"http://f.cl.ly/items/180j0j0u1C1b3H2G3v0h/Screen%20Shot%202012-03-02%20at%205.23.28%20PM.png\" alt=\"\"></p>

<p>編集してコミットしてないファイルやトラックされていないファイルは分けて表示してくれる．便利．</p>
") (published nil "2012-03-02T17:25:52Z") (updated nil "2012-04-30T16:04:09Z") (author nil (name nil "yaotti"))) (entry nil (id nil "tag:qiita.com,2005:Item/2874") (published nil "2012-02-28T21:41:13+09:00") (updated nil "2012-02-28T21:41:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1eeacf63551c1215a1cd"))) (url nil "http://qiita.com/items/1eeacf63551c1215a1cd") (title nil "emacs 23 のjavascript-modeのタブ幅を変更するには") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(setq js-indent-level 2)
</pre>
</div>
</div>
<p>(setq-default tab-width 4)<br>
ではうまくいかない</p>
") (published nil "2012-02-28T21:41:13Z") (updated nil "2012-02-28T21:41:46Z") (author nil (name nil "sawamur@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/2819") (published nil "2012-02-26T09:09:00+09:00") (updated nil "2012-02-26T09:09:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/67e2cb441f5f9bf6cc63"))) (url nil "http://qiita.com/items/67e2cb441f5f9bf6cc63") (title nil "dired - emacs のファイルマネージャ機能について") (content ((type . "html")) "<p>ここがわかりやすい<br>
<a href=\"http://d.hatena.ne.jp/kakurasan/20070702/p1\" target=\"_blank\">http://d.hatena.ne.jp/kakurasan/20070702/p1</a></p>
") (published nil "2012-02-26T09:09:00Z") (updated nil "2012-02-26T09:09:00Z") (author nil (name nil "dz_"))) (entry nil (id nil "tag:qiita.com,2005:Item/2680") (published nil "2012-02-21T12:10:26+09:00") (updated nil "2012-02-21T16:13:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/df9e742017d08444c4ac"))) (url nil "http://qiita.com/items/df9e742017d08444c4ac") (title nil "emacs のバッファをタブみたいに表示したい") (content ((type . "html")) "<ol>
<li><a href=\"http://www.emacswiki.org/emacs/download/tabbar.el\">tabbar.el</a> を load-path のどこかに置く</li>
<li><code>.emacs</code> に以下を追記</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;tabbar</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">tabbar-mode</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<h3>タブのグループ</h3>

<p>タブをグループ化する機能があり、デフォルトだと一部を除き major-mode ごとにグループ分けされる。</p>

<p>このグループ分けが気に入らないなら、<a href=\"http://www.emacswiki.org/emacs/download/tabbar.el\">tabbar.el</a> の <code>tabbar-buffer-groups</code> を参考に下のように書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; 例: 全バッファを一つのグループにしまう</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">tabbar-buffer-groups-function</span> <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"s\">&quot;Buffers&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<h3>おわり</h3>

<p>あとで表示するタブのフィルタリングとかもっと書く</p>
") (published nil "2012-02-21T12:10:26Z") (updated nil "2012-02-21T16:13:00Z") (author nil (name nil "k_ui"))) (entry nil (id nil "tag:qiita.com,2005:Item/2449") (published nil "2012-02-14T02:21:26+09:00") (updated nil "2012-02-14T02:21:26+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/a8d96ae95a1838500e37"))) (url nil "http://qiita.com/items/a8d96ae95a1838500e37") (title nil "coffee-mode のインデントをスペース2つに設定") (content ((type . "html")) "<p>READMEの設定例に加えて、coffee-tab-widthも設定する必要がある。</p>

<p><a href=\"https://github.com/defunkt/coffee-mode/pull/45\" target=\"_blank\">https://github.com/defunkt/coffee-mode/pull/45</a></p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">coffee-custom</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;coffee-mode-hook&quot;</span>
 <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">&#39;tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
 <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">coffee-tab-width</span> <span class=\"mi\">2</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;coffee-mode-hook</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">coffee-custom</span><span class=\"p\">)))</span>
</pre>
</div>
</div>") (published nil "2012-02-14T02:21:26Z") (updated nil "2012-02-14T02:21:26Z") (author nil (name nil "aki77@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/2115") (published nil "2012-02-08T19:20:54+09:00") (updated nil "2012-02-08T19:20:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ef52c6f4a3784c10e2b6"))) (url nil "http://qiita.com/items/ef52c6f4a3784c10e2b6") (title nil "server-mode の Emacs を複数立ち上げる") (content ((type . "html")) "<p>screen とかで、それぞれのセッションで emacs 使ってると掲題のような需要がでてくる。</p>

<p><code>~&#47;.bashrc</code>, <code>~&#47;.zshrc</code> などでこんな感じのをかく。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$STY</span> <span class=\"o\">]</span> <span class=\"c\"># screen 内での実行の時</span>
<span class=\"k\">then</span>
<span class=\"k\">  </span><span class=\"nb\">export </span><span class=\"nv\">EMACS_SERVER_NAME</span><span class=\"o\">=</span><span class=\"s2\">&quot;server-$STY&quot;</span>
  <span class=\"nb\">alias </span><span class=\"nv\">emacsclient</span><span class=\"o\">=</span><span class=\"s2\">&quot;emacsclient -s \\&quot;$EMACS_SERVER_NAME\\&quot;&quot;</span>
  <span class=\"k\">if</span> ! emacsclient -s <span class=\"s2\">&quot;$EMACS_SERVER_NAME&quot;</span> -e <span class=\"s2\">&quot;server-name&quot;</span> &gt; /dev/null 2&gt;&amp;1
  <span class=\"k\">then</span>
<span class=\"k\">    </span>screen emacs --eval <span class=\"s2\">&quot;(let () (setq server-name \\&quot;$EMACS_SERVER_NAME\\&quot;)(server-start))&quot;</span> 
  <span class=\"k\">fi</span>
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<p>screen 立ちあげと同時に emacs 起動するの嫌なら <code>screen emacs --eval ...</code> を <code>alias emacs-server=&quot;emacs --eval ...</code> するのかな。</p>
") (published nil "2012-02-08T19:20:54Z") (updated nil "2012-02-08T19:20:54Z") (author nil (name nil "k_ui"))) (entry nil (id nil "tag:qiita.com,2005:Item/2038") (published nil "2012-02-07T17:10:40+09:00") (updated nil "2012-02-07T17:10:40+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/706a7ee72008abda8842"))) (url nil "http://qiita.com/items/706a7ee72008abda8842") (title nil "Windowsの音量をEmacsから制御する") (content ((type . "html")) "<p>Emacsでコーディング中に音量を変更したくなったので書いてみました。</p>

<p>実際のボリュームコントロールには、mcvc.exeを使っています。<br>
<a href=\"http://maglog.jp/mos-privpro/index.php?module=Article&amp;action=ReaderDetail&amp;article_id=10569\"><a href=\"http://maglog.jp/mos-privpro/index.php?module=Article&action=ReaderDetail&article_id=10569\" target=\"_blank\">http://maglog.jp/mos-privpro/index.php?module=Article&action=ReaderDetail&article_id=10569</a></a></p>

<p>あとはmcvcを呼び出す関数を定義して、キーに割り当てるだけです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; ボリューム</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">volume-up</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;mcvc.exe&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;m+10&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">volume-down</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;mcvc.exe&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;m-10&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">)</span>

<span class=\"c1\">;; キーバインド</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;volume-up</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-:&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;volume-down</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-;、C-:でボリュームが変更できます。</p>
") (published nil "2012-02-07T17:10:40Z") (updated nil "2012-02-07T17:10:40Z") (author nil (name nil "natsutan"))) (entry nil (id nil "tag:qiita.com,2005:Item/1889") (published nil "2012-01-26T17:20:03+09:00") (updated nil "2012-01-26T17:20:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8e8c7fca64b4810d8e78"))) (url nil "http://qiita.com/items/8e8c7fca64b4810d8e78") (title nil "GNU Global のタグファイル自動更新") (content ((type . "html")) "<p>Emacsで日々コードと戦っている諸氏は、当然 GNU Global のタグファイルを作ってEmacsから便利に使っていることかと思います。まだの人は急げ <a href=\"http://d.hatena.ne.jp/aduka/20090308/1236493524\" target=\"_blank\">http://d.hatena.ne.jp/aduka/20090308/1236493524</a></p>

<p>そのような諸氏におかれましては、下記のような emacs lisp を .emacs などに書いておくことで、現在編集しているプロジェクトのタグファイルをファイル保存時に自動で更新するようにできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"o\">-</span><span class=\"n\">gtags</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">file</span> <span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">)))</span>
     <span class=\"p\">(</span><span class=\"n\">dir</span> <span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">directory</span> <span class=\"n\">file</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">executable</span><span class=\"o\">-</span><span class=\"nb\">find</span> &quot;<span class=\"k\">global</span>&quot;<span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span> &quot;<span class=\"n\">gtags</span><span class=\"o\">-</span><span class=\"n\">update</span>&quot; <span class=\"n\">nil</span>
             &quot;<span class=\"k\">global</span>&quot; &quot;<span class=\"o\">-</span><span class=\"n\">uv</span>&quot;<span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;after-save-hook</span>
<span class=\"s\">      &#39;</span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"o\">-</span><span class=\"n\">gtags</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>中身の説明</h2>

<p><code>global -uv</code> を実行すると、カレントディレクトリからルートにさかのぼって GTAGS などのタグファイルを検索し、見つかったらタグファイルを更新してくれます。このコマンドを、ファイル保存のフックから起動しているだけです。</p>
") (published nil "2012-01-26T17:20:03Z") (updated nil "2012-01-26T17:20:45Z") (author nil (name nil "hayamiz"))) (entry nil (id nil "tag:qiita.com,2005:Item/1847") (published nil "2012-01-23T17:00:07+09:00") (updated nil "2012-01-23T17:04:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2fd4ec126d5d993b5fea"))) (url nil "http://qiita.com/items/2fd4ec126d5d993b5fea") (title nil "install emacs23.3b on amazon-linux(ec2)") (content ((type . "html")) "<p>At first,I tried to install emacs23.1 but it failed with weird error which seemed that the makefile generated by configure script was in wrong format. I googleg that and found some guys tell that might have some illegal white spaces or tabs. Then I tried emacs23.3b. It worked.</p>

<p>emacs23.3b needs ncurses. So,install ncureses-devel before installing it.<br>
<code>$ sudo yum install ncurses-devel</code></p>

<p>Then did, as always.</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ wget http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-23.3b.tar.gz
$ tar xfvz emacs-23.3b.tar.gz
$  ./configure &amp;&amp; make &amp;&amp; sudo make install
</pre>
</div>
</div>") (published nil "2012-01-23T17:00:07Z") (updated nil "2012-01-23T17:04:54Z") (author nil (name nil "sawamur@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/1820") (published nil "2012-01-21T00:18:13+09:00") (updated nil "2012-01-21T00:18:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5dc6b15941893f81bb28"))) (url nil "http://qiita.com/items/5dc6b15941893f81bb28") (title nil "Emacs を半透明にすると資料を背景に作業ができてうれしい。") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">frame</span><span class=\"o\">-</span><span class=\"n\">parameter</span> <span class=\"n\">nil</span> <span class=\"s\">&#39;</span><span class=\"err\">alpha 91)</span>
</pre>
</div>
</div>") (published nil "2012-01-21T00:18:13Z") (updated nil "2012-01-21T00:18:13Z") (author nil (name nil "fatrow"))) (entry nil (id nil "tag:qiita.com,2005:Item/1661") (published nil "2012-01-12T11:20:57+09:00") (updated nil "2012-01-12T11:20:57+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b87d66fc7f2aac4a1b08"))) (url nil "http://qiita.com/items/b87d66fc7f2aac4a1b08") (title nil "Unicodeコードポイントで文字を表示/入力") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"highlight\"><pre># カーソル上にある文字のコードポイントを表示
<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">char</span>

# <span class=\"n\">Unicode</span>コードポイントを使って文字を入力
<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">ucs</span><span class=\"o\">-</span><span class=\"n\">insert</span>
</pre>
</div>
</div>
<p>non-Unicodeな環境ではどうなるんだろう。</p>
") (published nil "2012-01-12T11:20:57Z") (updated nil "2012-01-12T11:20:57Z") (author nil (name nil "naka4"))) (entry nil (id nil "tag:qiita.com,2005:Item/1498") (published nil "2011-12-31T17:45:50+09:00") (updated nil "2012-03-16T11:30:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7867757f5ec8941d7da7"))) (url nil "http://qiita.com/items/7867757f5ec8941d7da7") (title nil "最強コメントキーバインド M-; (comment-dwim)") (content ((type . "html")) "<p>空気を読んでコメントアウトしてくれる。<br>
参考 <a href=\"http://d.hatena.ne.jp/tomoya/20091015/1255593575\">最近の Emacs のコメント機能についてのまとめ。</a></p>
") (published nil "2011-12-31T17:45:50Z") (updated nil "2012-03-16T11:30:27Z") (author nil (name nil "fatrow"))) (entry nil (id nil "tag:qiita.com,2005:Item/1494") (published nil "2011-12-31T14:37:02+09:00") (updated nil "2012-03-16T11:30:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9924fbc870dac9e12804"))) (url nil "http://qiita.com/items/9924fbc870dac9e12804") (title nil "marmalade を使ってelispパッケージのインストールが出来ない時") (content ((type . "html")) "<p>package.el を load-path に置いて</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;package)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span>
             <span class=\"s\">&#39;</span><span class=\"err\">(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を書いたが、package-list-packages をやっても5分ぐらい固まって、marmaladeのパッケージを取得できない現象に当たる。<br>
<a href=\"http://marmalade-repo.org/packages/archive-contents\" target=\"_blank\">http://marmalade-repo.org/packages/archive-contents</a><br>
が proxy error を返しているのが原因だった。メールで連絡したら返事はなかったが次の日には直っていた。自然に直ったのかもしれない。</p>
") (published nil "2011-12-31T14:37:02Z") (updated nil "2012-03-16T11:30:27Z") (author nil (name nil "fatrow"))) (entry nil (id nil "tag:qiita.com,2005:Item/1402") (published nil "2011-12-18T19:52:16+09:00") (updated nil "2012-03-16T11:30:26+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d9f52ed75bd4951db63f"))) (url nil "http://qiita.com/items/d9f52ed75bd4951db63f") (title nil "Objective-Cモードでのインデント設定") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;c-mode-common-hook</span>
<span class=\"s\">          &#39;</span><span class=\"p\">(</span><span class=\"n\">lambda</span><span class=\"p\">()</span>
             <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">style</span> &quot;<span class=\"n\">cc</span><span class=\"o\">-</span><span class=\"n\">mode</span>&quot;<span class=\"p\">)</span>
             <span class=\"p\">(</span><span class=\"n\">setq</span><span class=\"o\">-</span><span class=\"n\">default</span> <span class=\"n\">tab</span><span class=\"o\">-</span><span class=\"n\">width</span> 4<span class=\"p\">)</span>
             <span class=\"p\">(</span><span class=\"n\">setq</span><span class=\"o\">-</span><span class=\"n\">default</span> <span class=\"n\">indent</span><span class=\"o\">-</span><span class=\"n\">tabs</span><span class=\"o\">-</span><span class=\"n\">mode</span> <span class=\"n\">nil</span><span class=\"p\">)))</span>
</pre>
</div>
</div>") (published nil "2011-12-18T19:52:16Z") (updated nil "2012-03-16T11:30:26Z") (author nil (name nil "yamaneko1212"))) (entry nil (id nil "tag:qiita.com,2005:Item/1279") (published nil "2011-12-03T18:44:08+09:00") (updated nil "2012-03-16T11:30:24+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c97d10b5abaec0437106"))) (url nil "http://qiita.com/items/c97d10b5abaec0437106") (title nil "Dropbox のディレクトリにバックアップファイルを作成しない") (content ((type . "html")) "<p>検索してもいい感じのがなかったんで調べてみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">backup-directory-alist</span>
      <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;/Dropbox/*.*&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;~/.emacs.d/backup/&quot;</span><span class=\"p\">)</span>
        <span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2011-12-03T18:44:08Z") (updated nil "2012-03-16T11:30:24Z") (author nil (name nil "okkez@github"))) (entry nil (id nil "tag:qiita.com,2005:Item/1108") (published nil "2011-11-20T21:56:01+09:00") (updated nil "2012-03-16T11:30:22+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2fa140c93c9ef2b0a7c4"))) (url nil "http://qiita.com/items/2fa140c93c9ef2b0a7c4") (title nil "emacs で , や ; を入力したときに、自動でインデントするのをやめさせたい。") (content ((type . "html"))) (published nil "2011-11-20T21:56:01Z") (updated nil "2012-03-16T11:30:22Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/844") (published nil "2011-11-04T11:26:42+09:00") (updated nil "2012-03-16T11:30:20+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b0d663acf04b1589adff"))) (url nil "http://qiita.com/items/b0d663acf04b1589adff") (title nil "ruby の xmp や lispxmp がアホみたいに便利なので、 clojure + emacs で似たものをさがしています。") (content ((type . "html"))) (published nil "2011-11-04T11:26:42Z") (updated nil "2012-03-16T11:30:20Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/819") (published nil "2011-11-02T15:20:19+09:00") (updated nil "2012-03-16T11:30:20+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/a16478ed5d5fb8e6ab74"))) (url nil "http://qiita.com/items/a16478ed5d5fb8e6ab74") (title nil "拡張子と言語のマッピングが欲しかったのでちょっとしたelisp書いた") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">(</span><span class=\"nf\">pair</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">pair</span><span class=\"p\">)</span> <span class=\"s\">&quot;:&quot;</span>
                           <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">symbolp</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">pair</span><span class=\"p\">))</span>
                               <span class=\"p\">(</span><span class=\"nf\">symbol-name</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">pair</span><span class=\"p\">))</span>
                             <span class=\"s\">&quot;unknown&quot;</span><span class=\"p\">)</span>
                           <span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">)))</span>
     <span class=\"nv\">auto-mode-alist</span><span class=\"p\">)</span>

<span class=\"c1\">;; outputs</span>
<span class=\"c1\">;; \\.md:markdown-mode</span>
<span class=\"c1\">;; \\.mk$:sh-mode</span>
<span class=\"c1\">;; \\.scm$:gauche-mode</span>
<span class=\"c1\">;; \\.rb$:ruby-mode</span>
<span class=\"c1\">;; ...</span>
</pre>
</div>
</div>") (published nil "2011-11-02T15:20:19Z") (updated nil "2012-03-16T11:30:20Z") (author nil (name nil "yaotti"))) (entry nil (id nil "tag:qiita.com,2005:Item/764") (published nil "2011-10-29T22:15:43+09:00") (updated nil "2012-03-16T11:30:19+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8b68c246bbdb81622f5b"))) (url nil "http://qiita.com/items/8b68c246bbdb81622f5b") (title nil "recentf-save-list から呼ばれる write-region のメッセージを出力させない方法は？") (content ((type . "html")) "<p>&quot;Wrote &quot; とミニバッファに表示されるのがウザいので、以下<br>
の方法を試しました。write-region 自体が呼ばれないようで、うまくい<br>
きません。どこが間違っているのでしょうか？</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;;</span>
<span class=\"c1\">;;; 方法１</span>
<span class=\"c1\">;;;</span>

<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;cl</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">&#39;original-write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">&#39;write-region</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">recentf-save-list</span>
  <span class=\"p\">(</span><span class=\"nf\">around</span> <span class=\"nv\">no-message</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">flet</span> <span class=\"p\">((</span><span class=\"nf\">write-region</span> <span class=\"p\">(</span><span class=\"nf\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">&amp;optional</span> <span class=\"nv\">append</span> <span class=\"nv\">visit</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nf\">original-write-region</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">append</span> <span class=\"ss\">&#39;nomsg</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)))</span>
    <span class=\"nv\">ad-do-it</span><span class=\"p\">))</span>

<span class=\"c1\">;;;</span>
<span class=\"c1\">;;; 方法２</span>
<span class=\"c1\">;;;</span>

<span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">&#39;original-write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">&#39;write-region</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">my-write-region-nomsg</span> <span class=\"p\">(</span><span class=\"nf\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">&amp;optional</span> <span class=\"nv\">append</span>
                                             <span class=\"nv\">visit</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">original-write-region</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">append</span> <span class=\"ss\">&#39;nomsg</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">recentf-save-list</span>
  <span class=\"p\">(</span><span class=\"nf\">around</span> <span class=\"nv\">no-message</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">unwind-protect</span>
      <span class=\"p\">(</span><span class=\"nf\">progn</span>
    <span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">&#39;write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">&#39;my-write-region-nomsg</span><span class=\"p\">))</span>
    <span class=\"nv\">ad-do-it</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">&#39;write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">&#39;original-write-region</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2011-10-29T22:15:43Z") (updated nil "2012-03-16T11:30:19Z") (author nil (name nil "masutaka"))) (entry nil (id nil "tag:qiita.com,2005:Item/763") (published nil "2011-10-29T19:51:31+09:00") (updated nil "2012-03-16T11:30:19+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/33bfefa78178782535f4"))) (url nil "http://qiita.com/items/33bfefa78178782535f4") (title nil "ddskk で \\ で記号入力モードに入るのをトグルする方法") (content ((type . "html")) "<p>下記のコードを emacs.el なり .emacs.d&#47;site_start.d&#47;init_skk.el に貼り付ければよい。<br>
&quot;\\&quot; を押したときに、skk-disable-kcode-input が nil なら今まで通り文字パレット？を表示し、非nil なら \\ を入力する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defcustom</span> <span class=\"nv\">skk-disable-kcode-input</span> <span class=\"nv\">nil</span>
  <span class=\"s\">&quot;Non-nil であれば、￥キーによる漢字コード入力を無効にする。筈。&quot;</span>
  <span class=\"nv\">:type</span> <span class=\"ss\">&#39;boolean</span>
  <span class=\"nv\">:group</span> <span class=\"ss\">&#39;skk-basic</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">skk-rom-kana-rule-list</span>
      <span class=\"p\">(</span><span class=\"nb\">append </span><span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;\\\\&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">skk-kcode-input-hook</span><span class=\"p\">))</span> <span class=\"nv\">skk-rom-kana-rule-list</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">skk-kcode-input-hook</span> <span class=\"p\">(</span><span class=\"nf\">&amp;optional</span> <span class=\"nv\">arg</span><span class=\"p\">)</span>
  <span class=\"s\">&quot;skk-disable-kcode-input が nil なら skk-input-by-code-or-menu を呼び、そうでなければ\\\\を入力する&quot;</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">skk-disable-kcode-input</span>
      <span class=\"s\">&quot;\\\\&quot;</span>
    <span class=\"p\">(</span><span class=\"nf\">skk-list-chars</span> <span class=\"nv\">arg</span><span class=\"p\">)</span>
  <span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2011-10-29T19:51:31Z") (updated nil "2012-03-16T11:30:19Z") (author nil (name nil "mr_konn"))) (entry nil (id nil "tag:qiita.com,2005:Item/584") (published nil "2011-10-20T14:03:38+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/559959b4ae9062a7d311"))) (url nil "http://qiita.com/items/559959b4ae9062a7d311") (title nil "((hogehoge)) のかたちになったとき、paredit のせいでカッコが削除できなります。カッコのペアを削除するコマンドはありますか。") (content ((type . "html"))) (published nil "2011-10-20T14:03:38Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/576") (published nil "2011-10-19T18:29:15+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/44bc5147cea730f10d5b"))) (url nil "http://qiita.com/items/44bc5147cea730f10d5b") (title nil "color-moccur にふくまれる moccur-grep-find ではファイル探索とマッチングが入力をロックするようになっているので、そこを非同期で実行してほしいです。") (content ((type . "html")) "<p>deferred でやってみましたが、うまくいきません。<br>
簡単なサンプルとして次のスクリプトを作成しました。<br>
deferred が while のループを適当に中断して実行してくれるかな?と思いましたが、そのような効果はないことがわかりました。</p>

<p>Thread のようなものがほしいんですが、簡単に利用する方法があれば教えてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">deferred:$</span>
  <span class=\"p\">(</span><span class=\"nv\">deferred:next</span>
    <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
      <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">i</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"nv\">i</span> <span class=\"mi\">1000000</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"nb\">incf</span> <span class=\"nv\">i</span><span class=\"p\">)))))</span>
  <span class=\"p\">(</span><span class=\"nv\">deferred:nextc</span> <span class=\"nv\">it</span>
    <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Done!&quot;</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2011-10-19T18:29:15Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/527") (published nil "2011-10-16T01:33:00+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/138e9487223cba8d392a"))) (url nil "http://qiita.com/items/138e9487223cba8d392a") (title nil "私もさっき自分の投稿が２重になりました。") (content ((type . "html"))) (published nil "2011-10-16T01:33:00Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "mkasahara"))) (entry nil (id nil "tag:qiita.com,2005:Item/513") (published nil "2011-10-16T00:03:15+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7b04a4565f37a07f1c2e"))) (url nil "http://qiita.com/items/7b04a4565f37a07f1c2e") (title nil "markdown-modeを入れた．brew install markdownするとM-x markdownでhtml出力できるようになって便利") (content ((type . "html")) "<p><a href=\"https://github.com/defunkt/markdown-mode\" target=\"_blank\">https://github.com/defunkt/markdown-mode</a></p>
") (published nil "2011-10-16T00:03:15Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "yaotti"))) (entry nil (id nil "tag:qiita.com,2005:Item/502") (published nil "2011-10-15T00:10:01+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/562c5b7ef3ad77209443"))) (url nil "http://qiita.com/items/562c5b7ef3ad77209443") (title nil "自分の投稿が二重化してしまうようなきがします。偶然かもしれません。") (content ((type . "html"))) (published nil "2011-10-15T00:10:01Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/446") (published nil "2011-10-13T08:52:28+09:00") (updated nil "2012-03-16T11:30:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/758a22708f4df733006a"))) (url nil "http://qiita.com/items/758a22708f4df733006a") (title nil "emacs のファイルコピーやムーブって非同期にならないですか。以前しらべてかんじだと、 emacs 本体を C レベルでハックしないといけないきがしますが、やってる人いますか。") (content ((type . "html"))) (published nil "2011-10-13T08:52:28Z") (updated nil "2012-03-16T11:30:16Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/435") (published nil "2011-10-13T01:20:03+09:00") (updated nil "2012-03-16T11:30:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/999797b66b8f25da0511"))) (url nil "http://qiita.com/items/999797b66b8f25da0511") (title nil "Emacsで他人のソースをほぼ丸写しでも問題ないかについてなんですが、") (content ((type . "html")) "<p>bitbucketにあるEmacsLispファイルが自分のやりたいことをまさにやっていて、とにかく自分の作りたいものを作るためにコピペをして作るか、自分の中でコードを理解してから真似る方がいいのか。自分はどうしたらいいのでしょうか。</p>

<p>&quot;all usages&#47;modifications&#47;distributions&#47;whatever.&quot;<br>
とあったのですが、丸パクリは気が引けるのでどうしたらいいのか•••。 </p>

<p><a href=\"https://bitbucket.org/phromo/darkroom-mode/src\" target=\"_blank\">https://bitbucket.org/phromo/darkroom-mode/src</a></p>
") (published nil "2011-10-13T01:20:03Z") (updated nil "2012-03-16T11:30:16Z") (author nil (name nil "regluu503"))) (entry nil (id nil "tag:qiita.com,2005:Item/433") (published nil "2011-10-13T01:01:27+09:00") (updated nil "2012-03-16T11:30:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/21ea6bfcae8bed1a4c7b"))) (url nil "http://qiita.com/items/21ea6bfcae8bed1a4c7b") (title nil "今日は友人の emacs が、transient-mark-mode に関係なく、Ctrl + npbf で移動したときにマークしてしまう問題に遭遇してこまった。") (content ((type . "html")) "<p>emacs ではなく、 X のほうの問題で、 ubuntu の設定で Caps が Ctrl と Shift の両方としてはたらいていて、 Shift + 矢印による選択みたいなあつかいになってた様子。</p>
") (published nil "2011-10-13T01:01:27Z") (updated nil "2012-03-16T11:30:16Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/406") (published nil "2011-10-10T13:54:40+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/cd94c53cf2d0d7de2169"))) (url nil "http://qiita.com/items/cd94c53cf2d0d7de2169") (title nil "jabber(emacs 用 google-talk クライアント)で非同期に音をならすための設定 (elisp です)") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-alert-message-hooks</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">jabber-message-echo</span> <span class=\"nv\">jabber-message-scroll</span> <span class=\"nv\">jabber-message-wave</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-play-sound-file</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">file</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">start-process-shell-command</span> <span class=\"s\">&quot;player&quot;</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;play &quot;</span> <span class=\"nv\">file</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-alert-message-wave</span> <span class=\"s\">&quot;~/.emacs.d/sounds/se_sad03.wav&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2011-10-10T13:54:40Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/406") (published nil "2011-10-10T13:54:40+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/cd94c53cf2d0d7de2169"))) (url nil "http://qiita.com/items/cd94c53cf2d0d7de2169") (title nil "jabber(emacs 用 google-talk クライアント)で非同期に音をならすための設定 (elisp です)") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-alert-message-hooks</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">jabber-message-echo</span> <span class=\"nv\">jabber-message-scroll</span> <span class=\"nv\">jabber-message-wave</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-play-sound-file</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">file</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">start-process-shell-command</span> <span class=\"s\">&quot;player&quot;</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;play &quot;</span> <span class=\"nv\">file</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-alert-message-wave</span> <span class=\"s\">&quot;~/.emacs.d/sounds/se_sad03.wav&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2011-10-10T13:54:40Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/401") (published nil "2011-10-10T06:21:41+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/75131a7be34b5e8a43c9"))) (url nil "http://qiita.com/items/75131a7be34b5e8a43c9") (title nil "emacs -nwとか慣れないので") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>ln -s /usr/local/Cellar/emacs/23.3a/Emacs.app /Applications/Emacs.app
</pre>
</div>
</div>") (published nil "2011-10-10T06:21:41Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "richard_raw"))) (entry nil (id nil "tag:qiita.com,2005:Item/390") (published nil "2011-10-09T10:45:43+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ef7de0b7dedde0a27223"))) (url nil "http://qiita.com/items/ef7de0b7dedde0a27223") (title nil "C-cC-o で org モードのURLひらけたのか。。") (content ((type . "html"))) (published nil "2011-10-09T10:45:43Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "tomy_kaira"))) (entry nil (id nil "tag:qiita.com,2005:Item/380") (published nil "2011-10-08T19:34:20+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9f1990ed78caac8bf061"))) (url nil "http://qiita.com/items/9f1990ed78caac8bf061") (title nil "EmacsでShell使うためのelispなにつかってますか？") (content ((type . "html")) "<p>multitermとeshell使って使いづらいのでぜひおすすめの<br>
shell用elispをお聞かせください．</p>
") (published nil "2011-10-08T19:34:20Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "katsyoshi"))) (entry nil (id nil "tag:qiita.com,2005:Item/362") (published nil "2011-10-07T22:47:01+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7120345820121d7a4238"))) (url nil "http://qiita.com/items/7120345820121d7a4238") (title nil "Emacs Lisp書くときは eldoc-mode が必須。ミニバッファに関数の引数とか変数のdocstringを表示してくれる") (content ((type . "html"))) (published nil "2011-10-07T22:47:01Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "hayamiz"))) (entry nil (id nil "tag:qiita.com,2005:Item/275") (published nil "2011-10-02T16:14:00+09:00") (updated nil "2012-03-16T11:30:14+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8a6bf77bbb862400e45d"))) (url nil "http://qiita.com/items/8a6bf77bbb862400e45d") (title nil "ファイルを開いた時、Emacsは自動で文字コード判別してくれるのですが、ファイル中の日本語の文字数が少ないため判別出来ない場合、デフォルトでShift-JISと判断してしまいます。デフォルトでUTF-8で読んで欲しいんですが、修正する方法どなたかご存知ないですか？") (content ((type . "html"))) (published nil "2011-10-02T16:14:00Z") (updated nil "2012-03-16T11:30:14Z") (author nil (name nil "ymdsmn"))) (entry nil (id nil "tag:qiita.com,2005:Item/273") (published nil "2011-10-02T02:58:21+09:00") (updated nil "2012-03-16T11:30:14+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f5ed7aadf461c76c4188"))) (url nil "http://qiita.com/items/f5ed7aadf461c76c4188") (title nil "erbテンプレートの<% if ... %>などをインデントで字下げしたいのですが、一体どこを編集すればよいのでしょうか？") (content ((type . "html"))) (published nil "2011-10-02T02:58:21Z") (updated nil "2012-03-16T11:30:14Z") (author nil (name nil "kumagi"))) (entry nil (id nil "tag:qiita.com,2005:Item/271") (published nil "2011-10-02T00:39:02+09:00") (updated nil "2012-03-16T11:30:14+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/934a456415f21c54eafb"))) (url nil "http://qiita.com/items/934a456415f21c54eafb") (title nil "末尾の))を揃えてくれるelispってないでしょうか") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; before</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nf\">n</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">foo</span>
   <span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"p\">(</span><span class=\"nf\">baz</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">quux</span><span class=\"p\">))</span>
   <span class=\"p\">)</span>
  <span class=\"p\">)</span>


<span class=\"c1\">;;; after</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nf\">n</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">foo</span>
   <span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"p\">(</span><span class=\"nf\">baz</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">quux</span><span class=\"p\">))))</span> <span class=\"c1\">; (^q^)</span>
</pre>
</div>
</div>") (published nil "2011-10-02T00:39:02Z") (updated nil "2012-03-16T11:30:14Z") (author nil (name nil "g000001"))) (entry nil (id nil "tag:qiita.com,2005:Item/123") (published nil "2011-09-19T08:28:01+09:00") (updated nil "2012-03-16T11:30:12+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f8cf0871b326af453450"))) (url nil "http://qiita.com/items/f8cf0871b326af453450") (title nil "emacsで、リージョン中の内容をre-search-forwardとreplace-matchなどの組み合わせで置換していくときに、構文のfooは置換したいけれど、文字列中のfooは置換したくない、という場合は、どうするのが定石なのでしょうか。") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">ログ，エラーログ</span></div><div class=\"highlight\"><pre>foo &quot;foo&quot; foo Foo
=&gt; bar &quot;foo&quot; bar Foo
という風に置換したい
</pre>
</div>
</div>") (published nil "2011-09-19T08:28:01Z") (updated nil "2012-03-16T11:30:12Z") (author nil (name nil "g000001"))) (entry nil (id nil "tag:qiita.com,2005:Item/48") (published nil "2011-09-16T15:40:38+09:00") (updated nil "2012-03-16T11:30:11+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2820acda4593a478f735"))) (url nil "http://qiita.com/items/2820acda4593a478f735") (title nil "Qiitaが緑色ではなく紫色を使っていたら、emacsの話題が熱かったと思う。") (content ((type . "html"))) (published nil "2011-09-16T15:40:38Z") (updated nil "2012-03-16T11:30:11Z") (author nil (name nil "_nus"))) (entry nil (id nil "tag:qiita.com,2005:Item/7") (published nil "2011-09-16T13:38:20+09:00") (updated nil "2012-03-16T11:30:10+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1cfc1bb96422786fde2f"))) (url nil "http://qiita.com/items/1cfc1bb96422786fde2f") (title nil "Emacsをずっと開いてるとだんだん重くなることがあり，気になっています") (content ((type . "html"))) (published nil "2011-09-16T13:38:20Z") (updated nil "2012-03-16T11:30:10Z") (author nil (name nil "hitode909"))))) ("emacs で動く Elserv という HTTP サーバを見つけました" "<p>emacs で動く Elserv という HTTP サーバを見つけました。Wanderlust で有名な Yuuichi Teranishi さん作です。elisp を学ぶうえでの参考になるかもしれません。ソースコードは<a href=\"http://elserv.sourceforge.net/index.ja.html\">公式ページ</a> からダウンロードできないようです。Ubuntu ならパッケージ化されているため、apt でインストールできます。ちなみに sudo apt-get source elserv でソースを取得できます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ sudo apt-get install elserv
...
以下の特別パッケージがインストールされます:
flim
提案パッケージ:
emacs-wiki mhc xemacs21-bin semi wl wl-beta
以下のパッケージが新たにインストールされます:
elserv flim
...
続行しますか [Y/n]?
</pre></div></div>
<p>emacs23 でも、以下の設定で動作を確認できました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'elserv</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">elserv-start</span> <span class=\"mi\">8088</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'es-monitor</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'es-wiki</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">elserv-package-publish</span> <span class=\"p\">(</span><span class=\"nf\">elserv-find-process</span><span class=\"p\">)</span> <span class=\"s\">&quot;/wiki&quot;</span> <span class=\"s\">&quot;wiki&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'es-demo</span><span class=\"p\">)</span>
</pre></div></div>
<p>試しに、以下を評価して、http://localhost:8088/ へアクセスすると、foo と表示されました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">elserv-publish</span> <span class=\"p\">(</span><span class=\"nf\">elserv-find-process</span> <span class=\"mi\">8088</span><span class=\"p\">)</span> <span class=\"s\">&quot;/&quot;</span>
<span class=\"nv\">:string</span> <span class=\"s\">&quot;foo&quot;</span>
<span class=\"nv\">:content-type</span> <span class=\"s\">&quot;text/plain&quot;</span><span class=\"p\">)</span>
</pre></div></div>
<p>README.ja を引用します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Elserv -- Yet Another HTTP Server on Emacsen
Elserv は Emacs 上で常駐して動く HTTP サーバです。
Emacs 自身にはサーバの機能がありませんので、専用のサーバプロセス
(ruby スクリプト)をバックエンドで立ち上げ、そのプロセスと通信することに
よってサーバ機能を実現しています。
特徴：
* 手軽に Web サーバを立ち上げられる (Emacs のコマンドを実行するだけ)。
* Emacs lisp で動的コンテンツを作成できる。
* コンテンツの置き換えは eval するだけで OK。
* HTTP 1.1 GET, HEAD, POST に対応。
必要なもの：
* Emacs (Emacs 20 or XEmacs)
* APEL, FLIM
* ruby (1.6.3 or later)
インストール：
* アーカイブを適当なところで展開します。
* `make install' を実行します。
(XEmacs パッケージとしてインストールする場合は `make install-package'
を実行します。)
使い方：
(require 'elserv) したあと関数 elserv-start を実行すると
サーバが立ち上がります。
デフォルトのままだとポート番号は 8000 番となります。
そのままではほとんどコンテンツがありませんので、
関数 elserv-publish を使ってコンテンツを登録してください。
es- で始まるファイルに定義されたアプリケーションは、
関数 elserv-package-publish で登録できます。
例えば、es-wiki.el に定義された wiki サーバを /wiki に登録するには
以下を実行します。
(elserv-package-publish (elserv-find-process) &quot;/wiki&quot; &quot;wiki&quot;)
関数 elserv-stop を実行するか、バッファ &quot;*elserv*..&quot; を消すと
サーバプロセスが終了します。
&quot;*Log of elserv*...&quot; というバッファにアクセスログが残ります。
アプリケーション：
es-demo.el:    デモ用のサンプルサーバです。
es-wiki.el:    emacs-wiki を使った Wiki サーバです。
es-mhc.el:     MHC を使ったスケジュールサーバです。
es-monitor.el: publish されているコンテンツの一覧を表示します。
デフォルトで /monitor に publish されています。
remote.el:     web ブラウザ経由で Emacs を操作するためのサーバです。
web-custom.el: web ブラウザ経由で Emacs をカスタマイズするためのサーバです。
</pre></div></div>
<p>同様のツールに、<a href=\"https://github.com/nicferrier/elnode\">elnode</a> というのもあるようです。</p>" "http://qiita.com/items/e7e5d797ae101f13517c" (20693 13721) old 1 nil nil ((id nil "tag:qiita.com,2005:Item/12179") (published nil "2012-12-22T13:21:17+09:00") (updated nil "2012-12-22T13:22:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e7e5d797ae101f13517c"))) (url nil "http://qiita.com/items/e7e5d797ae101f13517c") (title nil "emacs で動く Elserv という HTTP サーバを見つけました") (content ((type . "html")) "<p>emacs で動く Elserv という HTTP サーバを見つけました。Wanderlust で有名な Yuuichi Teranishi さん作です。elisp を学ぶうえでの参考になるかもしれません。ソースコードは<a href=\"http://elserv.sourceforge.net/index.ja.html\">公式ページ</a> からダウンロードできないようです。Ubuntu ならパッケージ化されているため、apt でインストールできます。ちなみに sudo apt-get source elserv でソースを取得できます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ sudo apt-get install elserv 
...
以下の特別パッケージがインストールされます:
  flim
提案パッケージ:
  emacs-wiki mhc xemacs21-bin semi wl wl-beta
以下のパッケージが新たにインストールされます:
  elserv flim
...
続行しますか [Y/n]? 
</pre></div></div>
<p>emacs23 でも、以下の設定で動作を確認できました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;elserv</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">elserv-start</span> <span class=\"mi\">8088</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;es-monitor</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;es-wiki</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">elserv-package-publish</span> <span class=\"p\">(</span><span class=\"nf\">elserv-find-process</span><span class=\"p\">)</span> <span class=\"s\">&quot;/wiki&quot;</span> <span class=\"s\">&quot;wiki&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;es-demo</span><span class=\"p\">)</span>
</pre></div></div>
<p>試しに、以下を評価して、http://localhost:8088/ へアクセスすると、foo と表示されました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">elserv-publish</span> <span class=\"p\">(</span><span class=\"nf\">elserv-find-process</span> <span class=\"mi\">8088</span><span class=\"p\">)</span> <span class=\"s\">&quot;/&quot;</span>
                <span class=\"nv\">:string</span> <span class=\"s\">&quot;foo&quot;</span>
                <span class=\"nv\">:content-type</span> <span class=\"s\">&quot;text/plain&quot;</span><span class=\"p\">)</span>
</pre></div></div>
<p>README.ja を引用します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Elserv -- Yet Another HTTP Server on Emacsen

Elserv は Emacs 上で常駐して動く HTTP サーバです。

Emacs 自身にはサーバの機能がありませんので、専用のサーバプロセス
(ruby スクリプト)をバックエンドで立ち上げ、そのプロセスと通信することに
よってサーバ機能を実現しています。

特徴：

* 手軽に Web サーバを立ち上げられる (Emacs のコマンドを実行するだけ)。
* Emacs lisp で動的コンテンツを作成できる。
* コンテンツの置き換えは eval するだけで OK。
* HTTP 1.1 GET, HEAD, POST に対応。

必要なもの：

* Emacs (Emacs 20 or XEmacs)
* APEL, FLIM
* ruby (1.6.3 or later)

インストール：

* アーカイブを適当なところで展開します。
* `make install&#39; を実行します。
(XEmacs パッケージとしてインストールする場合は `make install-package&#39;
 を実行します。)

使い方：

(require &#39;elserv) したあと関数 elserv-start を実行すると
サーバが立ち上がります。
デフォルトのままだとポート番号は 8000 番となります。

そのままではほとんどコンテンツがありませんので、
関数 elserv-publish を使ってコンテンツを登録してください。

es- で始まるファイルに定義されたアプリケーションは、
関数 elserv-package-publish で登録できます。
例えば、es-wiki.el に定義された wiki サーバを /wiki に登録するには
以下を実行します。

(elserv-package-publish (elserv-find-process) &quot;/wiki&quot; &quot;wiki&quot;)

関数 elserv-stop を実行するか、バッファ &quot;*elserv*..&quot; を消すと
サーバプロセスが終了します。

&quot;*Log of elserv*...&quot; というバッファにアクセスログが残ります。

アプリケーション：

es-demo.el:    デモ用のサンプルサーバです。
es-wiki.el:    emacs-wiki を使った Wiki サーバです。
es-mhc.el:     MHC を使ったスケジュールサーバです。
es-monitor.el: publish されているコンテンツの一覧を表示します。
               デフォルトで /monitor に publish されています。

remote.el:     web ブラウザ経由で Emacs を操作するためのサーバです。
web-custom.el: web ブラウザ経由で Emacs をカスタマイズするためのサーバです。
</pre></div></div>
<p>同様のツールに、<a href=\"https://github.com/nicferrier/elnode\">elnode</a> というのもあるようです。</p>
") (published nil "2012-12-22T13:21:17Z") (updated nil "2012-12-22T13:22:49Z") (author nil (name nil "mori_dev")))) ("Emacs のバッファ名にヒントを追加する" "<h1>Emacs のバッファ名</h1>
<p>Emacs のバッファ名は基本的にファイル名になります．しかし，バッファ名がファイル名のみだとわかりにくい場合もあります．そこでヒントとなるような文字列を追加してわかりやすくしてみます．</p>
<h2>Dired バッファに [Dired] を追加する</h2>
<p>Emacs 内蔵のファイラーである dired ですが，通常のバッファ名は単純なディレクトリ名になります．このままではわかりにくいので，バッファ名にヒントを追加します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">dired-my-append-buffer-name-hint</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-my-append-buffer-name-hint</span> <span class=\"p\">()</span>
<span class=\"s\">&quot;Append a auxiliary string to a name of dired buffer.&quot;</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"nv\">major-mode</span> <span class=\"ss\">'dired-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">dir</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"nv\">list-buffers-directory</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">drive</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"ss\">'system-type</span> <span class=\"ss\">'windows-nt</span><span class=\"p\">)</span> <span class=\"c1\">;; Windows の場合はドライブレターを追加</span>
<span class=\"p\">(</span><span class=\"nv\">string-match</span> <span class=\"s\">&quot;^\\\\([a-zA-Z]:\\\\)/&quot;</span> <span class=\"nv\">dir</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">match-string</span> <span class=\"mi\">1</span> <span class=\"nv\">dir</span><span class=\"p\">)</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">rename-buffer</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span><span class=\"p\">)</span> <span class=\"s\">&quot; [&quot;</span> <span class=\"nv\">drive</span> <span class=\"s\">&quot;Dired]&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'dired-mode-hook</span> <span class=\"ss\">'dired-my-append-buffer-name-hint</span><span class=\"p\">)</span>
</pre></div></div>
<p>このコードを init.el に追加すればバッファ名の末尾に &quot; [Dired]&quot; を追加します．Windows の場合（Cygwin 除く）はドライブレターも追加します．</p>
<h2>Tramp バッファにユーザ名とホスト名を追加する</h2>
<p>Emacs でリモートファイルを編集できる tramp なんですが，これまた基本的なファイル名しか表示されません．ローカルファイルを編集してるつもりが実はリモートファイルでした，なんてことが起きないようにバッファ名にユーザ名とホスト名を追加します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">tramp-my-append-buffer-name-hint</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">tramp-my-append-buffer-name-hint</span> <span class=\"p\">()</span>
<span class=\"s\">&quot;Append a hint (user, hostname) to a buffer name if visiting</span>
<span class=\"s\">file is a remote file (include directory).&quot;</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"nv\">list-buffers-directory</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nv\">tramp-tramp-file-p</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">tramp-vec</span> <span class=\"p\">(</span><span class=\"nv\">tramp-dissect-file-name</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nc\">method</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-method</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">host</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-real-host</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">user</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-real-user</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">assoc</span> <span class=\"nc\">method</span> <span class=\"nv\">tramp-default-user-alist</span><span class=\"p\">))</span>
<span class=\"nv\">tramp-default-user</span>
<span class=\"nv\">user-real-login-name</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">rename-buffer</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span><span class=\"p\">)</span> <span class=\"s\">&quot; &lt;&quot;</span> <span class=\"nv\">user</span> <span class=\"s\">&quot;@&quot;</span> <span class=\"nv\">host</span> <span class=\"s\">&quot;&gt;&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'find-file-hook</span> <span class=\"ss\">'tramp-my-append-buffer-name-hint</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'dired-mode-hook</span> <span class=\"ss\">'tramp-my-append-buffer-name-hint</span><span class=\"p\">)</span>
</pre></div></div>
<p>これで tramp で開いたファイル（ディレクトリ含む）のバッファ名の末尾に &quot; &lt;user@hostname&gt;&quot; が追加されます．</p>
<h2>まとめ</h2>
<p>バッファ名にヒントを追加してわかりやすくしてみようと試みました．anything (or helm) でバッファ切り替えをしていれば，ヒントをもとにバッファを絞り込めるので非常に便利です．</p>
<ul>
<li>(buffer-file-name) でバッファに結びついているファイル名を取得</li>
<li>list-buffers-directory で Dired バッファに結びついているディレクトリ名を取得</li>
<li>(buffer-name) で現在のバッファ名を取得</li>
<li>(rename-buffer &quot;string&quot;) でバッファ名の変更</li>
</ul>
<p>ができるので，自分の好きなヒントを作ってみて find-file-hook や dired-mode-hook に引っ掛ければいいかと思います．VCS 下のファイルにブランチとリビジョンを追加するとか，プロジェクト下のファイルにプロジェクト名を追加など役に立ちそうな気がしています．</p>" "http://qiita.com/items/13585a5711d62e9800ef" (20692 22771) old 2 nil nil ((id nil "tag:qiita.com,2005:Item/12159") (published nil "2012-12-21T21:36:23+09:00") (updated nil "2012-12-21T21:41:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/13585a5711d62e9800ef"))) (url nil "http://qiita.com/items/13585a5711d62e9800ef") (title nil "Emacs のバッファ名にヒントを追加する") (content ((type . "html")) "<h1>Emacs のバッファ名</h1>

<p>Emacs のバッファ名は基本的にファイル名になります．しかし，バッファ名がファイル名のみだとわかりにくい場合もあります．そこでヒントとなるような文字列を追加してわかりやすくしてみます．</p>

<h2>Dired バッファに [Dired] を追加する</h2>

<p>Emacs 内蔵のファイラーである dired ですが，通常のバッファ名は単純なディレクトリ名になります．このままではわかりにくいので，バッファ名にヒントを追加します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">dired-my-append-buffer-name-hint</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-my-append-buffer-name-hint</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;Append a auxiliary string to a name of dired buffer.&quot;</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"nv\">major-mode</span> <span class=\"ss\">&#39;dired-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">dir</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"nv\">list-buffers-directory</span><span class=\"p\">))</span>
           <span class=\"p\">(</span><span class=\"nv\">drive</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"ss\">&#39;system-type</span> <span class=\"ss\">&#39;windows-nt</span><span class=\"p\">)</span> <span class=\"c1\">;; Windows の場合はドライブレターを追加</span>
                           <span class=\"p\">(</span><span class=\"nv\">string-match</span> <span class=\"s\">&quot;^\\\\([a-zA-Z]:\\\\)/&quot;</span> <span class=\"nv\">dir</span><span class=\"p\">))</span>
                      <span class=\"p\">(</span><span class=\"nv\">match-string</span> <span class=\"mi\">1</span> <span class=\"nv\">dir</span><span class=\"p\">)</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)))</span>
      <span class=\"p\">(</span><span class=\"nv\">rename-buffer</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span><span class=\"p\">)</span> <span class=\"s\">&quot; [&quot;</span> <span class=\"nv\">drive</span> <span class=\"s\">&quot;Dired]&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;dired-mode-hook</span> <span class=\"ss\">&#39;dired-my-append-buffer-name-hint</span><span class=\"p\">)</span>
</pre></div></div>
<p>このコードを init.el に追加すればバッファ名の末尾に &quot; [Dired]&quot; を追加します．Windows の場合（Cygwin 除く）はドライブレターも追加します．</p>

<h2>Tramp バッファにユーザ名とホスト名を追加する</h2>

<p>Emacs でリモートファイルを編集できる tramp なんですが，これまた基本的なファイル名しか表示されません．ローカルファイルを編集してるつもりが実はリモートファイルでした，なんてことが起きないようにバッファ名にユーザ名とホスト名を追加します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">tramp-my-append-buffer-name-hint</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">tramp-my-append-buffer-name-hint</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;Append a hint (user, hostname) to a buffer name if visiting</span>
<span class=\"s\">file is a remote file (include directory).&quot;</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"nv\">list-buffers-directory</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nv\">tramp-tramp-file-p</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">tramp-vec</span> <span class=\"p\">(</span><span class=\"nv\">tramp-dissect-file-name</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
             <span class=\"p\">(</span><span class=\"nc\">method</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-method</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">))</span>
             <span class=\"p\">(</span><span class=\"nv\">host</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-real-host</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">))</span>
             <span class=\"p\">(</span><span class=\"nv\">user</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nv\">tramp-file-name-real-user</span> <span class=\"nv\">tramp-vec</span><span class=\"p\">)</span>
                       <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">assoc</span> <span class=\"nc\">method</span> <span class=\"nv\">tramp-default-user-alist</span><span class=\"p\">))</span>
                       <span class=\"nv\">tramp-default-user</span>
                       <span class=\"nv\">user-real-login-name</span><span class=\"p\">)))</span>
        <span class=\"p\">(</span><span class=\"nv\">rename-buffer</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span><span class=\"p\">)</span> <span class=\"s\">&quot; &lt;&quot;</span> <span class=\"nv\">user</span> <span class=\"s\">&quot;@&quot;</span> <span class=\"nv\">host</span> <span class=\"s\">&quot;&gt;&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;find-file-hook</span> <span class=\"ss\">&#39;tramp-my-append-buffer-name-hint</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;dired-mode-hook</span> <span class=\"ss\">&#39;tramp-my-append-buffer-name-hint</span><span class=\"p\">)</span>
</pre></div></div>
<p>これで tramp で開いたファイル（ディレクトリ含む）のバッファ名の末尾に &quot; &lt;user@hostname&gt;&quot; が追加されます．</p>

<h2>まとめ</h2>

<p>バッファ名にヒントを追加してわかりやすくしてみようと試みました．anything (or helm) でバッファ切り替えをしていれば，ヒントをもとにバッファを絞り込めるので非常に便利です．</p>

<ul>
<li>(buffer-file-name) でバッファに結びついているファイル名を取得</li>
<li>list-buffers-directory で Dired バッファに結びついているディレクトリ名を取得</li>
<li>(buffer-name) で現在のバッファ名を取得</li>
<li>(rename-buffer &quot;string&quot;) でバッファ名の変更</li>
</ul>

<p>ができるので，自分の好きなヒントを作ってみて find-file-hook や dired-mode-hook に引っ掛ければいいかと思います．VCS 下のファイルにブランチとリビジョンを追加するとか，プロジェクト下のファイルにプロジェクト名を追加など役に立ちそうな気がしています．</p>
") (published nil "2012-12-21T21:36:23Z") (updated nil "2012-12-21T21:41:23Z") (author nil (name nil "kbkbkbkb1")))) ("Emacsを使いこなすために" "<p>Emacsを使いこなすための tipsを示します。<br>
人それぞれのものがあると思いますので 1つの意見として<br>
受け取っていただければいいかなと思います。</p>
<h2>1つの Emacsは終了しないようにしよう</h2>
<p>使いこなすためにはやはり長く触っていなくてはいけないと思います. そのためにもなるべく<br>
終了しないようにしましょう. 特にカスタマイズをしだして, いろいろ拡張をインストール<br>
しだすとどうしても起動が遅くなります. それを何回を起動するとなると毎回毎回いらいら<br>
しますし, それを避けるために貴重な機能を削除するなんて発想になってしまうことは<br>
大変もったいないことです.</p>
<p>終了しないためのノウハウを示します.</p>
<h3>終了コマンドを無効化しよう</h3>
<p>何で Emacsを閉じてしまうかというと, 終了コマンドが押しやすいバインドだからです.<br>
<code>C-x C-c</code>は保存のコマンドなんかに近いですし, うっかり押してしまう度合いが高すぎ<br>
ます. なんでそんなキーバインドには違うコマンドを割り振ってしまいましょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>;; 好きなコマンドを割り振ろう
(global-set-key (kbd &quot;C-x C-c&quot;) 'helm-M-x) ;; 私は helm-M-xにしています
;; C-x C-z(suspend)も変更するのもありでしょう.
(global-set-key (kbd &quot;C-x C-z&quot;) 'your-favorite-command)
</pre></div></div>
<p>でもさすがに終了できないというのも困ります. <code>M-x save-buffers-kill-emacs</code>とすれば<br>
いいんですが, コマンドが長ったらしいので aliasをつけておきましょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>;; I never use C-x C-c
(defalias 'exit 'save-buffers-kill-emacs)
</pre></div></div>
<p>これで <code>M-x exit</code>で終了できます. <code>C-x C-x</code>と比べるとだいぶ面倒になったので,<br>
終了する回数が減ることでしょう.</p>
<h3>emacsclientの活用</h3>
<p>1つ Mainとなる Emacsを使おうと言っても, すべてMain Emacsからファイルを開いたり<br>
するのは面倒です. emacsclientを使えば、シェルで操作しているときこのファイルを<br>
mainの Emacsで開くということが簡単にできます。また Main Emacsの設定を引き継ぐ<br>
別 Emacsも起動することができます。</p>
<h4>サーバ側の設定</h4>
<p>serverの設定</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(require 'server)
(unless (server-running-p) ;; 複数サーバ起動を防ぐ
(server-start))
</pre></div></div>
<h4>環境変数 EDITORを emacsclientにする</h4>
<p>(Windowsでは違うと思いますが), いろいろな場面でエディタが起動し,<br>
編集を迫られることがあります. Unix系の環境では, だいたいの場合,<br>
環境変数 EDITORに設定されたものが最終的に使われます(GIT用とか<br>
Subversion用とか特化したものを指定していなければ).</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nb\">export </span><span class=\"nv\">EDITOR</span><span class=\"o\">=</span><span class=\"s2\">&quot;emacsclient&quot;</span>
</pre></div></div>
<p>これで gitのコミットログを書く等で使われるエディタが emacsclientに<br>
なります. ようはそれらがサーバを起動する Mainの Emacsで編集できるように<br>
なるということです.</p>
<h4>emacsclientに aliasをつけよう</h4>
<p>emacsclientなんて打つのが面倒なので, もう 'e'にしちゃいましょう</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nb\">alias </span><span class=\"nv\">e</span><span class=\"o\">=</span><span class=\"s1\">'emacsclient'</span>
</pre></div></div>
<p>これでとりあえず Emacsで開きたいときは</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre> % e ファイル名    <span class=\"c\"># 編集終了を待つ場合</span>
% e -n ファイル名 <span class=\"c\"># 編集終了を待たない</span>
</pre></div></div>
<p>でいけるようになります.</p>
<p>Mainの Emacsで開くだけでなく, 新規にウインドウ(GUI, 非GUI両方)を開いて使うことも<br>
できます. このとき設定等の情報は Mainの Emacsのものを利用するので起動にはほとんど<br>
時間がかかりません. 個人的にあまり使いませんが, 覚えておいて損はないでしょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre> % emacsclient -nw ファイル名 <span class=\"c\"># 現在の端末でファイルを開く</span>
% emacsclient -c  ファイル名 <span class=\"c\"># 新たにフレームを作ってファイルを開く</span>
</pre></div></div>
<h2>'C-M-'のキーに慣れよう</h2>
<p>'C-M-'というキーバインドは主に S式の移動・操作に割当たっています. Lisp系の言語を<br>
書いている人であれば, よく利用することでしょう. しかしこれらは Lisp専用のキーバインドでは<br>
ありません. C-M-a, C-M-eは大抵の言語で関数単位の移動に使えますし, C-M-f, C-M-bを<br>
使えばアンダースコアで連結された変数でも一度で移動することができます.<br>
C-M-kはアンダースコアつなぎの変数も消せますし, Lisp系以外の言語でも役立つこと<br>
間違いなしです.</p>
<p>あと <code>C-M-</code>バインドは GUI Emacsでなくても使えるキーバインドです. GUI版であれば,<br>
ファンクションキーや Controlキーと特殊なキーの組み合わせが使えますが,<br>
非 GUI環境ではそれらは基本的に使えません. ただでさえキーバインドが少ない<br>
Emacsなので, バインド候補を増やすためにも使い慣れておくとよいでしょう.</p>
<h2>良いプログラマになることを心がける</h2>
<p>個人的に心がけていることです. 三流へぼプログラマである私が言ってもあまり説得力は<br>
ありませんが・・・.</p>
<p>良いプログラマというものは良い道具にこだわり, 良い道具を使っていると思いますが,<br>
良い道具を使ったからって良いプログラマってわけではありません. 結局道具だと<br>
思いますので, そこにだけこだわってしまってはいけないと思います.</p>
<p>他人が絶賛する拡張をインストールしまくるよりは, 自分でたくさんコードを書いて<br>
「これは改善すべきだ」っていう機会をたくさん増やしてそれに応じて, カスタマイズ<br>
していった方が確実に良い Emacsができあがると思います. なんであんまりエディタを<br>
カスタマイズすることに熱を上げず, 良いプログラマになることをまず考えてください.</p>
<p>Enjoy Emacs Life!!</p>" "http://qiita.com/items/2bdcd9cd5b701b1112e6" (20691 1743) old 3 nil nil ((id nil "tag:qiita.com,2005:Item/12111") (published nil "2012-12-20T21:38:18+09:00") (updated nil "2012-12-20T21:38:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2bdcd9cd5b701b1112e6"))) (url nil "http://qiita.com/items/2bdcd9cd5b701b1112e6") (title nil "Emacsを使いこなすために") (content ((type . "html")) "<p>Emacsを使いこなすための tipsを示します。<br>
人それぞれのものがあると思いますので 1つの意見として<br>
受け取っていただければいいかなと思います。</p>

<h2>1つの Emacsは終了しないようにしよう</h2>

<p>使いこなすためにはやはり長く触っていなくてはいけないと思います. そのためにもなるべく<br>
終了しないようにしましょう. 特にカスタマイズをしだして, いろいろ拡張をインストール<br>
しだすとどうしても起動が遅くなります. それを何回を起動するとなると毎回毎回いらいら<br>
しますし, それを避けるために貴重な機能を削除するなんて発想になってしまうことは<br>
大変もったいないことです.</p>

<p>終了しないためのノウハウを示します.</p>

<h3>終了コマンドを無効化しよう</h3>

<p>何で Emacsを閉じてしまうかというと, 終了コマンドが押しやすいバインドだからです.<br>
<code>C-x C-c</code>は保存のコマンドなんかに近いですし, うっかり押してしまう度合いが高すぎ<br>
ます. なんでそんなキーバインドには違うコマンドを割り振ってしまいましょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>;; 好きなコマンドを割り振ろう
(global-set-key (kbd &quot;C-x C-c&quot;) &#39;helm-M-x) ;; 私は helm-M-xにしています

;; C-x C-z(suspend)も変更するのもありでしょう.
(global-set-key (kbd &quot;C-x C-z&quot;) &#39;your-favorite-command)
</pre></div></div>
<p>でもさすがに終了できないというのも困ります. <code>M-x save-buffers-kill-emacs</code>とすれば<br>
いいんですが, コマンドが長ったらしいので aliasをつけておきましょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>;; I never use C-x C-c
(defalias &#39;exit &#39;save-buffers-kill-emacs)
</pre></div></div>
<p>これで <code>M-x exit</code>で終了できます. <code>C-x C-x</code>と比べるとだいぶ面倒になったので,<br>
終了する回数が減ることでしょう.</p>

<h3>emacsclientの活用</h3>

<p>1つ Mainとなる Emacsを使おうと言っても, すべてMain Emacsからファイルを開いたり<br>
するのは面倒です. emacsclientを使えば、シェルで操作しているときこのファイルを<br>
mainの Emacsで開くということが簡単にできます。また Main Emacsの設定を引き継ぐ<br>
別 Emacsも起動することができます。</p>

<h4>サーバ側の設定</h4>

<p>serverの設定</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(require &#39;server)

(unless (server-running-p) ;; 複数サーバ起動を防ぐ
  (server-start))
</pre></div></div>
<h4>環境変数 EDITORを emacsclientにする</h4>

<p>(Windowsでは違うと思いますが), いろいろな場面でエディタが起動し,<br>
編集を迫られることがあります. Unix系の環境では, だいたいの場合,<br>
環境変数 EDITORに設定されたものが最終的に使われます(GIT用とか<br>
Subversion用とか特化したものを指定していなければ).</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nb\">export </span><span class=\"nv\">EDITOR</span><span class=\"o\">=</span><span class=\"s2\">&quot;emacsclient&quot;</span>
</pre></div></div>
<p>これで gitのコミットログを書く等で使われるエディタが emacsclientに<br>
なります. ようはそれらがサーバを起動する Mainの Emacsで編集できるように<br>
なるということです.</p>

<h4>emacsclientに aliasをつけよう</h4>

<p>emacsclientなんて打つのが面倒なので, もう &#39;e&#39;にしちゃいましょう</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nb\">alias </span><span class=\"nv\">e</span><span class=\"o\">=</span><span class=\"s1\">&#39;emacsclient&#39;</span>
</pre></div></div>
<p>これでとりあえず Emacsで開きたいときは</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre> % e ファイル名    <span class=\"c\"># 編集終了を待つ場合</span>
 % e -n ファイル名 <span class=\"c\"># 編集終了を待たない</span>
</pre></div></div>
<p>でいけるようになります.</p>

<p>Mainの Emacsで開くだけでなく, 新規にウインドウ(GUI, 非GUI両方)を開いて使うことも<br>
できます. このとき設定等の情報は Mainの Emacsのものを利用するので起動にはほとんど<br>
時間がかかりません. 個人的にあまり使いませんが, 覚えておいて損はないでしょう.</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre> % emacsclient -nw ファイル名 <span class=\"c\"># 現在の端末でファイルを開く</span>
 % emacsclient -c  ファイル名 <span class=\"c\"># 新たにフレームを作ってファイルを開く</span>
</pre></div></div>
<h2>&#39;C-M-&#39;のキーに慣れよう</h2>

<p>&#39;C-M-&#39;というキーバインドは主に S式の移動・操作に割当たっています. Lisp系の言語を<br>
書いている人であれば, よく利用することでしょう. しかしこれらは Lisp専用のキーバインドでは<br>
ありません. C-M-a, C-M-eは大抵の言語で関数単位の移動に使えますし, C-M-f, C-M-bを<br>
使えばアンダースコアで連結された変数でも一度で移動することができます.<br>
C-M-kはアンダースコアつなぎの変数も消せますし, Lisp系以外の言語でも役立つこと<br>
間違いなしです.</p>

<p>あと <code>C-M-</code>バインドは GUI Emacsでなくても使えるキーバインドです. GUI版であれば,<br>
ファンクションキーや Controlキーと特殊なキーの組み合わせが使えますが,<br>
非 GUI環境ではそれらは基本的に使えません. ただでさえキーバインドが少ない<br>
Emacsなので, バインド候補を増やすためにも使い慣れておくとよいでしょう.</p>

<h2>良いプログラマになることを心がける</h2>

<p>個人的に心がけていることです. 三流へぼプログラマである私が言ってもあまり説得力は<br>
ありませんが・・・.</p>

<p>良いプログラマというものは良い道具にこだわり, 良い道具を使っていると思いますが,<br>
良い道具を使ったからって良いプログラマってわけではありません. 結局道具だと<br>
思いますので, そこにだけこだわってしまってはいけないと思います.</p>

<p>他人が絶賛する拡張をインストールしまくるよりは, 自分でたくさんコードを書いて<br>
「これは改善すべきだ」っていう機会をたくさん増やしてそれに応じて, カスタマイズ<br>
していった方が確実に良い Emacsができあがると思います. なんであんまりエディタを<br>
カスタマイズすることに熱を上げず, 良いプログラマになることをまず考えてください.</p>

<p>Enjoy Emacs Life!!</p>
") (published nil "2012-12-20T21:38:18Z") (updated nil "2012-12-20T21:38:39Z") (author nil (name nil "syohex@github")))) ("magit の部分 stage が便利で便利で" "<p>スクリーンキャプチャ付きの記事は<br>
<a href=\"http://nishikawasasaki.hatenablog.com/entry/2012/12/20/004227\">http://nishikawasasaki.hatenablog.com/entry/2012/12/20/004227</a><br>
にあります。</p>
<h3>導入</h3>
<p>みなさん、 git つかってますか?</p>
<p>git を使ってらっしゃる方はコマンドで操作している方が大半だと思います。<br>
そこで Emacs をお使いのみなさんにお勧めするのが<br>
今回のテーマの magit です。</p>
<h3>magit って?</h3>
<p>Emacs から git を操作するための elisp です。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>magit/magit · GitHub - https://github.com/magit/magit
</pre></div></div>
<p>インストールには el-get を利用すると便利です。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x el-get-install
→ magit を入力してインストール
</pre></div></div>
<p>add や commit、 checkout に branch など、<br>
基本的なコマンドは<a href=\"http://daemianmack.com/magit-cheatsheet.html\">このあたり</a>をご覧ください。</p>
<h3>普通の magit</h3>
<p>そんな magit ですが今回特に紹介したいのは、<br>
&quot;部分 stage 機能&quot; です!</p>
<p>ファイルを編集後の git 管理下のファイルが変更された状態で magit-status を実行すると、<br>
magit による git 操作画面となります。</p>
<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218030048.png\" alt=\"\"></p>
<p>通常であれば  Changes の中から add したいファイルにカーソルを合わせておいて<br>
s キーをタイプすることで Staged changes へとファイルが移ります。</p>
<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218030525.png\" alt=\"\"></p>
<p>単純な追加や変更であれば、このまま c をタイプしてコミットメッセージを入力してしまいましょう。</p>
<h3>今回のポイント</h3>
<p>リポジトリに管理下の hoge アプリ設定ファイルに新しい設定項目を追加したという状況を考えてみましょう。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre># hoge設定ファイル
path=/hoge/piyo
newSetting=aaa
</pre></div></div>
<p>ここでは newSetting が新しい設定項目だと思ってください。</p>
<p>この時、もともとの設定項目 path が存在していますが、<br>
これが動作確認に必要な項目で<br>
ローカル特有の設定値に変更していたとしたらどうでしょうか?</p>
<p>add 前にリポジトリの内容に戻しておかないと、<br>
このローカル用設定のままコミットされてしまいます。</p>
<p>こんな時に使えるのが magit の部分 stage です。</p>
<p>使い方はいたって簡単です。<br>
編集が完了した状態で magit-status を実行します。</p>
<p>magit での git 操作画面が開きますので、部分的に stage したいファイルにカーソルを合わせます。</p>
<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218031453.png\" alt=\"\"></p>
<p>この状態で M-s (alt+s, Cmd+s, Opt+s)をタイプします。<br>
するとファイルリストの下部に Diff が表示されます。</p>
<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218031654.png\" alt=\"\"></p>
<p>この Diff 上でリージョン選択して s をタイプすると、<br>
リージョン選択した領域のみが stage(git add)されるのです!</p>
<p>この例の場合だと、<br>
変更として加えたいのは<br>
newSetting=aaa<br>
の部分ですので、この行を行頭から行末までリージョンとして s をタイプします。<br>
するとどうでしょう。Staged changes として部分的に stage したファイル名があらわれます。</p>
<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218032129.png\" alt=\"\"></p>
<p>あとは通常通り c をタイプしてコミットに進むだけです。<br>
もちろん他にファイルや部分を同時にコミットすることも可能です。</p>
<p>部分のみコミットするとこのようにちゃんと部分がコミットされています。</p>
<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218032428.png\" alt=\"\"></p>
<p>便利ですね!!</p>
<p>ちなみに同じ要領で、リージョン選択後に<br>
ステージの s ではなく v をタイプすることで部分的にリポジトリの状態に戻す(revert)することも出来ます!</p>
<h3>おわりに</h3>
<p>magit は Emacs からとっても便利に git を操作できる素晴しい道具です。<br>
git をコマンド操作するよりも効率良く操作できると楽しいですね!!</p>
<p>最後に、 magit の Diff の色合いが気に入らない人用の情報です。<br>
色は下記のように変更可能ですのでいろいろ試してみてください。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>;; 色変更
(set-face-foreground 'magit-diff-add &quot;#b9ca4a&quot;) ; 追加した部分を緑に
(set-face-foreground 'magit-diff-del &quot;#d54e53&quot;)  ; 削除した 部分を赤に
(set-face-background 'magit-item-highlight &quot;#000000&quot;) ; 選択項目ハイライトがうっとうしいので背景色と同化
</pre></div></div>
<p>それではそれでは〜</p>" "http://qiita.com/items/f690ee08f6a32d9d03fa" (20689 57940) old 4 nil nil ((id nil "tag:qiita.com,2005:Item/12070") (published nil "2012-12-20T00:43:30+09:00") (updated nil "2012-12-20T00:50:44+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f690ee08f6a32d9d03fa"))) (url nil "http://qiita.com/items/f690ee08f6a32d9d03fa") (title nil "magit の部分 stage が便利で便利で") (content ((type . "html")) "<p>スクリーンキャプチャ付きの記事は<br>
<a href=\"http://nishikawasasaki.hatenablog.com/entry/2012/12/20/004227\">http://nishikawasasaki.hatenablog.com/entry/2012/12/20/004227</a><br>
にあります。</p>

<h3>導入</h3>

<p>みなさん、 git つかってますか?</p>

<p>git を使ってらっしゃる方はコマンドで操作している方が大半だと思います。<br>
そこで Emacs をお使いのみなさんにお勧めするのが<br>
今回のテーマの magit です。</p>

<h3>magit って?</h3>

<p>Emacs から git を操作するための elisp です。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>magit/magit · GitHub - https://github.com/magit/magit
</pre></div></div>
<p>インストールには el-get を利用すると便利です。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x el-get-install
    → magit を入力してインストール
</pre></div></div>
<p>add や commit、 checkout に branch など、<br>
基本的なコマンドは<a href=\"http://daemianmack.com/magit-cheatsheet.html\">このあたり</a>をご覧ください。</p>

<h3>普通の magit</h3>

<p>そんな magit ですが今回特に紹介したいのは、<br>
&quot;部分 stage 機能&quot; です!</p>

<p>ファイルを編集後の git 管理下のファイルが変更された状態で magit-status を実行すると、<br>
magit による git 操作画面となります。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218030048.png\" alt=\"\"></p>

<p>通常であれば  Changes の中から add したいファイルにカーソルを合わせておいて<br>
s キーをタイプすることで Staged changes へとファイルが移ります。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218030525.png\" alt=\"\"></p>

<p>単純な追加や変更であれば、このまま c をタイプしてコミットメッセージを入力してしまいましょう。</p>

<h3>今回のポイント</h3>

<p>リポジトリに管理下の hoge アプリ設定ファイルに新しい設定項目を追加したという状況を考えてみましょう。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre># hoge設定ファイル
path=/hoge/piyo
newSetting=aaa
</pre></div></div>
<p>ここでは newSetting が新しい設定項目だと思ってください。</p>

<p>この時、もともとの設定項目 path が存在していますが、<br>
これが動作確認に必要な項目で<br>
ローカル特有の設定値に変更していたとしたらどうでしょうか?</p>

<p>add 前にリポジトリの内容に戻しておかないと、<br>
このローカル用設定のままコミットされてしまいます。</p>

<p>こんな時に使えるのが magit の部分 stage です。</p>

<p>使い方はいたって簡単です。<br>
編集が完了した状態で magit-status を実行します。</p>

<p>magit での git 操作画面が開きますので、部分的に stage したいファイルにカーソルを合わせます。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218031453.png\" alt=\"\"></p>

<p>この状態で M-s (alt+s, Cmd+s, Opt+s)をタイプします。<br>
するとファイルリストの下部に Diff が表示されます。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218031654.png\" alt=\"\"></p>

<p>この Diff 上でリージョン選択して s をタイプすると、<br>
リージョン選択した領域のみが stage(git add)されるのです!</p>

<p>この例の場合だと、<br>
変更として加えたいのは<br>
    newSetting=aaa<br>
の部分ですので、この行を行頭から行末までリージョンとして s をタイプします。<br>
するとどうでしょう。Staged changes として部分的に stage したファイル名があらわれます。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218032129.png\" alt=\"\"></p>

<p>あとは通常通り c をタイプしてコミットに進むだけです。<br>
もちろん他にファイルや部分を同時にコミットすることも可能です。</p>

<p>部分のみコミットするとこのようにちゃんと部分がコミットされています。</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/n/nishikawasasaki/20121218/20121218032428.png\" alt=\"\"></p>

<p>便利ですね!!</p>

<p>ちなみに同じ要領で、リージョン選択後に<br>
ステージの s ではなく v をタイプすることで部分的にリポジトリの状態に戻す(revert)することも出来ます!</p>

<h3>おわりに</h3>

<p>magit は Emacs からとっても便利に git を操作できる素晴しい道具です。<br>
git をコマンド操作するよりも効率良く操作できると楽しいですね!!</p>

<p>最後に、 magit の Diff の色合いが気に入らない人用の情報です。<br>
色は下記のように変更可能ですのでいろいろ試してみてください。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>;; 色変更
(set-face-foreground &#39;magit-diff-add &quot;#b9ca4a&quot;) ; 追加した部分を緑に
(set-face-foreground &#39;magit-diff-del &quot;#d54e53&quot;)  ; 削除した 部分を赤に
(set-face-background &#39;magit-item-highlight &quot;#000000&quot;) ; 選択項目ハイライトがうっとうしいので背景色と同化
</pre></div></div>
<p>それではそれでは〜</p>
") (published nil "2012-12-20T00:43:30Z") (updated nil "2012-12-20T00:50:44Z") (author nil (name nil "nishikawasasaki")))) ("突然の死に備えて sudden-death.el を導入しよう" "<h1>はじめに</h1>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人人人人人人人人人人人人人人人人人＿
＞　全国 1000 万人の Emacs ユーザのみなさんこんにちは　＜
￣ＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>
<p>さて、業務内外を問わず、ふいに「<a href=\"http://dic.nicovideo.jp/a/%E7%AA%81%E7%84%B6%E3%81%AE%E6%AD%BB\" title=\"突然の死とは (トツゼンノシとは) [単語記事] - ニコニコ大百科\">突然の死</a>」ネタを貼りたくなる場面というのは少なくないと思います。<br>
<a href=\"http://starwing.net/suddenly_death.html\" title=\"突然の死ジェネレータ\">突然の死ジェネレータ</a>というものもありますが、やはり Emacs 内で完結させたいところです。</p>
<p>そういった需要にお答えするために、拙作の elisp を紹介させていただきます。</p>
<h1>sudden-death.el</h1>
<h2>インストール</h2>
<p>auto-install が導入済みであれば以下のコマンドを実行していただければ簡単にインストール出来ます。</p>
<p><code>M-x auto-install-from-url https://raw.github.com/yewton/sudden-death.el/master/sudden-death.el</code></p>
<h2>使い方</h2>
<p>「突然の死」風にしたい部分をリージョンに指定し、<code>M-x sudden-death</code>を実行するだけです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人＿
＞　突然の死　＜
￣ＹＹＹＹＹＹ￣
</pre></div></div>
<p>生成された文字列全体に対してさらに <code>M-x sudden-death</code> を実行すると以下のようになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人＿
＞　＿人人人人人人＿　＜
＞　＞　突然の死　＜　＜
＞　￣ＹＹＹＹＹＹ￣　＜
￣ＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>
<p>このように好きなだけ強調することができます。</p>
<h2>リポジトリ</h2>
<p>GitHub においてあります。</p>
<p><a href=\"https://github.com/yewton/sudden-death.el\">https://github.com/yewton/sudden-death.el</a></p>
<h1>おわりに</h1>
<p>前回に引き続き雑なネタで申し訳ありませんでした。</p>
<p>ちなみに、<a href=\"http://marmalade-repo.org/\" title=\"Marmalade: Spreadable Elisp\">Marmalade: Spreadable Elisp</a>に登録して、<br>
package-install でインストールできるようにしようかと思っていたのですが、マルチバイト文字は文字化けしてしまいました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人＿
＞　明日だれか書いて　＜
￣ＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>" "http://qiita.com/items/b10d5659cb1f1a168758" (20687 13780) old 5 nil nil ((id nil "tag:qiita.com,2005:Item/11981") (published nil "2012-12-17T22:53:17+09:00") (updated nil "2012-12-18T00:10:12+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b10d5659cb1f1a168758"))) (url nil "http://qiita.com/items/b10d5659cb1f1a168758") (title nil "突然の死に備えて sudden-death.el を導入しよう") (content ((type . "html")) "<h1>はじめに</h1>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人人人人人人人人人人人人人人人人人＿
＞　全国 1000 万人の Emacs ユーザのみなさんこんにちは　＜
￣ＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>
<p>さて、業務内外を問わず、ふいに「<a href=\"http://dic.nicovideo.jp/a/%E7%AA%81%E7%84%B6%E3%81%AE%E6%AD%BB\" title=\"突然の死とは (トツゼンノシとは) [単語記事] - ニコニコ大百科\">突然の死</a>」ネタを貼りたくなる場面というのは少なくないと思います。<br>
<a href=\"http://starwing.net/suddenly_death.html\" title=\"突然の死ジェネレータ\">突然の死ジェネレータ</a>というものもありますが、やはり Emacs 内で完結させたいところです。</p>

<p>そういった需要にお答えするために、拙作の elisp を紹介させていただきます。</p>

<h1>sudden-death.el</h1>

<h2>インストール</h2>

<p>auto-install が導入済みであれば以下のコマンドを実行していただければ簡単にインストール出来ます。</p>

<p><code>M-x auto-install-from-url https://raw.github.com/yewton/sudden-death.el/master/sudden-death.el</code></p>

<h2>使い方</h2>

<p>「突然の死」風にしたい部分をリージョンに指定し、<code>M-x sudden-death</code>を実行するだけです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人＿
＞　突然の死　＜
￣ＹＹＹＹＹＹ￣
</pre></div></div>
<p>生成された文字列全体に対してさらに <code>M-x sudden-death</code> を実行すると以下のようになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人＿
＞　＿人人人人人人＿　＜
＞　＞　突然の死　＜　＜
＞　￣ＹＹＹＹＹＹ￣　＜
￣ＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>
<p>このように好きなだけ強調することができます。</p>

<h2>リポジトリ</h2>

<p>GitHub においてあります。</p>

<p><a href=\"https://github.com/yewton/sudden-death.el\">https://github.com/yewton/sudden-death.el</a></p>

<h1>おわりに</h1>

<p>前回に引き続き雑なネタで申し訳ありませんでした。</p>

<p>ちなみに、<a href=\"http://marmalade-repo.org/\" title=\"Marmalade: Spreadable Elisp\">Marmalade: Spreadable Elisp</a>に登録して、<br>
package-install でインストールできるようにしようかと思っていたのですが、マルチバイト文字は文字化けしてしまいました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>＿人人人人人人人人人人＿
＞　明日だれか書いて　＜
￣ＹＹＹＹＹＹＹＹＹＹ￣
</pre></div></div>") (published nil "2012-12-17T22:53:17Z") (updated nil "2012-12-18T00:10:12Z") (author nil (name nil "yewton@github")))) ("領域選択していないときのC-w/M-wに別の動作を割り当てる" "<p>この記事はEmacs Advent Calendar17日目です。</p>
<p>Qiitaに投稿するのもAdvent Calendarに参加するのも初めてなので少しどきどきしますね。</p>
<p>さて、キーバインドを割り当てて、即座にさまざまな機能にアクセスできるのがEmacsの魅力の一つだと思います。</p>
<p>そのとき、キーを押す回数はできるだけ少ないほうがいいですよね。</p>
<p>もっと言うと、Ctrl+一文字とかAlt+一文字だとうれしいですよね。</p>
<p>だけど、Ctrl/Alt+一文字だと使えるのがだいたい80前後くらいです。</p>
<p>&quot;C-aはあれに使ってるしC-bはあれだし...&quot;って考えていくと、実はそんなにあまっているキーってないです。</p>
<p>ということで、僕がしているちょっとした工夫を紹介させていただきたいと思います。</p>
<p>着目するのはC-wとM-wで、これらはデフォルトで切り取り(kill-region)とコピー(kill-ring-save)に割り当てられています。</p>
<p>切り取りもコピーも領域が選択されていないと意味がないので、領域が選択されていないときのC-w/M-wに別の機能を割り当てようというのが今回の趣旨です。</p>
<p>ということで、以下です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">kill-region-or-delete-window</span> <span class=\"p\">(</span><span class=\"nf\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">mark</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">interactive-p</span><span class=\"p\">)</span> <span class=\"nv\">transient-mark-mode</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">mark-active</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">delete-window</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">kill-region</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;C-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'kill-region-or-delete-window</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">kill-ring-save-or-focus-window</span> <span class=\"p\">(</span><span class=\"nf\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">mark</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">interactive-p</span><span class=\"p\">)</span> <span class=\"nv\">transient-mark-mode</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">mark-active</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">delete-other-windows</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">kill-ring-save</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;M-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'kill-ring-save-or-focus-window</span><span class=\"p\">)</span>
</pre></div></div>
<p>僕は、&quot;現在選択されているウィンドウを削除する&quot;を領域非選択時のC-wに、<br>
&quot;現在選択されているウィンドウ以外のウィンドウを削除する&quot;を領域非選択時のM-xに割り当てています。</p>
<p>僕はこれで、1ストロークで実行できる機能がすこしだけ増えて少しだけハッピーになれました。</p>" "http://qiita.com/items/7e51af7cd5eb21d6cc84" (20687 5741) old 6 nil nil ((id nil "tag:qiita.com,2005:Item/11978") (published nil "2012-12-17T21:56:13+09:00") (updated nil "2012-12-17T21:56:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7e51af7cd5eb21d6cc84"))) (url nil "http://qiita.com/items/7e51af7cd5eb21d6cc84") (title nil "領域選択していないときのC-w/M-wに別の動作を割り当てる") (content ((type . "html")) "<p>この記事はEmacs Advent Calendar17日目です。</p>

<p>Qiitaに投稿するのもAdvent Calendarに参加するのも初めてなので少しどきどきしますね。</p>

<p>さて、キーバインドを割り当てて、即座にさまざまな機能にアクセスできるのがEmacsの魅力の一つだと思います。</p>

<p>そのとき、キーを押す回数はできるだけ少ないほうがいいですよね。</p>

<p>もっと言うと、Ctrl+一文字とかAlt+一文字だとうれしいですよね。</p>

<p>だけど、Ctrl/Alt+一文字だと使えるのがだいたい80前後くらいです。</p>

<p>&quot;C-aはあれに使ってるしC-bはあれだし...&quot;って考えていくと、実はそんなにあまっているキーってないです。</p>

<p>ということで、僕がしているちょっとした工夫を紹介させていただきたいと思います。</p>

<p>着目するのはC-wとM-wで、これらはデフォルトで切り取り(kill-region)とコピー(kill-ring-save)に割り当てられています。</p>

<p>切り取りもコピーも領域が選択されていないと意味がないので、領域が選択されていないときのC-w/M-wに別の機能を割り当てようというのが今回の趣旨です。</p>

<p>ということで、以下です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">kill-region-or-delete-window</span> <span class=\"p\">(</span><span class=\"nf\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">mark</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">interactive-p</span><span class=\"p\">)</span> <span class=\"nv\">transient-mark-mode</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">mark-active</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nf\">delete-window</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">kill-region</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;C-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;kill-region-or-delete-window</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">kill-ring-save-or-focus-window</span> <span class=\"p\">(</span><span class=\"nf\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">mark</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">interactive-p</span><span class=\"p\">)</span> <span class=\"nv\">transient-mark-mode</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">mark-active</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nf\">delete-other-windows</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">kill-ring-save</span> <span class=\"nv\">beg</span> <span class=\"nv\">end</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;M-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;kill-ring-save-or-focus-window</span><span class=\"p\">)</span>
</pre></div></div>
<p>僕は、&quot;現在選択されているウィンドウを削除する&quot;を領域非選択時のC-wに、<br>
&quot;現在選択されているウィンドウ以外のウィンドウを削除する&quot;を領域非選択時のM-xに割り当てています。</p>

<p>僕はこれで、1ストロークで実行できる機能がすこしだけ増えて少しだけハッピーになれました。</p>
") (published nil "2012-12-17T21:56:13Z") (updated nil "2012-12-17T21:56:13Z") (author nil (name nil "t_shuuhei")))) ("手元の init.el を淡々と紹介する" "<p>さて、今回は手元の init.el のネタを淡々と紹介してみます。<br>
みんな知っているよねというネタばかりだとは思いますが、逆に珍しかったりするものもあるかもしれないので、すこしでもお役に立てれば幸いです。</p>
<p><a href=\"http://d.hatena.ne.jp/kiwanami/20121216/1355706256\">http://d.hatena.ne.jp/kiwanami/20121216/1355706256</a></p>" "http://qiita.com/items/65db8afe0315c2d45ce2" (20686 28679) old 7 nil nil ((id nil "tag:qiita.com,2005:Item/11950") (published nil "2012-12-17T10:06:15+09:00") (updated nil "2012-12-17T10:06:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/65db8afe0315c2d45ce2"))) (url nil "http://qiita.com/items/65db8afe0315c2d45ce2") (title nil "手元の init.el を淡々と紹介する") (content ((type . "html")) "<p>さて、今回は手元の init.el のネタを淡々と紹介してみます。<br>
みんな知っているよねというネタばかりだとは思いますが、逆に珍しかったりするものもあるかもしれないので、すこしでもお役に立てれば幸いです。</p>

<p><a href=\"http://d.hatena.ne.jp/kiwanami/20121216/1355706256\">http://d.hatena.ne.jp/kiwanami/20121216/1355706256</a></p>
") (published nil "2012-12-17T10:06:15Z") (updated nil "2012-12-17T10:06:15Z") (author nil (name nil "kiwanami")))) ("Emacsでポモドーロテクニック" "<p>皆さん時間管理していますか。僕は正直いうとちゃんとできていません。<br>
ちゃんとやらないとなと思って、いくつかその手の本を探していると、<br>
ポモドーロテクニックというものがあることを知りました。大まかに<br>
いうと 25分区切りで作業を進めていくというで、これならできるかなと<br>
思って実践しています(現状あまりちゃんとできていませんが・・・)</p>
<p>作業メモは org-modeにしているので、どうせなら時間管理も Emacsで<br>
したいよね、ってなりますよね。Emacsの拡張もいくつかあったのですが、<br>
Emacs Lispでそういうのを作る場合どういうことをすればいいのかを<br>
知りたかったので自作しました。そしてできあがった pomodoro.elについて<br>
紹介します。</p>
<p><a href=\"http://d.hatena.ne.jp/syohex/20121215/1355579575\">http://d.hatena.ne.jp/syohex/20121215/1355579575</a></p>" "http://qiita.com/items/db61d0e08c344afec3fd" (20684 33555) old 8 nil nil ((id nil "tag:qiita.com,2005:Item/11908") (published nil "2012-12-15T23:02:59+09:00") (updated nil "2012-12-15T23:02:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/db61d0e08c344afec3fd"))) (url nil "http://qiita.com/items/db61d0e08c344afec3fd") (title nil "Emacsでポモドーロテクニック") (content ((type . "html")) "<p>皆さん時間管理していますか。僕は正直いうとちゃんとできていません。<br>
ちゃんとやらないとなと思って、いくつかその手の本を探していると、<br>
ポモドーロテクニックというものがあることを知りました。大まかに<br>
いうと 25分区切りで作業を進めていくというで、これならできるかなと<br>
思って実践しています(現状あまりちゃんとできていませんが・・・)</p>

<p>作業メモは org-modeにしているので、どうせなら時間管理も Emacsで<br>
したいよね、ってなりますよね。Emacsの拡張もいくつかあったのですが、<br>
Emacs Lispでそういうのを作る場合どういうことをすればいいのかを<br>
知りたかったので自作しました。そしてできあがった pomodoro.elについて<br>
紹介します。</p>

<p><a href=\"http://d.hatena.ne.jp/syohex/20121215/1355579575\">http://d.hatena.ne.jp/syohex/20121215/1355579575</a></p>
") (published nil "2012-12-15T23:02:59Z") (updated nil "2012-12-15T23:02:59Z") (author nil (name nil "syohex@github")))) ("Emacs on Windows な環境で el-get する" "<p>本体はこっちです。<br>
Emacs on Windows な環境で el-get する - あじーん-0.0.2-SNAPSHOT<br>
<a href=\"http://nishikawasasaki.hatenablog.com/entry/2012/12/14/080727\">http://nishikawasasaki.hatenablog.com/entry/2012/12/14/080727</a></p>
<h3>導入</h3>
<p>Emacs の elisp 管理に el-get はいまやかかせないものになっています。</p>
<p>が、しかし git に依存しているため、<br>
windows では工夫してやる必要がありました。<br>
msysgit(msys) は大きな助けになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;Git for Windows&quot; - http://msysgit.github.com/
</pre></div></div>
<p>msys の環境設定を引き継いだまま Emacs を起動するには<br>
msys のプロンプト上から</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>runemacs
</pre></div></div>
<p>を実行するだけですので簡単です。</p>
<p>したがってこれで終わり……とはいかないのが windows の悩ましいところですね。</p>
<h3>問題</h3>
<p>この状態で M-! で git が使えるにも関わらず、<br>
el-get を使おうとするとエラーが発生してしまい<br>
el-get 自体の clone とインストールに失敗してしまいます。</p>
<p>この問題は msys に含まれる bin/install-info.exe が影響しています。<br>
その顛末はこれを書いている今もここでやりとりがされています。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;install-info strangeness... · Issue #861 · dimitri/el-get&quot; - https://github.com/dimitri/el-get/issues/861
</pre></div></div>
<p>問題としては、cygwin や msys が windows ネイティブの install-info.exe と<br>
混ざって呼び出してしまうことのようですが、<br>
てっとり早く回避方法を試しましょう。</p>
<h3>回避方法</h3>
<h4>その1</h4>
<p>msys の install-info.exe をリネームして使わないようにします。<br>
強引ですが手間もかからず簡単です。<br>
ただし今のところリネームによる問題は発生していませんが、<br>
もしかすると Emacs 以外で問題が発生するかもしれません。</p>
<h4>その2</h4>
<p>el-get を手動で clone します。<br>
el-get のインストールスクリプトは単純に el-get 管理下のディレクトリに<br>
まず el-get 自身を clone します。<br>
ですのでこれを手で行なってしまいます。<br>
msys のプロンプトで ~/.emacs.d/el-get などの環境に合わせた el-get の管理ディレクトリに移動して<br>
手動で clone しましょう。</p>
<p>その2の方法で入れた el-get を el-get が誤作動で吹き飛ばした経験があるので、<br>
現在は1の方法で運用しています。</p>
<h3>おまけ</h3>
<p>yasnippet は github 上で el-get でのインストールが紹介されています。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;capitaomorte/yasnippet · GitHub&quot; - https://github.com/capitaomorte/yasnippet
</pre></div></div>
<p>しかし windows 環境では使用不可能なパスの形式で<br>
一部の snippets が登録されています。<br>
これらの snippets は git submodule で管理されているのですが、<br>
公式で紹介されている el-get からのインストール方法を試すと git submodule も実行されてしまいます。<br>
git submodule が実行されたタイミングで OS がエラーを出すために、<br>
el-get が動作を停止した上 GUI では削除不可能なファイルが出来てしまいます。</p>
<p>この問題を回避するためには el-get に追加されたオプションを有効にしてインストールを行います。</p>
<p>通常、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>      (:name yasnippet
:website &quot;https://github.com/capitaomorte/yasnippet.git&quot;
:description &quot;YASnippet is a template system for Emacs.&quot;
:type github
:pkgname &quot;capitaomorte/yasnippet&quot;
:features &quot;yasnippet&quot;
:compile &quot;yasnippet.el&quot;
</pre></div></div>
<p>のように記述する部分に :submodule nil を追加し、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>      (:name yasnippet
:website &quot;https://github.com/capitaomorte/yasnippet.git&quot;
:description &quot;YASnippet is a template system for Emacs.&quot;
:type github
:pkgname &quot;capitaomorte/yasnippet&quot;
:features &quot;yasnippet&quot;
:compile &quot;yasnippet.el&quot;
:submodule nil
</pre></div></div>
<p>というように変更します。<br>
これで git submodule は実行されないため問題が回避出来ます。<br>
(当然本来であればインストールされる snippets がインストールされません。)<br>
あくまで回避策、ですね。</p>
<h3>終わりに</h3>
<p>windows 環境は地雷がいっぱいなので、<br>
VM に Linux を入れてそこで Emacs を使うのが一番楽だなと感じる今日このごろです。</p>" "http://qiita.com/items/6ada48b513a6a5fd785a" (20682 24672) old 9 nil nil ((id nil "tag:qiita.com,2005:Item/11824") (published nil "2012-12-14T08:10:24+09:00") (updated nil "2012-12-14T08:10:24+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/6ada48b513a6a5fd785a"))) (url nil "http://qiita.com/items/6ada48b513a6a5fd785a") (title nil "Emacs on Windows な環境で el-get する") (content ((type . "html")) "<p>本体はこっちです。<br>
Emacs on Windows な環境で el-get する - あじーん-0.0.2-SNAPSHOT<br>
<a href=\"http://nishikawasasaki.hatenablog.com/entry/2012/12/14/080727\">http://nishikawasasaki.hatenablog.com/entry/2012/12/14/080727</a></p>

<h3>導入</h3>

<p>Emacs の elisp 管理に el-get はいまやかかせないものになっています。</p>

<p>が、しかし git に依存しているため、<br>
windows では工夫してやる必要がありました。<br>
msysgit(msys) は大きな助けになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;Git for Windows&quot; - http://msysgit.github.com/
</pre></div></div>
<p>msys の環境設定を引き継いだまま Emacs を起動するには<br>
msys のプロンプト上から</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>runemacs
</pre></div></div>
<p>を実行するだけですので簡単です。</p>

<p>したがってこれで終わり……とはいかないのが windows の悩ましいところですね。</p>

<h3>問題</h3>

<p>この状態で M-! で git が使えるにも関わらず、<br>
el-get を使おうとするとエラーが発生してしまい<br>
el-get 自体の clone とインストールに失敗してしまいます。</p>

<p>この問題は msys に含まれる bin/install-info.exe が影響しています。<br>
その顛末はこれを書いている今もここでやりとりがされています。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;install-info strangeness... · Issue #861 · dimitri/el-get&quot; - https://github.com/dimitri/el-get/issues/861
</pre></div></div>
<p>問題としては、cygwin や msys が windows ネイティブの install-info.exe と<br>
混ざって呼び出してしまうことのようですが、<br>
てっとり早く回避方法を試しましょう。</p>

<h3>回避方法</h3>

<h4>その1</h4>

<p>msys の install-info.exe をリネームして使わないようにします。<br>
強引ですが手間もかからず簡単です。<br>
ただし今のところリネームによる問題は発生していませんが、<br>
もしかすると Emacs 以外で問題が発生するかもしれません。</p>

<h4>その2</h4>

<p>el-get を手動で clone します。<br>
el-get のインストールスクリプトは単純に el-get 管理下のディレクトリに<br>
まず el-get 自身を clone します。<br>
ですのでこれを手で行なってしまいます。<br>
msys のプロンプトで ~/.emacs.d/el-get などの環境に合わせた el-get の管理ディレクトリに移動して<br>
手動で clone しましょう。</p>

<p>その2の方法で入れた el-get を el-get が誤作動で吹き飛ばした経験があるので、<br>
現在は1の方法で運用しています。</p>

<h3>おまけ</h3>

<p>yasnippet は github 上で el-get でのインストールが紹介されています。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&quot;capitaomorte/yasnippet · GitHub&quot; - https://github.com/capitaomorte/yasnippet
</pre></div></div>
<p>しかし windows 環境では使用不可能なパスの形式で<br>
一部の snippets が登録されています。<br>
これらの snippets は git submodule で管理されているのですが、<br>
公式で紹介されている el-get からのインストール方法を試すと git submodule も実行されてしまいます。<br>
git submodule が実行されたタイミングで OS がエラーを出すために、<br>
el-get が動作を停止した上 GUI では削除不可能なファイルが出来てしまいます。</p>

<p>この問題を回避するためには el-get に追加されたオプションを有効にしてインストールを行います。</p>

<p>通常、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>      (:name yasnippet
             :website &quot;https://github.com/capitaomorte/yasnippet.git&quot;
             :description &quot;YASnippet is a template system for Emacs.&quot;
             :type github
             :pkgname &quot;capitaomorte/yasnippet&quot;
             :features &quot;yasnippet&quot;
             :compile &quot;yasnippet.el&quot;
</pre></div></div>
<p>のように記述する部分に :submodule nil を追加し、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>      (:name yasnippet
             :website &quot;https://github.com/capitaomorte/yasnippet.git&quot;
             :description &quot;YASnippet is a template system for Emacs.&quot;
             :type github
             :pkgname &quot;capitaomorte/yasnippet&quot;
             :features &quot;yasnippet&quot;
             :compile &quot;yasnippet.el&quot;
             :submodule nil
</pre></div></div>
<p>というように変更します。<br>
これで git submodule は実行されないため問題が回避出来ます。<br>
(当然本来であればインストールされる snippets がインストールされません。)<br>
あくまで回避策、ですね。</p>

<h3>終わりに</h3>

<p>windows 環境は地雷がいっぱいなので、<br>
VM に Linux を入れてそこで Emacs を使うのが一番楽だなと感じる今日このごろです。</p>
") (published nil "2012-12-14T08:10:24Z") (updated nil "2012-12-14T08:10:24Z") (author nil (name nil "nishikawasasaki")))) ("人類滅亡までのカウントダウンを Emacs に表示する" "<h1>はじめに</h1>
<p>全国 1000 万人の emacs フリークの皆さん、こんにちは。<br>
人類滅亡が目の前に迫った昨今いかがお過ごしでしょうか。</p>
<p>さて、<a href=\"http://ja.wikipedia.org/wiki/2012%E5%B9%B4%E4%BA%BA%E9%A1%9E%E6%BB%85%E4%BA%A1%E8%AA%AC\" title=\"2012年人類滅亡説 - Wikipedia\">2012年人類滅亡説 - Wikipedia</a>によりますと、<br>
人類は今年の 12/21 - 23 頃に滅びるそうです。<br>
いったい残す所あと何日あるんでしょうね。見当もつきません。<br>
elisp で計算しましょう。</p>
<h1>そもそも日時・時刻の表現ってどうやるの</h1>
<p>time 構造体ともいうべきもので表現します。<br>
以下のようなリストです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">HIGH</span> <span class=\"nv\">LOW</span> <span class=\"nv\">MICROSECOND</span><span class=\"p\">)</span>
</pre></div></div>
<p>これは何かというと、UNIX タイムです。<br>
HIGH は秒数の上位 16bit の、LOW は下位 16bit を表します。<br>
MICROSECOND はそのままです。システムによっては 0 固定になります。<br>
ゆえに、MICROSECOND は省略されることもあります。</p>
<p>具体的な値を見るには以下の関数を実行してみるとよいです。<br>
ちなみに、適当なバッファに elisp を書いて、<br>
その後ろで C-u C-x で実行結果がバッファに書かれます。<br>
便利ですよ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20680 38417 442000)</span>
</pre></div></div>
<p>この他に、もう少し人が扱いやすい表現方法もあります。<br>
以下のようなリストです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">SEC</span> <span class=\"nv\">MIN</span> <span class=\"nv\">HOUR</span> <span class=\"nv\">DAY</span> <span class=\"nv\">MON</span> <span class=\"nv\">YEAR</span> <span class=\"nv\">DOW</span> <span class=\"nv\">DST</span> <span class=\"nv\">TZ</span><span class=\"p\">)</span>
</pre></div></div>
<p>これはわかりやすいですね。<br>
基本的に書いてある通りそのまんまです。<br>
DOW は Day of Week の略で、曜日を表す 0-6 の整数です。<br>
DST サマータイムに t、そうでない場合は nil となります。日本だとあんま関係無いですね。<br>
TZ はグリニッジ標準時からのオフセット秒数を表す整数です。</p>
<p>具体的な値を見るには以下の関数を実行してみてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">decode-time</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (46 37 23 12 12 2012 3 nil 32400)</span>
<span class=\"c1\">;; ちなみに 324000 は</span>
<span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"mi\">32400</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; 9</span>
<span class=\"c1\">;; +9 時間ってことですね</span>
</pre></div></div>
<p>ちなみに decode-time は (HIGH LOW MICROSECOND) を<br>
(SEC MIN HOUR DAY MON YEAR DOW DST TZ) 形式のリストに変換する関数で、<br>
引数を省略した場合は (decode-time (current-time)) と同義になります。</p>
<p>懸命な読者の皆様であれば decode-time があるなら encode-time もあるだろうと察しが付くと思いますが、そのとおり。<br>
decode-time とは逆で、SEC MIN HOUR DAY MON YEAR DOW DST TZ を引数に取って (HIGH LOW MICROSECOND) 形式に変換します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">encode-time</span> <span class=\"mi\">46</span> <span class=\"mi\">37</span> <span class=\"mi\">23</span> <span class=\"mi\">12</span> <span class=\"mi\">12</span> <span class=\"mi\">2012</span> <span class=\"mi\">3</span> <span class=\"no\">nil</span> <span class=\"mi\">32400</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20680 38586)</span>
<span class=\"c1\">;; もちろん decode すると、</span>
<span class=\"p\">(</span><span class=\"nv\">decode-time</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">20680</span> <span class=\"mi\">38586</span><span class=\"p\">))</span> <span class=\"c1\">; =&gt; (46 37 23 12 12 2012 3 nil 32400)</span>
<span class=\"c1\">;; となります</span>
</pre></div></div>
<p>時刻を扱う関数はたいてい、このようなリストを引数にとったり、返したりします。<br>
手で書くのはしんどいので、上に上げたような関数の他にも幾つか便利な関数が定義されています。</p>
<h2>parse-time-string</h2>
<p>文字列をパースして decode-time 形式にしてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">parse-time-string</span> <span class=\"s\">&quot;2012-12-21&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (nil nil nil 21 12 2012 nil nil nil)</span>
<span class=\"p\">(</span><span class=\"nv\">parse-time-string</span> <span class=\"s\">&quot;2012-12-21 23:59:59&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (59 59 23 21 12 2012 nil nil nil)</span>
</pre></div></div>
<p>どんなフォーマットをパース出来るかはソース嫁状態なのですが、<br>
とりあえず MySQL DATETIME 的なのは解釈できるようです。</p>
<h2>date-to-time</h2>
<p>文字列をパースして time 形式にしてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">date-to-time</span> <span class=\"s\">&quot;2012-12-21 00:00:00&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20691 10224)</span>
</pre></div></div>
<p>これもどんなフォーマットをパース出来るかはソース嫁です。<br>
とりあえず時刻は省略出来なさそうです。</p>
<h1>日時・時刻を見やすく整形</h1>
<p>計算するのに便利でもこんな内部表現は人が読むに絶えません。<br>
見やすく整形するには以下の関数を使います。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"c1\">;; time 形式を引数に取ります</span>
<span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span><span class=\"c1\">; =&gt; &quot;2012-12-13 00:11:48&quot;</span>
<span class=\"c1\">;; decode-time 形式は encode してから渡します</span>
<span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nb\">apply</span> <span class=\"nf\">#'</span><span class=\"nv\">encode-time</span> <span class=\"p\">(</span><span class=\"nv\">decode-time</span><span class=\"p\">)))</span><span class=\"c1\">; =&gt; &quot;2012-12-13 00:13:11&quot;</span>
</pre></div></div>
<p>こちらはどんな書式文字列が使えるか、ヘルプに詳しく載っています。<br>
describe-function しましょう。</p>
<h1>時刻を秒に換算</h1>
<p>time 形式よりも単純に秒数になっていたほうがなにかと計算しやすいです。<br>
time を秒に変換するには以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">float-time</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span> <span class=\"c1\">; =&gt; 1355332701.567</span>
</pre></div></div>
<h1>日付・時刻計算</h1>
<h2>ある時刻から n 日後の時刻を取得</h2>
<p>たとえば、今日から 10 日後の日付を取得したいとしましょう。<br>
以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d&quot;</span> <span class=\"p\">(</span><span class=\"nv\">time-add</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">days-to-time</span> <span class=\"mi\">10</span><span class=\"p\">)))</span> <span class=\"c1\">; =&gt; &quot;2012-12-23&quot;</span>
</pre></div></div>
<p>time-add と days-to-time を組み合わせると可能です。</p>
<p>time-add はその名の通り、time + time を計算します。<br>
time-subtract という time - time を計算する関数もあります。</p>
<p>days-to-time もその名の通り、日数を time 形式(要は秒数換算)に変換して返します。</p>
<h2>ある日付からある日付の間に何日あるかを取得</h2>
<p>たとえば、1999年7月、空から恐怖の大王が降りてきてたらしい日から今日まで何日経過しているか数えてみましょう。<br>
以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">days-between</span> <span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span> <span class=\"s\">&quot;1999-07-01 00:00:00&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; 4914</span>
</pre></div></div>
<p>4914 日も生き延びることができていることに感謝しなければなりませんね。<br>
でももうすぐ人類滅亡です。</p>
<h2>ある時刻になったらある関数を実行する</h2>
<p>ちょっと日付計算とは離れますが、タイマー実行のようなことができます。<br>
たとえば、1 週間の間、毎日 15 時にメッセージを表示したい場合、以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">oyatsu-timer</span>
<span class=\"p\">(</span><span class=\"nv\">run-at-time</span> <span class=\"s\">&quot;15:00pm&quot;</span> <span class=\"mi\">7</span> <span class=\"nf\">#'</span><span class=\"nv\">message</span> <span class=\"s\">&quot;おやつの時間です&quot;</span><span class=\"p\">))</span>
</pre></div></div>
<p>これを実行すると、午後 15 時におやつの時間をミニバッファで 7 日間知らせてくれます。</p>
<p>run-at-time はタイマーオブジェクトを返します。<br>
これは cancel-timer の引数に渡すことで、タイマー実行をキャンセルすることができます。<br>
逆に言うと、run-at-time の返り値を保存しておかないとキャンセルできません<br>
(cancel-function-timers で、指定した関数を実行しているタイマーをすべて止める、ということは出来ます)。</p>
<p>run-at-time の第二引数には、以下のものが渡せます。</p>
<ol>
<li>&quot;11:23pm&quot; のような時刻絶対指定</li>
<li>&quot;2 hours 35 minutes&quot; のような時刻相対指定</li>
<li>現在時刻からの秒数</li>
<li>time 形式</li>
<li>nil で即時実行</li>
<li>t にすると、第三引数に与えた秒数ごとに無限に繰り返し</li>
</ol>
<p>第三引数はタイマーの繰り返し回数を指定しますが、<br>
第二引数に t が指定された場合、実行間隔秒数を表します。</p>
<p>そして、第四引数に実行したい関数、以降にはその関数に渡したい引数を指定します。</p>
<h1>人類滅亡へのカウントダウン</h1>
<p>それでは人類滅亡までの短い時間を有意義に過ごすため、<br>
以下のような関数を定義して実行しましょう。<br>
下記を適当なバッファにコピペして評価しましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">metsubo-countdown-timer</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">start-metsubo-countdown</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">metsubo-countdown-timer</span>
<span class=\"p\">(</span><span class=\"nv\">run-at-time</span>
<span class=\"no\">t</span> <span class=\"mi\">1</span>
<span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">parse-time-zoneinfo</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"s\">&quot;jst&quot;</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">*</span> <span class=\"mi\">+9</span> <span class=\"mi\">3600</span><span class=\"p\">))</span> <span class=\"nv\">parse-time-zoneinfo</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">judgement-time</span> <span class=\"s\">&quot;2012-12-21 00:00:00 JST&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">time-remain</span>
<span class=\"p\">(</span><span class=\"nv\">float-time</span>
<span class=\"p\">(</span><span class=\"nv\">time-subtract</span> <span class=\"p\">(</span><span class=\"nv\">date-to-time</span> <span class=\"nv\">judgement-time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">seconds-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">minutes-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"mi\">60</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">hours-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"mi\">24</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">days-remain</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">24</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;人類滅亡まであと %d 日 %d 時間 %d 分 %d 秒です。&quot;</span>
<span class=\"nv\">days-remain</span> <span class=\"nv\">hours-remain</span> <span class=\"nv\">minutes-remain</span> <span class=\"nv\">seconds-remain</span><span class=\"p\">))))))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">stop-metsubo-countdown</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">metsubo-countdown-timer</span>
<span class=\"p\">(</span><span class=\"nv\">cancel-timer</span> <span class=\"nv\">metsubo-countdown-timer</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">start-metsubo-countdown</span><span class=\"p\">)</span>
</pre></div></div>
<h1>おわりに</h1>
<p>雑なネタで申し訳ありませんでした。</p>" "http://qiita.com/items/5e134065a9d4478b27d2" (20680 49586) old 10 nil nil ((id nil "tag:qiita.com,2005:Item/11785") (published nil "2012-12-13T02:41:06+09:00") (updated nil "2012-12-13T02:41:06+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5e134065a9d4478b27d2"))) (url nil "http://qiita.com/items/5e134065a9d4478b27d2") (title nil "人類滅亡までのカウントダウンを Emacs に表示する") (content ((type . "html")) "<h1>はじめに</h1>

<p>全国 1000 万人の emacs フリークの皆さん、こんにちは。<br>
人類滅亡が目の前に迫った昨今いかがお過ごしでしょうか。</p>

<p>さて、<a href=\"http://ja.wikipedia.org/wiki/2012%E5%B9%B4%E4%BA%BA%E9%A1%9E%E6%BB%85%E4%BA%A1%E8%AA%AC\" title=\"2012年人類滅亡説 - Wikipedia\">2012年人類滅亡説 - Wikipedia</a>によりますと、<br>
人類は今年の 12/21 - 23 頃に滅びるそうです。<br>
いったい残す所あと何日あるんでしょうね。見当もつきません。<br>
elisp で計算しましょう。</p>

<h1>そもそも日時・時刻の表現ってどうやるの</h1>

<p>time 構造体ともいうべきもので表現します。<br>
以下のようなリストです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">HIGH</span> <span class=\"nv\">LOW</span> <span class=\"nv\">MICROSECOND</span><span class=\"p\">)</span>
</pre></div></div>
<p>これは何かというと、UNIX タイムです。<br>
HIGH は秒数の上位 16bit の、LOW は下位 16bit を表します。<br>
MICROSECOND はそのままです。システムによっては 0 固定になります。<br>
ゆえに、MICROSECOND は省略されることもあります。</p>

<p>具体的な値を見るには以下の関数を実行してみるとよいです。<br>
ちなみに、適当なバッファに elisp を書いて、<br>
その後ろで C-u C-x で実行結果がバッファに書かれます。<br>
便利ですよ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20680 38417 442000)</span>
</pre></div></div>
<p>この他に、もう少し人が扱いやすい表現方法もあります。<br>
以下のようなリストです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">SEC</span> <span class=\"nv\">MIN</span> <span class=\"nv\">HOUR</span> <span class=\"nv\">DAY</span> <span class=\"nv\">MON</span> <span class=\"nv\">YEAR</span> <span class=\"nv\">DOW</span> <span class=\"nv\">DST</span> <span class=\"nv\">TZ</span><span class=\"p\">)</span>
</pre></div></div>
<p>これはわかりやすいですね。<br>
基本的に書いてある通りそのまんまです。<br>
DOW は Day of Week の略で、曜日を表す 0-6 の整数です。<br>
DST サマータイムに t、そうでない場合は nil となります。日本だとあんま関係無いですね。<br>
TZ はグリニッジ標準時からのオフセット秒数を表す整数です。</p>

<p>具体的な値を見るには以下の関数を実行してみてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">decode-time</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (46 37 23 12 12 2012 3 nil 32400)</span>
<span class=\"c1\">;; ちなみに 324000 は</span>
<span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"mi\">32400</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; 9</span>
<span class=\"c1\">;; +9 時間ってことですね</span>
</pre></div></div>
<p>ちなみに decode-time は (HIGH LOW MICROSECOND) を<br>
(SEC MIN HOUR DAY MON YEAR DOW DST TZ) 形式のリストに変換する関数で、<br>
引数を省略した場合は (decode-time (current-time)) と同義になります。</p>

<p>懸命な読者の皆様であれば decode-time があるなら encode-time もあるだろうと察しが付くと思いますが、そのとおり。<br>
decode-time とは逆で、SEC MIN HOUR DAY MON YEAR DOW DST TZ を引数に取って (HIGH LOW MICROSECOND) 形式に変換します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">encode-time</span> <span class=\"mi\">46</span> <span class=\"mi\">37</span> <span class=\"mi\">23</span> <span class=\"mi\">12</span> <span class=\"mi\">12</span> <span class=\"mi\">2012</span> <span class=\"mi\">3</span> <span class=\"no\">nil</span> <span class=\"mi\">32400</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20680 38586)</span>
<span class=\"c1\">;; もちろん decode すると、</span>
<span class=\"p\">(</span><span class=\"nv\">decode-time</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"mi\">20680</span> <span class=\"mi\">38586</span><span class=\"p\">))</span> <span class=\"c1\">; =&gt; (46 37 23 12 12 2012 3 nil 32400)</span>
<span class=\"c1\">;; となります</span>
</pre></div></div>
<p>時刻を扱う関数はたいてい、このようなリストを引数にとったり、返したりします。<br>
手で書くのはしんどいので、上に上げたような関数の他にも幾つか便利な関数が定義されています。</p>

<h2>parse-time-string</h2>

<p>文字列をパースして decode-time 形式にしてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">parse-time-string</span> <span class=\"s\">&quot;2012-12-21&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (nil nil nil 21 12 2012 nil nil nil)</span>
<span class=\"p\">(</span><span class=\"nv\">parse-time-string</span> <span class=\"s\">&quot;2012-12-21 23:59:59&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (59 59 23 21 12 2012 nil nil nil)</span>
</pre></div></div>
<p>どんなフォーマットをパース出来るかはソース嫁状態なのですが、<br>
とりあえず MySQL DATETIME 的なのは解釈できるようです。</p>

<h2>date-to-time</h2>

<p>文字列をパースして time 形式にしてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">date-to-time</span> <span class=\"s\">&quot;2012-12-21 00:00:00&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; (20691 10224)</span>
</pre></div></div>
<p>これもどんなフォーマットをパース出来るかはソース嫁です。<br>
とりあえず時刻は省略出来なさそうです。</p>

<h1>日時・時刻を見やすく整形</h1>

<p>計算するのに便利でもこんな内部表現は人が読むに絶えません。<br>
見やすく整形するには以下の関数を使います。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"c1\">;; time 形式を引数に取ります</span>
<span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span><span class=\"c1\">; =&gt; &quot;2012-12-13 00:11:48&quot;</span>
<span class=\"c1\">;; decode-time 形式は encode してから渡します</span>
<span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nb\">apply</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">encode-time</span> <span class=\"p\">(</span><span class=\"nv\">decode-time</span><span class=\"p\">)))</span><span class=\"c1\">; =&gt; &quot;2012-12-13 00:13:11&quot;</span>
</pre></div></div>
<p>こちらはどんな書式文字列が使えるか、ヘルプに詳しく載っています。<br>
describe-function しましょう。</p>

<h1>時刻を秒に換算</h1>

<p>time 形式よりも単純に秒数になっていたほうがなにかと計算しやすいです。<br>
time を秒に変換するには以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">float-time</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span> <span class=\"c1\">; =&gt; 1355332701.567</span>
</pre></div></div>
<h1>日付・時刻計算</h1>

<h2>ある時刻から n 日後の時刻を取得</h2>

<p>たとえば、今日から 10 日後の日付を取得したいとしましょう。<br>
以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d&quot;</span> <span class=\"p\">(</span><span class=\"nv\">time-add</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">days-to-time</span> <span class=\"mi\">10</span><span class=\"p\">)))</span> <span class=\"c1\">; =&gt; &quot;2012-12-23&quot;</span>
</pre></div></div>
<p>time-add と days-to-time を組み合わせると可能です。</p>

<p>time-add はその名の通り、time + time を計算します。<br>
time-subtract という time - time を計算する関数もあります。</p>

<p>days-to-time もその名の通り、日数を time 形式(要は秒数換算)に変換して返します。</p>

<h2>ある日付からある日付の間に何日あるかを取得</h2>

<p>たとえば、1999年7月、空から恐怖の大王が降りてきてたらしい日から今日まで何日経過しているか数えてみましょう。<br>
以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">days-between</span> <span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))</span> <span class=\"s\">&quot;1999-07-01 00:00:00&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; 4914</span>
</pre></div></div>
<p>4914 日も生き延びることができていることに感謝しなければなりませんね。<br>
でももうすぐ人類滅亡です。</p>

<h2>ある時刻になったらある関数を実行する</h2>

<p>ちょっと日付計算とは離れますが、タイマー実行のようなことができます。<br>
たとえば、1 週間の間、毎日 15 時にメッセージを表示したい場合、以下のようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">oyatsu-timer</span>
    <span class=\"p\">(</span><span class=\"nv\">run-at-time</span> <span class=\"s\">&quot;15:00pm&quot;</span> <span class=\"mi\">7</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">message</span> <span class=\"s\">&quot;おやつの時間です&quot;</span><span class=\"p\">))</span>
</pre></div></div>
<p>これを実行すると、午後 15 時におやつの時間をミニバッファで 7 日間知らせてくれます。</p>

<p>run-at-time はタイマーオブジェクトを返します。<br>
これは cancel-timer の引数に渡すことで、タイマー実行をキャンセルすることができます。<br>
逆に言うと、run-at-time の返り値を保存しておかないとキャンセルできません<br>
(cancel-function-timers で、指定した関数を実行しているタイマーをすべて止める、ということは出来ます)。</p>

<p>run-at-time の第二引数には、以下のものが渡せます。</p>

<ol>
<li>&quot;11:23pm&quot; のような時刻絶対指定</li>
<li>&quot;2 hours 35 minutes&quot; のような時刻相対指定</li>
<li>現在時刻からの秒数</li>
<li>time 形式</li>
<li>nil で即時実行</li>
<li>t にすると、第三引数に与えた秒数ごとに無限に繰り返し</li>
</ol>

<p>第三引数はタイマーの繰り返し回数を指定しますが、<br>
第二引数に t が指定された場合、実行間隔秒数を表します。</p>

<p>そして、第四引数に実行したい関数、以降にはその関数に渡したい引数を指定します。</p>

<h1>人類滅亡へのカウントダウン</h1>

<p>それでは人類滅亡までの短い時間を有意義に過ごすため、<br>
以下のような関数を定義して実行しましょう。<br>
下記を適当なバッファにコピペして評価しましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">metsubo-countdown-timer</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">start-metsubo-countdown</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">metsubo-countdown-timer</span>
          <span class=\"p\">(</span><span class=\"nv\">run-at-time</span>
           <span class=\"no\">t</span> <span class=\"mi\">1</span>
           <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
             <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">parse-time-zoneinfo</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"s\">&quot;jst&quot;</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">*</span> <span class=\"mi\">+9</span> <span class=\"mi\">3600</span><span class=\"p\">))</span> <span class=\"nv\">parse-time-zoneinfo</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">judgement-time</span> <span class=\"s\">&quot;2012-12-21 00:00:00 JST&quot;</span><span class=\"p\">)</span>
                    <span class=\"p\">(</span><span class=\"nv\">time-remain</span>
                     <span class=\"p\">(</span><span class=\"nv\">float-time</span>
                      <span class=\"p\">(</span><span class=\"nv\">time-subtract</span> <span class=\"p\">(</span><span class=\"nv\">date-to-time</span> <span class=\"nv\">judgement-time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">current-time</span><span class=\"p\">))))</span>
                    <span class=\"p\">(</span><span class=\"nv\">seconds-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">minutes-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"mi\">60</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">hours-remain</span> <span class=\"p\">(</span><span class=\"nb\">mod</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"mi\">24</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">days-remain</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">time-remain</span> <span class=\"mi\">24</span> <span class=\"mi\">60</span> <span class=\"mi\">60</span><span class=\"p\">)))</span>
               <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;人類滅亡まであと %d 日 %d 時間 %d 分 %d 秒です。&quot;</span>
                        <span class=\"nv\">days-remain</span> <span class=\"nv\">hours-remain</span> <span class=\"nv\">minutes-remain</span> <span class=\"nv\">seconds-remain</span><span class=\"p\">))))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">stop-metsubo-countdown</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">metsubo-countdown-timer</span>
    <span class=\"p\">(</span><span class=\"nv\">cancel-timer</span> <span class=\"nv\">metsubo-countdown-timer</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">start-metsubo-countdown</span><span class=\"p\">)</span>
</pre></div></div>
<h1>おわりに</h1>

<p>雑なネタで申し訳ありませんでした。</p>
") (published nil "2012-12-13T02:41:06Z") (updated nil "2012-12-13T02:41:06Z") (author nil (name nil "yewton@github")))) ("動画で見るemacs" "<p><a href=\"http://blog.handlena.me/entry/2011/12/11/214923\">去年</a>、<a href=\"http://blog.handlena.me/entry/20101210/1291979501\">一昨年</a>にひき続き、こりずに紹介系です。</p>
<p>百聞は一見にしかずというとおり、<br>
聞いた(読んだ)だけではよくわからない拡張elispは結構あるものです。</p>
<p>「何をするものなのかよくわからないから」という食わず嫌いで<br>
便利な機能を使わないのはもったいない！</p>
<p>今回は便利な機能を実演している動画をいくつか紹介したいと思います。</p>
<h2>smartchr</h2>
<p><a href=\"http://vimeo.com/7832017\">smartchr.el on Vimeo</a></p>
<p>単一キーの連続押しに機能を割り当てる拡張。<br>
具体例があるとどのような使い方をすればいいのかがすぐわかりますね。</p>
<ul>
<li>関連: <a href=\"http://tech.kayac.com/archive/emacs-tips-smartchr.html\">smartchr.el を使って生産性を上げる</a></li>
<li><a href=\"https://github.com/imakado/emacs-smartchr\">smartchr</a></li>
</ul>
<h2>yasnippet</h2>
<p><a href=\"http://www.youtube.com/watch?v=ZCGmZK4V7Sg\">Yasnippet Screencast - YouTube</a></p>
<p>はじめて「emacsすげー！！！」と思った動画。</p>
<p>単なる定型文貼り付けにとどまらないyasnippetの威力がよくわかります。</p>
<ul>
<li><a href=\"https://github.com/capitaomorte/yasnippet\">yasnippet</a></li>
</ul>
<h2>undo-tree</h2>
<p><a href=\"http://www.youtube.com/watch?v=EUuTZMuCZ_w\">15:40～ Emacsデモ - YouTube</a></p>
<p>undoの分岐を見える化した上で自在に辿れる便利機能。<br>
動画は第2会関西アンカンファレンスでの、id:tomoyaさんの発表で、4:40あたりから紹介されてます。</p>
<ul>
<li>関連記事: <a href=\"http://d.hatena.ne.jp/tomoya/20110117/1295242639\">Emacs デモ on 第2回関西アンカンファレンス。</a></li>
<li><a href=\"http://www.emacswiki.org/emacs/UndoTree\">undo-tree</a></li>
</ul>
<h2>cua-mode</h2>
<p><a href=\"http://vimeo.com/1168225\">Emacs Column Editing on Vimeo</a></p>
<p>Windows形式のショートカット(<code>C-c</code>でコピー、とか)を使えるようにするモードの、<br>
矩形選択機能だけ使ってます。</p>
<p>複数行をまとめて、インタラクティブに編集するときに非常に便利。</p>
<ul>
<li><a href=\"http://www.emacswiki.org/CuaMode\">cua-mode</a></li>
</ul>
<h2>multiple-cursors</h2>
<p><a href=\"http://www.youtube.com/watch?v=jNa3axo40qM\">Emacs Rocks! Episode 13: multiple-cursors - YouTube</a></p>
<p>インタラクティブな置換インターフェイスを提供する拡張。<br>
これと <code>replace-regexp</code>、<code>cua-mode</code> があれば複数行にまたがる編集はなんとかなります。</p>
<p>(1日目に id:tuto0621 さんが <code>mark-multiples.el</code> を紹介されていましたが、<br>
どちらも同じ作者によるもので、<code>multiple-cursors.el</code> はその後継にあたるようです)</p>
<ul>
<li>関連記事: <a href=\"http://emacsrocks.com/e13.html\">Emacs Rocks! Episode 13: multiple-cursors</a></li>
<li><a href=\"https://github.com/magnars/multiple-cursors.el\">multiple-cursors.el</a></li>
</ul>
<h2>3dmaze</h2>
<p><a href=\"http://www.youtube.com/watch?v=ckOpWQYpKjo\">3D maze by Emacs (single player) - YouTube</a></p>
<p>いみがわからないよ！</p>
<ul>
<li>関連記事: <a href=\"http://d.hatena.ne.jp/kiwanami/20110413/1302709536\">Emacsで3DなマルチプレイヤーなFPSを作ってみた</a></li>
</ul>
<h2>おわり</h2>
<p>いかがでしょうか。</p>
<p>他人のエディタをじっくり覗きこむ機会はなかなかないので、<br>
動画を漁ってみると今まで知らなかったemacsのチカラが見つかるかもしれません。</p>" "http://qiita.com/items/dfa63a971f4d44d2e29f" (20679 61449) old 11 nil nil ((id nil "tag:qiita.com,2005:Item/11756") (published nil "2012-12-12T11:32:39+09:00") (updated nil "2012-12-12T11:46:33+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/dfa63a971f4d44d2e29f"))) (url nil "http://qiita.com/items/dfa63a971f4d44d2e29f") (title nil "動画で見るemacs") (content ((type . "html")) "<p><a href=\"http://blog.handlena.me/entry/2011/12/11/214923\">去年</a>、<a href=\"http://blog.handlena.me/entry/20101210/1291979501\">一昨年</a>にひき続き、こりずに紹介系です。</p>

<p>百聞は一見にしかずというとおり、<br>
聞いた(読んだ)だけではよくわからない拡張elispは結構あるものです。</p>

<p>「何をするものなのかよくわからないから」という食わず嫌いで<br>
便利な機能を使わないのはもったいない！</p>

<p>今回は便利な機能を実演している動画をいくつか紹介したいと思います。</p>

<h2>smartchr</h2>

<p><a href=\"http://vimeo.com/7832017\">smartchr.el on Vimeo</a></p>

<p>単一キーの連続押しに機能を割り当てる拡張。<br>
具体例があるとどのような使い方をすればいいのかがすぐわかりますね。</p>

<ul>
<li>関連: <a href=\"http://tech.kayac.com/archive/emacs-tips-smartchr.html\">smartchr.el を使って生産性を上げる</a></li>
<li><a href=\"https://github.com/imakado/emacs-smartchr\">smartchr</a></li>
</ul>

<h2>yasnippet</h2>

<p><a href=\"http://www.youtube.com/watch?v=ZCGmZK4V7Sg\">Yasnippet Screencast - YouTube</a></p>

<p>はじめて「emacsすげー！！！」と思った動画。</p>

<p>単なる定型文貼り付けにとどまらないyasnippetの威力がよくわかります。</p>

<ul>
<li><a href=\"https://github.com/capitaomorte/yasnippet\">yasnippet</a></li>
</ul>

<h2>undo-tree</h2>

<p><a href=\"http://www.youtube.com/watch?v=EUuTZMuCZ_w\">15:40～ Emacsデモ - YouTube</a></p>

<p>undoの分岐を見える化した上で自在に辿れる便利機能。<br>
動画は第2会関西アンカンファレンスでの、id:tomoyaさんの発表で、4:40あたりから紹介されてます。</p>

<ul>
<li>関連記事: <a href=\"http://d.hatena.ne.jp/tomoya/20110117/1295242639\">Emacs デモ on 第2回関西アンカンファレンス。</a></li>
<li><a href=\"http://www.emacswiki.org/emacs/UndoTree\">undo-tree</a></li>
</ul>

<h2>cua-mode</h2>

<p><a href=\"http://vimeo.com/1168225\">Emacs Column Editing on Vimeo</a></p>

<p>Windows形式のショートカット(<code>C-c</code>でコピー、とか)を使えるようにするモードの、<br>
矩形選択機能だけ使ってます。</p>

<p>複数行をまとめて、インタラクティブに編集するときに非常に便利。</p>

<ul>
<li><a href=\"http://www.emacswiki.org/CuaMode\">cua-mode</a></li>
</ul>

<h2>multiple-cursors</h2>

<p><a href=\"http://www.youtube.com/watch?v=jNa3axo40qM\">Emacs Rocks! Episode 13: multiple-cursors - YouTube</a></p>

<p>インタラクティブな置換インターフェイスを提供する拡張。<br>
これと <code>replace-regexp</code>、<code>cua-mode</code> があれば複数行にまたがる編集はなんとかなります。</p>

<p>(1日目に id:tuto0621 さんが <code>mark-multiples.el</code> を紹介されていましたが、<br>
どちらも同じ作者によるもので、<code>multiple-cursors.el</code> はその後継にあたるようです)</p>

<ul>
<li>関連記事: <a href=\"http://emacsrocks.com/e13.html\">Emacs Rocks! Episode 13: multiple-cursors</a></li>
<li><a href=\"https://github.com/magnars/multiple-cursors.el\">multiple-cursors.el</a></li>
</ul>

<h2>3dmaze</h2>

<p><a href=\"http://www.youtube.com/watch?v=ckOpWQYpKjo\">3D maze by Emacs (single player) - YouTube</a></p>

<p>いみがわからないよ！</p>

<ul>
<li>関連記事: <a href=\"http://d.hatena.ne.jp/kiwanami/20110413/1302709536\">Emacsで3DなマルチプレイヤーなFPSを作ってみた</a></li>
</ul>

<h2>おわり</h2>

<p>いかがでしょうか。</p>

<p>他人のエディタをじっくり覗きこむ機会はなかなかないので、<br>
動画を漁ってみると今まで知らなかったemacsのチカラが見つかるかもしれません。</p>
") (published nil "2012-12-12T11:32:39Z") (updated nil "2012-12-12T11:46:33Z") (author nil (name nil "handlename")))) ("DDSKKが棋譜入力に対応していた" "<p>&quot;４二銀&quot; を入力するのは大変です。<br>
まず全角の数字が打てないので &quot;4&quot; を入力したあと M-x japanese-zenkaku-region で全角にします。<br>
そこで、そういや /4 で &quot;４&quot; に変換すりゃよかったと気づきます。<br>
あとは &quot;二&quot; と &quot;銀&quot; を一つずつ入力します。</p>
<p>なんかこう、/42gin なんて入力して一発変換できたら楽なのになー<br>
と思いながらやったら普通にできました。</p>" "http://qiita.com/items/7c8e01a67107c6600480" (20679 18665) old 12 nil nil ((id nil "tag:qiita.com,2005:Item/11727") (published nil "2012-12-11T23:53:29+09:00") (updated nil "2012-12-11T23:53:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7c8e01a67107c6600480"))) (url nil "http://qiita.com/items/7c8e01a67107c6600480") (title nil "DDSKKが棋譜入力に対応していた") (content ((type . "html")) "<p>&quot;４二銀&quot; を入力するのは大変です。<br>
まず全角の数字が打てないので &quot;4&quot; を入力したあと M-x japanese-zenkaku-region で全角にします。<br>
そこで、そういや /4 で &quot;４&quot; に変換すりゃよかったと気づきます。<br>
あとは &quot;二&quot; と &quot;銀&quot; を一つずつ入力します。</p>

<p>なんかこう、/42gin なんて入力して一発変換できたら楽なのになー<br>
と思いながらやったら普通にできました。</p>
") (published nil "2012-12-11T23:53:29Z") (updated nil "2012-12-11T23:53:29Z") (author nil (name nil "akicho8")))) ("emacsの設定ファイルをどうするかというのはおそらく共通の悩み" "<p>最近少しだけemacsから離れていました。<br>
離れている間に分からないことが増えたりなどして、環境整備をしようと思ったりしたのですが。<br>
その時どうしようかななどと考えたことについて書いてみました。emacsの設定をどのように管理するかというのはおそらく共通の悩みだろうと思うので、他の方がどうしているかは聞いてみたいです。<br>
<a href=\"http://pod.hatenablog.com/entry/2012/12/10/204538\">http://pod.hatenablog.com/entry/2012/12/10/204538</a></p>" "http://qiita.com/items/cbd636bd3e529ae7fcf3" (20677 52693) old 13 nil nil ((id nil "tag:qiita.com,2005:Item/11679") (published nil "2012-12-10T20:56:05+09:00") (updated nil "2012-12-10T20:56:05+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/cbd636bd3e529ae7fcf3"))) (url nil "http://qiita.com/items/cbd636bd3e529ae7fcf3") (title nil "emacsの設定ファイルをどうするかというのはおそらく共通の悩み") (content ((type . "html")) "<p>最近少しだけemacsから離れていました。<br>
離れている間に分からないことが増えたりなどして、環境整備をしようと思ったりしたのですが。<br>
その時どうしようかななどと考えたことについて書いてみました。emacsの設定をどのように管理するかというのはおそらく共通の悩みだろうと思うので、他の方がどうしているかは聞いてみたいです。<br>
<a href=\"http://pod.hatenablog.com/entry/2012/12/10/204538\">http://pod.hatenablog.com/entry/2012/12/10/204538</a></p>
") (published nil "2012-12-10T20:56:05Z") (updated nil "2012-12-10T20:56:05Z") (author nil (name nil "podhmo")))) ("コードリーディングにとっても便利な GNU GLOBAL と gtags.el (と anything-gtags.el) をつかおう" "<h1>はじめに</h1>
<p>全国 1000 万人の emacs ユーザのみなさんこんにちは。</p>
<p>お題とは全く関係ないですが、今年のテキストエディタ界隈の検索トレンドを見てみました。</p>
<p><img src=\"http://f.cl.ly/items/2f2X3I0D2o1f0g3n0H28/trend.png\" alt=\"trend\"><br>
<a href=\"http://www.google.com/trends/explore?hl=ja#q=emacs%2C%20vim%2C%20%E7%A7%80%E4%B8%B8%2C%20sublime%20text&amp;date=1%2F2012%2012m&amp;cmpt=q\">リンクはこちら</a></p>
<p><a href=\"http://www.sublimetext.com/\" title=\"Sublime Text: The text editor you'll fall in love with\">Sublime Text</a>が伸びていますね。<br>
ちなみに Sublime Text 2 の拡張は Python で書くそうです。<br>
全くの余談ですが Emacs ユーザのための Sublime Text 2 の紹介スライドが<a href=\"https://speakerdeck.com/kentaro/sublime-text-2-for-emacsers\" title=\"Sublime Text 2 for Emacsers // Speaker Deck\">こちら</a>です。<br>
完全に蛇足ですが Sublime Text 2 の API リファレンスは<a href=\"http://www.sublimetext.com/docs/2/api_reference.html\" title=\"API Reference - Sublime Text 2 Documentation\">こちら</a>です。</p>
<h1>さて</h1>
<p>コードリーディングに便利な<a href=\"http://www.gnu.org/software/global/\" title=\"GNU GLOBAL source code tagging system\">GNU GLOBAL</a>と、それを emacs から使うための gtags.el 、及びさらに便利に使うための <a href=\"http://www.emacswiki.org/cgi-bin/wiki/anything-gtags.el\" title=\"EmacsWiki: anything-gtags.el\">anything-gtags.el</a>について書きたいと思います。</p>
<h2>GNU GLOBAL</h2>
<p>GNU GLOBAL はソースコードタグ付けシステムです。<br>
C, C++, Yacc, Java, PHP, アセンブリに対応しているそうです。</p>
<p>GNU GLOBAL について調べようと思って「GLOBAL」で検索しても、<br>
包丁の製造会社やおしゃれなアパレルサイトがヒットしがちなので気をつけましょう。</p>
<h2>gtags.el</h2>
<p>GNU GLOBAL に同梱されている、emacs から GLOBAL の機能を使うための elisp です。</p>
<p>が、最新の GNU GLOBAL に同梱の gtags.el は、<br>
global-client というスクリプトに依存していたり(Windows だと動かない)、TRAMP とうまく動かなかったりしたので、<br>
<a href=\"https://github.com/voins/gtags\" title=\"voins/gtags · GitHub\">voins/gtags · GitHub</a>を使います。</p>
<h2>anything-gtags.el</h2>
<p>るびきちさんお手製の、gtags.el を anything インタフェースで使えるようにする elisp です。</p>
<p>が、TRAMP 環境でちょっと困る部分があるので少し手を入れます。</p>
<h1>使用イメージ</h1>
<p>ニコ動に使用イメージの動画を上げてみました。<br>
ちなみにタイマー公開機能を使いました。</p>
<p><a href=\"http://www.nicovideo.jp/watch/sm19546665\">http://www.nicovideo.jp/watch/sm19546665</a></p>
<h1>やってみよう</h1>
<h2>GNU GLOBAL を導入する</h2>
<p><a href=\"http://www.gnu.org/software/global/download.html\" title=\"Getting GLOBAL\">Getting GLOBAL</a>にあるとおりですが、<br>
make できる環境の方はソースを落として ./configure &amp; make &amp; make install してください。<br>
Windows の方は<a href=\"http://adoxa.3eeweb.com/global/index.html\" title=\"GLOBAL\">ここ</a>からバイナリを落として、パスの通った場所に置くのが楽です。</p>
<p>あとは global --version とかで動くのを確認しましょう。</p>
<h2>gtags.el を導入する</h2>
<p>先程も書きましたが、同梱の gtags.el ではなく、<br>
<a href=\"https://github.com/voins/gtags\" title=\"voins/gtags · GitHub\">voins/gtags · GitHub</a>を使います。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x auto-install-from-url https://raw.github.com/voins/gtags/master/gtags.el
</pre></div></div>
<p>なりなんなりで入れましょう(適当)。</p>
<h2>anything-gtags.el を導入する</h2>
<p>auto-install-from-emacs-wiki で anything-gtags を探して入れましょう。</p>
<p>先程も書きましたが、TRAMP と一緒に使うとちょっと上手くないので、<br>
以下のように編集します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Diff files</span></div><div class=\"highlight\"><pre><span class=\"gd\">--- a/anything-gtags.el 2012-12-10 02:34:04.037695300 +0900</span>
<span class=\"gi\">+++ b/anything-gtags.el 2012-12-10 02:33:27.235754100 +0900</span>
<span class=\"gu\">@@ -225,7 +225,7 @@</span>
(gtags-select-buffer buffer)
(anything-candidate-number-limit 9999)
(bfn (with-current-buffer c-source-file buffer-file-name))
<span class=\"gd\">-         (pwd (with-current-buffer gtags-select-buffer (file-name-directory bfn)))</span>
<span class=\"gi\">+         (pwd (with-current-buffer gtags-select-buffer (gtags-get-rootpath)))</span>
(basename (substring bfn (length pwd)))
(lineno (with-current-buffer c-source-file
(save-restriction
</pre></div></div>
<h2>.elsp なりなんなりを編集する</h2>
<p>所々の設定を有効化するために以下を追記します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gtags-prefix-key</span> <span class=\"s\">&quot;\\C-c&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'gtags</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'anything-gtags</span><span class=\"p\">)</span>
<span class=\"c1\">;; キーバインド</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gtags-mode-hook</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cs&quot;</span> <span class=\"ss\">'gtags-find-symbol</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cr&quot;</span> <span class=\"ss\">'gtags-find-rtag</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-ct&quot;</span> <span class=\"ss\">'gtags-find-tag</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cf&quot;</span> <span class=\"ss\">'gtags-parse-file</span><span class=\"p\">)))</span>
<span class=\"c1\">;; gtags-mode を使いたい mode の hook に追加する</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'c-mode-common-hook</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">gtags-mode</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>
</pre></div></div>
<p>これで gtags.el を使う準備が整いました。</p>
<h1>もう少し便利にする</h1>
<p>以上で基本的には終わりなのですが、<br>
さらに便利に使えるようにする方法を紹介したいのでもう少しだけお付き合いください。</p>
<h2>GTAGS を自動で更新する</h2>
<p>GTAGS は自動では更新されませんので、なんとかして更新する必要があります。</p>
<p>例えば、crontab 等に登録してしまうのもひとつの手です。<br>
毎分更新するようにしておけばそうそう困らないでしょう。</p>
<p>他には、保存するたびに GTAGS を更新するようにする手があります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"c1\">;; update GTAGS</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">update-gtags</span> <span class=\"p\">(</span><span class=\"k\">&amp;optional</span> <span class=\"nv\">prefix</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;P&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">rootdir</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">args</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nv\">prefix</span> <span class=\"s\">&quot;-v&quot;</span> <span class=\"s\">&quot;-iv&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">rootdir</span>
<span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"nv\">rootdir</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer-create</span> <span class=\"s\">&quot;*update GTAGS*&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">save-excursion</span>
<span class=\"p\">(</span><span class=\"nv\">set-buffer</span> <span class=\"nv\">buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">erase-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">result</span> <span class=\"p\">(</span><span class=\"nv\">process-file</span> <span class=\"s\">&quot;gtags&quot;</span> <span class=\"no\">nil</span> <span class=\"nv\">buffer</span> <span class=\"no\">nil</span> <span class=\"nv\">args</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"mi\">0</span> <span class=\"nv\">result</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;GTAGS successfully updated.&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;update GTAGS error with exit status %d&quot;</span> <span class=\"nv\">result</span><span class=\"p\">))))))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'after-save-hook</span> <span class=\"ss\">'update-gtags</span><span class=\"p\">)</span>
</pre></div></div>
<p>こんな elisp をぺろりと .emacs あたりに追記しておくと、<br>
保存するたびに gtags がインクリメンタル更新されます。</p>
<p>一応、interactive に呼べるようにしてあるので手動更新も可能です。<br>
C-u M-x update-gtags という風に呼び出すと、インクリメンタルではなくフル更新します。</p>
<p>gtags の実行結果は *update GTAGS* というバッファに書かれます。</p>
<h2>カレントバッファのメソッド一覧を見る</h2>
<p>gtags-parse-file という関数で指定ファイルのメソッド定義一覧が見られるのですが、<br>
いちいちファイル名を指定する必要があります。</p>
<p>また、TRAMP 環境でうまく動かない場合があります。</p>
<p>そのへんの問題を解決したのが以下の関数です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">gtags-parse-file2</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let*</span>
<span class=\"p\">((</span><span class=\"nv\">root</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">gtags-path-style</span> <span class=\"ss\">'root</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">gtags-rootdir</span> <span class=\"nv\">root</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">string-match</span> <span class=\"p\">(</span><span class=\"nv\">regexp-quote</span> <span class=\"nv\">root</span><span class=\"p\">)</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">gtags-goto-tag</span>
<span class=\"p\">(</span><span class=\"nv\">replace-match</span> <span class=\"s\">&quot;&quot;</span> <span class=\"no\">t</span> <span class=\"no\">nil</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
<span class=\"s\">&quot;f&quot;</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"c1\">;; delegate to gtags-parse-file</span>
<span class=\"p\">(</span><span class=\"nv\">gtags-parse-file</span><span class=\"p\">)))</span>
<span class=\"c1\">;; delegate to gtags-parse-file</span>
<span class=\"p\">(</span><span class=\"nv\">gtags-parse-file</span><span class=\"p\">)))</span>
</pre></div></div>
<p>これを gtags-parse-file の代わりに使うと、<br>
カレントバッファのメソッド一覧を一発で出してくれます<br>
(なんか上手くいかないときは gtags-parse-file を呼び出します)。</p>
<h1>終わりに</h1>
<p>GNU GLOBAL, gtags.el, anything-gtags.el について紹介してきました。<br>
ソースコードリーディングには欠かせないツールだと思います。</p>
<p>拙い文章を最後までお読みいただき、ありがとうございました。</p>
<p>間違いや質問等がありましたらコメントにてお願いいたします。<br>
他にももっと良いやり方があるよ！等のコメントもお待ちしております。</p>
<p>来年も Sublime Text 2 から目離せません。</p>" "http://qiita.com/items/d9e686d2f2a092321e34" (20677 63725) old 14 nil nil ((id nil "tag:qiita.com,2005:Item/11652") (published nil "2012-12-10T02:55:15+09:00") (updated nil "2012-12-10T23:59:57+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d9e686d2f2a092321e34"))) (url nil "http://qiita.com/items/d9e686d2f2a092321e34") (title nil "コードリーディングにとっても便利な GNU GLOBAL と gtags.el (と anything-gtags.el) をつかおう") (content ((type . "html")) "<h1>はじめに</h1>

<p>全国 1000 万人の emacs ユーザのみなさんこんにちは。</p>

<p>お題とは全く関係ないですが、今年のテキストエディタ界隈の検索トレンドを見てみました。</p>

<p><img src=\"http://f.cl.ly/items/2f2X3I0D2o1f0g3n0H28/trend.png\" alt=\"trend\"><br>
<a href=\"http://www.google.com/trends/explore?hl=ja#q=emacs%2C%20vim%2C%20%E7%A7%80%E4%B8%B8%2C%20sublime%20text&amp;date=1%2F2012%2012m&amp;cmpt=q\">リンクはこちら</a></p>

<p><a href=\"http://www.sublimetext.com/\" title=\"Sublime Text: The text editor you&#39;ll fall in love with\">Sublime Text</a>が伸びていますね。<br>
ちなみに Sublime Text 2 の拡張は Python で書くそうです。<br>
全くの余談ですが Emacs ユーザのための Sublime Text 2 の紹介スライドが<a href=\"https://speakerdeck.com/kentaro/sublime-text-2-for-emacsers\" title=\"Sublime Text 2 for Emacsers // Speaker Deck\">こちら</a>です。<br>
完全に蛇足ですが Sublime Text 2 の API リファレンスは<a href=\"http://www.sublimetext.com/docs/2/api_reference.html\" title=\"API Reference - Sublime Text 2 Documentation\">こちら</a>です。</p>

<h1>さて</h1>

<p>コードリーディングに便利な<a href=\"http://www.gnu.org/software/global/\" title=\"GNU GLOBAL source code tagging system\">GNU GLOBAL</a>と、それを emacs から使うための gtags.el 、及びさらに便利に使うための <a href=\"http://www.emacswiki.org/cgi-bin/wiki/anything-gtags.el\" title=\"EmacsWiki: anything-gtags.el\">anything-gtags.el</a>について書きたいと思います。</p>

<h2>GNU GLOBAL</h2>

<p>GNU GLOBAL はソースコードタグ付けシステムです。<br>
C, C++, Yacc, Java, PHP, アセンブリに対応しているそうです。</p>

<p>GNU GLOBAL について調べようと思って「GLOBAL」で検索しても、<br>
包丁の製造会社やおしゃれなアパレルサイトがヒットしがちなので気をつけましょう。</p>

<h2>gtags.el</h2>

<p>GNU GLOBAL に同梱されている、emacs から GLOBAL の機能を使うための elisp です。</p>

<p>が、最新の GNU GLOBAL に同梱の gtags.el は、<br>
global-client というスクリプトに依存していたり(Windows だと動かない)、TRAMP とうまく動かなかったりしたので、<br>
<a href=\"https://github.com/voins/gtags\" title=\"voins/gtags · GitHub\">voins/gtags · GitHub</a>を使います。</p>

<h2>anything-gtags.el</h2>

<p>るびきちさんお手製の、gtags.el を anything インタフェースで使えるようにする elisp です。</p>

<p>が、TRAMP 環境でちょっと困る部分があるので少し手を入れます。</p>

<h1>使用イメージ</h1>

<p>ニコ動に使用イメージの動画を上げてみました。<br>
ちなみにタイマー公開機能を使いました。</p>

<p><a href=\"http://www.nicovideo.jp/watch/sm19546665\">http://www.nicovideo.jp/watch/sm19546665</a></p>

<h1>やってみよう</h1>

<h2>GNU GLOBAL を導入する</h2>

<p><a href=\"http://www.gnu.org/software/global/download.html\" title=\"Getting GLOBAL\">Getting GLOBAL</a>にあるとおりですが、<br>
make できる環境の方はソースを落として ./configure &amp; make &amp; make install してください。<br>
Windows の方は<a href=\"http://adoxa.3eeweb.com/global/index.html\" title=\"GLOBAL\">ここ</a>からバイナリを落として、パスの通った場所に置くのが楽です。</p>

<p>あとは global --version とかで動くのを確認しましょう。</p>

<h2>gtags.el を導入する</h2>

<p>先程も書きましたが、同梱の gtags.el ではなく、<br>
<a href=\"https://github.com/voins/gtags\" title=\"voins/gtags · GitHub\">voins/gtags · GitHub</a>を使います。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x auto-install-from-url https://raw.github.com/voins/gtags/master/gtags.el
</pre></div></div>
<p>なりなんなりで入れましょう(適当)。</p>

<h2>anything-gtags.el を導入する</h2>

<p>auto-install-from-emacs-wiki で anything-gtags を探して入れましょう。</p>

<p>先程も書きましたが、TRAMP と一緒に使うとちょっと上手くないので、<br>
以下のように編集します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Diff files</span></div><div class=\"highlight\"><pre><span class=\"gd\">--- a/anything-gtags.el 2012-12-10 02:34:04.037695300 +0900</span>
<span class=\"gi\">+++ b/anything-gtags.el 2012-12-10 02:33:27.235754100 +0900</span>
<span class=\"gu\">@@ -225,7 +225,7 @@</span>
          (gtags-select-buffer buffer)
          (anything-candidate-number-limit 9999)
          (bfn (with-current-buffer c-source-file buffer-file-name))
<span class=\"gd\">-         (pwd (with-current-buffer gtags-select-buffer (file-name-directory bfn)))</span>
<span class=\"gi\">+         (pwd (with-current-buffer gtags-select-buffer (gtags-get-rootpath)))</span>
          (basename (substring bfn (length pwd)))
          (lineno (with-current-buffer c-source-file
                    (save-restriction
</pre></div></div>
<h2>.elsp なりなんなりを編集する</h2>

<p>所々の設定を有効化するために以下を追記します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gtags-prefix-key</span> <span class=\"s\">&quot;\\C-c&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;gtags</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;anything-gtags</span><span class=\"p\">)</span>
<span class=\"c1\">;; キーバインド</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gtags-mode-hook</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
         <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cs&quot;</span> <span class=\"ss\">&#39;gtags-find-symbol</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cr&quot;</span> <span class=\"ss\">&#39;gtags-find-rtag</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-ct&quot;</span> <span class=\"ss\">&#39;gtags-find-tag</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">gtags-mode-map</span> <span class=\"s\">&quot;\\C-cf&quot;</span> <span class=\"ss\">&#39;gtags-parse-file</span><span class=\"p\">)))</span>
<span class=\"c1\">;; gtags-mode を使いたい mode の hook に追加する</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;c-mode-common-hook</span>
          <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span>
             <span class=\"p\">(</span><span class=\"nv\">gtags-mode</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>
</pre></div></div>
<p>これで gtags.el を使う準備が整いました。</p>

<h1>もう少し便利にする</h1>

<p>以上で基本的には終わりなのですが、<br>
さらに便利に使えるようにする方法を紹介したいのでもう少しだけお付き合いください。</p>

<h2>GTAGS を自動で更新する</h2>

<p>GTAGS は自動では更新されませんので、なんとかして更新する必要があります。</p>

<p>例えば、crontab 等に登録してしまうのもひとつの手です。<br>
毎分更新するようにしておけばそうそう困らないでしょう。</p>

<p>他には、保存するたびに GTAGS を更新するようにする手があります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"c1\">;; update GTAGS</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">update-gtags</span> <span class=\"p\">(</span><span class=\"k\">&amp;optional</span> <span class=\"nv\">prefix</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;P&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">rootdir</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">args</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nv\">prefix</span> <span class=\"s\">&quot;-v&quot;</span> <span class=\"s\">&quot;-iv&quot;</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">rootdir</span>
      <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"nv\">rootdir</span><span class=\"p\">)</span>
             <span class=\"p\">(</span><span class=\"nv\">buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer-create</span> <span class=\"s\">&quot;*update GTAGS*&quot;</span><span class=\"p\">)))</span>
        <span class=\"p\">(</span><span class=\"nv\">save-excursion</span>
          <span class=\"p\">(</span><span class=\"nv\">set-buffer</span> <span class=\"nv\">buffer</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"nv\">erase-buffer</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">result</span> <span class=\"p\">(</span><span class=\"nv\">process-file</span> <span class=\"s\">&quot;gtags&quot;</span> <span class=\"no\">nil</span> <span class=\"nv\">buffer</span> <span class=\"no\">nil</span> <span class=\"nv\">args</span><span class=\"p\">)))</span>
            <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"mi\">0</span> <span class=\"nv\">result</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;GTAGS successfully updated.&quot;</span><span class=\"p\">)</span>
              <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;update GTAGS error with exit status %d&quot;</span> <span class=\"nv\">result</span><span class=\"p\">))))))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;after-save-hook</span> <span class=\"ss\">&#39;update-gtags</span><span class=\"p\">)</span>
</pre></div></div>
<p>こんな elisp をぺろりと .emacs あたりに追記しておくと、<br>
保存するたびに gtags がインクリメンタル更新されます。</p>

<p>一応、interactive に呼べるようにしてあるので手動更新も可能です。<br>
C-u M-x update-gtags という風に呼び出すと、インクリメンタルではなくフル更新します。</p>

<p>gtags の実行結果は *update GTAGS* というバッファに書かれます。</p>

<h2>カレントバッファのメソッド一覧を見る</h2>

<p>gtags-parse-file という関数で指定ファイルのメソッド定義一覧が見られるのですが、<br>
いちいちファイル名を指定する必要があります。</p>

<p>また、TRAMP 環境でうまく動かない場合があります。</p>

<p>そのへんの問題を解決したのが以下の関数です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">gtags-parse-file2</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"k\">let*</span>
          <span class=\"p\">((</span><span class=\"nv\">root</span> <span class=\"p\">(</span><span class=\"nv\">gtags-get-rootpath</span><span class=\"p\">))</span>
           <span class=\"p\">(</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">))</span>
           <span class=\"p\">(</span><span class=\"nv\">gtags-path-style</span> <span class=\"ss\">&#39;root</span><span class=\"p\">)</span>
           <span class=\"p\">(</span><span class=\"nv\">gtags-rootdir</span> <span class=\"nv\">root</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">string-match</span> <span class=\"p\">(</span><span class=\"nv\">regexp-quote</span> <span class=\"nv\">root</span><span class=\"p\">)</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
            <span class=\"p\">(</span><span class=\"nv\">gtags-goto-tag</span>
             <span class=\"p\">(</span><span class=\"nv\">replace-match</span> <span class=\"s\">&quot;&quot;</span> <span class=\"no\">t</span> <span class=\"no\">nil</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
             <span class=\"s\">&quot;f&quot;</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
          <span class=\"c1\">;; delegate to gtags-parse-file</span>
          <span class=\"p\">(</span><span class=\"nv\">gtags-parse-file</span><span class=\"p\">)))</span>
    <span class=\"c1\">;; delegate to gtags-parse-file</span>
    <span class=\"p\">(</span><span class=\"nv\">gtags-parse-file</span><span class=\"p\">)))</span>
</pre></div></div>
<p>これを gtags-parse-file の代わりに使うと、<br>
カレントバッファのメソッド一覧を一発で出してくれます<br>
(なんか上手くいかないときは gtags-parse-file を呼び出します)。</p>

<h1>終わりに</h1>

<p>GNU GLOBAL, gtags.el, anything-gtags.el について紹介してきました。<br>
ソースコードリーディングには欠かせないツールだと思います。</p>

<p>拙い文章を最後までお読みいただき、ありがとうございました。</p>

<p>間違いや質問等がありましたらコメントにてお願いいたします。<br>
他にももっと良いやり方があるよ！等のコメントもお待ちしております。</p>

<p>来年も Sublime Text 2 から目離せません。</p>
") (published nil "2012-12-10T02:55:15Z") (updated nil "2012-12-10T23:59:57Z") (author nil (name nil "yewton@github")))) ("color-themeでEmacsの見た目をきれいにする" "<h1>はじめに</h1>
<p>Emacsを使い慣れてくると、なんだかいつも見ている画面が物足りなくなり、Emacsの見た目を変えたくなってくると思います。</p>
<p>ここでは、簡単にEmacsの見た目を変える「color-theme.el」の紹介と、color-themeの作り方を少しだけ書いていきます。</p>
<h1>color-theme.elのインストール</h1>
<p>まずは、<a href=\"http://code.google.com/p/gnuemacscolorthemetest/\" title=\"gnuemacscolorthemetest - GNU Emacs Color Theme Test - Google Project Hosting\">gnuemacscolorthemetest - GNU Emacs Color Theme Test - Google Project Hosting</a>のDownloadsから「color-theme-6.6.0-mav.zip(※執筆時点)」をダウンロードします。</p>
<p>ダウンロードしたzipファイルは解凍し、「~/.emacs.d/site-lisp」内などにディレクトリごと置いてください。</p>
<h1>テーマを置くディレクトリ</h1>
<p>color-themeディレクトリの中に、themesというディレクトリがあると思いますが、そこにダウンロードしてきたテーマや自作テーマを置いていきます。</p>
<p>使う場合は、下記の.init.elなどの設定変更を忘れないようにしてください。</p>
<h1>.init.elなどに書いておく設定</h1>
<p>以下のように書いておきます。上の2行は書いておくことが必須となります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>(require 'color-theme)
(color-theme-initialize)
(color-theme-molokai) ;; 使うカラーテーマ名
</pre></div></div>
<h1>カラーテーマを作ってみよう！</h1>
<p>今回このAdvent Calendarを書くにあたって、Vimのカラースキームの中でも有名と思われる「<a href=\"https://github.com/tomasr/molokai\">molokai</a>」をEmacsに移植してみました。</p>
<p>コードは以下の通りとなっています。適宜コメントを付けていますので、改造して自分好みのカラーテーマを作ってみてください！<br>
もちろんそのまま使うのもありです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">color-theme-molokai.el</span></div><div class=\"highlight\"><pre>(eval-when-compile
(require 'color-theme))
(defun color-theme-molokai ()
&quot;Color theme based on the Molokai color scheme for vim.&quot;
(interactive)
(color-theme-install
'(color-theme-molokai ;; カラーテーマ名
;; 背景・文字・カーソル
((background-color . &quot;#1B1D1E&quot;)
(background-mode . dark)
(foreground-color . &quot;#F8F8F2&quot;)
(cursor-color . &quot;#F8F8F0&quot;))
(default ((t (:background &quot;#1B1D1E&quot; :foreground &quot;#F8F8F2&quot;))))
;; 選択範囲
(region ((t (:background &quot;#403D3D&quot;))))
;; モードライン
(mode-line ((t (:foreground &quot;#F8F8F2&quot; :background &quot;#000000&quot;
:box (:line-width 1 :color &quot;#000000&quot; :style released-button)))))
(mode-line-buffer-id ((t (:foreground nil :background nil))))
(mode-line-inactive ((t (:foreground &quot;#BCBCBC&quot; :background &quot;#333333&quot;
:box (:line-width 1 :color &quot;#333333&quot;)))))
;; ハイライト
(highlight ((t (:foreground &quot;#000000&quot; :background &quot;#C4BE89&quot;))))
(hl-line ((t (:background &quot;#293739&quot;))))
;; 関数名
(font-lock-function-name-face ((t (:foreground &quot;#FFFFFF&quot;))))
;; 変数名・変数の内容
(font-lock-variable-name-face ((t (:foreground &quot;#FFFFFF&quot;))))
(font-lock-string-face ((t (:foreground &quot;#E6DB74&quot;))))
;; 特定キーワード
(font-lock-keyword-face ((t (:foreground &quot;#F92672&quot;))))
;; Boolean
(font-lock-constant-face((t (:foreground &quot;#AE81BC&quot;))))
;; 括弧
(show-paren-match-face ((t (:foreground &quot;#1B1D1E&quot; :background &quot;#FD971F&quot;))))
(paren-face ((t (:foreground &quot;#A6E22A&quot; :background nil))))
;; コメント
(font-lock-comment-face ((t (:foreground &quot;#74715D&quot;))))
;; CSS
(css-selector ((t (:foreground &quot;#66D9EF&quot;))))
(css-property ((t (:foreground &quot;#FD971F&quot;))))
;; nXML-mode
;; タグ名
(nxml-element-local-name ((t (:foreground &quot;#F92672&quot;))))
;; 属性
(nxml-attribute-local-name ((t (:foreground &quot;#66D9EF&quot;))))
;; 括弧
(nxml-tag-delimiter ((t (:foreground &quot;#A6E22A&quot;))))
;; DOCTYPE宣言
(nxml-markup-declaration-delimiter ((t (:foreground &quot;#74715D&quot;))))
;; dired
(dired-directory ((t (:foreground &quot;#A6E22A&quot;))))
(dired-symlink ((t (:foreground &quot;#66D9EF&quot;))))
;; MMM-mode
(mmm-default-submode-face ((t (:foreground nil :background &quot;#000000&quot;))))
)))
(provide 'color-theme-molokai) ;; カラーテーマ名
</pre></div></div>" "http://qiita.com/items/17464754663936cb7895" (20675 20864) old 15 nil nil ((id nil "tag:qiita.com,2005:Item/11601") (published nil "2012-12-08T23:29:47+09:00") (updated nil "2012-12-08T23:41:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/17464754663936cb7895"))) (url nil "http://qiita.com/items/17464754663936cb7895") (title nil "color-themeでEmacsの見た目をきれいにする") (content ((type . "html")) "<h1>はじめに</h1>

<p>Emacsを使い慣れてくると、なんだかいつも見ている画面が物足りなくなり、Emacsの見た目を変えたくなってくると思います。</p>

<p>ここでは、簡単にEmacsの見た目を変える「color-theme.el」の紹介と、color-themeの作り方を少しだけ書いていきます。</p>

<h1>color-theme.elのインストール</h1>

<p>まずは、<a href=\"http://code.google.com/p/gnuemacscolorthemetest/\" title=\"gnuemacscolorthemetest - GNU Emacs Color Theme Test - Google Project Hosting\">gnuemacscolorthemetest - GNU Emacs Color Theme Test - Google Project Hosting</a>のDownloadsから「color-theme-6.6.0-mav.zip(※執筆時点)」をダウンロードします。</p>

<p>ダウンロードしたzipファイルは解凍し、「~/.emacs.d/site-lisp」内などにディレクトリごと置いてください。</p>

<h1>テーマを置くディレクトリ</h1>

<p>color-themeディレクトリの中に、themesというディレクトリがあると思いますが、そこにダウンロードしてきたテーマや自作テーマを置いていきます。</p>

<p>使う場合は、下記の.init.elなどの設定変更を忘れないようにしてください。</p>

<h1>.init.elなどに書いておく設定</h1>

<p>以下のように書いておきます。上の2行は書いておくことが必須となります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>(require &#39;color-theme)
(color-theme-initialize)

(color-theme-molokai) ;; 使うカラーテーマ名
</pre></div></div>
<h1>カラーテーマを作ってみよう！</h1>

<p>今回このAdvent Calendarを書くにあたって、Vimのカラースキームの中でも有名と思われる「<a href=\"https://github.com/tomasr/molokai\">molokai</a>」をEmacsに移植してみました。</p>

<p>コードは以下の通りとなっています。適宜コメントを付けていますので、改造して自分好みのカラーテーマを作ってみてください！<br>
もちろんそのまま使うのもありです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">color-theme-molokai.el</span></div><div class=\"highlight\"><pre>(eval-when-compile
  (require &#39;color-theme))

(defun color-theme-molokai () 
  &quot;Color theme based on the Molokai color scheme for vim.&quot;
  (interactive)
  (color-theme-install
   &#39;(color-theme-molokai ;; カラーテーマ名
     ;; 背景・文字・カーソル
     ((background-color . &quot;#1B1D1E&quot;)
      (background-mode . dark)
      (foreground-color . &quot;#F8F8F2&quot;)
      (cursor-color . &quot;#F8F8F0&quot;))

     (default ((t (:background &quot;#1B1D1E&quot; :foreground &quot;#F8F8F2&quot;))))

     ;; 選択範囲
     (region ((t (:background &quot;#403D3D&quot;))))

     ;; モードライン
     (mode-line ((t (:foreground &quot;#F8F8F2&quot; :background &quot;#000000&quot;
                                 :box (:line-width 1 :color &quot;#000000&quot; :style released-button)))))
     (mode-line-buffer-id ((t (:foreground nil :background nil))))
     (mode-line-inactive ((t (:foreground &quot;#BCBCBC&quot; :background &quot;#333333&quot;
                                          :box (:line-width 1 :color &quot;#333333&quot;)))))

     ;; ハイライト
     (highlight ((t (:foreground &quot;#000000&quot; :background &quot;#C4BE89&quot;))))
     (hl-line ((t (:background &quot;#293739&quot;))))

     ;; 関数名
     (font-lock-function-name-face ((t (:foreground &quot;#FFFFFF&quot;))))

     ;; 変数名・変数の内容
     (font-lock-variable-name-face ((t (:foreground &quot;#FFFFFF&quot;))))
     (font-lock-string-face ((t (:foreground &quot;#E6DB74&quot;))))

     ;; 特定キーワード
     (font-lock-keyword-face ((t (:foreground &quot;#F92672&quot;))))

     ;; Boolean
     (font-lock-constant-face((t (:foreground &quot;#AE81BC&quot;))))

     ;; 括弧
     (show-paren-match-face ((t (:foreground &quot;#1B1D1E&quot; :background &quot;#FD971F&quot;))))
     (paren-face ((t (:foreground &quot;#A6E22A&quot; :background nil))))

     ;; コメント
     (font-lock-comment-face ((t (:foreground &quot;#74715D&quot;))))

     ;; CSS
     (css-selector ((t (:foreground &quot;#66D9EF&quot;))))
     (css-property ((t (:foreground &quot;#FD971F&quot;))))

     ;; nXML-mode
     ;; タグ名
     (nxml-element-local-name ((t (:foreground &quot;#F92672&quot;))))
     ;; 属性
     (nxml-attribute-local-name ((t (:foreground &quot;#66D9EF&quot;))))
     ;; 括弧
     (nxml-tag-delimiter ((t (:foreground &quot;#A6E22A&quot;))))
     ;; DOCTYPE宣言
     (nxml-markup-declaration-delimiter ((t (:foreground &quot;#74715D&quot;))))

     ;; dired
     (dired-directory ((t (:foreground &quot;#A6E22A&quot;))))
     (dired-symlink ((t (:foreground &quot;#66D9EF&quot;))))

     ;; MMM-mode
     (mmm-default-submode-face ((t (:foreground nil :background &quot;#000000&quot;))))
     )))

(provide &#39;color-theme-molokai) ;; カラーテーマ名
</pre></div></div>") (published nil "2012-12-08T23:29:47Z") (updated nil "2012-12-08T23:41:04Z") (author nil (name nil "kubosho_")))) ("おすすめの helm拡張" "<p>拙作の helmプラグインを紹介しようかと思ったのですが、そもそも<br>
あまり helm(anything)を使っている人がそこまで多くなさそうなので<br>
私が使っているものの中でおすすめの拡張を紹介することにしました。</p>
<p><a href=\"http://d.hatena.ne.jp/syohex/20121207/1354885367\">おすすめの helm拡張</a></p>" "http://qiita.com/items/8107a0d717ab894608a6" (20673 59894) old 16 nil nil ((id nil "tag:qiita.com,2005:Item/11563") (published nil "2012-12-07T22:07:02+09:00") (updated nil "2012-12-07T22:07:02+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8107a0d717ab894608a6"))) (url nil "http://qiita.com/items/8107a0d717ab894608a6") (title nil "おすすめの helm拡張") (content ((type . "html")) "<p>拙作の helmプラグインを紹介しようかと思ったのですが、そもそも<br>
あまり helm(anything)を使っている人がそこまで多くなさそうなので<br>
私が使っているものの中でおすすめの拡張を紹介することにしました。</p>

<p><a href=\"http://d.hatena.ne.jp/syohex/20121207/1354885367\">おすすめの helm拡張</a></p>
") (published nil "2012-12-07T22:07:02Z") (updated nil "2012-12-07T22:07:02Z") (author nil (name nil "syohex@github")))) ("「タスク」から「予定」を分離してカレンダー表示，Org-mode仕立てで" "<h1>はじめに</h1>
<p>Org-modeを使って「予定」だけをカレンダーに表示するお話です．途中，Org-mode ユーザしかわからない単語が乱舞しますが，知らなくても大丈夫だと思います．</p>
<blockquote>
<p>キーワード：Emacs, Org-mode, Calfw-org, iCal, Google Calendar, Calendar.app, Dropbox</p>
</blockquote>
<h2>なぜこんなことをするか</h2>
<p>Org-mode で GTD を始めると，すぐにアジェンダ機能を使うようになります．org-agenda によって提供されるアジェンダ機能は，日付に紐付いた「タスク」を一つのバッファに集約することです．</p>
<p>一方，Org-mode の「タスク」は，日付だけではなく時刻や行動の内容も表現できるため，「予定」として扱うこともできます．例えば，次のようなエントリーは，会議の予定を表す情報として適切です．</p>
<blockquote>
<p>** TODO 定例会に出席する<br>
DEADLINE: &lt;2012-12-06 Thu 14:00-15:30 +1w&gt;<br>
1. 前回議事録確認<br>
2. 議論<br>
3. まとめ</p>
</blockquote>
<p>これは「毎週木曜日の午後2時から，90分間の会議をやる」という予定です．org-agenda でこのような予定を管理する最大の欠点は「管理するタスク項目が増えると他のタスクの中に埋もれていく」という点です．せっかく集中管理しているにも関わらず，重要な予定を見逃すのは嫌ですし，一覧表示した大量の「タスク」から重要な「予定」がどこに配置されているかを探し出すのも嫌です．</p>
<p>そこで，「タスク」群から「予定」だけを切り出して，スケジュールソフトあるいはEmacs上でチェックするというフローがあれば有用です．</p>
<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-01.png\" alt=\"予定をカレンダーに\"></p>
<h1>「タスク」ではなく「予定」をチェックしたい</h1>
<p>やることは簡単です．org-agenda で扱う orgファイルとは別に，重要な予定（カレンダー）だけを扱うファイルを作るだけです．Org-mode のエクスポート機能で簡単にical形式に変換できますから，あとはgoogleカレンダーで見たり，Calendar.appで見たりできます．Emacs の中で完結したい人は，calfw-org を使えばいいのです．</p>
<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-02.png\" alt=\"データフロー\"></p>
<h1>カレンダーの元となるorgファイルを作る</h1>
<p>まず重要な予定を格納するOrgファイルを作ります．org-directory 直下に org-ical.org というファイルを作成したとしましょう．</p>
<h2>とりあえず org-agenda でも扱えるようにする</h2>
<p>org-agenda でも表示されるように，org-agenda-files を設定します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-agenda-files</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span> <span class=\"s\">&quot;~/Dropbox/org/next.org&quot;</span>
<span class=\"s\">&quot;~/Dropbox/org/work.org&quot;</span> <span class=\"s\">&quot;~/Dropbox/org/research.org&quot;</span><span class=\"p\">))</span>
</pre></div></div>
<h2>バッファにキーバインドを当てておく（オプション）</h2>
<p>以下の例では，C-M-cを押すと，一発で「予定」専用のorgファイルが開きます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">show-org-buffer</span> <span class=\"p\">(</span><span class=\"nv\">file</span><span class=\"p\">)</span>
<span class=\"s\">&quot;Show an org-file on the current buffer&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"nv\">buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"nv\">file</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;~/Dropbox/org/&quot;</span> <span class=\"nv\">file</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-c&quot;</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">show-org-buffer</span> <span class=\"s\">&quot;org-ical.org&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<h1>orgファイルに「予定」を追加する</h1>
<h2>サクッと予定を追加できるようにする（オプション）</h2>
<p>org-capture を使って，Emacsのどこからでも予定を追加できるようにします．この場合は，<code>C-c r c</code> と打つと新しい予定を編集するためのバッファが開かれ，編集後<code>C-c C-c</code>すれば，先ほど作成した org-ical.org に格納されます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">org-capture-ical-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">org-directory</span> <span class=\"s\">&quot;org-ical.org&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; see org.pdf:p73</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-capture-templates</span>
<span class=\"o\">`</span><span class=\"p\">((</span><span class=\"s\">&quot;t&quot;</span> <span class=\"s\">&quot;TODO 項目を INBOX に貼り付ける&quot;</span> <span class=\"nv\">entry</span>
<span class=\"p\">(</span><span class=\"nv\">file+headline</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;INBOX&quot;</span><span class=\"p\">)</span> <span class=\"s\">&quot;** TODO %?\\n\\t&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;c&quot;</span> <span class=\"s\">&quot;同期カレンダーにエントリー&quot;</span> <span class=\"nv\">entry</span>
<span class=\"p\">(</span><span class=\"nv\">file+headline</span> <span class=\"o\">,</span><span class=\"nv\">org-capture-ical-file</span> <span class=\"s\">&quot;Schedule&quot;</span><span class=\"p\">)</span>
<span class=\"s\">&quot;** TODO %?\\n\\t&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<h2>どこかで見つけたタスクを予定専用のorgファイルに飛ばせるようにする（オプション）</h2>
<p>org-refile を使うと，カレンダーに表示したいタスクをどこかのバッファで見つけた時に，瞬時に登録できます．登録したいタスクにカーソルを置いて，<code>C-c C-w</code> して予定専用のorgファイルを選べば，当該タスクが予定専用のorgファイルに転送されます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre> <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-refile-targets</span>
<span class=\"p\">(</span><span class=\"k\">quote</span> <span class=\"p\">((</span><span class=\"s\">&quot;org-ical.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;next.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;sleep.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
</pre></div></div>
<h1>iCalを生成する</h1>
<h2>ical ファイル生成のヘルパー関数を実装する</h2>
<p>次の関数を実装しておけば，<code>C-c 1</code> を押すだけで ical 形式のファイルが生成されます．後段の転送方法と組み合わせれば，どこにでも公開できます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'org-icalendar</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">my-org-export-icalendar</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">org-export-icalendar</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">org-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c 1&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'my-org-export-icalendar</span><span class=\"p\">)</span>
</pre></div></div>
<h2>生成される ical ファイルのプロパティを設定する</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; iCal の説明文</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-combined-description</span> <span class=\"s\">&quot;OrgModeのスケジュール出力&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; カレンダーに適切なタイムゾーンを設定する（google 用には nil が必要）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-timezone</span> <span class=\"s\">&quot;Asia/Tokyo&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; DONE になった TODO は出力対象から除外する</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-include-todo</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"c1\">;; （通常は，&lt;&gt;--&lt;&gt; で区間付き予定をつくる．非改行入力で日付がNoteに入らない）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-use-scheduled</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">event-if-todo</span><span class=\"p\">))</span>
<span class=\"c1\">;; DL 付きで終日予定にする：締め切り日（スタンプで時間を指定しないこと）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-use-deadline</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">event-if-todo</span><span class=\"p\">))</span>
</pre></div></div>
<h1>カレンダーを公開する</h1>
<h2>Dropbox 経由で公開するアプローチ</h2>
<p>生成した ical を Dropbox の Public フォルダに置けば，外部サービスからそのファイルを参照できます．セキュリティの問題があるので，例えば次のようなディレクトリを生成して配置すればよいでしょう．ディレクトリの名称をpwgenなどのコマンドを使って作成します．</p>
<blockquote>
<p>~/Dropbox/Public/ical/03zxQZ1abIyPOMFM/org-ical.ics</p>
</blockquote>
<h2>自分のサーバを経由して公開するアプローチ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; エクスポート後に外部サーバに飛ばす</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'org-after-save-iCalendar-file-hook</span>
<span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
<span class=\"s\">&quot;scp ~/Dropbox/org/org-ical.ics hoge:~/public_html/ical&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Uploading ... [DONE]&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<p>毎度パスワードを入力したくないので，鍵交換で自動ログインできるようにしておきます．また，次のように .ssh/config を書き込んでおけば，エイリアスを使ってサーバを指定できますね．</p>
<blockquote>
<p>Host hoge<br>
HostName hoge.org<br>
User hoge<br>
Port 2222</p>
</blockquote>
<h2>定期的に公開する（オプション）</h2>
<p>定期的にヘルパー関数を呼べば，常に同期出来ます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">run-with-idle-timer</span> <span class=\"mi\">600</span> <span class=\"no\">t</span> <span class=\"ss\">'reload-ical-export</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">reload-ical-export</span> <span class=\"p\">()</span>
<span class=\"s\">&quot;Export org files as an iCal format file&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">string=</span> <span class=\"nv\">major-mode</span> <span class=\"ss\">'org-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">my-org-export-icalendar</span><span class=\"p\">)))</span>
</pre></div></div>
<h1>カレンダーを見る</h1>
<h2>カレンダーソフトで閲覧する</h2>
<ul>
<li><p>google<br>
グーグルカレンダーを開いて「他のカレンダー」から「URLから追加」を選びます．ただし，グーグルカレンダーは，参照したカレンダーをリアルタイムで更新してくれないので，orgで予定を変更しても反映されるまでに時間がかかることがあります．</p></li>
<li><p>Calendar.app<br>
「ファイル」 =&gt; 「新しいカレンダーの購読」でファイルの場所を指定します．こちらは強制リロードができるので，比較的リアルタイムに情報を更新できます．</p></li>
</ul>
<h2>calfw-org で見る</h2>
<p>calfw-org で見ると，こうなります．</p>
<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-03.png\" alt=\"Calfwでみる\"></p>
<p>このようにcalfw-orgを使うと，orgバッファにある予定を綺麗なインターフェイスでEmacsに表示できます．<a href=\"https://github.com/kiwanami/emacs-calfw\">Kiwanami先生</a>のファイルに，今回の記事で紹介している特別なOrgファイルをカレンダーとして利用するための修正とリンク機能の強化を行なっています．導入してみてください．</p>
<blockquote>
<p><a href=\"https://github.com/takaxp/emacs-calfw/blob/master/calfw-org.el\">https://github.com/takaxp/emacs-calfw/blob/master/calfw-org.el</a></p>
</blockquote>
<p>その上で，以下の設定を.emacsに追加してください．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">autoload-if-found</span> <span class=\"ss\">'cfw:open-org-calendar</span> <span class=\"s\">&quot;calfw-org&quot;</span>
<span class=\"s\">&quot;Rich calendar for org-mode&quot;</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">eval-after-load</span> <span class=\"s\">&quot;calfw-org&quot;</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"k\">progn</span>
<span class=\"c1\">;; calfw-org で表示する org バッファを指定する</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cfw:org-icalendars</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; org で使う表にフェイスを統一</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cfw:fchar-junction</span> <span class=\"nv\">?+</span>
<span class=\"nv\">cfw:fchar-vertical-line</span> <span class=\"nv\">?|</span>
<span class=\"nv\">               cfw:fchar-horizontal-line ?-</span>
<span class=\"nv\">               cfw:fchar-left-junction ?|</span>
<span class=\"nv\">cfw:fchar-right-junction</span> <span class=\"nv\">?|</span>
<span class=\"nv\">               cfw:fchar-top-junction ?+</span>
<span class=\"nv\">               cfw:fchar-top-left-corner ?|</span>
<span class=\"nv\">cfw:fchar-top-right-corner</span> <span class=\"nv\">?</span><span class=\"err\">|</span> <span class=\"p\">))))</span>
</pre></div></div>
<p>変数cfw:org-icalendarsは，上記のパッチにしかありませんので気をつけてください．</p>
<p>この状態で，M-x open-org-calendar とすれば，リッチなカレンダーで予定を見られます．</p>
<h2>予定を編集する</h2>
<p>calfw-org でリッチなカレンダーを表示したら，気になる予定にカーソルを置いて（<code>C-c C-o</code>）すると，対応する「予定」にバッファが移動します（これもパッチで追加した機能です）．適当に予定を編集して（<code>C-c &amp;</code>）を押すと，カレンダーに戻れます．表示をリフレッシュするために（<code>r</code>）を押してください．（そのうち自動化したいところ）</p>
<h1>おわりに</h1>
<p>今回の記事は，Org-modeを利用する上で「タスク」と「予定」を区別しませんか？という提案です．そのために専用のバッファを作り，iCal形式のファイルを出力する手順を示しました．少し手を加えたcalfw-org.elを利用することで，「タスクはagendaで確認／編集」し，「予定はcalfw-orgで確認／編集」する手順について説明しました．</p>
<p>マニアックな方，どうですか！</p>
<p>なお，<a href=\"http://orgmode.org/worg/\">worg</a> に calfw-org についてオープンに議論するページを近々設ける予定です．コメントがある方はぜひお願いします m(_ _)m</p>
<p>P.S.</p>
<p>org界隈ではカレンダー周りが少しホットです．<br>
- <a href=\"https://github.com/dengste/org-caldav/blob/master/README.md\">org-caldav</a><br>
- <a href=\"https://github.com/llvilanova/org-gnome-calendar/blob/master/README.md\">org-gnome-calendar</a></p>" "http://qiita.com/items/0b717ad1d0488b74429d" (20673 49371) old 17 nil nil ((id nil "tag:qiita.com,2005:Item/11523") (published nil "2012-12-06T22:56:53+09:00") (updated nil "2012-12-07T19:11:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0b717ad1d0488b74429d"))) (url nil "http://qiita.com/items/0b717ad1d0488b74429d") (title nil "「タスク」から「予定」を分離してカレンダー表示，Org-mode仕立てで") (content ((type . "html")) "<h1>はじめに</h1>

<p>Org-modeを使って「予定」だけをカレンダーに表示するお話です．途中，Org-mode ユーザしかわからない単語が乱舞しますが，知らなくても大丈夫だと思います．</p>

<blockquote>
<p>キーワード：Emacs, Org-mode, Calfw-org, iCal, Google Calendar, Calendar.app, Dropbox</p>
</blockquote>

<h2>なぜこんなことをするか</h2>

<p>Org-mode で GTD を始めると，すぐにアジェンダ機能を使うようになります．org-agenda によって提供されるアジェンダ機能は，日付に紐付いた「タスク」を一つのバッファに集約することです．</p>

<p>一方，Org-mode の「タスク」は，日付だけではなく時刻や行動の内容も表現できるため，「予定」として扱うこともできます．例えば，次のようなエントリーは，会議の予定を表す情報として適切です．</p>

<blockquote>
<p>** TODO 定例会に出席する<br>
   DEADLINE: &lt;2012-12-06 Thu 14:00-15:30 +1w&gt;<br>
1. 前回議事録確認<br>
2. 議論<br>
3. まとめ</p>
</blockquote>

<p>これは「毎週木曜日の午後2時から，90分間の会議をやる」という予定です．org-agenda でこのような予定を管理する最大の欠点は「管理するタスク項目が増えると他のタスクの中に埋もれていく」という点です．せっかく集中管理しているにも関わらず，重要な予定を見逃すのは嫌ですし，一覧表示した大量の「タスク」から重要な「予定」がどこに配置されているかを探し出すのも嫌です．</p>

<p>そこで，「タスク」群から「予定」だけを切り出して，スケジュールソフトあるいはEmacs上でチェックするというフローがあれば有用です．</p>

<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-01.png\" alt=\"予定をカレンダーに\"></p>

<h1>「タスク」ではなく「予定」をチェックしたい</h1>

<p>やることは簡単です．org-agenda で扱う orgファイルとは別に，重要な予定（カレンダー）だけを扱うファイルを作るだけです．Org-mode のエクスポート機能で簡単にical形式に変換できますから，あとはgoogleカレンダーで見たり，Calendar.appで見たりできます．Emacs の中で完結したい人は，calfw-org を使えばいいのです．</p>

<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-02.png\" alt=\"データフロー\"></p>

<h1>カレンダーの元となるorgファイルを作る</h1>

<p>まず重要な予定を格納するOrgファイルを作ります．org-directory 直下に org-ical.org というファイルを作成したとしましょう．</p>

<h2>とりあえず org-agenda でも扱えるようにする</h2>

<p>org-agenda でも表示されるように，org-agenda-files を設定します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-agenda-files</span>
         <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span> <span class=\"s\">&quot;~/Dropbox/org/next.org&quot;</span>
           <span class=\"s\">&quot;~/Dropbox/org/work.org&quot;</span> <span class=\"s\">&quot;~/Dropbox/org/research.org&quot;</span><span class=\"p\">))</span>
</pre></div></div>
<h2>バッファにキーバインドを当てておく（オプション）</h2>

<p>以下の例では，C-M-cを押すと，一発で「予定」専用のorgファイルが開きます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">show-org-buffer</span> <span class=\"p\">(</span><span class=\"nv\">file</span><span class=\"p\">)</span>
    <span class=\"s\">&quot;Show an org-file on the current buffer&quot;</span>
    <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>
          <span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"nv\">buffer</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"nv\">file</span><span class=\"p\">))</span>
     <span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;~/Dropbox/org/&quot;</span> <span class=\"nv\">file</span><span class=\"p\">))))</span> 
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-c&quot;</span><span class=\"p\">)</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
                                  <span class=\"p\">(</span><span class=\"nv\">show-org-buffer</span> <span class=\"s\">&quot;org-ical.org&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<h1>orgファイルに「予定」を追加する</h1>

<h2>サクッと予定を追加できるようにする（オプション）</h2>

<p>org-capture を使って，Emacsのどこからでも予定を追加できるようにします．この場合は，<code>C-c r c</code> と打つと新しい予定を編集するためのバッファが開かれ，編集後<code>C-c C-c</code>すれば，先ほど作成した org-ical.org に格納されます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">org-capture-ical-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">org-directory</span> <span class=\"s\">&quot;org-ical.org&quot;</span><span class=\"p\">))</span>
 <span class=\"c1\">;; see org.pdf:p73</span>
 <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-capture-templates</span>
      <span class=\"o\">`</span><span class=\"p\">((</span><span class=\"s\">&quot;t&quot;</span> <span class=\"s\">&quot;TODO 項目を INBOX に貼り付ける&quot;</span> <span class=\"nv\">entry</span>
         <span class=\"p\">(</span><span class=\"nv\">file+headline</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;INBOX&quot;</span><span class=\"p\">)</span> <span class=\"s\">&quot;** TODO %?\\n\\t&quot;</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"s\">&quot;c&quot;</span> <span class=\"s\">&quot;同期カレンダーにエントリー&quot;</span> <span class=\"nv\">entry</span>
          <span class=\"p\">(</span><span class=\"nv\">file+headline</span> <span class=\"o\">,</span><span class=\"nv\">org-capture-ical-file</span> <span class=\"s\">&quot;Schedule&quot;</span><span class=\"p\">)</span>
          <span class=\"s\">&quot;** TODO %?\\n\\t&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<h2>どこかで見つけたタスクを予定専用のorgファイルに飛ばせるようにする（オプション）</h2>

<p>org-refile を使うと，カレンダーに表示したいタスクをどこかのバッファで見つけた時に，瞬時に登録できます．登録したいタスクにカーソルを置いて，<code>C-c C-w</code> して予定専用のorgファイルを選べば，当該タスクが予定専用のorgファイルに転送されます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre> <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-refile-targets</span>
       <span class=\"p\">(</span><span class=\"k\">quote</span> <span class=\"p\">((</span><span class=\"s\">&quot;org-ical.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"s\">&quot;next.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"s\">&quot;sleep.org&quot;</span> <span class=\"ss\">:level</span> <span class=\"o\">.</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
</pre></div></div>
<h1>iCalを生成する</h1>

<h2>ical ファイル生成のヘルパー関数を実装する</h2>

<p>次の関数を実装しておけば，<code>C-c 1</code> を押すだけで ical 形式のファイルが生成されます．後段の転送方法と組み合わせれば，どこにでも公開できます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;org-icalendar</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">my-org-export-icalendar</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">org-export-icalendar</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">org-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c 1&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;my-org-export-icalendar</span><span class=\"p\">)</span>
</pre></div></div>
<h2>生成される ical ファイルのプロパティを設定する</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; iCal の説明文</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-combined-description</span> <span class=\"s\">&quot;OrgModeのスケジュール出力&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; カレンダーに適切なタイムゾーンを設定する（google 用には nil が必要）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-timezone</span> <span class=\"s\">&quot;Asia/Tokyo&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; DONE になった TODO は出力対象から除外する</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-include-todo</span> <span class=\"no\">t</span><span class=\"p\">)</span>  
<span class=\"c1\">;; （通常は，&lt;&gt;--&lt;&gt; で区間付き予定をつくる．非改行入力で日付がNoteに入らない）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-use-scheduled</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">event-if-todo</span><span class=\"p\">))</span>
<span class=\"c1\">;; DL 付きで終日予定にする：締め切り日（スタンプで時間を指定しないこと）</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-icalendar-use-deadline</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">event-if-todo</span><span class=\"p\">))</span>
</pre></div></div>
<h1>カレンダーを公開する</h1>

<h2>Dropbox 経由で公開するアプローチ</h2>

<p>生成した ical を Dropbox の Public フォルダに置けば，外部サービスからそのファイルを参照できます．セキュリティの問題があるので，例えば次のようなディレクトリを生成して配置すればよいでしょう．ディレクトリの名称をpwgenなどのコマンドを使って作成します．</p>

<blockquote>
<p>~/Dropbox/Public/ical/03zxQZ1abIyPOMFM/org-ical.ics</p>
</blockquote>

<h2>自分のサーバを経由して公開するアプローチ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; エクスポート後に外部サーバに飛ばす</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;org-after-save-iCalendar-file-hook</span>
          <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
            <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
             <span class=\"s\">&quot;scp ~/Dropbox/org/org-ical.ics hoge:~/public_html/ical&quot;</span><span class=\"p\">)</span>
            <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Uploading ... [DONE]&quot;</span><span class=\"p\">)))</span>
</pre></div></div>
<p>毎度パスワードを入力したくないので，鍵交換で自動ログインできるようにしておきます．また，次のように .ssh/config を書き込んでおけば，エイリアスを使ってサーバを指定できますね．</p>

<blockquote>
<p>Host hoge<br>
   HostName hoge.org<br>
   User hoge<br>
   Port 2222</p>
</blockquote>

<h2>定期的に公開する（オプション）</h2>

<p>定期的にヘルパー関数を呼べば，常に同期出来ます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">run-with-idle-timer</span> <span class=\"mi\">600</span> <span class=\"no\">t</span> <span class=\"ss\">&#39;reload-ical-export</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">reload-ical-export</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;Export org files as an iCal format file&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">string=</span> <span class=\"nv\">major-mode</span> <span class=\"ss\">&#39;org-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">my-org-export-icalendar</span><span class=\"p\">)))</span>
</pre></div></div>
<h1>カレンダーを見る</h1>

<h2>カレンダーソフトで閲覧する</h2>

<ul>
<li><p>google<br>
グーグルカレンダーを開いて「他のカレンダー」から「URLから追加」を選びます．ただし，グーグルカレンダーは，参照したカレンダーをリアルタイムで更新してくれないので，orgで予定を変更しても反映されるまでに時間がかかることがあります．</p></li>
<li><p>Calendar.app<br>
「ファイル」 =&gt; 「新しいカレンダーの購読」でファイルの場所を指定します．こちらは強制リロードができるので，比較的リアルタイムに情報を更新できます．</p></li>
</ul>

<h2>calfw-org で見る</h2>

<p>calfw-org で見ると，こうなります．</p>

<p><img src=\"https://dl.dropbox.com/u/2440/Qiita/fig-03.png\" alt=\"Calfwでみる\"></p>

<p>このようにcalfw-orgを使うと，orgバッファにある予定を綺麗なインターフェイスでEmacsに表示できます．<a href=\"https://github.com/kiwanami/emacs-calfw\">Kiwanami先生</a>のファイルに，今回の記事で紹介している特別なOrgファイルをカレンダーとして利用するための修正とリンク機能の強化を行なっています．導入してみてください．</p>

<blockquote>
<p><a href=\"https://github.com/takaxp/emacs-calfw/blob/master/calfw-org.el\">https://github.com/takaxp/emacs-calfw/blob/master/calfw-org.el</a></p>
</blockquote>

<p>その上で，以下の設定を.emacsに追加してください．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">autoload-if-found</span> <span class=\"ss\">&#39;cfw:open-org-calendar</span> <span class=\"s\">&quot;calfw-org&quot;</span>
                         <span class=\"s\">&quot;Rich calendar for org-mode&quot;</span> <span class=\"no\">t</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">eval-after-load</span> <span class=\"s\">&quot;calfw-org&quot;</span>
    <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">progn</span>
       <span class=\"c1\">;; calfw-org で表示する org バッファを指定する</span>
       <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cfw:org-icalendars</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;~/Dropbox/org/org-ical.org&quot;</span><span class=\"p\">))</span>  
       <span class=\"c1\">;; org で使う表にフェイスを統一</span>
       <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cfw:fchar-junction</span> <span class=\"nv\">?+</span>
               <span class=\"nv\">cfw:fchar-vertical-line</span> <span class=\"nv\">?|</span>
<span class=\"nv\">               cfw:fchar-horizontal-line ?-</span>
<span class=\"nv\">               cfw:fchar-left-junction ?|</span>
               <span class=\"nv\">cfw:fchar-right-junction</span> <span class=\"nv\">?|</span>
<span class=\"nv\">               cfw:fchar-top-junction ?+</span>
<span class=\"nv\">               cfw:fchar-top-left-corner ?|</span>
               <span class=\"nv\">cfw:fchar-top-right-corner</span> <span class=\"nv\">?</span><span class=\"err\">|</span> <span class=\"p\">))))</span>
</pre></div></div>
<p>変数cfw:org-icalendarsは，上記のパッチにしかありませんので気をつけてください．</p>

<p>この状態で，M-x open-org-calendar とすれば，リッチなカレンダーで予定を見られます．</p>

<h2>予定を編集する</h2>

<p>calfw-org でリッチなカレンダーを表示したら，気になる予定にカーソルを置いて（<code>C-c C-o</code>）すると，対応する「予定」にバッファが移動します（これもパッチで追加した機能です）．適当に予定を編集して（<code>C-c &amp;</code>）を押すと，カレンダーに戻れます．表示をリフレッシュするために（<code>r</code>）を押してください．（そのうち自動化したいところ）</p>

<h1>おわりに</h1>

<p>今回の記事は，Org-modeを利用する上で「タスク」と「予定」を区別しませんか？という提案です．そのために専用のバッファを作り，iCal形式のファイルを出力する手順を示しました．少し手を加えたcalfw-org.elを利用することで，「タスクはagendaで確認／編集」し，「予定はcalfw-orgで確認／編集」する手順について説明しました．</p>

<p>マニアックな方，どうですか！</p>

<p>なお，<a href=\"http://orgmode.org/worg/\">worg</a> に calfw-org についてオープンに議論するページを近々設ける予定です．コメントがある方はぜひお願いします m(_ _)m</p>

<p>P.S.</p>

<p>org界隈ではカレンダー周りが少しホットです．<br>
  - <a href=\"https://github.com/dengste/org-caldav/blob/master/README.md\">org-caldav</a><br>
  - <a href=\"https://github.com/llvilanova/org-gnome-calendar/blob/master/README.md\">org-gnome-calendar</a></p>
") (published nil "2012-12-06T22:56:53Z") (updated nil "2012-12-07T19:11:39Z") (author nil (name nil "takaxp")))) ("Emacsでリファクタリングに超絶便利なmark-multiple (複数行同時編集)" "<p>テキストを選択 → 同時に変更したい箇所を追加 → テキストを編集すると → 選択した箇所も一緒に書き換え！・・が出来るようになります。変数名の一括変換等に便利です。</p>
<p><a href=\"http://d.hatena.ne.jp/tuto0621/20121205/1354672102\">Emacsでリファクタリングに超絶便利なmark-multiple (複数行同時編集)</a> </p>" "http://qiita.com/items/7bcfcb67f8c792b37dbb" (20670 43496) old 18 nil nil ((id nil "tag:qiita.com,2005:Item/11435") (published nil "2012-12-05T10:56:56+09:00") (updated nil "2012-12-05T10:56:56+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7bcfcb67f8c792b37dbb"))) (url nil "http://qiita.com/items/7bcfcb67f8c792b37dbb") (title nil "Emacsでリファクタリングに超絶便利なmark-multiple (複数行同時編集)") (content ((type . "html")) "<p>テキストを選択 → 同時に変更したい箇所を追加 → テキストを編集すると → 選択した箇所も一緒に書き換え！・・が出来るようになります。変数名の一括変換等に便利です。</p>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20121205/1354672102\">Emacsでリファクタリングに超絶便利なmark-multiple (複数行同時編集)</a> </p>
") (published nil "2012-12-05T10:56:56Z") (updated nil "2012-12-05T10:56:56Z") (author nil (name nil "ongaeshi")))) ("Emacsの設定を便利に変えられるcustomize-groupの紹介" "<h1>はじめに</h1>
<p>Emacsを使っている時、ちょっとここの色変えたい、とか、ここの動作を変えたい、というのがよくあると思います。そういう時皆さんどうしてますか？elispがあんまり分からない僕なんかはぐぐっては見つかった設定をコピペする、見つからなかったら諦める日々を過ごしていました。<br>
で、そんな中知ったcustomize-groupという関数。これを使うと、そんな生活とはおさらば出来るんです。</p>
<p>具体例で示しましょう。例えば、現在行のハイライトの色設定を変えてみます。</p>
<h1>現在行のハイライトの色を変える</h1>
<p>まず、customize-groupでは、いろんな設定がgroup分けされているので、今から変える設定がどのgroupに属しているのか考えます。大体その設定が書かれているelispのファイル名やmode名です。<br>
現在行のハイライトはhl-line-modeなので、hl-lineというgroupかな、と目星をつけます。</p>
<p>で、<code>M-x customize-group</code>します。するとgroup名の入力を求められるので、<code>hl-line</code>と入力し、<code>Enter</code>を押します。<br>
すると以下のような画面が出てくるはずです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>To apply changes, use the Save or Set buttons.
For details, see [Saving Customizations] in the [Emacs manual].
[ Search ]
Operate on all settings in this buffer:
[ Set for current session ] [ Save for future sessions ]
[ Undo edits ] [ Reset to saved ] [ Erase customizations ]   [ Exit ]
Parent groups: [Convenience]
Hl Line group: Highlight the current line.
[ State ]: something in this group has been changed outside customize.
Hide Global Hl Line Mode: [Toggle]  on (non-nil)
[ State ]: CHANGED outside Customize.
Non-nil if Global-Hl-Line mode is enabled. More
Show Value Global Hl Line Sticky Flag
Non-nil means the Global HL-Line mode highlight appears in all windows. More
Show Hl Line face: [sample]
Face to use for `hl-line-face'.
Show Value Hl Line Face
Face with which to highlight the current line in Hl-Line mode.
Show Value Hl Line Sticky Flag
Non-nil means the HL-Line mode highlight appears in all windows. More
</pre></div></div>
<p>ここに色んなカスタマイズ出来る項目が載っているので、これをいじって、動作の確認して、保存する、という流れになります。</p>
<p>今設定したい項目は<code>Hl Line face</code>です。ここの<code>Show</code>にカーソルを合わせて<code>Enter</code>を押すと詳細が見れます。僕の場合以下のようになりました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Hide Hl Line face: [sample]
Face to use for `hl-line-face'.
[X] Underline: [Value Menu] Off
[X] Background: #262626    [ Choose ]  (sample)
Show All Attributes
</pre></div></div>
<p>次に<code>Background</code>の<code>Choose</code>にカーソルを合わせて<code>Enter</code>を押すと、色見本が出てくるので、好みの色の上でEnterを押すと選択出来ます。今は例なので、使いませんが青色を選んでみました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>   [X] Background: lightsteelblue [ Choose ]  (sample)
</pre></div></div>
<p>これで設定を変えましたが、まだ反映されていません。反映させるためには<code>[ State ]</code>の上にカーソルを合わせて<code>Enter</code>を押します。すると以下のような選択肢が表示されるはずです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Available choices:
0 = Set for Current Session
1 = Save for Future Sessions
2 = Undo Edits
4 = Erase Customization
6 = Add Comment
9 = For All Kinds of Displays
: = Show Lisp Expression
C-g = Quit
</pre></div></div>
<p>今はとりあえず、現在のセッションだけ有効にしてみます。そのために<code>0</code>を入力します。<br>
すると、現在行の色が変わったはずです。この設定が気に食わなかったらまた設定を変えて、現在のセッションだけ有効にして確認、というのを繰り返します。それで気に入った設定を見つけたら、また<code>[ State ]</code>にカーソルを合わせ<code>Enter</code>を押した後<code>1</code>を押します。すると勝手にinit.elに設定が書き込まれ、次にEmacsを起動させた時もこの設定が有効になります。これで現在行の色設定の変更が完了しました。</p>
<p>また、この例では使いませんでしたが、<code>Show All Attibutes</code>にカーソルを合わせて<code>Enter</code>を押すと全てのカスタマイズ出来る項目が出てくるので、更に細かい設定が可能になります。</p>
<h1>おわりに</h1>
<p>こんな感じで色設定だけでなく、色んな設定をいじることが出来ます。ぐぐって出て来なかった設定は諦める、なんて生活とはおさらばですよ！</p>" "http://qiita.com/items/554f78d0e63bfb7f48c1" (20668 57727) old 19 nil nil ((id nil "tag:qiita.com,2005:Item/11375") (published nil "2012-12-04T02:29:35+09:00") (updated nil "2012-12-04T02:29:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/554f78d0e63bfb7f48c1"))) (url nil "http://qiita.com/items/554f78d0e63bfb7f48c1") (title nil "Emacsの設定を便利に変えられるcustomize-groupの紹介 ") (content ((type . "html")) "<h1>はじめに</h1>

<p>Emacsを使っている時、ちょっとここの色変えたい、とか、ここの動作を変えたい、というのがよくあると思います。そういう時皆さんどうしてますか？elispがあんまり分からない僕なんかはぐぐっては見つかった設定をコピペする、見つからなかったら諦める日々を過ごしていました。<br>
で、そんな中知ったcustomize-groupという関数。これを使うと、そんな生活とはおさらば出来るんです。</p>

<p>具体例で示しましょう。例えば、現在行のハイライトの色設定を変えてみます。</p>

<h1>現在行のハイライトの色を変える</h1>

<p>まず、customize-groupでは、いろんな設定がgroup分けされているので、今から変える設定がどのgroupに属しているのか考えます。大体その設定が書かれているelispのファイル名やmode名です。<br>
現在行のハイライトはhl-line-modeなので、hl-lineというgroupかな、と目星をつけます。</p>

<p>で、<code>M-x customize-group</code>します。するとgroup名の入力を求められるので、<code>hl-line</code>と入力し、<code>Enter</code>を押します。<br>
すると以下のような画面が出てくるはずです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>To apply changes, use the Save or Set buttons.                                                
For details, see [Saving Customizations] in the [Emacs manual].

                                         [ Search ]

 Operate on all settings in this buffer:
 [ Set for current session ] [ Save for future sessions ]
 [ Undo edits ] [ Reset to saved ] [ Erase customizations ]   [ Exit ]


Parent groups: [Convenience]

Hl Line group: Highlight the current line.
      [ State ]: something in this group has been changed outside customize.

Hide Global Hl Line Mode: [Toggle]  on (non-nil)
   [ State ]: CHANGED outside Customize.
   Non-nil if Global-Hl-Line mode is enabled. More

Show Value Global Hl Line Sticky Flag
   Non-nil means the Global HL-Line mode highlight appears in all windows. More

Show Hl Line face: [sample]
   Face to use for `hl-line-face&#39;.

Show Value Hl Line Face
   Face with which to highlight the current line in Hl-Line mode.

Show Value Hl Line Sticky Flag
   Non-nil means the HL-Line mode highlight appears in all windows. More
</pre></div></div>
<p>ここに色んなカスタマイズ出来る項目が載っているので、これをいじって、動作の確認して、保存する、という流れになります。</p>

<p>今設定したい項目は<code>Hl Line face</code>です。ここの<code>Show</code>にカーソルを合わせて<code>Enter</code>を押すと詳細が見れます。僕の場合以下のようになりました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Hide Hl Line face: [sample]                                                                   

   Face to use for `hl-line-face&#39;.
   [X] Underline: [Value Menu] Off
   [X] Background: #262626    [ Choose ]  (sample)
   Show All Attributes
</pre></div></div>
<p>次に<code>Background</code>の<code>Choose</code>にカーソルを合わせて<code>Enter</code>を押すと、色見本が出てくるので、好みの色の上でEnterを押すと選択出来ます。今は例なので、使いませんが青色を選んでみました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>   [X] Background: lightsteelblue [ Choose ]  (sample) 
</pre></div></div>
<p>これで設定を変えましたが、まだ反映されていません。反映させるためには<code>[ State ]</code>の上にカーソルを合わせて<code>Enter</code>を押します。すると以下のような選択肢が表示されるはずです。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Available choices:

0 = Set for Current Session
1 = Save for Future Sessions
2 = Undo Edits
4 = Erase Customization
6 = Add Comment
9 = For All Kinds of Displays
: = Show Lisp Expression

C-g = Quit
</pre></div></div>
<p>今はとりあえず、現在のセッションだけ有効にしてみます。そのために<code>0</code>を入力します。<br>
すると、現在行の色が変わったはずです。この設定が気に食わなかったらまた設定を変えて、現在のセッションだけ有効にして確認、というのを繰り返します。それで気に入った設定を見つけたら、また<code>[ State ]</code>にカーソルを合わせ<code>Enter</code>を押した後<code>1</code>を押します。すると勝手にinit.elに設定が書き込まれ、次にEmacsを起動させた時もこの設定が有効になります。これで現在行の色設定の変更が完了しました。</p>

<p>また、この例では使いませんでしたが、<code>Show All Attibutes</code>にカーソルを合わせて<code>Enter</code>を押すと全てのカスタマイズ出来る項目が出てくるので、更に細かい設定が可能になります。</p>

<h1>おわりに</h1>

<p>こんな感じで色設定だけでなく、色んな設定をいじることが出来ます。ぐぐって出て来なかった設定は諦める、なんて生活とはおさらばですよ！</p>
") (published nil "2012-12-04T02:29:35Z") (updated nil "2012-12-04T02:29:35Z") (author nil (name nil "takc923")))) ("ange-ftpのタイムスタンプ取得バグ修正" "<p>これは<a href=\"http://qiita.com/items/acbef2bc5a0293dc8268\" title=\"Mac版EmacsのTRAMP (ange-ftp) とExtended Passive Mode\">前回</a>からの続きです。</p>
<p>ange-ftpにはタイムスタンプ取得にバグがあります。こいつのせいでsave-buffer時のみならず編集していると随時</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&lt;filename&gt; changed on disk; really edit the buffer?
</pre></div></div>
<p>と聞かれるので非常に鬱陶しいです。</p>
<p>ぐぐると<a href=\"http://smallsteps.seesaa.net/archives/200812-1.html\" title=\"ange-ftp's always ''really edit the buffer?'' problem\">解決策</a>が出てきますが、Emacs同梱のange-ftp.elを直接修正すると何かと問題が起きます。なので該当関数を丸ごと置き換えます。</p>
<p>以下のelispを~/.emacs.d/init.elに書いておくなりすれば良いかと思います。まとまった量のコードですが実質ange-ftp.elから該当関数をコピーしてきて上記解決策を適用 (1行追加) し、<code>eval-after-load</code>で確実にange-ftpのロード後に評価されるようにしただけです。 </p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">ange-ftp-patch.el</span></div><div class=\"highlight\"><pre>;;;
;;; ange-ftpがリモートのタイムスタンプ取扱に失敗して、頻繁に
;;; &quot;blahblah changed on disk; really edit the buffer?&quot;
;;; と身に覚えのないことを言ってくるバグを回避するためのパッチ
;;;
;;; cf. http://smallsteps.seesaa.net/archives/200812-1.html
(eval-after-load &quot;ange-ftp&quot;
'(progn
(message &quot;patching ange-ftp...&quot;)
(defun ange-ftp-write-region (start end filename &amp;optional append visit)
(setq filename (expand-file-name filename))
(let ((parsed (ange-ftp-ftp-name filename)))
(if parsed
(let* ((host (nth 0 parsed))
(user (nth 1 parsed))
(name (ange-ftp-quote-string (nth 2 parsed)))
(temp (ange-ftp-make-tmp-name host))
;; What we REALLY need here is a way to determine if the mode
;; of the transfer is irrelevant, i.e. we can use binary mode
;; regardless. Maybe a system-type to host-type lookup?
(binary (ange-ftp-binary-file filename))
(cmd (if append 'append 'put))
(abbr (ange-ftp-abbreviate-filename filename))
;; we need to reset `last-coding-system-used' to its
;; value immediately after calling the real write-region,
;; so that `basic-save-buffer' doesn't see whatever value
;; might be used when communicating with the ftp process.
(coding-system-used last-coding-system-used))
(unwind-protect
(progn
(let ((filename (buffer-file-name))
(mod-p (buffer-modified-p)))
(unwind-protect
(progn
(ange-ftp-real-write-region start end temp nil
(or visit 'quiet))
(setq coding-system-used last-coding-system-used))
;; cleanup forms
(setq coding-system-used last-coding-system-used)
(setq buffer-file-name filename)
(set-visited-file-modtime (ange-ftp-file-modtime filename))
(restore-buffer-modified-p mod-p)))
(if binary
(ange-ftp-set-binary-mode host user))
;; tell the process filter what size the transfer will be.
(let ((attr (file-attributes temp)))
(if attr
(ange-ftp-set-xfer-size host user (nth 7 attr))))
;; put or append the file.
(let ((result (ange-ftp-send-cmd host user
(list cmd temp name)
(format &quot;Writing %s&quot; abbr))))
(or (car result)
(signal 'ftp-error
(list
&quot;Opening output file&quot;
(format &quot;FTP Error: \\&quot;%s\\&quot;&quot; (cdr result))
filename)))))
(ange-ftp-del-tmp-name temp)
(if binary
(ange-ftp-set-ascii-mode host user)))
(if (eq visit t)
(progn
(set-visited-file-modtime (ange-ftp-file-modtime filename))
(ange-ftp-set-buffer-mode)
(setq buffer-file-name filename)
(set-buffer-modified-p nil)))
;; ensure `last-coding-system-used' has an appropriate value
(setq last-coding-system-used coding-system-used)
(ange-ftp-message &quot;Wrote %s&quot; abbr)
(ange-ftp-add-file-entry filename))
(ange-ftp-real-write-region start end filename append visit))))
(defun ange-ftp-passive-mode (proc on-or-off)
(if (string-match (concat &quot;Passive mode:? &quot; on-or-off)
(cdr (ange-ftp-raw-send-cmd
proc (concat &quot;passive &quot; on-or-off)
&quot;Trying passive mode...&quot; nil)))
(ange-ftp-message (concat &quot;Trying passive mode...&quot; on-or-off))
(error &quot;Trying passive mode...failed&quot;)))))
</pre></div></div>" "http://qiita.com/items/39ee50df454e2ac6d24b" (20668 25076) old 20 nil nil ((id nil "tag:qiita.com,2005:Item/11357") (published nil "2012-12-03T17:15:26+09:00") (updated nil "2012-12-03T17:25:24+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/39ee50df454e2ac6d24b"))) (url nil "http://qiita.com/items/39ee50df454e2ac6d24b") (title nil "ange-ftpのタイムスタンプ取得バグ修正") (content ((type . "html")) "<p>これは<a href=\"http://qiita.com/items/acbef2bc5a0293dc8268\" title=\"Mac版EmacsのTRAMP (ange-ftp) とExtended Passive Mode\">前回</a>からの続きです。</p>

<p>ange-ftpにはタイムスタンプ取得にバグがあります。こいつのせいでsave-buffer時のみならず編集していると随時</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>&lt;filename&gt; changed on disk; really edit the buffer?
</pre></div></div>
<p>と聞かれるので非常に鬱陶しいです。</p>

<p>ぐぐると<a href=\"http://smallsteps.seesaa.net/archives/200812-1.html\" title=\"ange-ftp&#39;s always &#39;&#39;really edit the buffer?&#39;&#39; problem\">解決策</a>が出てきますが、Emacs同梱のange-ftp.elを直接修正すると何かと問題が起きます。なので該当関数を丸ごと置き換えます。</p>

<p>以下のelispを~/.emacs.d/init.elに書いておくなりすれば良いかと思います。まとまった量のコードですが実質ange-ftp.elから該当関数をコピーしてきて上記解決策を適用 (1行追加) し、<code>eval-after-load</code>で確実にange-ftpのロード後に評価されるようにしただけです。 </p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">ange-ftp-patch.el</span></div><div class=\"highlight\"><pre>;;; 
;;; ange-ftpがリモートのタイムスタンプ取扱に失敗して、頻繁に
;;; &quot;blahblah changed on disk; really edit the buffer?&quot;
;;; と身に覚えのないことを言ってくるバグを回避するためのパッチ
;;;
;;; cf. http://smallsteps.seesaa.net/archives/200812-1.html
(eval-after-load &quot;ange-ftp&quot;
  &#39;(progn
     (message &quot;patching ange-ftp...&quot;)
     (defun ange-ftp-write-region (start end filename &amp;optional append visit)
       (setq filename (expand-file-name filename))
       (let ((parsed (ange-ftp-ftp-name filename)))
         (if parsed
             (let* ((host (nth 0 parsed))
                    (user (nth 1 parsed))
                    (name (ange-ftp-quote-string (nth 2 parsed)))
                    (temp (ange-ftp-make-tmp-name host))
                    ;; What we REALLY need here is a way to determine if the mode
                    ;; of the transfer is irrelevant, i.e. we can use binary mode
                    ;; regardless. Maybe a system-type to host-type lookup?
                    (binary (ange-ftp-binary-file filename))
                    (cmd (if append &#39;append &#39;put))
                    (abbr (ange-ftp-abbreviate-filename filename))
                    ;; we need to reset `last-coding-system-used&#39; to its
                    ;; value immediately after calling the real write-region,
                    ;; so that `basic-save-buffer&#39; doesn&#39;t see whatever value
                    ;; might be used when communicating with the ftp process.
                    (coding-system-used last-coding-system-used))
               (unwind-protect
                   (progn
                     (let ((filename (buffer-file-name))
                           (mod-p (buffer-modified-p)))
                       (unwind-protect
                           (progn
                             (ange-ftp-real-write-region start end temp nil
                                                         (or visit &#39;quiet))
                             (setq coding-system-used last-coding-system-used))
                         ;; cleanup forms
                         (setq coding-system-used last-coding-system-used)
                         (setq buffer-file-name filename)
                         (set-visited-file-modtime (ange-ftp-file-modtime filename))
                         (restore-buffer-modified-p mod-p)))
                     (if binary
                         (ange-ftp-set-binary-mode host user))

                     ;; tell the process filter what size the transfer will be.
                     (let ((attr (file-attributes temp)))
                       (if attr
                           (ange-ftp-set-xfer-size host user (nth 7 attr))))

                     ;; put or append the file.
                     (let ((result (ange-ftp-send-cmd host user
                                                      (list cmd temp name)
                                                      (format &quot;Writing %s&quot; abbr))))
                       (or (car result)
                           (signal &#39;ftp-error
                                   (list
                                    &quot;Opening output file&quot;
                                    (format &quot;FTP Error: \\&quot;%s\\&quot;&quot; (cdr result))
                                    filename)))))
                 (ange-ftp-del-tmp-name temp)
                 (if binary
                     (ange-ftp-set-ascii-mode host user)))
               (if (eq visit t)
                   (progn
                     (set-visited-file-modtime (ange-ftp-file-modtime filename))
                     (ange-ftp-set-buffer-mode)
                     (setq buffer-file-name filename)
                     (set-buffer-modified-p nil)))
               ;; ensure `last-coding-system-used&#39; has an appropriate value
               (setq last-coding-system-used coding-system-used)
               (ange-ftp-message &quot;Wrote %s&quot; abbr)
               (ange-ftp-add-file-entry filename))
           (ange-ftp-real-write-region start end filename append visit))))
     (defun ange-ftp-passive-mode (proc on-or-off)
       (if (string-match (concat &quot;Passive mode:? &quot; on-or-off)
                         (cdr (ange-ftp-raw-send-cmd
                               proc (concat &quot;passive &quot; on-or-off)
                               &quot;Trying passive mode...&quot; nil)))
           (ange-ftp-message (concat &quot;Trying passive mode...&quot; on-or-off))
         (error &quot;Trying passive mode...failed&quot;)))))
</pre></div></div>") (published nil "2012-12-03T17:15:26Z") (updated nil "2012-12-03T17:25:24Z") (author nil (name nil "hage@github")))) ("Emacs で自動的にキーバインドをポップアップする guide-key" "<p>Emacs で自動的にキーバインドをポップアップするライブラリ，<a href=\"https://github.com/kbkbkbkb1/guide-key\">guide-key.el</a> を自作したので紹介したいと思います．<a href=\"http://emacswiki.org/emacs/one-key.el\">one-key.el</a> の代替ライブラリのつもりです．詳しくは<a href=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/?p=356\">自分のブログ</a>に書いたので，こちらでは軽く導入と設定を書いておきます．</p>
<h2>guide-key.el の導入</h2>
<p>guide-key.el は <a href=\"http://melpa.milkbox.net/\">MELPA</a> に登録しているので，package.el を使ってインストールできます．<a href=\"https://github.com/m2ym/popwin-el\">popwin</a> に依存しているので，package.el でインストールすれば自動的に popwin もインストールされます．</p>
<p>package.el がない人は <a href=\"https://github.com/m2ym/popwin-el\">m2ym/popwin-el</a> と <a href=\"https://github.com/kbkbkbkb1/guide-key\">kbkbkbkb1/guide-key</a> から popwin.el と guide-key.el を直接ダウンロードしてきて，適当に <code>load-path</code> が通っているところに保存してください．</p>
<h2>使い方</h2>
<p><code>guide-key/guide-key-sequence</code> にポップアップして欲しいキーシーケンス（プレフィックスキー）を登録してください．<code>guide-key/highlight-command-regexp</code> に一致するコマンドはハイライトされます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'guide-key</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">guide-key/guide-key-sequence</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;C-x r&quot;</span> <span class=\"s\">&quot;C-x 4&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">guide-key/highlight-command-regexp</span> <span class=\"s\">&quot;rectangle&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">guide-key-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\">; guide-key-mode を有効にする</span>
</pre></div></div>
<p>これで <code>C-x r</code> や <code>C-x 4</code> を押した時に，次に続くキーを表示するウィンドウが自動的にポップアップされます．実際に <code>C-x r</code> を押した様子はこのようになります．</p>
<p><img src=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/wp-content/uploads/2012/12/wpid-guide-key-example2.png\" alt=\"C-x r を押した様子\" title=\"guide-key.el 動作例2\"></p>
<h2>特定のモードで設定を追加</h2>
<p><code>guide-key/add-local-guide-key-sequence</code> と<br>
<code>guide-key/add-local-highlight-command-regexp</code> に特定のモードのフックと組み合<br>
わせれば，特定のモードに対して設定を追加できます．例えば org-mode を例にとって<br>
見ると，以下のような設定になります．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">guide-key/my-hook-function-for-org-mode</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-guide-key-sequence</span> <span class=\"s\">&quot;C-c&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-guide-key-sequence</span> <span class=\"s\">&quot;C-c C-x&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-highlight-command-regexp</span> <span class=\"s\">&quot;org-&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'org-mode-hook</span> <span class=\"ss\">'guide-key/my-hook-function-for-org-mode</span><span class=\"p\">)</span>
</pre></div></div>
<p>この設定をした後，org-mode のバッファで <code>C-c C-x p</code> を押して <code>org-set-property</code> が実行される様子が以下の図です．</p>
<p><img src=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/wp-content/uploads/2012/12/wpid-guide-key-example-org-anime.gif\" alt=\"C-c C-x p を押した様子\" title=\"guide-key.el 動作例3\"></p>
<h2>まとめ</h2>
<p>guide-key の特徴をまとめておきます．</p>
<ul>
<li><p>現在入力しているキーシケンスに続くキーを自動的にポップアップします．ポップアップさせたいプレフィックスを設定するだけで使えます．また動的にキーバインドを調べているので，キーバインドが変更されても動的に追随できます．</p></li>
<li><p>特定のコマンドを色付けすることできます．いま注目している機能に関するコマンドだけを色付けすることにより，キーバインドを探しやすくなり体で覚えることができます．</p></li>
<li><p>既存のコマンドを上書きしないので，<code>describe-key</code> や <code>describe-bindings</code> などに影響が出ません．</p></li>
</ul>" "http://qiita.com/items/16bd5cb65be18e804c63" (20667 38037) old 21 nil nil ((id nil "tag:qiita.com,2005:Item/11328") (published nil "2012-12-02T20:44:44+09:00") (updated nil "2012-12-03T02:49:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/16bd5cb65be18e804c63"))) (url nil "http://qiita.com/items/16bd5cb65be18e804c63") (title nil "Emacs で自動的にキーバインドをポップアップする guide-key") (content ((type . "html")) "<p>Emacs で自動的にキーバインドをポップアップするライブラリ，<a href=\"https://github.com/kbkbkbkb1/guide-key\">guide-key.el</a> を自作したので紹介したいと思います．<a href=\"http://emacswiki.org/emacs/one-key.el\">one-key.el</a> の代替ライブラリのつもりです．詳しくは<a href=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/?p=356\">自分のブログ</a>に書いたので，こちらでは軽く導入と設定を書いておきます．</p>

<h2>guide-key.el の導入</h2>

<p>guide-key.el は <a href=\"http://melpa.milkbox.net/\">MELPA</a> に登録しているので，package.el を使ってインストールできます．<a href=\"https://github.com/m2ym/popwin-el\">popwin</a> に依存しているので，package.el でインストールすれば自動的に popwin もインストールされます．</p>

<p>package.el がない人は <a href=\"https://github.com/m2ym/popwin-el\">m2ym/popwin-el</a> と <a href=\"https://github.com/kbkbkbkb1/guide-key\">kbkbkbkb1/guide-key</a> から popwin.el と guide-key.el を直接ダウンロードしてきて，適当に <code>load-path</code> が通っているところに保存してください．</p>

<h2>使い方</h2>

<p><code>guide-key/guide-key-sequence</code> にポップアップして欲しいキーシーケンス（プレフィックスキー）を登録してください．<code>guide-key/highlight-command-regexp</code> に一致するコマンドはハイライトされます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;guide-key</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">guide-key/guide-key-sequence</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;C-x r&quot;</span> <span class=\"s\">&quot;C-x 4&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">guide-key/highlight-command-regexp</span> <span class=\"s\">&quot;rectangle&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">guide-key-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\">; guide-key-mode を有効にする</span>
</pre></div></div>
<p>これで <code>C-x r</code> や <code>C-x 4</code> を押した時に，次に続くキーを表示するウィンドウが自動的にポップアップされます．実際に <code>C-x r</code> を押した様子はこのようになります．</p>

<p><img src=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/wp-content/uploads/2012/12/wpid-guide-key-example2.png\" alt=\"C-x r を押した様子\" title=\"guide-key.el 動作例2\"></p>

<h2>特定のモードで設定を追加</h2>

<p><code>guide-key/add-local-guide-key-sequence</code> と<br>
<code>guide-key/add-local-highlight-command-regexp</code> に特定のモードのフックと組み合<br>
わせれば，特定のモードに対して設定を追加できます．例えば org-mode を例にとって<br>
見ると，以下のような設定になります．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">guide-key/my-hook-function-for-org-mode</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-guide-key-sequence</span> <span class=\"s\">&quot;C-c&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-guide-key-sequence</span> <span class=\"s\">&quot;C-c C-x&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">guide-key/add-local-highlight-command-regexp</span> <span class=\"s\">&quot;org-&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;org-mode-hook</span> <span class=\"ss\">&#39;guide-key/my-hook-function-for-org-mode</span><span class=\"p\">)</span>
</pre></div></div>
<p>この設定をした後，org-mode のバッファで <code>C-c C-x p</code> を押して <code>org-set-property</code> が実行される様子が以下の図です．</p>

<p><img src=\"http://www.kaichan.mydns.jp/%7Ekai/wordpress/wp-content/uploads/2012/12/wpid-guide-key-example-org-anime.gif\" alt=\"C-c C-x p を押した様子\" title=\"guide-key.el 動作例3\"></p>

<h2>まとめ</h2>

<p>guide-key の特徴をまとめておきます．</p>

<ul>
<li><p>現在入力しているキーシケンスに続くキーを自動的にポップアップします．ポップアップさせたいプレフィックスを設定するだけで使えます．また動的にキーバインドを調べているので，キーバインドが変更されても動的に追随できます．</p></li>
<li><p>特定のコマンドを色付けすることできます．いま注目している機能に関するコマンドだけを色付けすることにより，キーバインドを探しやすくなり体で覚えることができます．</p></li>
<li><p>既存のコマンドを上書きしないので，<code>describe-key</code> や <code>describe-bindings</code> などに影響が出ません．</p></li>
</ul>
") (published nil "2012-12-02T20:44:44Z") (updated nil "2012-12-03T02:49:09Z") (author nil (name nil "kbkbkbkb1")))) ("C++でプログラミングコンテストをする時用のflymakeの設定" "<p>出来るようになること</p>
<ul>
<li>タイプしている途中にエラーを表示してハイライトしてくれる(flymakeの機能)</li>
<li>flymakeに通常必要なMakefileを用意しなくて良くなる</li>
<li>next-error(<code>\\C-e</code>にバインド), prev-error(<code>\\M-e</code>にバインド)でミニバッファにエラーを表示</li>
</ul>
<div class=\"code-frame\"><div class=\"highlight\"><pre>;;;flymake
(require 'flymake)
;;エラーメッセージをミニバッファで表示させる
(global-set-key &quot;\\C-e&quot; 'flymake-goto-next-error)
(global-set-key &quot;\\M-e&quot; 'flymake-goto-prev-error)
;; gotoした際にエラーメッセージをminibufferに表示する
(defun display-error-message ()
(message (get-char-property (point) 'help-echo)))
(defadvice flymake-goto-prev-error (after flymake-goto-prev-error-display-message)
(display-error-message))
(defadvice flymake-goto-next-error (after flymake-goto-next-error-display-message)
(display-error-message))
(ad-activate 'flymake-goto-prev-error 'flymake-goto-prev-error-display-message)
(ad-activate 'flymake-goto-next-error 'flymake-goto-next-error-display-message)
;;c++のflymakeでmakefileを不要にする
(defun flymake-cc-init ()
(let* ((temp-file   (flymake-init-create-temp-buffer-copy
'flymake-create-temp-inplace))
(local-file  (file-relative-name
temp-file
(file-name-directory buffer-file-name))))
(list &quot;g++&quot; (list &quot;-Wall&quot; &quot;-Wextra&quot; &quot;-fsyntax-only&quot; local-file))))
(push '(&quot;\\\\.cc$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push '(&quot;\\\\.cpp$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push '(&quot;\\\\.h$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push '(&quot;\\\\.hpp$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
</pre></div></div>
<p>昔2箇所ぐらいからとってきて合体したんだけどソースがわからない。ごめんなさい。。。</p>" "http://qiita.com/items/5c97b02dcc3c7fd20279" (20666 53502) old 22 nil nil ((id nil "tag:qiita.com,2005:Item/11307") (published nil "2012-12-02T12:54:38+09:00") (updated nil "2012-12-02T12:54:38+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5c97b02dcc3c7fd20279"))) (url nil "http://qiita.com/items/5c97b02dcc3c7fd20279") (title nil "C++でプログラミングコンテストをする時用のflymakeの設定") (content ((type . "html")) "<p>出来るようになること</p>

<ul>
<li>タイプしている途中にエラーを表示してハイライトしてくれる(flymakeの機能)</li>
<li>flymakeに通常必要なMakefileを用意しなくて良くなる</li>
<li>next-error(<code>\\C-e</code>にバインド), prev-error(<code>\\M-e</code>にバインド)でミニバッファにエラーを表示</li>
</ul>
<div class=\"code-frame\"><div class=\"highlight\"><pre>;;;flymake                                                                                                                                                                                    
(require &#39;flymake)

;;エラーメッセージをミニバッファで表示させる                                                                                                                                                  
(global-set-key &quot;\\C-e&quot; &#39;flymake-goto-next-error)
(global-set-key &quot;\\M-e&quot; &#39;flymake-goto-prev-error)

;; gotoした際にエラーメッセージをminibufferに表示する                                                                                                                                         
(defun display-error-message ()
  (message (get-char-property (point) &#39;help-echo)))
(defadvice flymake-goto-prev-error (after flymake-goto-prev-error-display-message)
  (display-error-message))
(defadvice flymake-goto-next-error (after flymake-goto-next-error-display-message)
  (display-error-message))
(ad-activate &#39;flymake-goto-prev-error &#39;flymake-goto-prev-error-display-message)
(ad-activate &#39;flymake-goto-next-error &#39;flymake-goto-next-error-display-message)

;;c++のflymakeでmakefileを不要にする                                                                                                                                                          
(defun flymake-cc-init ()
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                       &#39;flymake-create-temp-inplace))
         (local-file  (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
    (list &quot;g++&quot; (list &quot;-Wall&quot; &quot;-Wextra&quot; &quot;-fsyntax-only&quot; local-file))))

(push &#39;(&quot;\\\\.cc$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push &#39;(&quot;\\\\.cpp$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push &#39;(&quot;\\\\.h$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
(push &#39;(&quot;\\\\.hpp$&quot; flymake-cc-init) flymake-allowed-file-name-masks)
</pre></div></div>
<p>昔2箇所ぐらいからとってきて合体したんだけどソースがわからない。ごめんなさい。。。</p>
") (published nil "2012-12-02T12:54:38Z") (updated nil "2012-12-02T12:54:38Z") (author nil (name nil "awakia")))) ("Emacsで1行の文字数が指定値をオーバーしていたらハイライトする" "<p>具体的なコード例を示します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>;;; C系統,Pythonにて1行80文字を超えるとハイライト
(add-hook 'c-mode-hook
(lambda ()
(font-lock-add-keywords nil
'((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
(add-hook 'c++-mode-hook
(lambda ()
(font-lock-add-keywords nil
'((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
(add-hook 'python-mode-hook
(lambda ()
(font-lock-add-keywords nil
'((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
;;; Javaで1行100文字を超えるとハイライト
(add-hook 'java-mode-hook
(lambda ()
(font-lock-add-keywords nil
'((&quot;^[^\\n]\\\\{100\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
</pre></div></div>
<p>ちなみに、C++, Pythonで1行80文字、Javaで1行100文字までというのはGoogleで使われているスタイルガイドに即しています。</p>
<ul>
<li><a href=\"http://code.google.com/p/google-styleguide/\">http://code.google.com/p/google-styleguide/</a></li>
<li><a href=\"http://source.android.com/source/code-style.html\">http://source.android.com/source/code-style.html</a></li>
</ul>" "http://qiita.com/items/b836e7792be0a7c65fd4" (20666 26541) old 23 nil nil ((id nil "tag:qiita.com,2005:Item/11299") (published nil "2012-12-02T05:22:43+09:00") (updated nil "2012-12-02T05:25:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b836e7792be0a7c65fd4"))) (url nil "http://qiita.com/items/b836e7792be0a7c65fd4") (title nil "Emacsで1行の文字数が指定値をオーバーしていたらハイライトする") (content ((type . "html")) "<p>具体的なコード例を示します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>;;; C系統,Pythonにて1行80文字を超えるとハイライト
(add-hook &#39;c-mode-hook
  (lambda ()
    (font-lock-add-keywords nil
      &#39;((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
(add-hook &#39;c++-mode-hook
  (lambda ()
    (font-lock-add-keywords nil
      &#39;((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
(add-hook &#39;python-mode-hook
  (lambda ()
    (font-lock-add-keywords nil
      &#39;((&quot;^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))

;;; Javaで1行100文字を超えるとハイライト
(add-hook &#39;java-mode-hook
  (lambda ()
    (font-lock-add-keywords nil
      &#39;((&quot;^[^\\n]\\\\{100\\\\}\\\\(.*\\\\)$&quot; 1 font-lock-warning-face t)))))
</pre></div></div>
<p>ちなみに、C++, Pythonで1行80文字、Javaで1行100文字までというのはGoogleで使われているスタイルガイドに即しています。</p>

<ul>
<li><a href=\"http://code.google.com/p/google-styleguide/\">http://code.google.com/p/google-styleguide/</a></li>
<li><a href=\"http://source.android.com/source/code-style.html\">http://source.android.com/source/code-style.html</a></li>
</ul>
") (published nil "2012-12-02T05:22:43Z") (updated nil "2012-12-02T05:25:17Z") (author nil (name nil "awakia")))) ("文字列に同じ処理を繰り返し実行したい時に便利なキーボードマクロ" "<p>数百件程度の改行区切りのデータをカンマ区切りにしたいとか，「文字列に対して簡単な処理を数十回/数百回実行したい，でもプログラムを書くほどでもない」というときはキーボードマクロが便利．<br>
キーボードマクロとは一連のキーボード操作をコマンドに定義したもの．定義したコマンド(キーボードマクロ)は簡単に繰り返し実行ができる．</p>
<h2>利用例</h2>
<p>以下では改行区切りのデータをquoteしてカンマ区切りにする，という処理を例に説明する．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">処理前</span></div><div class=\"highlight\"><pre>foo
bar
baz
...
</pre></div></div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">処理後</span></div><div class=\"highlight\"><pre>'foo', 'bar', 'baz', ...
</pre></div></div>
<h3>作業手順</h3>
<ol>
<li>適当なバッファ(*scratch*とか)に処理したい文字列を貼る(今回は<code>foo\\nbar\\nbaz</code>...)</li>
<li>繰り返し実行したいキーボード処理を考える．今回ならば以下の作業で1行目(foo)の処理が終わる．(スタート時にカーソルは1行目の<code>f</code>にあるとする)
<ul>
<li><code>'</code>を入力</li>
<li>C-eで行末に移動(カーソルは<code>o</code>に移動する)</li>
<li><code>',</code>を入力</li>
<li>C-dで改行を削除</li>
</ul></li>
<li>2の処理をキーボードマクロに定義する．定義方法は簡単で，<code>C-x(</code> -&gt; 定義したいキーボード処理を操作 -&gt; <code>C-x)</code>とするだけ．</li>
<li>定義したマクロの実行は<code>C-xe</code>(execution)．連続実行は<code>C-xeeeee...</code>.</li>
<li>大量に実行したい時は<code>C-u100C-xe</code>などとすればよい</li>
</ol>
<p>他のキーバインドなど，詳細は <a href=\"http://www.bookshelf.jp/texi/emacs-man/21-3/jp/emacs_16.html\">GNU Emacsマニュアル: M. キーボードマクロ</a></p>" "http://qiita.com/items/be13aade42c996d80d14" (20665 29799) old 24 nil nil ((id nil "tag:qiita.com,2005:Item/11253") (published nil "2012-12-01T12:07:19+09:00") (updated nil "2012-12-01T12:07:19+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/be13aade42c996d80d14"))) (url nil "http://qiita.com/items/be13aade42c996d80d14") (title nil "文字列に同じ処理を繰り返し実行したい時に便利なキーボードマクロ") (content ((type . "html")) "<p>数百件程度の改行区切りのデータをカンマ区切りにしたいとか，「文字列に対して簡単な処理を数十回/数百回実行したい，でもプログラムを書くほどでもない」というときはキーボードマクロが便利．<br>
キーボードマクロとは一連のキーボード操作をコマンドに定義したもの．定義したコマンド(キーボードマクロ)は簡単に繰り返し実行ができる．</p>

<h2>利用例</h2>

<p>以下では改行区切りのデータをquoteしてカンマ区切りにする，という処理を例に説明する．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">処理前</span></div><div class=\"highlight\"><pre>foo
bar
baz
...
</pre></div></div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">処理後</span></div><div class=\"highlight\"><pre>&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, ...
</pre></div></div>
<h3>作業手順</h3>

<ol>
<li>適当なバッファ(*scratch*とか)に処理したい文字列を貼る(今回は<code>foo\\nbar\\nbaz</code>...)</li>
<li>繰り返し実行したいキーボード処理を考える．今回ならば以下の作業で1行目(foo)の処理が終わる．(スタート時にカーソルは1行目の<code>f</code>にあるとする)

<ul>
<li><code>&#39;</code>を入力</li>
<li>C-eで行末に移動(カーソルは<code>o</code>に移動する)</li>
<li><code>&#39;,</code>を入力</li>
<li>C-dで改行を削除</li>
</ul></li>
<li>2の処理をキーボードマクロに定義する．定義方法は簡単で，<code>C-x(</code> -&gt; 定義したいキーボード処理を操作 -&gt; <code>C-x)</code>とするだけ．</li>
<li>定義したマクロの実行は<code>C-xe</code>(execution)．連続実行は<code>C-xeeeee...</code>.</li>
<li>大量に実行したい時は<code>C-u100C-xe</code>などとすればよい</li>
</ol>

<p>他のキーバインドなど，詳細は <a href=\"http://www.bookshelf.jp/texi/emacs-man/21-3/jp/emacs_16.html\">GNU Emacsマニュアル: M. キーボードマクロ</a></p>
") (published nil "2012-12-01T12:07:19Z") (updated nil "2012-12-01T12:07:19Z") (author nil (name nil "yaotti")))) ("マインドマップから全てを紡ぎ出す - XMind+Pandocのドキュメント作成術 -" "<h2>前書き</h2>
<p>ぶっちゃけると、この記事が書きたかっただけです。<br>
その勢いでAdvent Calendarを作ってしまいました。</p>
<p>とはいえ、もう少し「ドキュメントを作る」ことに注目が集まってもいいのではないかと思います。<br>
Markdownが流行っていることですし、LaTeXユーザもたくさんいますし。</p>
<p>というわけで、ドキュメント作成Tips Advent Calendarの第1回では、<br>
「マインドマップであらゆる文書を書く方法」について、<br>
自作ツールの宣伝も兼ねてお送りします。</p>
<h2>あらすじ</h2>
<h3>マインドマップを使った文書作成フロー</h3>
<p>この画像を順に追う形で説明していきます。</p>
<p><img src=\"http://cl.ly/image/20132W013343/12.11.30_doc_advent.png\" alt=\"マインドマップを使った文書作成フロー\"></p>
<h3>誰に読んでほしいか</h3>
<ul>
<li>報告書やブログ記事・プレゼン資料など、章立てやしっかりとした論理構成をもつ文書を作りたい全ての人</li>
<li>白紙のWordやエディタを前にして、呆然としたことのある人</li>
<li>とにかく文書作成で楽したい人</li>
</ul>
<h2>マインドマップ作成ソフト XMind</h2>
<h3>そもそもマインドマップとは</h3>
<p>マインドマップとは、元々はトニー・ブザン(Tony Buzan)が提唱した思考・発想法の一つです。<br>
表現したい概念の中心となるキーワードやイメージを中央に置き、<br>
そこから放射状にキーワードやイメージを広げ、つなげていきます。<br>
このようにマップを広げることで、効率的かつ創造的なブレインストリーミングが可能になります。</p>
<p>マインドマップには、ブザンが考案したオリジナル・本家のマインドマップと、その派生があります：</p>
<ul>
<li>オリジナルの方（ブザンのマインドマップ）は、描き方や色の使い方など細かいルールがある</li>
<li>そこから派生した（広義の）マインドマップは、アウトラインの一形式として広まっている
<ul>
<li>次に紹介するXMindは、どちらかといえば派生版マインドマップです</li>
</ul></li>
</ul>
<h3>XMind</h3>
<p>XMindは、（広義の）マインドマップを作成するソフトです。<br>
XMindの詳しい情報・ダウンロードは以下を参照してください： <a href=\"http://jp.xmind.net/\">日本語版公式サイト</a></p>
<ul>
<li>【注意】最新版 (XMind2012) は日本語入力のバグがあるので、前バージョンのXMind3.2の使用を推奨します</li>
</ul>
<h3>スクリーンショット</h3>
<p>今書いているこの文書（書きかけ）のスクリーンショットはこんな感じです。</p>
<p><img src=\"http://cl.ly/image/1S2F3j2q2O3q/12.11.30_XMind_ScreenShot.png\" alt=\"XMindのスクリーンショット\"></p>
<h3>XMindの良さ</h3>
<p>類似のソフトとしてFreeMindなどがありますが、私があえてXMindを好んで使っているのには、いくつか理由があります。</p>
<h4>マップがカラフルで美しい</h4>
<p>ブザンのマインドマップでは、カラフルであることが重要です。<br>
なぜなら、色は右脳に訴えかけ、想像力を豊かにするからです。</p>
<p>Xmindはカラフルなテーマが付属しています。見た目も美しく、気持ちよく使用できます。<br>
また、備え付けマーカー（アイコン）がカラフルで使いやすいのも特徴です（必要であれば、自分でマーカーを追加することも可能です）。<br>
一方、FreeMindはグラフィカルな面で貧弱な点が否めません。</p>
<h4>アウトラインエディタとして優れている</h4>
<p>これはFreeMindでもあてはまりますが、<br>
ドラッグ＆ドロップでブランチ（枝）の配置を直感的に変えられるのが最大の魅力です。<br>
この機能は文章の章立てを考えるときに便利で、文書の構造を大胆に変えられるのは大きなメリットです。</p>
<p>例えば、一度Word文書に書いたものについて、節単位の入れ替えなど大幅な修正をする場面を想像してみてください。<br>
「はじめに」という節に書いた文を「おわりに」という節に移すだけでも、Wordだと一苦労だと思います。<br>
マインドマップ上では、項目をドラッグ＆ドロップするだけで簡単に修正できます。</p>
<h4>マルチプラットフォーム</h4>
<p>XMindは、Windows, Mac, Linux(Debian/Ubuntu)という、現代で使われるPC環境のほとんどをカバーしています。<br>
Javaで動作しているので、Debian系以外のLinuxユーザでも使えます。</p>
<h4>基本機能は無料</h4>
<p>普段使うような機能については、無料で使用できます。<br>
PDFエクスポートなど一部有料の機能がありますが、画像エクスポートは無料のため十分使えます。</p>
<h2>XMorgDown</h2>
<p>しかし、XMindのエクスポート機能は正直言って貧弱です。<br>
HTMLについてはH3タグまでしかエクスポートできず、それ以下はべた書きになってしまいます。</p>
<p>そこで、XMorgDownという自作ツールをRubyで書きました。<br>
このツールは、XMindファイルを色々なフォーマットに変換します。</p>
<ul>
<li>出力フォーマット： Markdown, Org-mode, LaTeX, HTML, etc...</li>
</ul>
<p>このツールは、実はPandocという神のようなツールの助けを借りています。<br>
PandocはHTMLやMarkdown・LaTeXなどの文書を、多種多様なフォーマットに変換するHaskell製ツールです。<br>
開発も活発に行われており、今後注目されるべき激アツなツールの一つです。<br>
詳しくはこちらを参照してください：</p>
<ul>
<li><a href=\"http://johnmacfarlane.net/pandoc/index.html\">About pandoc</a></li>
</ul>
<h3>XMorgDownの中でやっていること：XSLT + Pandoc</h3>
<p>XMorgDownは以下のような処理を行っています：</p>
<ol>
<li>XMindのファイルからXMLを抽出</li>
<li>XSLT (XML Stylesheet Language Transformations) でXMLをHTMLに変換</li>
<li>PandocにHTMLを食わせて、色々なフォーマットに変換</li>
</ol>
<h3>使い方・インストール方法</h3>
<p>詳しい使い方・インストール方法は以下をご覧ください：</p>
<ul>
<li><a href=\"http://d.hatena.ne.jp/sky-y/20121012/1350731032\">XMorgDown：マインドマップをOrgやMarkdownに変換するスクリプト - 雲行きそらゆきココロイキ</a></li>
</ul>
<p>リリースしたてなので、インストール出来ないとか不具合あったら、どんどん報告なりpull requestなりしてください！</p>
<h2>Edit &amp; Publish</h2>
<p>マインドマップから生成した文書は、まだ骨格のみの状態です。<br>
次の段階では、この骨格に対して、MarkdownやOrg-modeなどで文書の肉付けしていきます。<br>
最後に、肉付けした文書を適当な形式にエクスポートし、体裁を整えて完成です！</p>
<h3>Markdown</h3>
<p>Markdownは、GithubやQiitaで採用されている軽量マークアップ言語です。もはや説明不要ですが、一応。</p>
<ul>
<li>Pandocオプション： -t markdown</li>
</ul>
<h4>出力</h4>
<h5>HTML</h5>
<p>PandocやMarkdownエディタ(Mouなど)でHTMLに変換できるので便利です。<br>
私はMac用Markdownエディタの<a href=\"http://mouapp.com/\">Mou</a>で編集した後、<br>
プレビュー画面のHTMLをコピーしてEvernoteに貼り付けたりしています。</p>
<h5>WordPress</h5>
<p>WordPressのプラグインを使うと、Markdownで記事が書けます。<br>
私が使っているのは、このプラグインです（管理画面でプラグインを検索したら出てくると思います）。</p>
<ul>
<li>Markdown on Save Improved</li>
<li>Markdown QuickTags</li>
</ul>
<h5>HatenaDiary</h5>
<p>markdown2hatena (@joker1007 さん作) を使用すると、Markdownをはてな記法に変換出来ます。</p>
<ul>
<li><a href=\"http://d.hatena.ne.jp/sky-y/20120830/1346329634\">（ツール紹介）Markdown記法をはてな記法に変換するツール - 雲行きそらゆきココロイキ</a></li>
</ul>
<h3>Org-mode</h3>
<p>Org-modeはEmacs公式の文書作成・TODO管理モードです。<br>
Markdownによく似た（しかし遥かに高機能な）Org-mode用の記法があります。<br>
ドキュメントの日本語訳が追いつかないほど、多機能で奧の深いツールです。</p>
<p>個人的には、編集機能が強力なのでMarkdownよりも好きです。<br>
見出し表示をまとめる機能があり、Org-mode単独でアウトラインエディタとして十分使えます。</p>
<p>まだ開発段階ですが、Vimにも一応Orgクローンがあるらしいです。</p>
<ul>
<li><a href=\"http://www.vim.org/scripts/script.php?script_id=3342\">VimOrganizer : An Emacs' Org-mode clone for Vim</a></li>
</ul>
<p>Pandocのオプションは以下の通りです：</p>
<ul>
<li>Pandocオプション： -t org</li>
</ul>
<h4>出力</h4>
<p>エクスポート形式が豊富なのも、Org-modeの特徴です。<br>
エクスポートは C-c C-e で選択用バッファが開きます。</p>
<h5>LaTeX</h5>
<p>Org-modeはLaTeXと非常に相性がよく、強力な連携機能（RefTeX、数式埋め込みなど）も魅力です。<br>
プレゼン用スタイルファイルBeamerにも対応しています。</p>
<h5>HTML</h5>
<p>HTMLエクスポートにも対応しています。<br>
適当なCSSを自分で指定すれば、きれいに表示できます。</p>
<h5>OpenDocument形式</h5>
<p>OpenDocumentはLibreOffice/OpenOffice.orgのファイル形式です。<br>
Org-modeではWriter形式に対応しています。<br>
アウトライン構造まで忠実にエクスポートしてくれるのが、非常にうれしいです。</p>
<p>さらに、LibreOfficeを用いてMS Word形式にエクスポート可能なので、<br>
事務や共同作業の都合でWord形式の提出を迫られても安心です。</p>
<h3>LaTeX</h3>
<p>実はPandoc(XMorgDown)の段階で、直接LaTeXを出力できます。</p>
<ul>
<li>Pandocオプション： -t latex</li>
</ul>
<p>Beamerにも対応しています。</p>
<ul>
<li>Pandocオプション： -t beamer</li>
</ul>
<p>つまり、以下のうちから好みで選べることになります：</p>
<ul>
<li>Org文書を編集してからLaTeX出力する</li>
<li>Pandocで直接LaTeX出力して編集する</li>
</ul>
<h3>その他</h3>
<p>その他、Pandocに対応しているものは何でもOKです。<br>
詳しくは以下のサイトを見てください。</p>
<ul>
<li><a href=\"http://johnmacfarlane.net/pandoc/README.html\">Pandoc User’s Guide</a></li>
</ul>
<blockquote>
<p>It can read markdown and (subsets of) Textile, reStructuredText, HTML, LaTeX, and DocBook XML;</p>
<p>and it can write plain text, markdown, reStructuredText, XHTML, HTML 5, LaTeX (including beamer slide shows), ConTeXt, RTF, DocBook XML, OpenDocument XML, ODT, Word docx, GNU Texinfo, MediaWiki markup, EPUB, Textile, groff man pages, Emacs Org-Mode, AsciiDoc, and Slidy, Slideous, DZSlides, or S5 HTML slide shows. It can also produce PDF output on systems where LaTeX is installed.</p>
</blockquote>
<h2>終わりに</h2>
<p>最後に、ここまで説明した文書作成フローをおさらいしましょう。</p>
<p><img src=\"http://cl.ly/image/20132W013343/12.11.30_doc_advent.png\" alt=\"マインドマップを使った文書作成フロー\"></p>
<p>私はいつもあらゆる文書をこのフローで作成しています。<br>
もちろん、この記事も同じフローに乗っています。<br>
セットアップ（特にXMorgDownのインストール）が大変だと思いますが、<br>
そこを乗り越えると非常に快適なWriting Lifeが待っています。</p>
<p>もちろん、そこまで行かなくても、紹介したツールや言語のどれかに興味を持ってもらえれば幸いです。<br>
（特に、Pandocはもっと知ってもらいたいです！）<br>
ぜひ興味を持ったツールを試してみてください！</p>" "http://qiita.com/items/b92e9ce4b941545c8af5" (20664 33336) old 25 nil nil ((id nil "tag:qiita.com,2005:Item/11232") (published nil "2012-11-30T18:52:49+09:00") (updated nil "2012-11-30T18:54:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b92e9ce4b941545c8af5"))) (url nil "http://qiita.com/items/b92e9ce4b941545c8af5") (title nil " マインドマップから全てを紡ぎ出す - XMind+Pandocのドキュメント作成術 -") (content ((type . "html")) "<h2>前書き</h2>

<p>ぶっちゃけると、この記事が書きたかっただけです。<br>
その勢いでAdvent Calendarを作ってしまいました。</p>

<p>とはいえ、もう少し「ドキュメントを作る」ことに注目が集まってもいいのではないかと思います。<br>
Markdownが流行っていることですし、LaTeXユーザもたくさんいますし。</p>

<p>というわけで、ドキュメント作成Tips Advent Calendarの第1回では、<br>
「マインドマップであらゆる文書を書く方法」について、<br>
自作ツールの宣伝も兼ねてお送りします。</p>

<h2>あらすじ</h2>

<h3>マインドマップを使った文書作成フロー</h3>

<p>この画像を順に追う形で説明していきます。</p>

<p><img src=\"http://cl.ly/image/20132W013343/12.11.30_doc_advent.png\" alt=\"マインドマップを使った文書作成フロー\"></p>

<h3>誰に読んでほしいか</h3>

<ul>
<li>報告書やブログ記事・プレゼン資料など、章立てやしっかりとした論理構成をもつ文書を作りたい全ての人</li>
<li>白紙のWordやエディタを前にして、呆然としたことのある人</li>
<li>とにかく文書作成で楽したい人</li>
</ul>

<h2>マインドマップ作成ソフト XMind</h2>

<h3>そもそもマインドマップとは</h3>

<p>マインドマップとは、元々はトニー・ブザン(Tony Buzan)が提唱した思考・発想法の一つです。<br>
表現したい概念の中心となるキーワードやイメージを中央に置き、<br>
そこから放射状にキーワードやイメージを広げ、つなげていきます。<br>
このようにマップを広げることで、効率的かつ創造的なブレインストリーミングが可能になります。</p>

<p>マインドマップには、ブザンが考案したオリジナル・本家のマインドマップと、その派生があります：</p>

<ul>
<li>オリジナルの方（ブザンのマインドマップ）は、描き方や色の使い方など細かいルールがある</li>
<li>そこから派生した（広義の）マインドマップは、アウトラインの一形式として広まっている

<ul>
<li>次に紹介するXMindは、どちらかといえば派生版マインドマップです</li>
</ul></li>
</ul>

<h3>XMind</h3>

<p>XMindは、（広義の）マインドマップを作成するソフトです。<br>
XMindの詳しい情報・ダウンロードは以下を参照してください： <a href=\"http://jp.xmind.net/\">日本語版公式サイト</a></p>

<ul>
<li>【注意】最新版 (XMind2012) は日本語入力のバグがあるので、前バージョンのXMind3.2の使用を推奨します</li>
</ul>

<h3>スクリーンショット</h3>

<p>今書いているこの文書（書きかけ）のスクリーンショットはこんな感じです。</p>

<p><img src=\"http://cl.ly/image/1S2F3j2q2O3q/12.11.30_XMind_ScreenShot.png\" alt=\"XMindのスクリーンショット\"></p>

<h3>XMindの良さ</h3>

<p>類似のソフトとしてFreeMindなどがありますが、私があえてXMindを好んで使っているのには、いくつか理由があります。</p>

<h4>マップがカラフルで美しい</h4>

<p>ブザンのマインドマップでは、カラフルであることが重要です。<br>
なぜなら、色は右脳に訴えかけ、想像力を豊かにするからです。</p>

<p>Xmindはカラフルなテーマが付属しています。見た目も美しく、気持ちよく使用できます。<br>
また、備え付けマーカー（アイコン）がカラフルで使いやすいのも特徴です（必要であれば、自分でマーカーを追加することも可能です）。<br>
一方、FreeMindはグラフィカルな面で貧弱な点が否めません。</p>

<h4>アウトラインエディタとして優れている</h4>

<p>これはFreeMindでもあてはまりますが、<br>
ドラッグ＆ドロップでブランチ（枝）の配置を直感的に変えられるのが最大の魅力です。<br>
この機能は文章の章立てを考えるときに便利で、文書の構造を大胆に変えられるのは大きなメリットです。</p>

<p>例えば、一度Word文書に書いたものについて、節単位の入れ替えなど大幅な修正をする場面を想像してみてください。<br>
「はじめに」という節に書いた文を「おわりに」という節に移すだけでも、Wordだと一苦労だと思います。<br>
マインドマップ上では、項目をドラッグ＆ドロップするだけで簡単に修正できます。</p>

<h4>マルチプラットフォーム</h4>

<p>XMindは、Windows, Mac, Linux(Debian/Ubuntu)という、現代で使われるPC環境のほとんどをカバーしています。<br>
Javaで動作しているので、Debian系以外のLinuxユーザでも使えます。</p>

<h4>基本機能は無料</h4>

<p>普段使うような機能については、無料で使用できます。<br>
PDFエクスポートなど一部有料の機能がありますが、画像エクスポートは無料のため十分使えます。</p>

<h2>XMorgDown</h2>

<p>しかし、XMindのエクスポート機能は正直言って貧弱です。<br>
HTMLについてはH3タグまでしかエクスポートできず、それ以下はべた書きになってしまいます。</p>

<p>そこで、XMorgDownという自作ツールをRubyで書きました。<br>
このツールは、XMindファイルを色々なフォーマットに変換します。</p>

<ul>
<li>出力フォーマット： Markdown, Org-mode, LaTeX, HTML, etc...</li>
</ul>

<p>このツールは、実はPandocという神のようなツールの助けを借りています。<br>
PandocはHTMLやMarkdown・LaTeXなどの文書を、多種多様なフォーマットに変換するHaskell製ツールです。<br>
開発も活発に行われており、今後注目されるべき激アツなツールの一つです。<br>
詳しくはこちらを参照してください：</p>

<ul>
<li><a href=\"http://johnmacfarlane.net/pandoc/index.html\">About pandoc</a></li>
</ul>

<h3>XMorgDownの中でやっていること：XSLT + Pandoc</h3>

<p>XMorgDownは以下のような処理を行っています：</p>

<ol>
<li>XMindのファイルからXMLを抽出</li>
<li>XSLT (XML Stylesheet Language Transformations) でXMLをHTMLに変換</li>
<li>PandocにHTMLを食わせて、色々なフォーマットに変換</li>
</ol>

<h3>使い方・インストール方法</h3>

<p>詳しい使い方・インストール方法は以下をご覧ください：</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/sky-y/20121012/1350731032\">XMorgDown：マインドマップをOrgやMarkdownに変換するスクリプト - 雲行きそらゆきココロイキ</a></li>
</ul>

<p>リリースしたてなので、インストール出来ないとか不具合あったら、どんどん報告なりpull requestなりしてください！</p>

<h2>Edit &amp; Publish</h2>

<p>マインドマップから生成した文書は、まだ骨格のみの状態です。<br>
次の段階では、この骨格に対して、MarkdownやOrg-modeなどで文書の肉付けしていきます。<br>
最後に、肉付けした文書を適当な形式にエクスポートし、体裁を整えて完成です！</p>

<h3>Markdown</h3>

<p>Markdownは、GithubやQiitaで採用されている軽量マークアップ言語です。もはや説明不要ですが、一応。</p>

<ul>
<li>Pandocオプション： -t markdown</li>
</ul>

<h4>出力</h4>

<h5>HTML</h5>

<p>PandocやMarkdownエディタ(Mouなど)でHTMLに変換できるので便利です。<br>
私はMac用Markdownエディタの<a href=\"http://mouapp.com/\">Mou</a>で編集した後、<br>
プレビュー画面のHTMLをコピーしてEvernoteに貼り付けたりしています。</p>

<h5>WordPress</h5>

<p>WordPressのプラグインを使うと、Markdownで記事が書けます。<br>
私が使っているのは、このプラグインです（管理画面でプラグインを検索したら出てくると思います）。</p>

<ul>
<li>Markdown on Save Improved</li>
<li>Markdown QuickTags</li>
</ul>

<h5>HatenaDiary</h5>

<p>markdown2hatena (@joker1007 さん作) を使用すると、Markdownをはてな記法に変換出来ます。</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/sky-y/20120830/1346329634\">（ツール紹介）Markdown記法をはてな記法に変換するツール - 雲行きそらゆきココロイキ</a></li>
</ul>

<h3>Org-mode</h3>

<p>Org-modeはEmacs公式の文書作成・TODO管理モードです。<br>
Markdownによく似た（しかし遥かに高機能な）Org-mode用の記法があります。<br>
ドキュメントの日本語訳が追いつかないほど、多機能で奧の深いツールです。</p>

<p>個人的には、編集機能が強力なのでMarkdownよりも好きです。<br>
見出し表示をまとめる機能があり、Org-mode単独でアウトラインエディタとして十分使えます。</p>

<p>まだ開発段階ですが、Vimにも一応Orgクローンがあるらしいです。</p>

<ul>
<li><a href=\"http://www.vim.org/scripts/script.php?script_id=3342\">VimOrganizer : An Emacs&#39; Org-mode clone for Vim</a></li>
</ul>

<p>Pandocのオプションは以下の通りです：</p>

<ul>
<li>Pandocオプション： -t org</li>
</ul>

<h4>出力</h4>

<p>エクスポート形式が豊富なのも、Org-modeの特徴です。<br>
エクスポートは C-c C-e で選択用バッファが開きます。</p>

<h5>LaTeX</h5>

<p>Org-modeはLaTeXと非常に相性がよく、強力な連携機能（RefTeX、数式埋め込みなど）も魅力です。<br>
プレゼン用スタイルファイルBeamerにも対応しています。</p>

<h5>HTML</h5>

<p>HTMLエクスポートにも対応しています。<br>
適当なCSSを自分で指定すれば、きれいに表示できます。</p>

<h5>OpenDocument形式</h5>

<p>OpenDocumentはLibreOffice/OpenOffice.orgのファイル形式です。<br>
Org-modeではWriter形式に対応しています。<br>
アウトライン構造まで忠実にエクスポートしてくれるのが、非常にうれしいです。</p>

<p>さらに、LibreOfficeを用いてMS Word形式にエクスポート可能なので、<br>
事務や共同作業の都合でWord形式の提出を迫られても安心です。</p>

<h3>LaTeX</h3>

<p>実はPandoc(XMorgDown)の段階で、直接LaTeXを出力できます。</p>

<ul>
<li>Pandocオプション： -t latex</li>
</ul>

<p>Beamerにも対応しています。</p>

<ul>
<li>Pandocオプション： -t beamer</li>
</ul>

<p>つまり、以下のうちから好みで選べることになります：</p>

<ul>
<li>Org文書を編集してからLaTeX出力する</li>
<li>Pandocで直接LaTeX出力して編集する</li>
</ul>

<h3>その他</h3>

<p>その他、Pandocに対応しているものは何でもOKです。<br>
詳しくは以下のサイトを見てください。</p>

<ul>
<li><a href=\"http://johnmacfarlane.net/pandoc/README.html\">Pandoc User’s Guide</a></li>
</ul>

<blockquote>
<p>It can read markdown and (subsets of) Textile, reStructuredText, HTML, LaTeX, and DocBook XML;</p>

<p>and it can write plain text, markdown, reStructuredText, XHTML, HTML 5, LaTeX (including beamer slide shows), ConTeXt, RTF, DocBook XML, OpenDocument XML, ODT, Word docx, GNU Texinfo, MediaWiki markup, EPUB, Textile, groff man pages, Emacs Org-Mode, AsciiDoc, and Slidy, Slideous, DZSlides, or S5 HTML slide shows. It can also produce PDF output on systems where LaTeX is installed.</p>
</blockquote>

<h2>終わりに</h2>

<p>最後に、ここまで説明した文書作成フローをおさらいしましょう。</p>

<p><img src=\"http://cl.ly/image/20132W013343/12.11.30_doc_advent.png\" alt=\"マインドマップを使った文書作成フロー\"></p>

<p>私はいつもあらゆる文書をこのフローで作成しています。<br>
もちろん、この記事も同じフローに乗っています。<br>
セットアップ（特にXMorgDownのインストール）が大変だと思いますが、<br>
そこを乗り越えると非常に快適なWriting Lifeが待っています。</p>

<p>もちろん、そこまで行かなくても、紹介したツールや言語のどれかに興味を持ってもらえれば幸いです。<br>
（特に、Pandocはもっと知ってもらいたいです！）<br>
ぜひ興味を持ったツールを試してみてください！</p>
") (published nil "2012-11-30T18:52:49Z") (updated nil "2012-11-30T18:54:00Z") (author nil (name nil "sky_y")))) ("Emacsを軽くした" "<h1>結論</h1>
<p>linum-mode重いからoffにする。使いたいなら以下をinit.elに追加して使うと良い。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(setq linum-delay t)
(defadvice linum-schedule (around my-linum-schedule () activate)
(run-with-idle-timer 0.2 nil #'linum-update-current))
</pre></div></div>
<p>その他の対策としてフォントをいじらない、再起動する、マシンスペック上げる等考えられる。</p>
<h1>詳細というかブログエントリ的な何か</h1>
<p>サーバのEmacsが重たくて仕方なかった。サーバにコードが置いてあるので、sshfsでサーバをマウントしてローカルのEmacs使ったり、ローカルのEmacsからTRAMPでサーバに繋いでみたり、とかやってたけど、これだとサーバのtmuxで作業状態が完結しないから切り替えが面倒だったり、サーバにあるコマンドを利用するEmacsの機能が使えなかったりして困ってた。<br>
でサーバのemacsをinit.elを読まずに起動したらそれなりに軽いので、どの機能が思い原因かをinit.elをちょっとずつコメントアウトしてついに原因を突き止めた。<br>
linum-mode (行番号表示)が原因だった。これをoffにすると軽い。しかし行番号の表示は欲しい。でぐぐると、init.elに以下を追加すると軽くなる、という記事を見つけて試してみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(setq linum-delay t)
(defadvice linum-schedule (around my-linum-schedule () activate)
(run-with-idle-timer 0.2 nil #'linum-update-current))
</pre></div></div>
<p><a href=\"http://d.hatena.ne.jp/daimatz/20120215/1329248780\">http://d.hatena.ne.jp/daimatz/20120215/1329248780</a><br>
これがビンゴで、凄く軽くなった。こんな神エントリがはてブ３しかないのが信じられなかった。</p>
<p>で、僕の話は終わりなんだけれども、他に重い原因調べて出てきたのには、フォントをいじると重い、という話や、段々重くなる、という症状なら再起動しろ、というかそもそもマシンスペック上げろ、という感じ。ちなみに僕の場合CPUがボトルネックだった。</p>" "http://qiita.com/items/acebbdae04994de16c6d" (20659 41324) old 26 nil nil ((id nil "tag:qiita.com,2005:Item/11102") (published nil "2012-11-27T02:05:48+09:00") (updated nil "2012-11-27T02:05:48+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/acebbdae04994de16c6d"))) (url nil "http://qiita.com/items/acebbdae04994de16c6d") (title nil "Emacsを軽くした") (content ((type . "html")) "<h1>結論</h1>

<p>linum-mode重いからoffにする。使いたいなら以下をinit.elに追加して使うと良い。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(setq linum-delay t)
(defadvice linum-schedule (around my-linum-schedule () activate)
  (run-with-idle-timer 0.2 nil #&#39;linum-update-current))
</pre></div></div>
<p>その他の対策としてフォントをいじらない、再起動する、マシンスペック上げる等考えられる。</p>

<h1>詳細というかブログエントリ的な何か</h1>

<p>サーバのEmacsが重たくて仕方なかった。サーバにコードが置いてあるので、sshfsでサーバをマウントしてローカルのEmacs使ったり、ローカルのEmacsからTRAMPでサーバに繋いでみたり、とかやってたけど、これだとサーバのtmuxで作業状態が完結しないから切り替えが面倒だったり、サーバにあるコマンドを利用するEmacsの機能が使えなかったりして困ってた。<br>
でサーバのemacsをinit.elを読まずに起動したらそれなりに軽いので、どの機能が思い原因かをinit.elをちょっとずつコメントアウトしてついに原因を突き止めた。<br>
linum-mode (行番号表示)が原因だった。これをoffにすると軽い。しかし行番号の表示は欲しい。でぐぐると、init.elに以下を追加すると軽くなる、という記事を見つけて試してみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>(setq linum-delay t)
(defadvice linum-schedule (around my-linum-schedule () activate)
  (run-with-idle-timer 0.2 nil #&#39;linum-update-current))
</pre></div></div>
<p><a href=\"http://d.hatena.ne.jp/daimatz/20120215/1329248780\">http://d.hatena.ne.jp/daimatz/20120215/1329248780</a><br>
これがビンゴで、凄く軽くなった。こんな神エントリがはてブ３しかないのが信じられなかった。</p>

<p>で、僕の話は終わりなんだけれども、他に重い原因調べて出てきたのには、フォントをいじると重い、という話や、段々重くなる、という症状なら再起動しろ、というかそもそもマシンスペック上げろ、という感じ。ちなみに僕の場合CPUがボトルネックだった。</p>
") (published nil "2012-11-27T02:05:48Z") (updated nil "2012-11-27T02:05:48Z") (author nil (name nil "takc923")))) ("Mac版EmacsのTRAMP (ange-ftp) とExtended Passive Mode" "<h2>困ってること</h2>
<p>Mac OS XのEmacsでTRAMP (ange-ftp) を使っているとたまに<code>Entering Extended Passive Mode</code>などと言われて操作がブロックされることがある (接続先のサーバによるようです)。</p>
<p>Extended Passive Modeを切ってやる、具体的にはftpプロセスに対して<code>epsv4 off</code>を送りつけてやるとこれが解決する。が、ange-ftpにそのような機能はない。</p>
<p><a href=\"http://www.kit.hi-ho.ne.jp/amist/\" title=\"idx\">解決策</a>らしきものを見つけたのだがどうもhookを実行してくれていない。何故なのか深く追いかけていないので謎。ange-ftpのコードを読む限りでは呼んでるっぽいんですがね…。しょうがないのでadviceを使ってやることにした。</p>
<h2>解決</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre>;;;
;;; TRAMP関連の設定
;;;
(setq ange-ftp-try-passive-mode t)      ; 必ずpassive modeに
(when (equal system-type 'darwin)       ; Macのftpはextended passivemodeで酷いことになるのでそれをoffにする
(defadvice ange-ftp-passive-mode (before ange-ftp-epsv4-off)
(ange-ftp-raw-send-cmd proc &quot;epsv4 off&quot;))
(ad-activate 'ange-ftp-passive-mode))
</pre></div></div>
<p>見ればわかるが、passive modeにするための関数 (<code>ange-ftp-passive-mode</code>) に引っかけている。なので<code>ange-ftp-try-passive-mode</code>や<code>ange-ftp-passive-host-alist</code>などを使ってpasive modeでやりとりするように設定しなければなりません。</p>
<h2>バージョン</h2>
<p>これはGnu Emacs 24.2.1とMac OS X 10.7.5 (Lion) での話です。でも多分他のバージョンでも起こると思います。</p>
<h2>参考文献</h2>
<ul>
<li><a href=\"http://www.kit.hi-ho.ne.jp/amist/\">idx</a> <code>add-hook</code>を使った解決策。でもうちのでは動かない。why?</li>
<li><a href=\"http://d.hatena.ne.jp/mir/20070622/p2\">Entering Extended Passive Modeで詰まった場合</a> </li>
<li><a href=\"http://d.hatena.ne.jp/obache/20071123/1195795599\">pkgsrc 関連のネットワークの設定</a> 最後の方にextended passive modde及びftpの初期化ファイル~/.netrcについての記述がある。ただしange-ftpは<code>macdef init</code>行以下を無視するので設定したとしても解決しない。</li>
</ul>" "http://qiita.com/items/acbef2bc5a0293dc8268" (20643 41468) old 27 nil nil ((id nil "tag:qiita.com,2005:Item/10734") (published nil "2012-11-14T22:51:56+09:00") (updated nil "2012-11-14T22:51:56+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/acbef2bc5a0293dc8268"))) (url nil "http://qiita.com/items/acbef2bc5a0293dc8268") (title nil "Mac版EmacsのTRAMP (ange-ftp) とExtended Passive Mode") (content ((type . "html")) "<h2>困ってること</h2>

<p>Mac OS XのEmacsでTRAMP (ange-ftp) を使っているとたまに<code>Entering Extended Passive Mode</code>などと言われて操作がブロックされることがある (接続先のサーバによるようです)。</p>

<p>Extended Passive Modeを切ってやる、具体的にはftpプロセスに対して<code>epsv4 off</code>を送りつけてやるとこれが解決する。が、ange-ftpにそのような機能はない。</p>

<p><a href=\"http://www.kit.hi-ho.ne.jp/amist/\" title=\"idx\">解決策</a>らしきものを見つけたのだがどうもhookを実行してくれていない。何故なのか深く追いかけていないので謎。ange-ftpのコードを読む限りでは呼んでるっぽいんですがね…。しょうがないのでadviceを使ってやることにした。</p>

<h2>解決</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre>;;;                                                                                                                                    
;;; TRAMP関連の設定                                                                                                                    
;;;                                                                                                                                    
(setq ange-ftp-try-passive-mode t)      ; 必ずpassive modeに                                                                           
(when (equal system-type &#39;darwin)       ; Macのftpはextended passivemodeで酷いことになるのでそれをoffにする                            
  (defadvice ange-ftp-passive-mode (before ange-ftp-epsv4-off)
    (ange-ftp-raw-send-cmd proc &quot;epsv4 off&quot;))
  (ad-activate &#39;ange-ftp-passive-mode))
</pre></div></div>
<p>見ればわかるが、passive modeにするための関数 (<code>ange-ftp-passive-mode</code>) に引っかけている。なので<code>ange-ftp-try-passive-mode</code>や<code>ange-ftp-passive-host-alist</code>などを使ってpasive modeでやりとりするように設定しなければなりません。</p>

<h2>バージョン</h2>

<p>これはGnu Emacs 24.2.1とMac OS X 10.7.5 (Lion) での話です。でも多分他のバージョンでも起こると思います。</p>

<h2>参考文献</h2>

<ul>
<li><a href=\"http://www.kit.hi-ho.ne.jp/amist/\">idx</a> <code>add-hook</code>を使った解決策。でもうちのでは動かない。why?</li>
<li><a href=\"http://d.hatena.ne.jp/mir/20070622/p2\">Entering Extended Passive Modeで詰まった場合</a> </li>
<li><a href=\"http://d.hatena.ne.jp/obache/20071123/1195795599\">pkgsrc 関連のネットワークの設定</a> 最後の方にextended passive modde及びftpの初期化ファイル~/.netrcについての記述がある。ただしange-ftpは<code>macdef init</code>行以下を無視するので設定したとしても解決しない。</li>
</ul>
") (published nil "2012-11-14T22:51:56Z") (updated nil "2012-11-14T22:51:56Z") (author nil (name nil "hage@github")))) ("Tclのflymake と org-modeの併用" "<p>tclのソースが含まれるorg-modeのテキストを、exportしようとするとflymake-get-file-name-mode-and-masksでエラーになります。<br>
エラー発生箇所はここ</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">flymake.el</span></div><div class=\"highlight\"><pre>(defun flymake-get-file-name-mode-and-masks (file-name)
&quot;Return the corresponding entry from `flymake-allowed-file-name-masks'.&quot;
(unless (stringp file-name)
(error &quot;Invalid file-name&quot;))
</pre>
</div>
</div>
<p>Emacsのトレースはこれ</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">*Backtrace*</span></div><div class=\"highlight\"><pre>Debugger entered--Lisp error: (error &quot;Invalid file-name&quot;)
signal(error (&quot;Invalid file-name&quot;))
error(&quot;Invalid file-name&quot;)
(if (stringp file-name) nil (error &quot;Invalid file-name&quot;))
(unless (stringp file-name) (error &quot;Invalid file-name&quot;))
flymake-get-file-name-mode-and-masks(nil)
(nth 0 (flymake-get-file-name-mode-and-masks file-name))
(let* ((init-f ...)) init-f)
</pre>
</div>
</div>
<p>.emacsに以下のコード追加し、org-modeからtcl-modeが呼ばれた時はflymakeを無効にして対応しました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(defvar on-org-mode nil)
(defadvice org-export (around flymake-off activate)
(setq on-org-mode t)
ad-do-it
(setq on-org-mode nil))
; org-modeから呼ばれていないときのみflymakeを有効にする。
(add-hook 'tcl-mode-hook
(lambda ()
(unless on-org-mode
(flymake-mode t))))
</pre>
</div>
</div>" "http://qiita.com/items/d26f1c87fb8b88fd5b2b" (20635 21872) old 28 nil nil ((id nil "tag:qiita.com,2005:Item/10577") (published nil "2012-11-08T15:46:23+09:00") (updated nil "2012-11-08T15:47:12+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d26f1c87fb8b88fd5b2b"))) (url nil "http://qiita.com/items/d26f1c87fb8b88fd5b2b") (title nil "Tclのflymake と org-modeの併用") (content ((type . "html")) "<p>tclのソースが含まれるorg-modeのテキストを、exportしようとするとflymake-get-file-name-mode-and-masksでエラーになります。<br>
エラー発生箇所はここ</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">flymake.el</span></div><div class=\"highlight\"><pre>(defun flymake-get-file-name-mode-and-masks (file-name)
  &quot;Return the corresponding entry from `flymake-allowed-file-name-masks&#39;.&quot;
  (unless (stringp file-name)
    (error &quot;Invalid file-name&quot;))
</pre>
</div>
</div>
<p>Emacsのトレースはこれ</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">*Backtrace*</span></div><div class=\"highlight\"><pre>Debugger entered--Lisp error: (error &quot;Invalid file-name&quot;)
  signal(error (&quot;Invalid file-name&quot;))
  error(&quot;Invalid file-name&quot;)
  (if (stringp file-name) nil (error &quot;Invalid file-name&quot;))
  (unless (stringp file-name) (error &quot;Invalid file-name&quot;))
  flymake-get-file-name-mode-and-masks(nil)
  (nth 0 (flymake-get-file-name-mode-and-masks file-name))
  (let* ((init-f ...)) init-f)
</pre>
</div>
</div>
<p>.emacsに以下のコード追加し、org-modeからtcl-modeが呼ばれた時はflymakeを無効にして対応しました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(defvar on-org-mode nil)
(defadvice org-export (around flymake-off activate)
    (setq on-org-mode t)
    ad-do-it
    (setq on-org-mode nil))

; org-modeから呼ばれていないときのみflymakeを有効にする。
(add-hook &#39;tcl-mode-hook
      (lambda ()
        (unless on-org-mode
          (flymake-mode t))))
</pre>
</div>
</div>") (published nil "2012-11-08T15:46:23Z") (updated nil "2012-11-08T15:47:12Z") (author nil (name nil "natsutan")))) ("リージョンを複数選択して同時にリアルタイム編集出来る mark-multiple.el" "<p><a href=\"http://qiita.com/items/abd1016bf484c4e05ab1\">昨日のexpand-region</a> に引き続き、これもいいです。</p>
<ul>
<li><a href=\"http://d.hatena.ne.jp/syohex/20120206/1328540927\">mark-multiple.elの mark-more-like-thisの紹介 - Life is very short</a> </li>
</ul>
<p>まずは <a href=\"http://emacsrocks.com/e08.html\">動画</a> をどうぞ。特にすごいのは20秒～30秒の辺り！</p>
<h2>インストール</h2>
<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120613/1339607400\">package.el</a> に入っていたのでそっちを使いました。</p>
<p><code>M-x package-list-packages</code> で <code>mark-multiple</code> にカーソルを合わせてEnter</p>
<h2>設定</h2>
<p>基本はデフォルト設定のままですが、<code>rename-sgml-tag</code>をhtml-modeで使えるようにしています。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>;; mark-multiple
(require 'inline-string-rectangle)
(global-set-key (kbd &quot;C-x r t&quot;) 'inline-string-rectangle)
(require 'mark-more-like-this)
(global-set-key (kbd &quot;C-&lt;&quot;) 'mark-previous-like-this)
(global-set-key (kbd &quot;C-&gt;&quot;) 'mark-next-like-this)
;; (global-set-key (kbd &quot;C-M-m&quot;) 'mark-more-like-this) ; like the other two, but takes an argument (negative is previous)
(global-set-key (kbd &quot;C-*&quot;) 'mark-all-like-this)
;; (add-hook 'sgml-mode-hook
;;           (lambda ()
;;             (require 'rename-sgml-tag)
;;             (define-key sgml-mode-map (kbd &quot;C-c C-r&quot;) 'rename-sgml-tag)))
(add-hook 'html-mode-hook
(lambda ()
(require 'rename-sgml-tag)
(define-key html-mode-map (kbd &quot;C-c C-r&quot;) 'rename-sgml-tag)))
</pre>
</div>
</div>
<h2>リンク</h2>
<ul>
<li><a href=\"https://github.com/magnars/mark-multiple.el\">magnars/mark-multiple.el</a>  - 本家</li>
</ul>" "http://qiita.com/items/00f679a5771604c4feb1" (20634 12728) old 29 nil nil ((id nil "tag:qiita.com,2005:Item/10557") (published nil "2012-11-07T19:02:32+09:00") (updated nil "2012-11-07T19:02:32+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/00f679a5771604c4feb1"))) (url nil "http://qiita.com/items/00f679a5771604c4feb1") (title nil "リージョンを複数選択して同時にリアルタイム編集出来る mark-multiple.el") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/abd1016bf484c4e05ab1\">昨日のexpand-region</a> に引き続き、これもいいです。</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/syohex/20120206/1328540927\">mark-multiple.elの mark-more-like-thisの紹介 - Life is very short</a> </li>
</ul>

<p>まずは <a href=\"http://emacsrocks.com/e08.html\">動画</a> をどうぞ。特にすごいのは20秒～30秒の辺り！</p>

<h2>インストール</h2>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120613/1339607400\">package.el</a> に入っていたのでそっちを使いました。</p>

<p><code>M-x package-list-packages</code> で <code>mark-multiple</code> にカーソルを合わせてEnter</p>

<h2>設定</h2>

<p>基本はデフォルト設定のままですが、<code>rename-sgml-tag</code>をhtml-modeで使えるようにしています。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>;; mark-multiple
(require &#39;inline-string-rectangle)
(global-set-key (kbd &quot;C-x r t&quot;) &#39;inline-string-rectangle)

(require &#39;mark-more-like-this)
(global-set-key (kbd &quot;C-&lt;&quot;) &#39;mark-previous-like-this)
(global-set-key (kbd &quot;C-&gt;&quot;) &#39;mark-next-like-this)
;; (global-set-key (kbd &quot;C-M-m&quot;) &#39;mark-more-like-this) ; like the other two, but takes an argument (negative is previous)
(global-set-key (kbd &quot;C-*&quot;) &#39;mark-all-like-this)

;; (add-hook &#39;sgml-mode-hook
;;           (lambda ()
;;             (require &#39;rename-sgml-tag)
;;             (define-key sgml-mode-map (kbd &quot;C-c C-r&quot;) &#39;rename-sgml-tag)))
(add-hook &#39;html-mode-hook
          (lambda ()
            (require &#39;rename-sgml-tag)
            (define-key html-mode-map (kbd &quot;C-c C-r&quot;) &#39;rename-sgml-tag)))
</pre>
</div>
</div>
<h2>リンク</h2>

<ul>
<li><a href=\"https://github.com/magnars/mark-multiple.el\">magnars/mark-multiple.el</a>  - 本家</li>
</ul>
") (published nil "2012-11-07T19:02:32Z") (updated nil "2012-11-07T19:02:32Z") (author nil (name nil "ongaeshi")))) ("Emacsで選択範囲をインタラクティブに広げる expand-region" "<p>久しぶりにいいelispに出会いました。</p>
<ul>
<li><a href=\"http://d.hatena.ne.jp/syohex/20120117/1326814127\">expand-region.elの紹介 - Life is very short</a> </li>
</ul>
<h2>インストール</h2>
<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120613/1339607400\">package.el</a> に入っていたのでそっちを使いました。</p>
<p><code>M-x package-list-packages</code> で <code>expand-region</code> にカーソルを合わせてEnter</p>
<h2>設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>;; expand-region
(require 'expand-region)
(global-set-key (kbd &quot;C-@&quot;) 'er/expand-region)
(global-set-key (kbd &quot;C-M-@&quot;) 'er/contract-region)
</pre>
</div>
</div>
<h2>リンク</h2>
<ul>
<li><a href=\"https://github.com/magnars/expand-region.el\">magnars/expand-region.el</a> - 本家</li>
<li><a href=\"http://emacsrocks.com/e09.html\">Episode 09: expand-region - Emacs Rocks!</a> - 動画</li>
</ul>
<h2>あわせてどうぞ</h2>
<ul>
<li><a href=\"http://qiita.com/items/00f679a5771604c4feb1\">リージョンを複数選択して同時にリアルタイム編集出来る mark-multiple.e</a> </li>
</ul>" "http://qiita.com/items/abd1016bf484c4e05ab1" (20640 50173) old 30 nil nil ((id nil "tag:qiita.com,2005:Item/10516") (published nil "2012-11-06T17:58:27+09:00") (updated nil "2012-11-12T18:40:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/abd1016bf484c4e05ab1"))) (url nil "http://qiita.com/items/abd1016bf484c4e05ab1") (title nil "Emacsで選択範囲をインタラクティブに広げる expand-region") (content ((type . "html")) "<p>久しぶりにいいelispに出会いました。</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/syohex/20120117/1326814127\">expand-region.elの紹介 - Life is very short</a> </li>
</ul>

<h2>インストール</h2>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120613/1339607400\">package.el</a> に入っていたのでそっちを使いました。</p>

<p><code>M-x package-list-packages</code> で <code>expand-region</code> にカーソルを合わせてEnter</p>

<h2>設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>;; expand-region
(require &#39;expand-region)
(global-set-key (kbd &quot;C-@&quot;) &#39;er/expand-region)
(global-set-key (kbd &quot;C-M-@&quot;) &#39;er/contract-region)
</pre>
</div>
</div>
<h2>リンク</h2>

<ul>
<li><a href=\"https://github.com/magnars/expand-region.el\">magnars/expand-region.el</a> - 本家</li>
<li><a href=\"http://emacsrocks.com/e09.html\">Episode 09: expand-region - Emacs Rocks!</a> - 動画</li>
</ul>

<h2>あわせてどうぞ</h2>

<ul>
<li><a href=\"http://qiita.com/items/00f679a5771604c4feb1\">リージョンを複数選択して同時にリアルタイム編集出来る mark-multiple.e</a> </li>
</ul>
") (published nil "2012-11-06T17:58:27Z") (updated nil "2012-11-12T18:40:13Z") (author nil (name nil "ongaeshi")))) ("OS XのEmacs.appで${HOME}配下にインストールしたMewを動かす" "<p>そもそもOS XでEmacs.appをインストールしているのにMewを${HOME}配下にインストールしないといけない理由がわからないという人もいるかもしれませんが、Emacs.appにmewを混ぜたくないがあまり適当なディレクトリがない、というわけで、私はHomebrewでインストールしたEmacs.appと${HOME}に野良ビルドしたMewという組み合わせでメールを読み書きしています（会社でのみ）。</p>
<p>ところで、何も考えずにこの組み合わせでMewを使うと、~/bin配下にインストールしたバイナリを呼び出す必要があるときに「mewl: command not found」などのエラーに遭遇してしまうことがあります。これは、launchdから引き継いだPATHをEmacs.appが（事実上）そのまま使ってしまうためです。</p>
<p>（Emacs.appはbash等を経由して起動されるわけではないため、PATHを変更できるよいタイミングがありません。/etc/launchd.confを修正しても目的は達成できるのですが、/etc/launchd.confのsetenv PATH行に${HOME}配下のパスを書き加えるのは抵抗がありますので、私はこの方法を採用しませんでした。なお、launchdは${HOME}/.launchd.confを読みません）</p>
<p>つまり問題は「Emacsにコマンドサーチパスを追加するにはどうしたらよいか」なのですが、<br>
この問題を解決するには、~/.emacs.d/init.el等に以下のコードを入れるのがよいようです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-directory-p</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"s\">&quot;~/bin&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">progn</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'exec-path</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"s\">&quot;~/bin&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">exec-path</span> <span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"p\">(</span><span class=\"nv\">cdr-safe</span> <span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"nv\">exec-path</span><span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;PATH&quot;</span> <span class=\"p\">(</span><span class=\"nv\">mapconcat</span> <span class=\"ss\">'identity</span> <span class=\"nv\">exec-path</span> <span class=\"nv\">path-separator</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>関数add-to-listは第1引数（ここではexec-path。関数実行前に展開されないようquoteし、シンボルとしておく）の要素に第2引数（ここでは&quot;~/bin&quot;をexpand-file-nameしたもの）がない場合に限り第1引数のリストに第2引数を追加するという挙動を示します。</p>
<p>exec-pathに${HOME}/binが追加されたら、Emacs.Appの子プロセスからも使えるように環境変数PATHをexec-pathに合わせます（exec-pathはもともとPATHの値をもとに設定されます）。それがsetenv行で、setenvの第2引数に対しexec-pathを「:」でmapconcatした結果を返しますが、mapconcatそれ自体は関数に対して引数を渡す関数なので、引数をそのまま返すだけの関数であるidentifyを介すことでsetenvを成立させています。</p>
<p>（2012年11月6日修正）exec-pathをそのまま使うとEmacsのlibexecディレクトリ（HomebrewでEmacs 24.1を入れたOS X 10.8の場合は/usr/local/Cellar/emacs/24.1/libexec/emacs/24.1/x86_64-apple-darwin12.2.0）もPATHに含まれてしまうため、letで束縛したexec-pathをreverseで一旦逆さにしてから最初の要素だけを排除（cdr）し、再度reverseすることで順序をもとに戻したものを設定し、PATHの生成に利用しています。また、path-separatorを使いました。</p>" "http://qiita.com/items/f0db094fde6640143f42" (20633 11613) old 31 nil nil ((id nil "tag:qiita.com,2005:Item/10492") (published nil "2012-11-05T15:03:57+09:00") (updated nil "2012-11-07T00:31:41+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f0db094fde6640143f42"))) (url nil "http://qiita.com/items/f0db094fde6640143f42") (title nil "OS XのEmacs.appで${HOME}配下にインストールしたMewを動かす") (content ((type . "html")) "<p>そもそもOS XでEmacs.appをインストールしているのにMewを${HOME}配下にインストールしないといけない理由がわからないという人もいるかもしれませんが、Emacs.appにmewを混ぜたくないがあまり適当なディレクトリがない、というわけで、私はHomebrewでインストールしたEmacs.appと${HOME}に野良ビルドしたMewという組み合わせでメールを読み書きしています（会社でのみ）。</p>

<p>ところで、何も考えずにこの組み合わせでMewを使うと、~/bin配下にインストールしたバイナリを呼び出す必要があるときに「mewl: command not found」などのエラーに遭遇してしまうことがあります。これは、launchdから引き継いだPATHをEmacs.appが（事実上）そのまま使ってしまうためです。</p>

<p>（Emacs.appはbash等を経由して起動されるわけではないため、PATHを変更できるよいタイミングがありません。/etc/launchd.confを修正しても目的は達成できるのですが、/etc/launchd.confのsetenv PATH行に${HOME}配下のパスを書き加えるのは抵抗がありますので、私はこの方法を採用しませんでした。なお、launchdは${HOME}/.launchd.confを読みません）</p>

<p>つまり問題は「Emacsにコマンドサーチパスを追加するにはどうしたらよいか」なのですが、<br>
この問題を解決するには、~/.emacs.d/init.el等に以下のコードを入れるのがよいようです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-directory-p</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"s\">&quot;~/bin&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"k\">progn</span> 
      <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;exec-path</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"s\">&quot;~/bin&quot;</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">exec-path</span> <span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"p\">(</span><span class=\"nv\">cdr-safe</span> <span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"nv\">exec-path</span><span class=\"p\">)))))</span>
        <span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;PATH&quot;</span> <span class=\"p\">(</span><span class=\"nv\">mapconcat</span> <span class=\"ss\">&#39;identity</span> <span class=\"nv\">exec-path</span> <span class=\"nv\">path-separator</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>関数add-to-listは第1引数（ここではexec-path。関数実行前に展開されないようquoteし、シンボルとしておく）の要素に第2引数（ここでは&quot;~/bin&quot;をexpand-file-nameしたもの）がない場合に限り第1引数のリストに第2引数を追加するという挙動を示します。</p>

<p>exec-pathに${HOME}/binが追加されたら、Emacs.Appの子プロセスからも使えるように環境変数PATHをexec-pathに合わせます（exec-pathはもともとPATHの値をもとに設定されます）。それがsetenv行で、setenvの第2引数に対しexec-pathを「:」でmapconcatした結果を返しますが、mapconcatそれ自体は関数に対して引数を渡す関数なので、引数をそのまま返すだけの関数であるidentifyを介すことでsetenvを成立させています。</p>

<p>（2012年11月6日修正）exec-pathをそのまま使うとEmacsのlibexecディレクトリ（HomebrewでEmacs 24.1を入れたOS X 10.8の場合は/usr/local/Cellar/emacs/24.1/libexec/emacs/24.1/x86_64-apple-darwin12.2.0）もPATHに含まれてしまうため、letで束縛したexec-pathをreverseで一旦逆さにしてから最初の要素だけを排除（cdr）し、再度reverseすることで順序をもとに戻したものを設定し、PATHの生成に利用しています。また、path-separatorを使いました。</p>
") (published nil "2012-11-05T15:03:57Z") (updated nil "2012-11-07T00:31:41Z") (author nil (name nil "h12o")))) ("Emacsで、node.jsのrequire()にカーソルがあるとき、定義元へ飛ぶ (ffap)" "<p>node.jsには、require.resolve という、ライブラリのパスを返す関数があるので、<br>
Emacsから使うと便利。</p>
<p>Emacsに標準で入っているffap.el は、カーソル位置の文字からファイルを探して開くためのAPIを提供していて、簡単に設定できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ffap-nodejs</span> <span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
<span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;node -e 'try { require(\\&quot;util\\&quot;).print(require.resolve(\\&quot;%s\\&quot;)) } catch(e) {}'&quot;</span>
<span class=\"nv\">name</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'ffap-alist</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">js3-mode</span> <span class=\"o\">.</span> <span class=\"nv\">ffap-nodejs</span><span class=\"p\">))</span>
</pre>
</div>
</div>" "http://qiita.com/items/548be51137e5fecad68a" (20629 13031) old 32 nil nil ((id nil "tag:qiita.com,2005:Item/10455") (published nil "2012-11-03T02:09:09+09:00") (updated nil "2012-11-04T00:06:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/548be51137e5fecad68a"))) (url nil "http://qiita.com/items/548be51137e5fecad68a") (title nil "Emacsで、node.jsのrequire()にカーソルがあるとき、定義元へ飛ぶ (ffap)") (content ((type . "html")) "<p>node.jsには、require.resolve という、ライブラリのパスを返す関数があるので、<br>
Emacsから使うと便利。</p>

<p>Emacsに標準で入っているffap.el は、カーソル位置の文字からファイルを探して開くためのAPIを提供していて、簡単に設定できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ffap-nodejs</span> <span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
   <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;node -e &#39;try { require(\\&quot;util\\&quot;).print(require.resolve(\\&quot;%s\\&quot;)) } catch(e) {}&#39;&quot;</span>
           <span class=\"nv\">name</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;ffap-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">js3-mode</span> <span class=\"o\">.</span> <span class=\"nv\">ffap-nodejs</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-11-03T02:09:09Z") (updated nil "2012-11-04T00:06:15Z") (author nil (name nil "hadashiA")))) ("smart-mode-line.elの設定いじったらphpファイル編集する時の動作がおかしくなった" "<p>[追記]<br>
やっぱり設定云々の前に、smart-mode-line使った時点で動作がおかしかったので、そもそも使うのやめた<br>
[追記終わり]</p>
<p>smart-mode-line.elのfile名を表示する長さとmodeを表示する長さを↓のようにいじった。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(custom-set-variables
略
'(sml/mode-width 30)
'(sml/name-width 70))
</pre>
</div>
</div>
<p>そしたらphpファイル編集する時の動作がおかしくなって、とても使い物にならなくなったので戻した。<br>
phpファイル編集する時のどれかのmodeとバッティングしてるんだと思う。それ調べる気力はないので、この部分をコメントアウトして放置。<br>
この設定が原因だと突き止めるだけで大分時間食った。。。</p>" "http://qiita.com/items/d8e0f9133d73e4f42de8" (20621 30116) old 33 nil nil ((id nil "tag:qiita.com,2005:Item/10346") (published nil "2012-10-29T03:06:11+09:00") (updated nil "2012-10-29T03:12:52+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d8e0f9133d73e4f42de8"))) (url nil "http://qiita.com/items/d8e0f9133d73e4f42de8") (title nil "smart-mode-line.elの設定いじったらphpファイル編集する時の動作がおかしくなった") (content ((type . "html")) "<p>[追記]<br>
やっぱり設定云々の前に、smart-mode-line使った時点で動作がおかしかったので、そもそも使うのやめた<br>
[追記終わり]</p>

<p>smart-mode-line.elのfile名を表示する長さとmodeを表示する長さを↓のようにいじった。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(custom-set-variables
略
 &#39;(sml/mode-width 30)
 &#39;(sml/name-width 70))
</pre>
</div>
</div>
<p>そしたらphpファイル編集する時の動作がおかしくなって、とても使い物にならなくなったので戻した。<br>
phpファイル編集する時のどれかのmodeとバッティングしてるんだと思う。それ調べる気力はないので、この部分をコメントアウトして放置。<br>
この設定が原因だと突き止めるだけで大分時間食った。。。</p>
") (published nil "2012-10-29T03:06:11Z") (updated nil "2012-10-29T03:12:52Z") (author nil (name nil "takc923")))) ("jojo-modeのセリフ「次にお前は「xx」という！」のひな形" "<p>.emacsなど設定ファイルに以下を追加</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">twittering-jojo-tweet</span></div><div class=\"highlight\"><pre>(defun twittering-jojo-tweet (msg)
(interactive &quot;s相手が言うセリフ: &quot;)
(when (and (string= &quot;Japanese&quot; current-language-environment)
(or (&lt; 21 emacs-major-version)
(eq 'utf-8 (terminal-coding-system))))
(let ((text
(concat
(concat
(concat
&quot;お前は次に「&quot;) msg &quot;」という！&quot;))))
(twittering-call-api 'update-status `((status . ,text))))))
</pre>
</div>
</div>
<p>あとは</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(let km twittering-mode-map
(define-key km (kbd &quot;\\C-c j&quot;) 'twittering-jojo-tweet)
nil)
</pre>
</div>
</div>
<p>と設定しておけば来る2部TLに備えられる。</p>" "http://qiita.com/items/c314dfee1e9b10cb39a9" (20619 27111) old 34 nil nil ((id nil "tag:qiita.com,2005:Item/10318") (published nil "2012-10-27T13:56:33+09:00") (updated nil "2012-10-27T13:58:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c314dfee1e9b10cb39a9"))) (url nil "http://qiita.com/items/c314dfee1e9b10cb39a9") (title nil "jojo-modeのセリフ「次にお前は「xx」という！」のひな形") (content ((type . "html")) "<p>.emacsなど設定ファイルに以下を追加</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">twittering-jojo-tweet</span></div><div class=\"highlight\"><pre>(defun twittering-jojo-tweet (msg)
  (interactive &quot;s相手が言うセリフ: &quot;)
  (when (and (string= &quot;Japanese&quot; current-language-environment)
             (or (&lt; 21 emacs-major-version)
                 (eq &#39;utf-8 (terminal-coding-system))))
    (let ((text
           (concat
            (concat
             (concat
              &quot;お前は次に「&quot;) msg &quot;」という！&quot;))))
    (twittering-call-api &#39;update-status `((status . ,text))))))
</pre>
</div>
</div>
<p>あとは</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(let km twittering-mode-map
  (define-key km (kbd &quot;\\C-c j&quot;) &#39;twittering-jojo-tweet)
  nil)
</pre>
</div>
</div>
<p>と設定しておけば来る2部TLに備えられる。</p>
") (published nil "2012-10-27T13:56:33Z") (updated nil "2012-10-27T13:58:15Z") (author nil (name nil "akihumi@github")))) ("Emacsの分割ウィンドウを←↓↑→で移動" "<p>Emacs では <code>C-x 2</code> や <code>C-x 3</code> で画面を複数のウィンドウに分割することができ、これらの間は <code>C-x o</code> でトグルして移動することができます。しかし、みっつ以上に分割した場合には <code>C-x o</code> といふ2ストロークのキーバインドを連打する必要があり、戻りたいときにも標準では <code>C-u C-x o</code> も利かない不親切仕様です。</p>
<p>ところで、 <code>tmux</code> といふターミナルマルチプレクサ (GNU Screen のご同類です) には、複数の分割した領域を <code>C-b [←↓↑→]</code> で移動できる設定が標準であります。これを拝借してきませう。</p>
<p>Emacs には標準で <code>windmove</code> といふ機能が標準で含まれてゐます。 <code>M-x windmove</code> と押すと、特に設定してなくとも <code>windmove-{left,down,up,right}</code> 函数がご利用いただけることが確認できると思ひます。これがまさに <code>tmux</code> の移動と同様のものですので、ここにキーバインドを設定してやれば良さげですね。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">keybindings-windmove.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;left&gt;&quot;</span><span class=\"p\">)</span>  <span class=\"ss\">'windmove-left</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;down&gt;&quot;</span><span class=\"p\">)</span>  <span class=\"ss\">'windmove-down</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;up&gt;&quot;</span><span class=\"p\">)</span>    <span class=\"ss\">'windmove-up</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;right&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'windmove-right</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>できましたー。</p>
<p>しかし…</p>
<p><a href=\"http://www.emacswiki.org/emacs/WindMove\">EmacsWiki: Wind Move</a></p>
<p>あれっ、まったく同じことやってた…</p>
<p>ちなみに最初はプレフィックス <code>C-c</code> じゃなくて <code>C-x</code> でやってましたが、最近ちょっと使ひ始めてみた <a href=\"http://www.emacswiki.org/emacs/BackButton\">EmacsWiki: Back Button</a> の標準キーバインドと衝突してたので、晴れて EmacsWiki 版と同じに戻ってしまひましたとさ。ちゃんちゃん。</p>" "http://qiita.com/items/114ffe6bb645551268dd" (20616 20648) old 35 nil nil ((id nil "tag:qiita.com,2005:Item/10269") (published nil "2012-10-25T00:53:22+09:00") (updated nil "2012-10-25T05:33:44+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/114ffe6bb645551268dd"))) (url nil "http://qiita.com/items/114ffe6bb645551268dd") (title nil "Emacsの分割ウィンドウを←↓↑→で移動") (content ((type . "html")) "<p>Emacs では <code>C-x 2</code> や <code>C-x 3</code> で画面を複数のウィンドウに分割することができ、これらの間は <code>C-x o</code> でトグルして移動することができます。しかし、みっつ以上に分割した場合には <code>C-x o</code> といふ2ストロークのキーバインドを連打する必要があり、戻りたいときにも標準では <code>C-u C-x o</code> も利かない不親切仕様です。</p>

<p>ところで、 <code>tmux</code> といふターミナルマルチプレクサ (GNU Screen のご同類です) には、複数の分割した領域を <code>C-b [←↓↑→]</code> で移動できる設定が標準であります。これを拝借してきませう。</p>

<p>Emacs には標準で <code>windmove</code> といふ機能が標準で含まれてゐます。 <code>M-x windmove</code> と押すと、特に設定してなくとも <code>windmove-{left,down,up,right}</code> 函数がご利用いただけることが確認できると思ひます。これがまさに <code>tmux</code> の移動と同様のものですので、ここにキーバインドを設定してやれば良さげですね。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">keybindings-windmove.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;left&gt;&quot;</span><span class=\"p\">)</span>  <span class=\"ss\">&#39;windmove-left</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;down&gt;&quot;</span><span class=\"p\">)</span>  <span class=\"ss\">&#39;windmove-down</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;up&gt;&quot;</span><span class=\"p\">)</span>    <span class=\"ss\">&#39;windmove-up</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c &lt;right&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;windmove-right</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>できましたー。</p>

<p>しかし…</p>

<p><a href=\"http://www.emacswiki.org/emacs/WindMove\">EmacsWiki: Wind Move</a></p>

<p>あれっ、まったく同じことやってた…</p>

<p>ちなみに最初はプレフィックス <code>C-c</code> じゃなくて <code>C-x</code> でやってましたが、最近ちょっと使ひ始めてみた <a href=\"http://www.emacswiki.org/emacs/BackButton\">EmacsWiki: Back Button</a> の標準キーバインドと衝突してたので、晴れて EmacsWiki 版と同じに戻ってしまひましたとさ。ちゃんちゃん。</p>
") (published nil "2012-10-25T00:53:22Z") (updated nil "2012-10-25T05:33:44Z") (author nil (name nil "tadsan")))) ("Emacs cc-mode系便利キーバインドメモ" "<p>cc-mode系からはなれるとすぐ忘れてしまうのでメモ</p>
<p>M-C-a : beginning-of-defun  : 関数定義の先頭へ<br>
M-C-e : end-of-defun          : 関数定義の終わりへ<br>
M-C-p : backward-list          : 直前の開きカッコへ<br>
M-C-n : forward-list            : 直後の閉じカッコへ<br>
M-C-b : backward-sexp       : 直前のトークンへ<br>
M-C-f : forward-sexp          : 直後のトークンへ<br>
M-C-u : backward-up-list     : ネストから出る<br>
M-C-d : down-list                : ネストに入る</p>
<p>MはMetaキー、CはCtrlキー。</p>
<p>他、便利な情報<br>
<a href=\"http://www.jitu.org/%7Etko/doc-jp/cc-mode.html\">http://www.jitu.org/~tko/doc-jp/cc-mode.html</a></p>" "http://qiita.com/items/d2fb36414d39dd5c5b3a" (20609 26345) old 36 nil nil ((id nil "tag:qiita.com,2005:Item/10144") (published nil "2012-10-19T23:41:58+09:00") (updated nil "2012-10-19T23:42:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d2fb36414d39dd5c5b3a"))) (url nil "http://qiita.com/items/d2fb36414d39dd5c5b3a") (title nil "Emacs cc-mode系便利キーバインドメモ") (content ((type . "html")) "<p>cc-mode系からはなれるとすぐ忘れてしまうのでメモ</p>

<p>M-C-a : beginning-of-defun  : 関数定義の先頭へ<br>
M-C-e : end-of-defun          : 関数定義の終わりへ<br>
M-C-p : backward-list          : 直前の開きカッコへ<br>
M-C-n : forward-list            : 直後の閉じカッコへ<br>
M-C-b : backward-sexp       : 直前のトークンへ<br>
M-C-f : forward-sexp          : 直後のトークンへ<br>
M-C-u : backward-up-list     : ネストから出る<br>
M-C-d : down-list                : ネストに入る</p>

<p>MはMetaキー、CはCtrlキー。</p>

<p>他、便利な情報<br>
<a href=\"http://www.jitu.org/%7Etko/doc-jp/cc-mode.html\">http://www.jitu.org/~tko/doc-jp/cc-mode.html</a></p>
") (published nil "2012-10-19T23:41:58Z") (updated nil "2012-10-19T23:42:49Z") (author nil (name nil "10nin@github")))) ("Qiita-mode.el 作りました" "<p>gongoさんに先を越されてしまいましたが、一応公開します。<br>
<a href=\"https://github.com/uk-ar/qiita-mode\">https://github.com/uk-ar/qiita-mode</a></p>
<h1>これは何か</h1>
<p>Emacs から qiita を操作出来ます。</p>
<h1>使い方</h1>
<h2>投稿</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-post-buffer
</pre>
</div>
</div>
<p>で現在開いているバッファを qiita に投稿します。<br>
* 先頭行がタイトル<br>
* 先頭行のなかで#を使用してタグを指定する<br>
* 2行目以降のテキストが本文<br>
になります。</p>
<p>例を出すと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Qiita-mode.el 作りました #qiita #markdown
https://github.com/uk-ar/qiita-mode
# これは何か
...
</pre>
</div>
</div>
<p>のようになります。</p>
<p>初回投稿時に記事のidがコメントとして埋め込まれるので、再度編集後に</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-post-buffer
</pre>
</div>
</div>
<p>とすることで更新ができます。</p>
<h2>一覧</h2>
<p>anything.elのインストールした環境では</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-my-items
</pre>
</div>
</div>
<p>で自分の記事一覧</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-all-items
</pre>
</div>
</div>
<p>ですべての記事一覧</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-tags-items emacs
</pre>
</div>
</div>
<p>でemacsのタグがついた記事一覧が取れます。</p>
<h3>回覧</h3>
<p>一覧でエンターを押すとデフォルトブラウザで記事を開きます。</p>
<h3>削除</h3>
<p>未実装です。</p>
<h1>今後の予定</h1>
<p>実用性を考えると投稿や一覧も非同期にしたいところです。<br>
が、deferred.elを使おうとするとcurlを直に呼び出すのではなくurl-retrieve互換の層が欲しくなります。<br>
モチベーションが続けば、そのあたりをがんばろうと思います。</p>
<p>&lt;!--<br>
Local Variables:<br>
qiita-file-uuid: &quot;25127dc1e5872e963ec1&quot;<br>
End:<br>
--&gt;</p>" "http://qiita.com/items/25127dc1e5872e963ec1" (20609 16735) old 37 nil nil ((id nil "tag:qiita.com,2005:Item/10136") (published nil "2012-10-19T20:53:33+09:00") (updated nil "2012-10-19T21:02:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/25127dc1e5872e963ec1"))) (url nil "http://qiita.com/items/25127dc1e5872e963ec1") (title nil "Qiita-mode.el 作りました ") (content ((type . "html")) "<p>gongoさんに先を越されてしまいましたが、一応公開します。<br>
<a href=\"https://github.com/uk-ar/qiita-mode\">https://github.com/uk-ar/qiita-mode</a></p>

<h1>これは何か</h1>

<p>Emacs から qiita を操作出来ます。</p>

<h1>使い方</h1>

<h2>投稿</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-post-buffer
</pre>
</div>
</div>
<p>で現在開いているバッファを qiita に投稿します。<br>
* 先頭行がタイトル<br>
* 先頭行のなかで#を使用してタグを指定する<br>
* 2行目以降のテキストが本文<br>
になります。</p>

<p>例を出すと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Qiita-mode.el 作りました #qiita #markdown
https://github.com/uk-ar/qiita-mode

# これは何か
...
</pre>
</div>
</div>
<p>のようになります。</p>

<p>初回投稿時に記事のidがコメントとして埋め込まれるので、再度編集後に</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-post-buffer
</pre>
</div>
</div>
<p>とすることで更新ができます。</p>

<h2>一覧</h2>

<p>anything.elのインストールした環境では</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-my-items
</pre>
</div>
</div>
<p>で自分の記事一覧</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-all-items
</pre>
</div>
</div>
<p>ですべての記事一覧</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita-tags-items emacs
</pre>
</div>
</div>
<p>でemacsのタグがついた記事一覧が取れます。</p>

<h3>回覧</h3>

<p>一覧でエンターを押すとデフォルトブラウザで記事を開きます。</p>

<h3>削除</h3>

<p>未実装です。</p>

<h1>今後の予定</h1>

<p>実用性を考えると投稿や一覧も非同期にしたいところです。<br>
が、deferred.elを使おうとするとcurlを直に呼び出すのではなくurl-retrieve互換の層が欲しくなります。<br>
モチベーションが続けば、そのあたりをがんばろうと思います。</p>

<p>&lt;!--<br>
Local Variables:<br>
qiita-file-uuid: &quot;25127dc1e5872e963ec1&quot;<br>
End:<br>
--&gt;</p>
") (published nil "2012-10-19T20:53:33Z") (updated nil "2012-10-19T21:02:39Z") (author nil (name nil "uk_ar")))) ("Emacsと色設定と$TERM" "<p>Emacsの色設定には環境変数の$TERMが関係してくる。僕は普段solarizedを使っているが、環境変数の$TERMが違うと、色も全然変わってくる。しかも、$TERMによって、色が256色使えたり、5色しか使えなかったりする。<br>
で、よく色んなサイトで紹介されるEmacsで256色使うためにTERMに設定する値として、xterm-256colorとかscreen-256colorというのがある。なんだけど、この2つに設定すると本来の色にならない。</p>
<p>本来のsolarized<br>
<img src=\"http://ethanschoonover.com/solarized/img/solarized-vim.png\" alt=\"本来のsolarized\" title=\"本来のsolarized\"><br>
$TERM=xterm-256colorのsolarized<br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/takc923/20121021/20121021020322.png\" alt=\"$TERM=xterm-256colorのsolarized\" title=\"$TERM=xterm-256colorのsolarized\"></p>
<p>$TERMをxtermにしたら、256色は使えないが本来の色になるので、そうやって我慢していた。<br>
で、さっき256色使って自分の好みな色を使う設定を見つけた。それは<code>TERM=xterm-256color</code>の環境下で、Emacsを<code>env xterm emacs</code>で起動するという方法。<br>
正直なんでこうすれば色が変わるのか分からんけど、これで色々捗りそう。</p>
<p>ちなみにaliasは本当は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>alias emacsd='env TERM=xterm emacs --daemon'
alias emacs='emacsclient -t'
</pre>
</div>
</div>
<p>としている。</p>" "http://qiita.com/items/16ddb32870459cb0d405" (20620 2680) old 38 nil nil ((id nil "tag:qiita.com,2005:Item/10019") (published nil "2012-10-17T02:41:52+09:00") (updated nil "2012-10-28T01:23:20+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/16ddb32870459cb0d405"))) (url nil "http://qiita.com/items/16ddb32870459cb0d405") (title nil "Emacsと色設定と$TERM") (content ((type . "html")) "<p>Emacsの色設定には環境変数の$TERMが関係してくる。僕は普段solarizedを使っているが、環境変数の$TERMが違うと、色も全然変わってくる。しかも、$TERMによって、色が256色使えたり、5色しか使えなかったりする。<br>
で、よく色んなサイトで紹介されるEmacsで256色使うためにTERMに設定する値として、xterm-256colorとかscreen-256colorというのがある。なんだけど、この2つに設定すると本来の色にならない。</p>

<p>本来のsolarized<br>
<img src=\"http://ethanschoonover.com/solarized/img/solarized-vim.png\" alt=\"本来のsolarized\" title=\"本来のsolarized\"><br>
$TERM=xterm-256colorのsolarized<br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/takc923/20121021/20121021020322.png\" alt=\"$TERM=xterm-256colorのsolarized\" title=\"$TERM=xterm-256colorのsolarized\"></p>

<p>$TERMをxtermにしたら、256色は使えないが本来の色になるので、そうやって我慢していた。<br>
で、さっき256色使って自分の好みな色を使う設定を見つけた。それは<code>TERM=xterm-256color</code>の環境下で、Emacsを<code>env xterm emacs</code>で起動するという方法。<br>
正直なんでこうすれば色が変わるのか分からんけど、これで色々捗りそう。</p>

<p>ちなみにaliasは本当は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>alias emacsd=&#39;env TERM=xterm emacs --daemon&#39;
alias emacs=&#39;emacsclient -t&#39;
</pre>
</div>
</div>
<p>としている。</p>
") (published nil "2012-10-17T02:41:52Z") (updated nil "2012-10-28T01:23:20Z") (author nil (name nil "takc923")))) ("Qiita.el 作りました!!" "<p><a href=\"https://github.com/gongo/qiita-el\">https://github.com/gongo/qiita-el</a></p>
<h2>これは何か</h2>
<p>emacs から qiita を操作出来ます</p>
<h2>必要なもの</h2>
<ul>
<li>Emacs
<ul>
<li>24.2 でしかテストしていませんが、きっと 24 系なら大丈夫。23 はどうだろう。</li>
</ul></li>
<li>Emacs lisp
<ul>
<li><a href=\"https://github.com/emacs-helm/helm\">helm</a></li>
<li><a href=\"https://github.com/defunkt/markdown-mode\">markdown-mode</a></li>
<li>いずれも、最近流行りの package.el や el-get、auto-install でどうにかなります</li>
</ul></li>
</ul>
<h2>使い方</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(require 'qiita)
(setq qiita-&gt;token &quot;xxxxxxxxxxx&quot;)
</pre>
</div>
</div>
<p>token は無くても動く機能はあります(一覧表示とか)。もちろん投稿や更新、削除では必須です。</p>
<h3>投稿記事一覧(新着順)</h3>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita:items
</pre>
</div>
</div>
<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-items.jpg\" alt=\"\"></p>
<p>アイテムを選択して Enter を押すと、ブラウザでその記事が表示されます。</p>
<h3>自身の投稿記事一覧(新着順)</h3>
<div class=\"code-frame\"><div class=\"highlight\"><pre>C-u M-x qiita:items
</pre>
</div>
</div>
<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-my-items.jpg\" alt=\"\"></p>
<p>この状態で TAB を押すと、ブラウザを開く以外に、選択した記事を削除できるアクションが確認できます。</p>
<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-my-items-actions.jpg\" alt=\"\"></p>
<p>Delete を選択して Enter を押すと、その記事を削除できます(y-or-n 確認あり)</p>
<h3>投稿</h3>
<p>現在開いているバッファ上で</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita:post
</pre>
</div>
</div>
<p>と実行すると <strong>限定共有モード</strong> で投稿されます。<br>
公開モードで投稿する場合は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>C-u M-x qiita:post
</pre>
</div>
</div>
<p>と実行します。</p>
<h4>投稿記事のルールについて</h4>
<ol>
<li>開いているバッファの中で header-1 の記法 (# hoge とか ====== が下線の文字列) の箇所を、記事のタイトルとして認識します(その箇所は本文には入りません)</li>
<li><code>&lt;!-- tags hoge,fuga --&gt;</code> とすると、その記事のタグとして登録されます。</li>
</ol>
<p>どちらも</p>
<ul>
<li>必須項目(無いとエラー)</li>
<li>文書中で最初に現れたのを取得する(2回目以降の header-1 や tags はそのまま本文に残ります)</li>
</ul>
<p>というわけで markdown 例です</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>qiita-el テスト投稿
====================
みなさまお疲れ様です。
&lt;!-- tags Emacs,Ruby --&gt;
[gongo/qiita-el · GitHub](https://github.com/gongo/qiita-el)
- List1
- List2
- List3
1. hoge
1. hoge1
2. fuga
1. fuga2
3. hago
1. hago1
1. hago2
1. hago3
```c
#include &lt;stdio.h&gt;
int main(void)
{
printf(&quot;Hello, World!!&quot;);
}
```
```ruby
p 'Hello, Wo\\'rld!'
```
&gt; 1
&gt; 2
&gt; 3
</pre>
</div>
</div>
<p>これを投稿すると、 <a href=\"http://qiita.com/items/ee796188dc4945769282\">http://qiita.com/items/ee796188dc4945769282</a> のようになります。</p>
<h3>更新</h3>
<p>更新も同じく <code>M-x qiita:post</code> (<code>C-u M-x qiita:post</code> ) を使用します。<br>
本文中に<code>&lt;!-- uuid xxxxxxxx --&gt;</code> が存在する場合、その記事 <code>http://qiita.com/items/xxxxxxxx</code> に対する <code>更新</code> と見なされます。</p>
<p>先程の文書を例にすると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>みなさまお疲れ様です。
&lt;!-- tags Emacs,Ruby --&gt;
&lt;!-- uuid ee796188dc4945769282 --&gt;
</pre>
</div>
</div>
<p>という感じで uuid を埋めこみます。</p>
<h2>まとめ</h2>
<ul>
<li><a href=\"https://github.com/gongo/qiita-el/issues\">https://github.com/gongo/qiita-el/issues</a>
<ul>
<li>まだ実装してない、実装する予定の API 一覧</li>
<li>何か要望があれば ↑ に登録お願いします</li>
</ul></li>
</ul>" "http://qiita.com/items/4b0c5b71b49c6000d2e2" (20602 43945) old 39 nil nil ((id nil "tag:qiita.com,2005:Item/9888") (published nil "2012-10-13T13:30:19+09:00") (updated nil "2012-10-14T21:10:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4b0c5b71b49c6000d2e2"))) (url nil "http://qiita.com/items/4b0c5b71b49c6000d2e2") (title nil "Qiita.el 作りました!!") (content ((type . "html")) "<p><a href=\"https://github.com/gongo/qiita-el\">https://github.com/gongo/qiita-el</a></p>

<h2>これは何か</h2>

<p>emacs から qiita を操作出来ます</p>

<h2>必要なもの</h2>

<ul>
<li>Emacs

<ul>
<li>24.2 でしかテストしていませんが、きっと 24 系なら大丈夫。23 はどうだろう。</li>
</ul></li>
<li>Emacs lisp

<ul>
<li><a href=\"https://github.com/emacs-helm/helm\">helm</a></li>
<li><a href=\"https://github.com/defunkt/markdown-mode\">markdown-mode</a></li>
<li>いずれも、最近流行りの package.el や el-get、auto-install でどうにかなります</li>
</ul></li>
</ul>

<h2>使い方</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(require &#39;qiita)
(setq qiita-&gt;token &quot;xxxxxxxxxxx&quot;)
</pre>
</div>
</div>
<p>token は無くても動く機能はあります(一覧表示とか)。もちろん投稿や更新、削除では必須です。</p>

<h3>投稿記事一覧(新着順)</h3>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita:items
</pre>
</div>
</div>
<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-items.jpg\" alt=\"\"></p>

<p>アイテムを選択して Enter を押すと、ブラウザでその記事が表示されます。</p>

<h3>自身の投稿記事一覧(新着順)</h3>
<div class=\"code-frame\"><div class=\"highlight\"><pre>C-u M-x qiita:items
</pre>
</div>
</div>
<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-my-items.jpg\" alt=\"\"></p>

<p>この状態で TAB を押すと、ブラウザを開く以外に、選択した記事を削除できるアクションが確認できます。</p>

<p><img src=\"https://dl.dropbox.com/u/2532139/github-qiita-el/qiita-el-my-items-actions.jpg\" alt=\"\"></p>

<p>Delete を選択して Enter を押すと、その記事を削除できます(y-or-n 確認あり)</p>

<h3>投稿</h3>

<p>現在開いているバッファ上で</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>M-x qiita:post
</pre>
</div>
</div>
<p>と実行すると <strong>限定共有モード</strong> で投稿されます。<br>
公開モードで投稿する場合は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>C-u M-x qiita:post
</pre>
</div>
</div>
<p>と実行します。</p>

<h4>投稿記事のルールについて</h4>

<ol>
<li>開いているバッファの中で header-1 の記法 (# hoge とか ====== が下線の文字列) の箇所を、記事のタイトルとして認識します(その箇所は本文には入りません)</li>
<li><code>&lt;!-- tags hoge,fuga --&gt;</code> とすると、その記事のタグとして登録されます。</li>
</ol>

<p>どちらも</p>

<ul>
<li>必須項目(無いとエラー)</li>
<li>文書中で最初に現れたのを取得する(2回目以降の header-1 や tags はそのまま本文に残ります)</li>
</ul>

<p>というわけで markdown 例です</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>qiita-el テスト投稿
====================

みなさまお疲れ様です。

&lt;!-- tags Emacs,Ruby --&gt;

[gongo/qiita-el · GitHub](https://github.com/gongo/qiita-el)

- List1
- List2
- List3

1. hoge
    1. hoge1
2. fuga
    1. fuga2
3. hago
    1. hago1
    1. hago2
    1. hago3

```c
#include &lt;stdio.h&gt;

int main(void)
{
    printf(&quot;Hello, World!!&quot;);
}
```

```ruby
p &#39;Hello, Wo\\&#39;rld!&#39;
```

&gt; 1
&gt; 2
&gt; 3
</pre>
</div>
</div>
<p>これを投稿すると、 <a href=\"http://qiita.com/items/ee796188dc4945769282\">http://qiita.com/items/ee796188dc4945769282</a> のようになります。</p>

<h3>更新</h3>

<p>更新も同じく <code>M-x qiita:post</code> (<code>C-u M-x qiita:post</code> ) を使用します。<br>
本文中に<code>&lt;!-- uuid xxxxxxxx --&gt;</code> が存在する場合、その記事 <code>http://qiita.com/items/xxxxxxxx</code> に対する <code>更新</code> と見なされます。</p>

<p>先程の文書を例にすると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>みなさまお疲れ様です。

&lt;!-- tags Emacs,Ruby --&gt;
&lt;!-- uuid ee796188dc4945769282 --&gt;
</pre>
</div>
</div>
<p>という感じで uuid を埋めこみます。</p>

<h2>まとめ</h2>

<ul>
<li><a href=\"https://github.com/gongo/qiita-el/issues\">https://github.com/gongo/qiita-el/issues</a>

<ul>
<li>まだ実装してない、実装する予定の API 一覧</li>
<li>何か要望があれば ↑ に登録お願いします</li>
</ul></li>
</ul>
") (published nil "2012-10-13T13:30:19Z") (updated nil "2012-10-14T21:10:17Z") (author nil (name nil "gongo@github")))) ("APIのテスト" "<h1>hoge</h1>
<p>新規<br>
更新<br>
2回目の更新<br>
3回目の更新<br>
4回目の更新<br>
5回目の更新<br>
6回目の更新<br>
ファイルからuuidの読み込み<br>
uuidのコメントアウト<br>
markdownのコメントアウト<br>
OK?dayo</p>
<p>&lt;!--<br>
Local Variables:<br>
qiita-file-uuid: &quot;ebb63c695e194efb6da8&quot;<br>
End:<br>
--&gt;</p>" "http://qiita.com/items/ebb63c695e194efb6da8" (20600 57099) old 40 nil nil ((id nil "tag:qiita.com,2005:Item/9877") (published nil "2012-10-13T08:40:48+09:00") (updated nil "2012-10-13T12:24:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ebb63c695e194efb6da8"))) (url nil "http://qiita.com/items/ebb63c695e194efb6da8") (title nil "APIのテスト ") (content ((type . "html")) "<h1>hoge</h1>

<p>新規<br>
更新<br>
2回目の更新<br>
3回目の更新<br>
4回目の更新<br>
5回目の更新<br>
6回目の更新<br>
ファイルからuuidの読み込み<br>
uuidのコメントアウト<br>
markdownのコメントアウト<br>
OK?dayo</p>

<p>&lt;!--<br>
Local Variables:<br>
qiita-file-uuid: &quot;ebb63c695e194efb6da8&quot;<br>
End:<br>
 --&gt;</p>
") (published nil "2012-10-13T08:40:48Z") (updated nil "2012-10-13T12:24:59Z") (author nil (name nil "uk_ar")))) ("APIのテスト" "<h1>hoge</h1>" "http://qiita.com/items/4e57a712c71512bc4a2b" (20600 42607) old 41 nil nil ((id nil "tag:qiita.com,2005:Item/9875") (published nil "2012-10-13T08:23:27+09:00") (updated nil "2012-10-13T08:23:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4e57a712c71512bc4a2b"))) (url nil "http://qiita.com/items/4e57a712c71512bc4a2b") (title nil "APIのテスト ") (content ((type . "html")) "<h1>hoge</h1>
") (published nil "2012-10-13T08:23:27Z") (updated nil "2012-10-13T08:23:27Z") (author nil (name nil "uk_ar")))) ("qiita-el テスト投稿" "<p>みなさまお疲れ様です。</p>
<p><a href=\"https://github.com/gongo/qiita-el\">gongo/qiita-el · GitHub</a></p>
<ul>
<li>List1</li>
<li>List2</li>
<li>List3</li>
</ul>
<ol>
<li>hoge
<ol>
<li>hoge1</li>
</ol></li>
<li>fuga
<ol>
<li>fuga2</li>
</ol></li>
<li>hago
<ol>
<li>hago1</li>
<li>hago2</li>
<li>hago3</li>
</ol></li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">C</span></div><div class=\"highlight\"><pre><span class=\"cp\">#include &lt;stdio.h&gt;</span>
<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>
<span class=\"p\">{</span>
<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello, World!!&quot;</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"nb\">p</span> <span class=\"s1\">'Hello, Wo\\'rld!'</span>
</pre>
</div>
</div>
<blockquote>
<p>1<br>
2<br>
3</p>
</blockquote>" "http://qiita.com/items/ee796188dc4945769282" (20600 61329) old 42 nil nil ((id nil "tag:qiita.com,2005:Item/9826") (published nil "2012-10-12T18:21:12+09:00") (updated nil "2012-10-13T13:35:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ee796188dc4945769282"))) (url nil "http://qiita.com/items/ee796188dc4945769282") (title nil "qiita-el テスト投稿") (content ((type . "html")) "<p>みなさまお疲れ様です。</p>

<p><a href=\"https://github.com/gongo/qiita-el\">gongo/qiita-el · GitHub</a></p>

<ul>
<li>List1</li>
<li>List2</li>
<li>List3</li>
</ul>

<ol>
<li>hoge

<ol>
<li>hoge1</li>
</ol></li>
<li>fuga

<ol>
<li>fuga2</li>
</ol></li>
<li>hago

<ol>
<li>hago1</li>
<li>hago2</li>
<li>hago3</li>
</ol></li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">C</span></div><div class=\"highlight\"><pre><span class=\"cp\">#include &lt;stdio.h&gt;</span>

<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>
<span class=\"p\">{</span>
    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello, World!!&quot;</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"nb\">p</span> <span class=\"s1\">&#39;Hello, Wo\\&#39;rld!&#39;</span>
</pre>
</div>
</div>
<blockquote>
<p>1<br>
2<br>
3</p>
</blockquote>
") (published nil "2012-10-12T18:21:12Z") (updated nil "2012-10-13T13:35:29Z") (author nil (name nil "gongo@github")))) ("yasnippet 0.8.0 (beta) で C-i が効かない場合の対処方法" "<p>0.6.x から 0.8.0 (beta) に上げたら ruby-mode や org-mode と干渉して C-i が効かなくなっていて、ぐぐるとadviceでラップする方法などが上げられていましたが、<code>&lt;tab&gt;</code> を <code>TAB</code> に変更して、<code>(setq yas-trigger-key &quot;TAB&quot;)</code> としたら C-i が効くようになりました。</p>" "http://qiita.com/items/ea37f18a8aeb86bd6f9b" (20593 12901) old 43 nil nil ((id nil "tag:qiita.com,2005:Item/9634") (published nil "2012-10-07T16:42:29+09:00") (updated nil "2012-10-07T16:42:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ea37f18a8aeb86bd6f9b"))) (url nil "http://qiita.com/items/ea37f18a8aeb86bd6f9b") (title nil "yasnippet 0.8.0 (beta) で C-i が効かない場合の対処方法") (content ((type . "html")) "<p>0.6.x から 0.8.0 (beta) に上げたら ruby-mode や org-mode と干渉して C-i が効かなくなっていて、ぐぐるとadviceでラップする方法などが上げられていましたが、<code>&lt;tab&gt;</code> を <code>TAB</code> に変更して、<code>(setq yas-trigger-key &quot;TAB&quot;)</code> としたら C-i が効くようになりました。</p>
") (published nil "2012-10-07T16:42:29Z") (updated nil "2012-10-07T16:42:29Z") (author nil (name nil "akicho8")))) ("mcompleteとhelmがバッティングして使いづらいことこの上なかったのでmcomplete消した" "<p>タイトル通り。<br>
もうちょっと経緯を書くと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">customize</span><span class=\"o\">-</span><span class=\"n\">group</span>
</pre>
</div>
</div>
<p>してgroupを選ぶ時、helmとmcompleteがどっちも動いて、helmの候補が表示されるのにC-n,pするとmcompleteが反応してhelmの候補を選べなかったので、mcompleteを消した。</p>
<p>mcompleteなんかいらんかったんや！</p>
<p>mcompleteに知らない人用 → <a href=\"http://www.bookshelf.jp/soft/meadow_27.html#SEC339\">http://www.bookshelf.jp/soft/meadow_27.html#SEC339</a></p>" "http://qiita.com/items/bc7c4cbecd6e12b9973c" (20591 63617) old 44 nil nil ((id nil "tag:qiita.com,2005:Item/9614") (published nil "2012-10-06T18:23:13+09:00") (updated nil "2012-10-06T18:23:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/bc7c4cbecd6e12b9973c"))) (url nil "http://qiita.com/items/bc7c4cbecd6e12b9973c") (title nil "mcompleteとhelmがバッティングして使いづらいことこの上なかったのでmcomplete消した") (content ((type . "html")) "<p>タイトル通り。<br>
もうちょっと経緯を書くと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">customize</span><span class=\"o\">-</span><span class=\"n\">group</span>
</pre>
</div>
</div>
<p>してgroupを選ぶ時、helmとmcompleteがどっちも動いて、helmの候補が表示されるのにC-n,pするとmcompleteが反応してhelmの候補を選べなかったので、mcompleteを消した。</p>

<p>mcompleteなんかいらんかったんや！</p>

<p>mcompleteに知らない人用 → <a href=\"http://www.bookshelf.jp/soft/meadow_27.html#SEC339\">http://www.bookshelf.jp/soft/meadow_27.html#SEC339</a></p>
") (published nil "2012-10-06T18:23:13Z") (updated nil "2012-10-06T18:23:13Z") (author nil (name nil "takc923")))) ("packageをupdateしたあとに古いパッケージを見に行ってエラーになる問題の対処" "<p>Emacsで</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">list</span><span class=\"o\">-</span><span class=\"n\">packages</span>
</pre>
</div>
</div>
<p>して、<code>U</code>押したらパッケージの更新があったか確認してくれます。で、更新があったら<code>x</code>で更新を実行してくれます。<br>
このあと、更新されたパッケージに関連したfunctionを使おうとすると古いパッケージを見に行ってエラーが出ることがあるみたいです。<br>
こういう時は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span>
</pre>
</div>
</div>
<p>したら直る。</p>" "http://qiita.com/items/b5a8291dffc5a53fa695" (20591 56281) old 45 nil nil ((id nil "tag:qiita.com,2005:Item/9562") (published nil "2012-10-04T13:40:21+09:00") (updated nil "2012-10-06T16:20:57+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b5a8291dffc5a53fa695"))) (url nil "http://qiita.com/items/b5a8291dffc5a53fa695") (title nil "packageをupdateしたあとに古いパッケージを見に行ってエラーになる問題の対処") (content ((type . "html")) "<p>Emacsで</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">list</span><span class=\"o\">-</span><span class=\"n\">packages</span>
</pre>
</div>
</div>
<p>して、<code>U</code>押したらパッケージの更新があったか確認してくれます。で、更新があったら<code>x</code>で更新を実行してくれます。<br>
このあと、更新されたパッケージに関連したfunctionを使おうとすると古いパッケージを見に行ってエラーが出ることがあるみたいです。<br>
こういう時は</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span>
</pre>
</div>
</div>
<p>したら直る。</p>
") (published nil "2012-10-04T13:40:21Z") (updated nil "2012-10-06T16:20:57Z") (author nil (name nil "takc923")))) ("anythingから、ローカルにあるrubygemsのファイル開く。bundlerも対応" "<p>以下を評価して、<br>
M-x anything-local-gems<br>
すると、インストールされているgemの一覧が出るので、選択すると、 そのgemのlib/を開く。</p>
<p>また、カレントバッファの祖先ディレクトリにGemfileがみつかった場合、bundlerで管理されている方のgemが選択されまうす。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-sources-local-gem-file</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;rubygems&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">gemfile-dir</span> <span class=\"p\">(</span><span class=\"k\">block</span> <span class=\"ss\">'find-gemfile</span>
<span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">cur-dir</span> <span class=\"p\">(</span><span class=\"nv\">file-name-directory</span>
<span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">)</span>
<span class=\"nv\">default-directory</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">cnt</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cnt</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"mi\">1</span> <span class=\"nv\">cnt</span><span class=\"p\">))</span> <span class=\"mi\">10</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">not</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">cur-dir</span> <span class=\"s\">&quot;/&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">member</span> <span class=\"s\">&quot;Gemfile&quot;</span> <span class=\"p\">(</span><span class=\"nv\">directory-files</span> <span class=\"nv\">cur-dir</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">return-from</span> <span class=\"ss\">'find-gemfile</span> <span class=\"nv\">cur-dir</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cur-dir</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">cur-dir</span> <span class=\"s\">&quot;/..&quot;</span><span class=\"p\">))))</span>
<span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">anything-attrset</span> <span class=\"ss\">'gem-command</span>
<span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nv\">gemfile-dir</span>
<span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;BUNDLE_GEMFILE=&quot;</span> <span class=\"nv\">gemfile-dir</span> <span class=\"s\">&quot;/Gemfile &quot;</span>
<span class=\"s\">&quot;bundle exec &quot;</span><span class=\"p\">)</span>
<span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
<span class=\"s\">&quot;gem 2&gt;/dev/null&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">call-process-shell-command</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">anything-attr</span> <span class=\"ss\">'gem-command</span><span class=\"p\">)</span> <span class=\"s\">&quot; list&quot;</span><span class=\"p\">)</span>
<span class=\"no\">nil</span>
<span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">'local</span><span class=\"p\">))))))</span>
<span class=\"p\">(</span><span class=\"nv\">action</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">gem-name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">file-name-directory</span>
<span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
<span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">anything-attr</span> <span class=\"ss\">'gem-command</span><span class=\"p\">)</span> <span class=\"s\">&quot; which &quot;</span>
<span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"s\">&quot;\\s+(.+)$&quot;</span> <span class=\"s\">&quot;&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">))))))</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">path</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;no such file or directory: \\&quot;%s\\&quot;&quot;</span> <span class=\"nv\">path</span><span class=\"p\">))</span>
<span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-local-gems</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">anything-c-sources-local-gem-file</span><span class=\"p\">)</span>
<span class=\"s\">&quot;*anything local gems*&quot;</span>
<span class=\"p\">))</span>
</pre>
</div>
</div>" "http://qiita.com/items/69376945f20da77c34fa" (20586 28198) old 46 nil nil ((id nil "tag:qiita.com,2005:Item/9479") (published nil "2012-09-29T19:12:20+09:00") (updated nil "2012-10-02T13:31:34+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/69376945f20da77c34fa"))) (url nil "http://qiita.com/items/69376945f20da77c34fa") (title nil "anythingから、ローカルにあるrubygemsのファイル開く。bundlerも対応") (content ((type . "html")) "<p>以下を評価して、<br>
M-x anything-local-gems<br>
すると、インストールされているgemの一覧が出るので、選択すると、 そのgemのlib/を開く。</p>

<p>また、カレントバッファの祖先ディレクトリにGemfileがみつかった場合、bundlerで管理されている方のgemが選択されまうす。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-sources-local-gem-file</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;rubygems&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
              <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">gemfile-dir</span> <span class=\"p\">(</span><span class=\"k\">block</span> <span class=\"ss\">&#39;find-gemfile</span>
                                   <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">cur-dir</span> <span class=\"p\">(</span><span class=\"nv\">file-name-directory</span>
                                                    <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nv\">buffer-file-name</span><span class=\"p\">)</span>
                                                                          <span class=\"nv\">default-directory</span><span class=\"p\">))))</span>
                                          <span class=\"p\">(</span><span class=\"nv\">cnt</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
                                     <span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cnt</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"mi\">1</span> <span class=\"nv\">cnt</span><span class=\"p\">))</span> <span class=\"mi\">10</span><span class=\"p\">)</span>
                                                 <span class=\"p\">(</span><span class=\"nb\">not</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">cur-dir</span> <span class=\"s\">&quot;/&quot;</span><span class=\"p\">)))</span>
                                       <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">member</span> <span class=\"s\">&quot;Gemfile&quot;</span> <span class=\"p\">(</span><span class=\"nv\">directory-files</span> <span class=\"nv\">cur-dir</span><span class=\"p\">))</span>
                                         <span class=\"p\">(</span><span class=\"k\">return-from</span> <span class=\"ss\">&#39;find-gemfile</span> <span class=\"nv\">cur-dir</span><span class=\"p\">))</span>
                                       <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">cur-dir</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">cur-dir</span> <span class=\"s\">&quot;/..&quot;</span><span class=\"p\">))))</span>
                                     <span class=\"p\">))))</span>
                <span class=\"p\">(</span><span class=\"nv\">anything-attrset</span> <span class=\"ss\">&#39;gem-command</span>
                                  <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nv\">gemfile-dir</span>
                                              <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;BUNDLE_GEMFILE=&quot;</span> <span class=\"nv\">gemfile-dir</span> <span class=\"s\">&quot;/Gemfile &quot;</span>
                                                      <span class=\"s\">&quot;bundle exec &quot;</span><span class=\"p\">)</span>
                                            <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
                                          <span class=\"s\">&quot;gem 2&gt;/dev/null&quot;</span><span class=\"p\">))</span>
                <span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">)</span>
                  <span class=\"p\">(</span><span class=\"nv\">call-process-shell-command</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">anything-attr</span> <span class=\"ss\">&#39;gem-command</span><span class=\"p\">)</span> <span class=\"s\">&quot; list&quot;</span><span class=\"p\">)</span>
                                              <span class=\"no\">nil</span>
                                              <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">&#39;local</span><span class=\"p\">))))))</span>
    <span class=\"p\">(</span><span class=\"nv\">action</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">gem-name</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">file-name-directory</span>
                             <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
                              <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">anything-attr</span> <span class=\"ss\">&#39;gem-command</span><span class=\"p\">)</span> <span class=\"s\">&quot; which &quot;</span>
                                      <span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"s\">&quot;\\s+(.+)$&quot;</span> <span class=\"s\">&quot;&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">))))))</span>
                  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">path</span><span class=\"p\">))</span>
                      <span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
                    <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;no such file or directory: \\&quot;%s\\&quot;&quot;</span> <span class=\"nv\">path</span><span class=\"p\">))</span>
                  <span class=\"p\">)))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-local-gems</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span>
   <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">anything-c-sources-local-gem-file</span><span class=\"p\">)</span>
   <span class=\"s\">&quot;*anything local gems*&quot;</span>
  <span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-09-29T19:12:20Z") (updated nil "2012-10-02T13:31:34Z") (author nil (name nil "hadashiA")))) ("Emacsにzshの環境変数PATHを取り込む" "<p>Ruby や Python を <code>/usr/bin</code> や <code>/usr/local/bin</code> などのシステムディレクトリではなく、バージョンごとにホームディレクトリ内にインストールして環境変数 <code>PATH</code> を通して使用する、なんてひとも少なくはないですね。筆者も rbenv や Pythonz 、 nodebrew に頼りきりです。</p>
<p>ところで Ubuntu で GTK 版の Emacs をデスクトップのランチャーから起動すると、ユーザのログインシェルを <code>/bin/zsh</code> などに設定してても、 環境変数をちゃんと引き継いでくれません。これは困った！ 特に <code>/usr/bin/ruby</code> には何もありませんし。</p>
<p>Emacs から <code>term</code> などで、 <code>zsh</code> を起動する場合はその中で <code>.zshenv</code> を読んでくれるのでまた困らないんですけど、 Emacs のシェルと言ったら Eshell なので、こっちの <code>PATH</code> は確実に設定しておきたいところです。</p>
<p>あ、Zsh の <code>PATH</code> はちゃんと <code>.zshenv</code> とかに設定しといてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">set_path.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">zshpath</span> <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
<span class=\"s\">&quot;/usr/bin/env zsh -c 'printenv PATH'&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">pathlst</span> <span class=\"p\">(</span><span class=\"nv\">split-string</span> <span class=\"nv\">zshpath</span> <span class=\"s\">&quot;:&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">exec-path</span> <span class=\"nv\">pathlst</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">eshell-path-env</span> <span class=\"nv\">zshpath</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;PATH&quot;</span> <span class=\"nv\">zshpath</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これを評価すると</p>
<ol>
<li><code>zsh</code> を起動して、出力される <code>$PATH</code> を文字列として受け取る</li>
<li><strong>1</strong> で取得した <code>PATH</code> 環境変数を Emacs の環境にも設定する</li>
<li><code>PATH</code> は <code>:</code> 区切り形式の文字列なのでリストに変換する</li>
<li><strong>2</strong> のリストを Emacs の <code>exec-path</code> 、 <code>eshell-path-env</code> に設定する</li>
</ol>
<p>って流れで設定していきます。 </p>
<p>練習がてらにもうちょっと汎用性持たせて Windows のこともちょびっと考慮しつつ Emacs Lisp としてまとめてみるのも良いですかね。</p>" "http://qiita.com/items/9ba5eb157e09463740f4" (20580 2964) old 47 nil nil ((id nil "tag:qiita.com,2005:Item/9442") (published nil "2012-09-27T17:17:24+09:00") (updated nil "2012-09-27T17:17:24+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9ba5eb157e09463740f4"))) (url nil "http://qiita.com/items/9ba5eb157e09463740f4") (title nil "Emacsにzshの環境変数PATHを取り込む") (content ((type . "html")) "<p>Ruby や Python を <code>/usr/bin</code> や <code>/usr/local/bin</code> などのシステムディレクトリではなく、バージョンごとにホームディレクトリ内にインストールして環境変数 <code>PATH</code> を通して使用する、なんてひとも少なくはないですね。筆者も rbenv や Pythonz 、 nodebrew に頼りきりです。</p>

<p>ところで Ubuntu で GTK 版の Emacs をデスクトップのランチャーから起動すると、ユーザのログインシェルを <code>/bin/zsh</code> などに設定してても、 環境変数をちゃんと引き継いでくれません。これは困った！ 特に <code>/usr/bin/ruby</code> には何もありませんし。</p>

<p>Emacs から <code>term</code> などで、 <code>zsh</code> を起動する場合はその中で <code>.zshenv</code> を読んでくれるのでまた困らないんですけど、 Emacs のシェルと言ったら Eshell なので、こっちの <code>PATH</code> は確実に設定しておきたいところです。</p>

<p>あ、Zsh の <code>PATH</code> はちゃんと <code>.zshenv</code> とかに設定しといてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">set_path.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">zshpath</span> <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
         <span class=\"s\">&quot;/usr/bin/env zsh -c &#39;printenv PATH&#39;&quot;</span><span class=\"p\">))</span>
       <span class=\"p\">(</span><span class=\"nv\">pathlst</span> <span class=\"p\">(</span><span class=\"nv\">split-string</span> <span class=\"nv\">zshpath</span> <span class=\"s\">&quot;:&quot;</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">exec-path</span> <span class=\"nv\">pathlst</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">eshell-path-env</span> <span class=\"nv\">zshpath</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;PATH&quot;</span> <span class=\"nv\">zshpath</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これを評価すると</p>

<ol>
<li><code>zsh</code> を起動して、出力される <code>$PATH</code> を文字列として受け取る</li>
<li><strong>1</strong> で取得した <code>PATH</code> 環境変数を Emacs の環境にも設定する</li>
<li><code>PATH</code> は <code>:</code> 区切り形式の文字列なのでリストに変換する</li>
<li><strong>2</strong> のリストを Emacs の <code>exec-path</code> 、 <code>eshell-path-env</code> に設定する</li>
</ol>

<p>って流れで設定していきます。 </p>

<p>練習がてらにもうちょっと汎用性持たせて Windows のこともちょびっと考慮しつつ Emacs Lisp としてまとめてみるのも良いですかね。</p>
") (published nil "2012-09-27T17:17:24Z") (updated nil "2012-09-27T17:17:24Z") (author nil (name nil "tadsan")))) ("start-process でプロセスの起動ディレクトリ(current directory)を変更する方法" "<p>default-directory に値を設定してからstart-processを呼び出す。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">run</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">directory</span> &quot;<span class=\"n\">c</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span> &quot;<span class=\"n\">dir</span>&quot; &quot;<span class=\"o\">*</span><span class=\"n\">dir</span><span class=\"o\">*</span>&quot; &quot;<span class=\"n\">dir</span>&quot;<span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"n\">run</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/68aaf54d557bc19d7051" (20571 52507) old 48 nil nil ((id nil "tag:qiita.com,2005:Item/9308") (published nil "2012-09-21T11:12:43+09:00") (updated nil "2012-09-21T11:12:43+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/68aaf54d557bc19d7051"))) (url nil "http://qiita.com/items/68aaf54d557bc19d7051") (title nil "start-process でプロセスの起動ディレクトリ(current directory)を変更する方法") (content ((type . "html")) "<p>default-directory に値を設定してからstart-processを呼び出す。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">run</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"p\">()</span> 
  <span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">directory</span> &quot;<span class=\"n\">c</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span> &quot;<span class=\"n\">dir</span>&quot; &quot;<span class=\"o\">*</span><span class=\"n\">dir</span><span class=\"o\">*</span>&quot; &quot;<span class=\"n\">dir</span>&quot;<span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"n\">run</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-09-21T11:12:43Z") (updated nil "2012-09-21T11:12:43Z") (author nil (name nil "natsutan")))) ("flymake のエラーを見やすくする" "<p><img src=\"http://24.media.tumblr.com/tumblr_magxpwfs7A1qz64n4o1_r2_1280.png\" alt=\"flymake のエラーメッセージを popup.el に表示してるスクリーンショット\"></p>
<p>↑こんな感じにする。</p>
<h2>導入方法</h2>
<ul>
<li><a href=\"https://gist.github.com/292827\">miyucy's gist: 292827 — Gist</a> </li>
</ul>
<p>これを、<code>.emacs</code> なり <code>init.el</code> にコピペ。</p>
<p>表示に使ってる <code>popup.el</code> は、<code>auto-complete.el</code> にも使われてる。なので、<code>auto-complete.el</code> 使ってる人は、上記 Gist の elisp 以外に導入するものないはず。</p>
<p>念の為 <code>(when (require 'popup nil t) ... )</code> で括ると良いかも。</p>
<h2>使い方</h2>
<p>スクリーンショットのように、赤いところにカーソル置いて少し待つと、黄色いツールチップでエラーメッセージでてくる。</p>
<h2>困ってる</h2>
<p>見づらいけど、スクリーンショットの右端見る通り、現在列ハイライトと相性悪い。</p>" "http://qiita.com/items/4d3a86a6ff91cf8d0de8" (20566 45979) old 49 nil nil ((id nil "tag:qiita.com,2005:Item/9199") (published nil "2012-09-17T09:51:50+09:00") (updated nil "2012-09-17T14:22:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4d3a86a6ff91cf8d0de8"))) (url nil "http://qiita.com/items/4d3a86a6ff91cf8d0de8") (title nil "flymake のエラーを見やすくする") (content ((type . "html")) "<p><img src=\"http://24.media.tumblr.com/tumblr_magxpwfs7A1qz64n4o1_r2_1280.png\" alt=\"flymake のエラーメッセージを popup.el に表示してるスクリーンショット\"></p>

<p>↑こんな感じにする。</p>

<h2>導入方法</h2>

<ul>
<li><a href=\"https://gist.github.com/292827\">miyucy&#39;s gist: 292827 — Gist</a> </li>
</ul>

<p>これを、<code>.emacs</code> なり <code>init.el</code> にコピペ。</p>

<p>表示に使ってる <code>popup.el</code> は、<code>auto-complete.el</code> にも使われてる。なので、<code>auto-complete.el</code> 使ってる人は、上記 Gist の elisp 以外に導入するものないはず。</p>

<p>念の為 <code>(when (require &#39;popup nil t) ... )</code> で括ると良いかも。</p>

<h2>使い方</h2>

<p>スクリーンショットのように、赤いところにカーソル置いて少し待つと、黄色いツールチップでエラーメッセージでてくる。</p>

<h2>困ってる</h2>

<p>見づらいけど、スクリーンショットの右端見る通り、現在列ハイライトと相性悪い。</p>
") (published nil "2012-09-17T09:51:50Z") (updated nil "2012-09-17T14:22:35Z") (author nil (name nil "k_ui")))) ("Emacs の Commands History を再起動後も使用する" "<p>以下を .emacs に記述することで M-x のコマンド履歴を永続的に残すことができる。anything なんかを使っていると、Emacs Commands History が Emacs を再起動しても残るためちょっと便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">desktop-globals-to-save</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">extended-command-history</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">desktop-files-not-to-save</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">desktop-save-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>desktop-save-mode というものが Emacs で標準に付いているのだが、標準だと Commands History 以外の情報まで永続的に残してしまうので、上2行で他の情報を保存しないようにしている。desktop-save-mode ではバッファなども保存可能なので、詳しく知りたい人は <a href=\"http://www.emacswiki.org/DeskTop\">http://www.emacswiki.org/DeskTop</a> を読んでみるといいだろう。</p>" "http://qiita.com/items/4b489c0abbb39a5dcc45" (20565 57829) old 50 nil nil ((id nil "tag:qiita.com,2005:Item/9193") (published nil "2012-09-16T23:27:22+09:00") (updated nil "2012-09-16T23:27:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4b489c0abbb39a5dcc45"))) (url nil "http://qiita.com/items/4b489c0abbb39a5dcc45") (title nil "Emacs の Commands History を再起動後も使用する") (content ((type . "html")) "<p>以下を .emacs に記述することで M-x のコマンド履歴を永続的に残すことができる。anything なんかを使っていると、Emacs Commands History が Emacs を再起動しても残るためちょっと便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">desktop-globals-to-save</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">extended-command-history</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">desktop-files-not-to-save</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">desktop-save-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>desktop-save-mode というものが Emacs で標準に付いているのだが、標準だと Commands History 以外の情報まで永続的に残してしまうので、上2行で他の情報を保存しないようにしている。desktop-save-mode ではバッファなども保存可能なので、詳しく知りたい人は <a href=\"http://www.emacswiki.org/DeskTop\">http://www.emacswiki.org/DeskTop</a> を読んでみるといいだろう。</p>
") (published nil "2012-09-16T23:27:22Z") (updated nil "2012-09-16T23:27:49Z") (author nil (name nil "akisute3@github")))) ("filecacheを使って作業用ディレクトリのファイルにアクセスする" "<h2>filecache?</h2>
<p>filecacheとはemacsに標準で付いている使用頻度の高いファイルに簡単にアクセスする為の仕組みです。<br>
通常は特定のディレクトリ(~ とか ~/binとか)に限って使うものなのでディレクトリを再帰的に辿れません。</p>
<p>そこでこのfilecacheをディレクトリを再帰的に辿ってcacheを作る方法です。</p>
<h3>前提</h3>
<p>filecacheは指定されたディレクトリ内のファイル名をキャッシュする為、<br>
ディレクトリを大量に指定すると一気にディスクアクセスが増えます。<br>
その為、再帰的指定するディレクトリは、SSDなどの高速なディスク上にあることを前提にしています。</p>
<h3>作業用ディレクトリ?</h3>
<p>プロジェクトファイルとかgitとかsvnのworking copyとか<br>
ディレクトリが再帰的に一杯あるよね?</p>
<h2>概要</h2>
<p>以下の処理をinit.el内で実行する</p>
<ol>
<li>shellスクリプトで対象ディレクトリを再帰スキャン</li>
<li>スキャン結果からディレクトリ一覧のelファイルを作成</li>
<li>filecacheの対象リストに追加</li>
</ol>
<h2>設定</h2>
<h4>再帰スキャン用のshellスクリプト</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/filecachedir.sh</span></div><div class=\"highlight\"><pre><span class=\"c\">#!/bin/sh</span>
<span class=\"k\">function </span>abs_path<span class=\"o\">()</span> <span class=\"o\">{</span>
<span class=\"nv\">d</span><span class=\"o\">=</span><span class=\"k\">$(</span>dirname <span class=\"nv\">$0</span><span class=\"k\">)</span>
<span class=\"o\">(</span><span class=\"nb\">cd</span> <span class=\"nv\">$d</span>;<span class=\"nb\">pwd</span><span class=\"o\">)</span>
<span class=\"o\">}</span>
<span class=\"nv\">TARGET_DIR</span><span class=\"o\">=</span>~/work
<span class=\"nv\">EXCLUDE_DIR</span><span class=\"o\">=</span><span class=\"s2\">&quot;target log logs .git tmp mnt .settings document documents doc .svn *.bak&quot;</span>
<span class=\"nv\">OUTPUT</span><span class=\"o\">=</span><span class=\"s2\">&quot;$(basename $0 .sh).el&quot;</span>
<span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span>
<span class=\"k\">for </span>d in <span class=\"nv\">$EXCLUDE_DIR</span>; <span class=\"k\">do</span>
<span class=\"k\">  if</span> <span class=\"o\">[</span> -n <span class=\"s2\">&quot;$EXC&quot;</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">      </span><span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;$EXC -o -name $d&quot;</span>
<span class=\"k\">else</span>
<span class=\"k\">      </span><span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;-name $d&quot;</span>
<span class=\"k\">fi</span>
<span class=\"k\">done</span>
<span class=\"nb\">cd</span> <span class=\"k\">$(</span>abs_path<span class=\"k\">)</span>
<span class=\"o\">[</span> -r <span class=\"nv\">$OUTPUT</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> rm -f <span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"o\">{</span>,c<span class=\"o\">}</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot;(setq my-filedir&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot; '(&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
find <span class=\"nv\">$TARGET_DIR</span> <span class=\"se\">\\(</span> <span class=\"nv\">$EXC</span> <span class=\"se\">\\)</span> -prune -o -path <span class=\"s2\">&quot;*/git/*&quot;</span> -type d -print0 <span class=\"se\">\\</span>
| perl -0 -ne <span class=\"s1\">'chomp;print qq{ &quot;$_&quot;\\n}'</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot;))&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
</pre>
</div>
</div>
<p>$TARGET_DIR 以下をfindしてディレクトリ名を一覧<br>
my-filedirデータをセットするelファイルを作る<br>
対象外のファイル・フォルダは$EXCLUDE_DIRで指定する</p>
<h4>filecacheの設定</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'filecache</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">prg</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;filecachedir.sh&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">file-readable-p</span> <span class=\"nv\">prg</span><span class=\"p\">)</span>
<span class=\"c1\">;; ディレクトリを追加</span>
<span class=\"c1\">;; ディレクトリの更新は filecachedir.sh を使う</span>
<span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"nv\">prg</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">load-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;filecachedir.el&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">file-cache-add-directory-list</span>
<span class=\"nv\">my-filedir</span><span class=\"p\">)</span>
<span class=\"p\">)</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>call-process で ~/.emacs.d/filecachedir.sh を呼び出す<br>
生成された~/.emacs.d/filecachedir.elを読み込んでfilecacheのディレクトリリストに追加する</p>
<h4>anythingの設定</h4>
<p>anythingもfilecacheに対応しているのでソースに足してあげる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
<span class=\"o\">'</span><span class=\"p\">(</span>
<span class=\"o\">...</span>
<span class=\"nv\">anything-c-source-file-cache</span>
<span class=\"o\">...</span>
<span class=\"p\">)</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/7c0010bcf1c8e89aba6f" (20563 22623) old 51 nil nil ((id nil "tag:qiita.com,2005:Item/9167") (published nil "2012-09-15T01:16:31+09:00") (updated nil "2012-09-15T01:16:31+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7c0010bcf1c8e89aba6f"))) (url nil "http://qiita.com/items/7c0010bcf1c8e89aba6f") (title nil "filecacheを使って作業用ディレクトリのファイルにアクセスする") (content ((type . "html")) "<h2>filecache?</h2>

<p>filecacheとはemacsに標準で付いている使用頻度の高いファイルに簡単にアクセスする為の仕組みです。<br>
通常は特定のディレクトリ(~ とか ~/binとか)に限って使うものなのでディレクトリを再帰的に辿れません。</p>

<p>そこでこのfilecacheをディレクトリを再帰的に辿ってcacheを作る方法です。</p>

<h3>前提</h3>

<p>filecacheは指定されたディレクトリ内のファイル名をキャッシュする為、<br>
ディレクトリを大量に指定すると一気にディスクアクセスが増えます。<br>
その為、再帰的指定するディレクトリは、SSDなどの高速なディスク上にあることを前提にしています。</p>

<h3>作業用ディレクトリ?</h3>

<p>プロジェクトファイルとかgitとかsvnのworking copyとか<br>
ディレクトリが再帰的に一杯あるよね?</p>

<h2>概要</h2>

<p>以下の処理をinit.el内で実行する</p>

<ol>
<li>shellスクリプトで対象ディレクトリを再帰スキャン</li>
<li>スキャン結果からディレクトリ一覧のelファイルを作成</li>
<li>filecacheの対象リストに追加</li>
</ol>

<h2>設定</h2>

<h4>再帰スキャン用のshellスクリプト</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/filecachedir.sh</span></div><div class=\"highlight\"><pre><span class=\"c\">#!/bin/sh</span>

<span class=\"k\">function </span>abs_path<span class=\"o\">()</span> <span class=\"o\">{</span>
  <span class=\"nv\">d</span><span class=\"o\">=</span><span class=\"k\">$(</span>dirname <span class=\"nv\">$0</span><span class=\"k\">)</span>
  <span class=\"o\">(</span><span class=\"nb\">cd</span> <span class=\"nv\">$d</span>;<span class=\"nb\">pwd</span><span class=\"o\">)</span>
<span class=\"o\">}</span>

<span class=\"nv\">TARGET_DIR</span><span class=\"o\">=</span>~/work
<span class=\"nv\">EXCLUDE_DIR</span><span class=\"o\">=</span><span class=\"s2\">&quot;target log logs .git tmp mnt .settings document documents doc .svn *.bak&quot;</span>
<span class=\"nv\">OUTPUT</span><span class=\"o\">=</span><span class=\"s2\">&quot;$(basename $0 .sh).el&quot;</span>

<span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span>

<span class=\"k\">for </span>d in <span class=\"nv\">$EXCLUDE_DIR</span>; <span class=\"k\">do</span>
<span class=\"k\">  if</span> <span class=\"o\">[</span> -n <span class=\"s2\">&quot;$EXC&quot;</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">      </span><span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;$EXC -o -name $d&quot;</span>
  <span class=\"k\">else</span>
<span class=\"k\">      </span><span class=\"nv\">EXC</span><span class=\"o\">=</span><span class=\"s2\">&quot;-name $d&quot;</span>
  <span class=\"k\">fi</span>
<span class=\"k\">done</span>

<span class=\"nb\">cd</span> <span class=\"k\">$(</span>abs_path<span class=\"k\">)</span>
<span class=\"o\">[</span> -r <span class=\"nv\">$OUTPUT</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> rm -f <span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"o\">{</span>,c<span class=\"o\">}</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot;(setq my-filedir&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot; &#39;(&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
find <span class=\"nv\">$TARGET_DIR</span> <span class=\"se\">\\(</span> <span class=\"nv\">$EXC</span> <span class=\"se\">\\)</span> -prune -o -path <span class=\"s2\">&quot;*/git/*&quot;</span> -type d -print0 <span class=\"se\">\\</span>
| perl -0 -ne <span class=\"s1\">&#39;chomp;print qq{ &quot;$_&quot;\\n}&#39;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
<span class=\"nb\">echo</span> <span class=\"s2\">&quot;))&quot;</span> &gt;&gt; <span class=\"nv\">$OUTPUT</span>
</pre>
</div>
</div>
<p>$TARGET_DIR 以下をfindしてディレクトリ名を一覧<br>
my-filedirデータをセットするelファイルを作る<br>
対象外のファイル・フォルダは$EXCLUDE_DIRで指定する</p>

<h4>filecacheの設定</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;filecache</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">prg</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;filecachedir.sh&quot;</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">file-readable-p</span> <span class=\"nv\">prg</span><span class=\"p\">)</span>
    <span class=\"c1\">;; ディレクトリを追加</span>
    <span class=\"c1\">;; ディレクトリの更新は filecachedir.sh を使う</span>
    <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"nv\">prg</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">load-file</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;filecachedir.el&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nv\">file-cache-add-directory-list</span>
     <span class=\"nv\">my-filedir</span><span class=\"p\">)</span>
    <span class=\"p\">)</span>
  <span class=\"p\">)</span>
</pre>
</div>
</div>
<p>call-process で ~/.emacs.d/filecachedir.sh を呼び出す<br>
生成された~/.emacs.d/filecachedir.elを読み込んでfilecacheのディレクトリリストに追加する</p>

<h4>anythingの設定</h4>

<p>anythingもfilecacheに対応しているのでソースに足してあげる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre>  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
        <span class=\"o\">&#39;</span><span class=\"p\">(</span>
<span class=\"o\">...</span>
          <span class=\"nv\">anything-c-source-file-cache</span>
<span class=\"o\">...</span>
          <span class=\"p\">)</span>
        <span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-09-15T01:16:31Z") (updated nil "2012-09-15T01:16:31Z") (author nil (name nil "toshikiw")))) ("(normal-top-level-add-subdirs-to-load-path)を使うときはdefault-directoryをletで束縛しておく必要がある" "<p>(normal-top-level-add-subdirs-to-load-path)を使うときはdefault-directoryをletで束縛しておく必要がある。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">major</span> <span class=\"nv\">name</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">major</span> <span class=\"p\">(</span><span class=\"nv\">number-to-string</span> <span class=\"nv\">emacs-major-version</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;emacs&quot;</span> <span class=\"nv\">major</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;~/share/&quot;</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">my-user-lisp-dir</span>
<span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">path</span> <span class=\"s\">&quot;/user-lisp&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-directory-p</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">progn</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'load-path</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>そうしないと何が起こるか。答えは「いまいるディレクトリ配下のすべてをload-pathに追加しようとする」。~/.emacs.d/init.elに書いてしまったらたぶん、Emacsが始まらなくなる。</p>" "http://qiita.com/items/dd4022725f3cab4537ae" (20631 37083) old 52 nil nil ((id nil "tag:qiita.com,2005:Item/9149") (published nil "2012-09-14T00:59:14+09:00") (updated nil "2012-11-05T19:11:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/dd4022725f3cab4537ae"))) (url nil "http://qiita.com/items/dd4022725f3cab4537ae") (title nil "(normal-top-level-add-subdirs-to-load-path)を使うときはdefault-directoryをletで束縛しておく必要がある") (content ((type . "html")) "<p>(normal-top-level-add-subdirs-to-load-path)を使うときはdefault-directoryをletで束縛しておく必要がある。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">major</span> <span class=\"nv\">name</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">major</span> <span class=\"p\">(</span><span class=\"nv\">number-to-string</span> <span class=\"nv\">emacs-major-version</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;emacs&quot;</span> <span class=\"nv\">major</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;~/share/&quot;</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">my-user-lisp-dir</span>
    <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">path</span> <span class=\"s\">&quot;/user-lisp&quot;</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-directory-p</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">progn</span>
        <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"nv\">my-user-lisp-dir</span><span class=\"p\">))</span>
          <span class=\"p\">(</span><span class=\"nv\">normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>そうしないと何が起こるか。答えは「いまいるディレクトリ配下のすべてをload-pathに追加しようとする」。~/.emacs.d/init.elに書いてしまったらたぶん、Emacsが始まらなくなる。</p>
") (published nil "2012-09-14T00:59:14Z") (updated nil "2012-11-05T19:11:39Z") (author nil (name nil "h12o")))) ("malabar-modeでjavaを書く" "<h2>設定する前に</h2>
<p>emacsでjavaを書くにはそれなりにjavaに習熟してる必要があると思う</p>
<h3>おすすめできない人</h3>
<ul>
<li>eclipseやnetbeansなどのインテリジェンスな補完がないとjavaを書けない人</li>
<li>javaのソースから継承ツリーが辿れない人</li>
<li>java se,java eeなどのコアなクラス群をいつ使えばいいのかぱっと出てこない人</li>
<li>プロジェクトで使用してるライブラリを把握できない人</li>
</ul>
<p>つまりIDEまかせでソースの大雑把なマッピングが脳内で出来てない人は今使ってるIDEを使いづづけた方がいいです。</p>
<h3>メリット</h3>
<ul>
<li>emacsからmavenが呼び出せる(eclipseもnetbeansも出来るけど)</li>
<li>IDEほど重くない</li>
</ul>
<p>あとなんだろう?<br>
コマンド併用でeclipseってエディタだよね? って言う人には向いてます。</p>
<h2>malabar-mode?</h2>
<p>malabar-mode はemacsに昔からあったjdeeの変りにemacsでjavaを書くモード<br>
jdeeはjdk5以降に対応してないので諦めた方がいいかも</p>
<h3>malabar-modeの導入</h3>
<p><a href=\"https://github.com/espenhw/malabar-mode\">配布元</a>を見るがあまりアクティブではないので<a href=\"https://github.com/buzztaiki/malabar-mode\">こっち</a>を使ってる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% git clone  https://github.com/buzztaiki/malabar-mode.git malabar-mode
% <span class=\"nb\">cd </span>malabar-mode
% vi pom.xml
</pre>
</div>
</div>
<p>emacsの設定を弄る<br>
私のはhomebrew使ってるので↓こうなってる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">XML</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;plugin&gt;</span>
<span class=\"nt\">&lt;groupId&gt;</span>org.codehaus.mojo<span class=\"nt\">&lt;/groupId&gt;</span>
<span class=\"nt\">&lt;artifactId&gt;</span>exec-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>
<span class=\"nt\">&lt;version&gt;</span>1.1.1<span class=\"nt\">&lt;/version&gt;</span>
<span class=\"nt\">&lt;executions&gt;</span>
<span class=\"nt\">&lt;execution&gt;</span>
…
<span class=\"nt\">&lt;configuration&gt;</span>
<span class=\"nt\">&lt;executable&gt;</span>/usr/local/Cellar/emacs/23.4/Emacs.app/Contents/MacOS/Emacs<span class=\"nt\">&lt;/executable&gt;</span>…
…
<span class=\"nt\">&lt;/configuration&gt;</span>
<span class=\"nt\">&lt;/execution&gt;</span>
…
<span class=\"nt\">&lt;/executions&gt;</span>
<span class=\"nt\">&lt;/plugin&gt;</span>
</pre>
</div>
</div>
<p>ビルド</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% mvn package
% ls target/malabar-1.5-SNAPSHOT-dist.zip
% cp target/malabar-1.5-SNAPSHOT-dist.zip ~/.emacs.d/lisp
% <span class=\"nb\">cd</span> ~/.emacs.d/lisp
% unzip malabar-1.5-SNAPSHOT-dist.zip
</pre>
</div>
</div>
<p>ビルドに成功すればzipファイルが出来る<br>
load-path が通っている場所に解凍</p>
<h3>設定</h3>
<p>付属のドキュメントに目を通してから設定すること</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'cedet</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">semantic-load-enable-minimum-features</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'malabar-mode</span> <span class=\"no\">nil</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-groovy-lib-dir</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;lisp/malabar-1.5-SNAPSHOT/lib&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'auto-mode-alist</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\.java\\\\'&quot;</span> <span class=\"o\">.</span> <span class=\"nv\">malabar-mode</span><span class=\"p\">))</span>
<span class=\"c1\">;; 日本語だとコンパイルエラーメッセージが化けるのでlanguageをenに設定</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-groovy-java-options</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;-Duser.language=en&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; 普段使わないパッケージを import 候補から除外</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-import-excluded-classes-regexp-list</span>
<span class=\"p\">(</span><span class=\"nb\">append</span>
<span class=\"o\">'</span><span class=\"p\">(</span>
<span class=\"s\">&quot;^java\\\\.awt\\\\..*$&quot;</span>
<span class=\"s\">&quot;^com\\\\.sun\\\\..*$&quot;</span>
<span class=\"s\">&quot;^org\\\\.omg\\\\..*$&quot;</span>
<span class=\"p\">)</span> <span class=\"nv\">malabar-import-excluded-classes-regexp-list</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'malabar-mode-hook</span>
<span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'after-save-hook</span> <span class=\"ss\">'malabar-compile-file-silently</span>
<span class=\"no\">nil</span> <span class=\"no\">t</span><span class=\"p\">)))</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>使い方</h2>
<p>だんだんメンドーになってきたので付属ドキュメントからよく使うコマンドを転記</p>
<p>malabar-groovy-restart<br>
他のコマンドが動かない場合はmalabarが使ってるgroovyを再起動させると動く。よく使う。<br>
malabar-import-one-class (C-c C-v C-z)<br>
カーソル位置のクラスをインポート<br>
補完対象が複数ある場合minibufferに出るのでパッケージ名を入力する<br>
malabar-run-maven-command<br>
mavenコマンドを実行する編集→compile or installを繰替えせるので便利<br>
ただ構文エラーがあると動かないのでmalabar-groovy-restartする<br>
malabar-jump-to-thing (C-c C-v C-y)<br>
カーソル位置のクラスに移動する<br>
プロジェクトが違うと上手く動かない</p>" "http://qiita.com/items/389430db19561307d037" (20559 27090) old 53 nil nil ((id nil "tag:qiita.com,2005:Item/9088") (published nil "2012-09-12T01:41:54+09:00") (updated nil "2012-09-12T01:41:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/389430db19561307d037"))) (url nil "http://qiita.com/items/389430db19561307d037") (title nil "malabar-modeでjavaを書く") (content ((type . "html")) "<h2>設定する前に</h2>

<p>emacsでjavaを書くにはそれなりにjavaに習熟してる必要があると思う</p>

<h3>おすすめできない人</h3>

<ul>
<li>eclipseやnetbeansなどのインテリジェンスな補完がないとjavaを書けない人</li>
<li>javaのソースから継承ツリーが辿れない人</li>
<li>java se,java eeなどのコアなクラス群をいつ使えばいいのかぱっと出てこない人</li>
<li>プロジェクトで使用してるライブラリを把握できない人</li>
</ul>

<p>つまりIDEまかせでソースの大雑把なマッピングが脳内で出来てない人は今使ってるIDEを使いづづけた方がいいです。</p>

<h3>メリット</h3>

<ul>
<li>emacsからmavenが呼び出せる(eclipseもnetbeansも出来るけど)</li>
<li>IDEほど重くない</li>
</ul>

<p>あとなんだろう?<br>
コマンド併用でeclipseってエディタだよね? って言う人には向いてます。</p>

<h2>malabar-mode?</h2>

<p>malabar-mode はemacsに昔からあったjdeeの変りにemacsでjavaを書くモード<br>
jdeeはjdk5以降に対応してないので諦めた方がいいかも</p>

<h3>malabar-modeの導入</h3>

<p><a href=\"https://github.com/espenhw/malabar-mode\">配布元</a>を見るがあまりアクティブではないので<a href=\"https://github.com/buzztaiki/malabar-mode\">こっち</a>を使ってる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% git clone  https://github.com/buzztaiki/malabar-mode.git malabar-mode
% <span class=\"nb\">cd </span>malabar-mode
% vi pom.xml
</pre>
</div>
</div>
<p>emacsの設定を弄る<br>
私のはhomebrew使ってるので↓こうなってる</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">XML</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;plugin&gt;</span>
 <span class=\"nt\">&lt;groupId&gt;</span>org.codehaus.mojo<span class=\"nt\">&lt;/groupId&gt;</span>
 <span class=\"nt\">&lt;artifactId&gt;</span>exec-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>
 <span class=\"nt\">&lt;version&gt;</span>1.1.1<span class=\"nt\">&lt;/version&gt;</span>
 <span class=\"nt\">&lt;executions&gt;</span>
  <span class=\"nt\">&lt;execution&gt;</span>
…
   <span class=\"nt\">&lt;configuration&gt;</span>
    <span class=\"nt\">&lt;executable&gt;</span>/usr/local/Cellar/emacs/23.4/Emacs.app/Contents/MacOS/Emacs<span class=\"nt\">&lt;/executable&gt;</span>…
…
   <span class=\"nt\">&lt;/configuration&gt;</span>
  <span class=\"nt\">&lt;/execution&gt;</span>
…
 <span class=\"nt\">&lt;/executions&gt;</span>
<span class=\"nt\">&lt;/plugin&gt;</span>
</pre>
</div>
</div>
<p>ビルド</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% mvn package
% ls target/malabar-1.5-SNAPSHOT-dist.zip
% cp target/malabar-1.5-SNAPSHOT-dist.zip ~/.emacs.d/lisp
% <span class=\"nb\">cd</span> ~/.emacs.d/lisp
% unzip malabar-1.5-SNAPSHOT-dist.zip
</pre>
</div>
</div>
<p>ビルドに成功すればzipファイルが出来る<br>
load-path が通っている場所に解凍</p>

<h3>設定</h3>

<p>付属のドキュメントに目を通してから設定すること</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;cedet</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">semantic-load-enable-minimum-features</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;malabar-mode</span> <span class=\"no\">nil</span> <span class=\"no\">t</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-groovy-lib-dir</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"s\">&quot;lisp/malabar-1.5-SNAPSHOT/lib&quot;</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;auto-mode-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\.java\\\\&#39;&quot;</span> <span class=\"o\">.</span> <span class=\"nv\">malabar-mode</span><span class=\"p\">))</span>
  <span class=\"c1\">;; 日本語だとコンパイルエラーメッセージが化けるのでlanguageをenに設定</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-groovy-java-options</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;-Duser.language=en&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; 普段使わないパッケージを import 候補から除外</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">malabar-import-excluded-classes-regexp-list</span>
        <span class=\"p\">(</span><span class=\"nb\">append</span> 
         <span class=\"o\">&#39;</span><span class=\"p\">(</span>
           <span class=\"s\">&quot;^java\\\\.awt\\\\..*$&quot;</span>
           <span class=\"s\">&quot;^com\\\\.sun\\\\..*$&quot;</span>
           <span class=\"s\">&quot;^org\\\\.omg\\\\..*$&quot;</span>
           <span class=\"p\">)</span> <span class=\"nv\">malabar-import-excluded-classes-regexp-list</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;malabar-mode-hook</span>
            <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
              <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;after-save-hook</span> <span class=\"ss\">&#39;malabar-compile-file-silently</span>
                        <span class=\"no\">nil</span> <span class=\"no\">t</span><span class=\"p\">)))</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>使い方</h2>

<p>だんだんメンドーになってきたので付属ドキュメントからよく使うコマンドを転記</p>

<p>malabar-groovy-restart<br>
他のコマンドが動かない場合はmalabarが使ってるgroovyを再起動させると動く。よく使う。<br>
malabar-import-one-class (C-c C-v C-z)<br>
カーソル位置のクラスをインポート<br>
補完対象が複数ある場合minibufferに出るのでパッケージ名を入力する<br>
malabar-run-maven-command<br>
mavenコマンドを実行する編集→compile or installを繰替えせるので便利<br>
ただ構文エラーがあると動かないのでmalabar-groovy-restartする<br>
malabar-jump-to-thing (C-c C-v C-y)<br>
カーソル位置のクラスに移動する<br>
プロジェクトが違うと上手く動かない</p>
") (published nil "2012-09-12T01:41:54Z") (updated nil "2012-09-12T01:41:54Z") (author nil (name nil "toshikiw")))) ("カスタムlocatedbを作ってanythingで利用する" "<p>カスタムlocateで高速にファイル検索 → anythingで利用</p>
<h2>メリット</h2>
<ul>
<li>カスタムlocatedbを設定することでインデックス生成・更新を高速化</li>
<li>範囲を限定することでanythingで誤選択を減らす</li>
</ul>
<h2>locatedb更新設定</h2>
<p>/etc/locate.rc をコピーして編集</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% cp /etc/locate.rc <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
% vi <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">$HOME/Library/Preferences/locate.rc</span></div><div class=\"highlight\"><pre><span class=\"c\">#</span>
<span class=\"c\"># All commented values are the defaults</span>
<span class=\"c\">#</span>
<span class=\"c\"># temp directory</span>
<span class=\"c\">#TMPDIR=&quot;/tmp&quot;</span>
<span class=\"c\"># the actual database</span>
<span class=\"nv\">FCODES</span><span class=\"o\">=</span><span class=\"s2\">&quot;$HOME/Library/Caches/com.apple.locate.db&quot;</span>
<span class=\"c\"># directories to be put in the database</span>
<span class=\"nv\">SEARCHPATHS</span><span class=\"o\">=</span><span class=\"s2\">&quot;$HOME&quot;</span>
<span class=\"c\"># directories unwanted in output</span>
<span class=\"c\">#PRUNEPATHS=&quot;/tmp /var/tmp&quot;</span>
<span class=\"c\"># filesystems allowed. Beware: a non-listed filesystem will be pruned</span>
<span class=\"c\"># and if the SEARCHPATHS starts in such a filesystem locate will build</span>
<span class=\"c\"># an empty database.</span>
<span class=\"c\">#</span>
<span class=\"c\"># be careful if you add 'nfs'</span>
<span class=\"c\">#FILESYSTEMS=&quot;hfs ufs&quot;</span>
</pre>
</div>
</div>
<p>$HOMEは環境に合せて変更する<br>
FCODES を $HOME/Library/Caches/com.apple.locate.db<br>
SEARCHPATHS を$HOME以下に限定</p>
<h2>locatedbを更新する為のlaunchdの設定</h2>
<p>locatedbを定期的に更新する為の設定</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">$HOME/Library/LaunchAgents/com.apple.locate.plist</span></div><div class=\"highlight\"><pre><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class=\"cp\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class=\"nt\">&lt;plist</span> <span class=\"na\">version=</span><span class=\"s\">&quot;1.0&quot;</span><span class=\"nt\">&gt;</span>
<span class=\"nt\">&lt;dict&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>AbandonProcessGroup<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;true/&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>Disabled<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;true/&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>KeepAlive<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;dict&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>PathState<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;dict&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>/var/db/locate.database<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;false/&gt;</span>
<span class=\"nt\">&lt;/dict&gt;</span>
<span class=\"nt\">&lt;/dict&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>Label<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;string&gt;</span>com.apple.locate<span class=\"nt\">&lt;/string&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>LowPriorityIO<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;true/&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>Nice<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;integer&gt;</span>5<span class=\"nt\">&lt;/integer&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>ProgramArguments<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;array&gt;</span>
<span class=\"nt\">&lt;string&gt;</span>/usr/libexec/locate.updatedb<span class=\"nt\">&lt;/string&gt;</span>
<span class=\"nt\">&lt;/array&gt;</span>
<span class=\"nt\">&lt;key&gt;</span>StartInterval<span class=\"nt\">&lt;/key&gt;</span>
<span class=\"nt\">&lt;integer&gt;</span>7200<span class=\"nt\">&lt;/integer&gt;</span>
<span class=\"nt\">&lt;/dict&gt;</span>
<span class=\"nt\">&lt;/plist&gt;</span>
</pre>
</div>
</div>
<p>$HOME/Library/LaunchAgentsが無い場合、mkdirする<br>
↑は2時間毎にlocatedbを更新する設定<br>
詳しくは man launchd.plist</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% defaults write ~/.MacOSX/environment LOCATE_CONFIG <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
% defaults write ~/.MacOSX/environment LOCATE_PATH <span class=\"nv\">$HOME</span>/Library/Caches/com.apple.locate.db
</pre>
</div>
</div>
<p>設定ファイルとlocatedbのパスを設定 → 設定後再ログインが必要</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% /usr/libexec/locate.updatedb
% ls <span class=\"nv\">$HOME</span>/Library/Caches/com.apple.locate.db
</pre>
</div>
</div>
<p>手動実行してlocatedbが生成されることを確認する</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% launchctl load -w ~/Library/LaunchAgents/com.apple.locate.plist
</pre>
</div>
</div>
<p>launchdに登録</p>
<h2>emacs設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs/init.el</span></div><div class=\"highlight\"><pre>  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
<span class=\"o\">'</span><span class=\"p\">(</span>
<span class=\"o\">...</span>
<span class=\"nv\">anything-c-source-locate</span>
<span class=\"o\">...</span>
<span class=\"p\">)</span>
<span class=\"p\">)</span>
<span class=\"c1\">;; locate db</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">locatedb</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">getenv</span> <span class=\"s\">&quot;HOME&quot;</span><span class=\"p\">)</span> <span class=\"s\">&quot;/Library/Caches/com.apple.locate.db&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">file-readable-p</span> <span class=\"nv\">locatedb</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;LOCATE_PATH&quot;</span> <span class=\"nv\">locatedb</span><span class=\"p\">)</span>
<span class=\"p\">)</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>anything-sourcesにanything-c-source-locate追加<br>
locatedbのパスを指定</p>
<p>後はemacsを再起動後anythingを起動すればlocatedbが使える</p>" "http://qiita.com/items/5008ac8c4c5dda1cf5a0" (20559 21901) old 54 nil nil ((id nil "tag:qiita.com,2005:Item/9052") (published nil "2012-09-11T01:07:06+09:00") (updated nil "2012-09-12T00:15:25+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5008ac8c4c5dda1cf5a0"))) (url nil "http://qiita.com/items/5008ac8c4c5dda1cf5a0") (title nil "カスタムlocatedbを作ってanythingで利用する") (content ((type . "html")) "<p>カスタムlocateで高速にファイル検索 → anythingで利用</p>

<h2>メリット</h2>

<ul>
<li>カスタムlocatedbを設定することでインデックス生成・更新を高速化</li>
<li>範囲を限定することでanythingで誤選択を減らす</li>
</ul>

<h2>locatedb更新設定</h2>

<p>/etc/locate.rc をコピーして編集</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% cp /etc/locate.rc <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
% vi <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">$HOME/Library/Preferences/locate.rc</span></div><div class=\"highlight\"><pre><span class=\"c\">#</span>
<span class=\"c\"># All commented values are the defaults</span>
<span class=\"c\">#</span>
<span class=\"c\"># temp directory</span>
<span class=\"c\">#TMPDIR=&quot;/tmp&quot;</span>

<span class=\"c\"># the actual database</span>
<span class=\"nv\">FCODES</span><span class=\"o\">=</span><span class=\"s2\">&quot;$HOME/Library/Caches/com.apple.locate.db&quot;</span>

<span class=\"c\"># directories to be put in the database</span>
<span class=\"nv\">SEARCHPATHS</span><span class=\"o\">=</span><span class=\"s2\">&quot;$HOME&quot;</span>

<span class=\"c\"># directories unwanted in output</span>
<span class=\"c\">#PRUNEPATHS=&quot;/tmp /var/tmp&quot;</span>

<span class=\"c\"># filesystems allowed. Beware: a non-listed filesystem will be pruned</span>
<span class=\"c\"># and if the SEARCHPATHS starts in such a filesystem locate will build</span>
<span class=\"c\"># an empty database.</span>
<span class=\"c\">#</span>
<span class=\"c\"># be careful if you add &#39;nfs&#39;</span>
<span class=\"c\">#FILESYSTEMS=&quot;hfs ufs&quot;</span>
</pre>
</div>
</div>
<p>$HOMEは環境に合せて変更する<br>
FCODES を $HOME/Library/Caches/com.apple.locate.db<br>
SEARCHPATHS を$HOME以下に限定</p>

<h2>locatedbを更新する為のlaunchdの設定</h2>

<p>locatedbを定期的に更新する為の設定</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">$HOME/Library/LaunchAgents/com.apple.locate.plist</span></div><div class=\"highlight\"><pre><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class=\"cp\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class=\"nt\">&lt;plist</span> <span class=\"na\">version=</span><span class=\"s\">&quot;1.0&quot;</span><span class=\"nt\">&gt;</span>
<span class=\"nt\">&lt;dict&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>AbandonProcessGroup<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;true/&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>Disabled<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;true/&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>KeepAlive<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;dict&gt;</span>
                <span class=\"nt\">&lt;key&gt;</span>PathState<span class=\"nt\">&lt;/key&gt;</span>
                <span class=\"nt\">&lt;dict&gt;</span>
                        <span class=\"nt\">&lt;key&gt;</span>/var/db/locate.database<span class=\"nt\">&lt;/key&gt;</span>
                        <span class=\"nt\">&lt;false/&gt;</span>
                <span class=\"nt\">&lt;/dict&gt;</span>
        <span class=\"nt\">&lt;/dict&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>Label<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;string&gt;</span>com.apple.locate<span class=\"nt\">&lt;/string&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>LowPriorityIO<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;true/&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>Nice<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;integer&gt;</span>5<span class=\"nt\">&lt;/integer&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>ProgramArguments<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;array&gt;</span>
                <span class=\"nt\">&lt;string&gt;</span>/usr/libexec/locate.updatedb<span class=\"nt\">&lt;/string&gt;</span>
        <span class=\"nt\">&lt;/array&gt;</span>
        <span class=\"nt\">&lt;key&gt;</span>StartInterval<span class=\"nt\">&lt;/key&gt;</span>
        <span class=\"nt\">&lt;integer&gt;</span>7200<span class=\"nt\">&lt;/integer&gt;</span>
<span class=\"nt\">&lt;/dict&gt;</span>
<span class=\"nt\">&lt;/plist&gt;</span>
</pre>
</div>
</div>
<p>$HOME/Library/LaunchAgentsが無い場合、mkdirする<br>
↑は2時間毎にlocatedbを更新する設定<br>
詳しくは man launchd.plist</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% defaults write ~/.MacOSX/environment LOCATE_CONFIG <span class=\"nv\">$HOME</span>/Library/Preferences/locate.rc
% defaults write ~/.MacOSX/environment LOCATE_PATH <span class=\"nv\">$HOME</span>/Library/Caches/com.apple.locate.db
</pre>
</div>
</div>
<p>設定ファイルとlocatedbのパスを設定 → 設定後再ログインが必要</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% /usr/libexec/locate.updatedb
% ls <span class=\"nv\">$HOME</span>/Library/Caches/com.apple.locate.db
</pre>
</div>
</div>
<p>手動実行してlocatedbが生成されることを確認する</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>% launchctl load -w ~/Library/LaunchAgents/com.apple.locate.plist 
</pre>
</div>
</div>
<p>launchdに登録</p>

<h2>emacs設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs/init.el</span></div><div class=\"highlight\"><pre>  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
        <span class=\"o\">&#39;</span><span class=\"p\">(</span>
<span class=\"o\">...</span>
          <span class=\"nv\">anything-c-source-locate</span>
<span class=\"o\">...</span>
          <span class=\"p\">)</span>
        <span class=\"p\">)</span>
  <span class=\"c1\">;; locate db</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">locatedb</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"p\">(</span><span class=\"nv\">getenv</span> <span class=\"s\">&quot;HOME&quot;</span><span class=\"p\">)</span> <span class=\"s\">&quot;/Library/Caches/com.apple.locate.db&quot;</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">file-readable-p</span> <span class=\"nv\">locatedb</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nv\">setenv</span> <span class=\"s\">&quot;LOCATE_PATH&quot;</span> <span class=\"nv\">locatedb</span><span class=\"p\">)</span>
      <span class=\"p\">)</span>
    <span class=\"p\">)</span>
</pre>
</div>
</div>
<p>anything-sourcesにanything-c-source-locate追加<br>
locatedbのパスを指定</p>

<p>後はemacsを再起動後anythingを起動すればlocatedbが使える</p>
") (published nil "2012-09-11T01:07:06Z") (updated nil "2012-09-12T00:15:25Z") (author nil (name nil "toshikiw")))) ("flymakeでエラーになり、またバッファーを開こうとするとEmacsが固まるときの対処" "<p>あるソースファイルを読み込んだ時にflymakeでエラーになり、またファイルを開こうとするとEmacsがフリーズして使えなくなる状態が起きていました。</p>
<p>どうも次の設定をしておくと幸せになれるみたいです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">flymake-config.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">flymake-post-syntax-check</span> <span class=\"p\">(</span><span class=\"nv\">before</span> <span class=\"nv\">flymake-force-check-was-interrupted</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-check-was-interrupted</span> <span class=\"no\">t</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">ad-activate</span> <span class=\"ss\">'flymake-post-syntax-check</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>情報の参照元: <a href=\"http://d.hatena.ne.jp/sugyan/20100705/1278306885\">http://d.hatena.ne.jp/sugyan/20100705/1278306885</a></p>" "http://qiita.com/items/41af818b76145b255ea7" (20553 37743) old 55 nil nil ((id nil "tag:qiita.com,2005:Item/8922") (published nil "2012-09-07T15:25:51+09:00") (updated nil "2012-09-07T15:25:51+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/41af818b76145b255ea7"))) (url nil "http://qiita.com/items/41af818b76145b255ea7") (title nil "flymakeでエラーになり、またバッファーを開こうとするとEmacsが固まるときの対処") (content ((type . "html")) "<p>あるソースファイルを読み込んだ時にflymakeでエラーになり、またファイルを開こうとするとEmacsがフリーズして使えなくなる状態が起きていました。</p>

<p>どうも次の設定をしておくと幸せになれるみたいです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">flymake-config.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">flymake-post-syntax-check</span> <span class=\"p\">(</span><span class=\"nv\">before</span> <span class=\"nv\">flymake-force-check-was-interrupted</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-check-was-interrupted</span> <span class=\"no\">t</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">ad-activate</span> <span class=\"ss\">&#39;flymake-post-syntax-check</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>情報の参照元: <a href=\"http://d.hatena.ne.jp/sugyan/20100705/1278306885\">http://d.hatena.ne.jp/sugyan/20100705/1278306885</a></p>
") (published nil "2012-09-07T15:25:51Z") (updated nil "2012-09-07T15:25:51Z") (author nil (name nil "quwa")))) ("Tclでflymakeを使う" "<h1>Tclでflymakeを使う</h1>
<h2>準備</h2>
<ul>
<li>AcitiveStateからTcl Dev Kitを購入する。ここが一番難易度が高いです。</li>
<li>tclchecker.exeにPATHを通す</li>
</ul>
<h2>flymake.elを修正する。</h2>
<p>warning の文字列定義を修正。他の言語のWanringを完全に殺してしまうので、思い切りが必要です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Diff files</span></div><div class=\"highlight\"><pre>963c963,964
&lt;         (if (and err-text (string-match &quot;^[wW]arning&quot; err-text))
<span class=\"gd\">---</span>
&gt; ;       (if (and err-text (string-match &quot;^[wW]arning&quot; err-text))
&gt;         (if (and err-text (string-match &quot;^(warn&quot; err-text))
</pre>
</div>
</div>
<h2>.emacsに追加</h2>
<p>tclcheckerへのオプションはいろいろ試してみましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'flymake</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-allowed-file-name-masks</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;.+\\\\.tcl$&quot;</span> <span class=\"nv\">flymake-simple-make-init</span><span class=\"p\">)</span> <span class=\"nv\">flymake-allowed-file-name-masks</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">flymake-get-make-cmdline</span> <span class=\"p\">(</span><span class=\"nv\">source</span> <span class=\"nv\">base-dir</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;tclchecker&quot;</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;-quiet&quot;</span> <span class=\"s\">&quot;-W3&quot;</span> <span class=\"s\">&quot;-suppress&quot;</span> <span class=\"s\">&quot;nonPortFile&quot;</span> <span class=\"s\">&quot;-suppress&quot;</span> <span class=\"s\">&quot;nonPortCmd&quot;</span>  <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">base-dir</span> <span class=\"nv\">source</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-err-line-patterns</span>
<span class=\"p\">(</span><span class=\"nb\">cons</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\(.+\\\\):\\\\([0-9]+\\\\) \\\\(.+\\\\)&quot;</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"no\">nil</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
<span class=\"nv\">flymake-err-line-patterns</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<h2>実行の様子</h2>
<p><img src=\"https://www.evernote.com/shard/s25/sh/5eabd813-8aee-4c4a-8ed8-05d38327a99f/4d95819026aacaa40e6146faa5592eb0/res/f785dbcc-06d7-4550-954c-455af08da5c2/ScreenClip.png\" alt=\"実行中\"></p>" "http://qiita.com/items/61645dce9dd950737b4d" (20549 46099) old 56 nil nil ((id nil "tag:qiita.com,2005:Item/8743") (published nil "2012-09-04T16:56:03+09:00") (updated nil "2012-09-04T16:56:03+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/61645dce9dd950737b4d"))) (url nil "http://qiita.com/items/61645dce9dd950737b4d") (title nil "Tclでflymakeを使う") (content ((type . "html")) "<h1>Tclでflymakeを使う</h1>

<h2>準備</h2>

<ul>
<li>AcitiveStateからTcl Dev Kitを購入する。ここが一番難易度が高いです。</li>
<li>tclchecker.exeにPATHを通す</li>
</ul>

<h2>flymake.elを修正する。</h2>

<p>warning の文字列定義を修正。他の言語のWanringを完全に殺してしまうので、思い切りが必要です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Diff files</span></div><div class=\"highlight\"><pre>963c963,964
&lt;         (if (and err-text (string-match &quot;^[wW]arning&quot; err-text))
<span class=\"gd\">---</span>
&gt; ;       (if (and err-text (string-match &quot;^[wW]arning&quot; err-text))
&gt;         (if (and err-text (string-match &quot;^(warn&quot; err-text))
</pre>
</div>
</div>
<h2>.emacsに追加</h2>

<p>tclcheckerへのオプションはいろいろ試してみましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;flymake</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-allowed-file-name-masks</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;.+\\\\.tcl$&quot;</span> <span class=\"nv\">flymake-simple-make-init</span><span class=\"p\">)</span> <span class=\"nv\">flymake-allowed-file-name-masks</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">flymake-get-make-cmdline</span> <span class=\"p\">(</span><span class=\"nv\">source</span> <span class=\"nv\">base-dir</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;tclchecker&quot;</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;-quiet&quot;</span> <span class=\"s\">&quot;-W3&quot;</span> <span class=\"s\">&quot;-suppress&quot;</span> <span class=\"s\">&quot;nonPortFile&quot;</span> <span class=\"s\">&quot;-suppress&quot;</span> <span class=\"s\">&quot;nonPortCmd&quot;</span>  <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">base-dir</span> <span class=\"nv\">source</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-err-line-patterns</span>
 <span class=\"p\">(</span><span class=\"nb\">cons</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\(.+\\\\):\\\\([0-9]+\\\\) \\\\(.+\\\\)&quot;</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"no\">nil</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
  <span class=\"nv\">flymake-err-line-patterns</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<h2>実行の様子</h2>

<p><img src=\"https://www.evernote.com/shard/s25/sh/5eabd813-8aee-4c4a-8ed8-05d38327a99f/4d95819026aacaa40e6146faa5592eb0/res/f785dbcc-06d7-4550-954c-455af08da5c2/ScreenClip.png\" alt=\"実行中\"></p>
") (published nil "2012-09-04T16:56:03Z") (updated nil "2012-09-04T16:56:03Z") (author nil (name nil "natsutan")))) ("tmux入れた on OS X" "<p>ふとscreenからtmuxにしようと思ったので、ついでに色々やった。エントリにするのめんどいから箇条書きで。</p>
<ul>
<li>tmux ぶっこむ
<ul>
<li>brew install tmux だけ</li>
<li>プレフィクスは.tmux.conf で <code>set -g prefix ^Z</code> と <code>bind ^Z send-prefix</code> で変更</li>
<li>後はデフォルトで、PREFIX + ? でヘルプ見て頑張る感じ</li>
<li>Option, Command+カーソルキーでpaneのサイズ変更が割り当てられてるけどOS Xのキーバインドと被ってるのでカーソルキーに割り当て直した</li>
</ul></li>
<li>Cocoa Emacs やめてターミナルから使ってみる
<ul>
<li><code>/Applications/Emacs.app/Contents/MacOS/Emacs -nw</code> とすればターミナルから普通に立ち上がる</li>
<li>.emacs はフォントの設定を<code>(window-system)</code>でスキップさせただけで他はそのままで動いた</li>
<li>クリップボードの操作を考えるとCommandをメタキーにすると苦しいと思ったのでメタキーはOptionに戻し</li>
<li>Terminal.app の 「メタキーとしてOptionキーを使用」 を有効</li>
<li>Command + w だけは踏むとやばそうだったので <a href=\"http://apple.stackexchange.com/questions/44412/disable-command-w-in-the-terminal\">http://apple.stackexchange.com/questions/44412/disable-command-w-in-the-terminal</a> 見て無効化(メニュー名は「ウインドウを閉じる」)</li>
</ul></li>
<li>Emacsからシェル叩けるように改善(ずっと昔から困ってた)
<ul>
<li><code>shell</code>ではなく<code>term</code>コマンドを使う</li>
<li><a href=\"http://sakito.jp/emacs/emacsshell.html#id11\">http://sakito.jp/emacs/emacsshell.html#id11</a> 見てterminfo 作成</li>
</ul></li>
<li>Terminal.app は全画面モードで常駐</li>
</ul>
<p>結局tmuxよりEmacs周り弄ってた時間の方が長いっぽい。</p>" "http://qiita.com/items/b2d930bdc5967eaf25cc" (20538 54252) old 57 nil nil ((id nil "tag:qiita.com,2005:Item/8407") (published nil "2012-08-26T11:05:34+09:00") (updated nil "2012-08-27T10:57:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b2d930bdc5967eaf25cc"))) (url nil "http://qiita.com/items/b2d930bdc5967eaf25cc") (title nil "tmux入れた on OS X") (content ((type . "html")) "<p>ふとscreenからtmuxにしようと思ったので、ついでに色々やった。エントリにするのめんどいから箇条書きで。</p>

<ul>
<li>tmux ぶっこむ

<ul>
<li>brew install tmux だけ</li>
<li>プレフィクスは.tmux.conf で <code>set -g prefix ^Z</code> と <code>bind ^Z send-prefix</code> で変更</li>
<li>後はデフォルトで、PREFIX + ? でヘルプ見て頑張る感じ</li>
<li>Option, Command+カーソルキーでpaneのサイズ変更が割り当てられてるけどOS Xのキーバインドと被ってるのでカーソルキーに割り当て直した</li>
</ul></li>
<li>Cocoa Emacs やめてターミナルから使ってみる

<ul>
<li><code>/Applications/Emacs.app/Contents/MacOS/Emacs -nw</code> とすればターミナルから普通に立ち上がる</li>
<li>.emacs はフォントの設定を<code>(window-system)</code>でスキップさせただけで他はそのままで動いた</li>
<li>クリップボードの操作を考えるとCommandをメタキーにすると苦しいと思ったのでメタキーはOptionに戻し</li>
<li>Terminal.app の 「メタキーとしてOptionキーを使用」 を有効</li>
<li>Command + w だけは踏むとやばそうだったので <a href=\"http://apple.stackexchange.com/questions/44412/disable-command-w-in-the-terminal\">http://apple.stackexchange.com/questions/44412/disable-command-w-in-the-terminal</a> 見て無効化(メニュー名は「ウインドウを閉じる」)</li>
</ul></li>
<li>Emacsからシェル叩けるように改善(ずっと昔から困ってた)

<ul>
<li><code>shell</code>ではなく<code>term</code>コマンドを使う</li>
<li><a href=\"http://sakito.jp/emacs/emacsshell.html#id11\">http://sakito.jp/emacs/emacsshell.html#id11</a> 見てterminfo 作成</li>
</ul></li>
<li>Terminal.app は全画面モードで常駐</li>
</ul>

<p>結局tmuxよりEmacs周り弄ってた時間の方が長いっぽい。</p>
") (published nil "2012-08-26T11:05:34Z") (updated nil "2012-08-27T10:57:00Z") (author nil (name nil "hiratara")))) ("setup Emacs24 for Windows" "<p>この文書は、Windows7(64bit) で Emacs24 を使う際の備忘録です。<br>
最新の情報ではない場合があるので注意。</p>
<p>快適に使うために必要なとにかく色んな設定が無いので、本当に入れただけです。</p>
<h1>参照サイト</h1>
<ul>
<li><a href=\"http://code.google.com/p/emacs-for-windows\">emacs-for-windows</a>
<ul>
<li>Windows 用のコンパイル済 Emacs</li>
</ul></li>
<li><a href=\"https://github.com/technomancy/emacs-starter-kit\">emacs-starter-kit</a>
<ul>
<li>Emacs24 から標準添付になった package.el を使う便利設定集</li>
</ul></li>
</ul>
<h1>emacs-for-windows</h1>
<p>やることはダウンロードして展開するだけですね…</p>
<h2>fetch</h2>
<p><a href=\"http://code.google.com/p/emacs-for-windows\">emacs-for-windows</a>からコンパイル済の Emacs を取得。<br>
私の時は <em>Emacs24.BZR.106722.Win32.20111223</em> が最新でした…ちょっと古い…</p>
<h2>unpack</h2>
<p>適当なディレクトリに展開します。<br>
私は <em>d:\\bin\\Emacs</em> にしました。<br>
Mac みたいに <em>c:\\Applications\\Emacs</em> とかにする人もいるみたいですね(<a href=\"http://sinewalker.wordpress.com/2012/02/13/install-emacs24-snapshot-on-debian-ubuntu-and-windows-7/\">こことか</a>)</p>
<h2>use</h2>
<p><em>emacs.exe</em> で起動するとウインドウが二つ開きます(Emacs本体とコンソールウインドウ)。<br>
ダサい<br>
なので、<em>d:\\bin\\Emacs\\runemacs.exe</em> で起動します。</p>
<p>送るメニューからファイルを開けるようにしたいので、<em>emacsclientw.exe</em> を SendTo に置きます。<br>
<em>emacsclient.exe</em> は標準エラーがコンソールになってて、w のほうはメッセージボックスになってるとかだった気がする。<br>
PuTTY の <em>plink.exe</em> と <em>plinkw.exe</em> も同じ。</p>
<p>この時初めて気づいたのですが、<em>.emacs.d</em> は <em>c:\\Users\\ユーザ名.emacs.d</em> ではなく、_c:\\Users\\ユーザ名\\AppData\\Roaming.emacs.d_になるのですね…<br>
誰得だこれ。</p>
<h1>emacs-starter-kit</h1>
<p>使ったことなかったのですが、せっかく空の環境から始めるので試します。</p>
<p>README にこんなことが書いてありました。<br>
* Emacs24 が必要(package.el使うから)<br>
* Emacs23 とか 22 とかと共有したければ古いやつ使え<br>
* モジュール分かれてるし好きなの選べ<br>
* ~/.emacs.d/$USER.el は自動的にロードする<br>
* ~/.emacs.d/$USER/ の下に置いた .el も自動的にロードする<br>
* .el の前にホスト名が付いてるやつをそのホストの設定としてロードする<br>
* Starter Kit を自分の .emacs.d として使ってもいいけどきっとグチャるから Upgrading の説明を読んどけ<br>
まぁ、気に留めておきましょう。</p>
<p>Installation 読んでると、どうも git リポジトリを clone しなくてもよさそうです。<br>
具体的には init.el に次のコードを書いて、後は package.el でなんとかする、と。<br>
(先頭の一行は自分で足しました。おまじない)</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;</span> <span class=\"o\">-*-</span> <span class=\"n\">coding</span><span class=\"p\">:</span> <span class=\"n\">iso</span><span class=\"o\">-</span>2022<span class=\"o\">-</span>7<span class=\"n\">bit</span><span class=\"p\">;</span> <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">lisp</span><span class=\"o\">-</span><span class=\"n\">interaction</span> <span class=\"o\">-*-</span>
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'package)</span>
<span class=\"s\">(add-to-list '</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span>
<span class=\"s\">'</span><span class=\"err\">(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;) t)</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>Windows だと &quot;.emacs.d&quot; が作れない!とか困るかもしれませんが、<br>
Emacs 起動して M-x make-directory すれば作れます。</p>
<p>書いたので M-x eval-buffer して、エラーが無ければ先に進みます。<br>
package.el の情報(インデックスか何かでしょう)を最新化するため、M-x package-refresh-contents するそうです。</p>
<p>M-x package-install すると、ミニバッファに &quot;Install package:&quot; とか出て止まるので、<strong>starter-kit</strong> と入力しましょう。<br>
補完が利くので適当に Tab 打ってればいいです。</p>
<p>あ…他のモジュールも package-install するのか…</p>
<ul>
<li>starter-kit-bidings</li>
<li>starter-kit-eshell</li>
<li>starter-kit-js</li>
<li>starter-kit-ruby</li>
<li>starter-kit-lisp</li>
</ul>
<p>あとはなんか自分でインストールしたことあるパッケージのリストをメンテしておけばいいんじゃない？という感じで<br>
次のようなコードを init.el に書いておくことを薦めてた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archive</span><span class=\"o\">-</span><span class=\"n\">contents</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">refresh</span><span class=\"o\">-</span><span class=\"n\">contents</span><span class=\"p\">))</span>
<span class=\"p\">;;</span> <span class=\"n\">Add</span> <span class=\"n\">in</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">as</span> <span class=\"n\">you</span> <span class=\"n\">wish</span><span class=\"p\">:</span>
<span class=\"p\">(</span><span class=\"n\">defvar</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">packages</span> <span class=\"s\">'</span><span class=\"err\">(starter-kit starter-kit-lisp starter-kit-bindings)</span>
&quot;<span class=\"n\">A</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">packages</span> <span class=\"n\">to</span> <span class=\"n\">ensure</span> <span class=\"n\">are</span> <span class=\"n\">installed</span> <span class=\"n\">at</span> <span class=\"n\">launch</span><span class=\"p\">.</span>&quot;<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">dolist</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">installed</span><span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">p</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<h1>Color Theme</h1>
<p>色が寂しいので <a href=\"http://www.nongnu.org/color-theme/\">color-theme</a> しましょう。</p>
<h2>fetch</h2>
<p><a href=\"http://www.nongnu.org/color-theme/\">color-theme</a> のページを見て必要なものを取得。<br>
私が見たときは color-theme-6.6.0 でした。</p>
<h2>unpack</h2>
<p>常識の範囲内で好きなところに置けばいいでしょう。<br>
私は <em>d:\\bin\\Emacs\\site-lisp\\color-theme</em> にしました。<br>
<em>~/.emacs.d</em> の下はスラム化しそうなので分けたほうがよいかと。</p>
<p>subdir.el があるとはいえ、起動時に load-path に足してくれるだけです。<br>
Emacs を再起動しましょう。</p>
<h2>use</h2>
<p>init.el に次のコードを追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'</span><span class=\"err\">color-theme)</span>
<span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">theme</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>あとは M-x color-theme-xxx から何か選んで評価すればテーマが変わります。</p>
<p>私は color-theme-dark-laptop が好きなので、最初から設定されるよう init.el に次の式を書いてます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">theme</span><span class=\"o\">-</span><span class=\"n\">dark</span><span class=\"o\">-</span><span class=\"n\">laptop</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h1>skk</h1>
<p>文字入力が skk でなければ Emacs を使う意味が半分くらいになるくらい、skk に依存していますので使えるようにします。</p>
<h2>fetch</h2>
<p><a href=\"http://openlab.ring.gr.jp/skk/ddskk-ja.html\">Daredevil SKK(DDSKK)</a> のページから、ダウンロードサイトへ。<br>
私は ddskk-14.4.tar.bz2 にしました。<br>
(chrome のせいか tar.bz2 を保存すると何故か拡張子が tar.bz2.tar.bz2 とかになってしまう不思議!)</p>
<h2>unpack</h2>
<p>展開してすぐ使えるパッケージじゃないので、とりあえず展開します。</p>
<p>READMEs/README.w32.ja を読めばどうすればいいのかはすぐ分かりますね。</p>
<ol>
<li><a href=\"http://openlab.jp/skk/dic/SKK-JISYO.L.gz\">L辞書</a>をダウンロードして dic の下に解凍</li>
<li>make what-where EMACS=d:/where/to/emacs.exe</li>
<li>make install EMACS=d:/where/to/emacs.exe</li>
</ol>
<h2>use</h2>
<p>etc/dot.skk を HOME に .skk としてコピーしましょう。</p>
<p>だいたい元のままでもなんとかなるのです。<br>
ただ、92 行目の skk-show-tooltip は f または nil にしないと、変換候補がちゃんと表示されなくて悲しいので注意。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">skk</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">tooltip</span> <span class=\"n\">nil</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/9a7351c0d14ec9fdf8df" (20572 30399) old 58 nil nil ((id nil "tag:qiita.com,2005:Item/8384") (published nil "2012-08-25T00:26:49+09:00") (updated nil "2012-09-21T23:16:31+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9a7351c0d14ec9fdf8df"))) (url nil "http://qiita.com/items/9a7351c0d14ec9fdf8df") (title nil "setup Emacs24 for Windows") (content ((type . "html")) "<p>この文書は、Windows7(64bit) で Emacs24 を使う際の備忘録です。<br>
最新の情報ではない場合があるので注意。</p>

<p>快適に使うために必要なとにかく色んな設定が無いので、本当に入れただけです。</p>

<h1>参照サイト</h1>

<ul>
<li><a href=\"http://code.google.com/p/emacs-for-windows\">emacs-for-windows</a>

<ul>
<li>Windows 用のコンパイル済 Emacs</li>
</ul></li>
<li><a href=\"https://github.com/technomancy/emacs-starter-kit\">emacs-starter-kit</a>

<ul>
<li>Emacs24 から標準添付になった package.el を使う便利設定集</li>
</ul></li>
</ul>

<h1>emacs-for-windows</h1>

<p>やることはダウンロードして展開するだけですね…</p>

<h2>fetch</h2>

<p><a href=\"http://code.google.com/p/emacs-for-windows\">emacs-for-windows</a>からコンパイル済の Emacs を取得。<br>
私の時は <em>Emacs24.BZR.106722.Win32.20111223</em> が最新でした…ちょっと古い…</p>

<h2>unpack</h2>

<p>適当なディレクトリに展開します。<br>
私は <em>d:\\bin\\Emacs</em> にしました。<br>
Mac みたいに <em>c:\\Applications\\Emacs</em> とかにする人もいるみたいですね(<a href=\"http://sinewalker.wordpress.com/2012/02/13/install-emacs24-snapshot-on-debian-ubuntu-and-windows-7/\">こことか</a>)</p>

<h2>use</h2>

<p><em>emacs.exe</em> で起動するとウインドウが二つ開きます(Emacs本体とコンソールウインドウ)。<br>
ダサい<br>
なので、<em>d:\\bin\\Emacs\\runemacs.exe</em> で起動します。</p>

<p>送るメニューからファイルを開けるようにしたいので、<em>emacsclientw.exe</em> を SendTo に置きます。<br>
<em>emacsclient.exe</em> は標準エラーがコンソールになってて、w のほうはメッセージボックスになってるとかだった気がする。<br>
PuTTY の <em>plink.exe</em> と <em>plinkw.exe</em> も同じ。</p>

<p>この時初めて気づいたのですが、<em>.emacs.d</em> は <em>c:\\Users\\ユーザ名.emacs.d</em> ではなく、_c:\\Users\\ユーザ名\\AppData\\Roaming.emacs.d_になるのですね…<br>
誰得だこれ。</p>

<h1>emacs-starter-kit</h1>

<p>使ったことなかったのですが、せっかく空の環境から始めるので試します。</p>

<p>README にこんなことが書いてありました。<br>
* Emacs24 が必要(package.el使うから)<br>
* Emacs23 とか 22 とかと共有したければ古いやつ使え<br>
* モジュール分かれてるし好きなの選べ<br>
* ~/.emacs.d/$USER.el は自動的にロードする<br>
* ~/.emacs.d/$USER/ の下に置いた .el も自動的にロードする<br>
* .el の前にホスト名が付いてるやつをそのホストの設定としてロードする<br>
* Starter Kit を自分の .emacs.d として使ってもいいけどきっとグチャるから Upgrading の説明を読んどけ<br>
まぁ、気に留めておきましょう。</p>

<p>Installation 読んでると、どうも git リポジトリを clone しなくてもよさそうです。<br>
具体的には init.el に次のコードを書いて、後は package.el でなんとかする、と。<br>
(先頭の一行は自分で足しました。おまじない)</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;</span> <span class=\"o\">-*-</span> <span class=\"n\">coding</span><span class=\"p\">:</span> <span class=\"n\">iso</span><span class=\"o\">-</span>2022<span class=\"o\">-</span>7<span class=\"n\">bit</span><span class=\"p\">;</span> <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">lisp</span><span class=\"o\">-</span><span class=\"n\">interaction</span> <span class=\"o\">-*-</span>
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;package)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span>
             <span class=\"s\">&#39;</span><span class=\"err\">(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;) t)</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>Windows だと &quot;.emacs.d&quot; が作れない!とか困るかもしれませんが、<br>
Emacs 起動して M-x make-directory すれば作れます。</p>

<p>書いたので M-x eval-buffer して、エラーが無ければ先に進みます。<br>
package.el の情報(インデックスか何かでしょう)を最新化するため、M-x package-refresh-contents するそうです。</p>

<p>M-x package-install すると、ミニバッファに &quot;Install package:&quot; とか出て止まるので、<strong>starter-kit</strong> と入力しましょう。<br>
補完が利くので適当に Tab 打ってればいいです。</p>

<p>あ…他のモジュールも package-install するのか…</p>

<ul>
<li>starter-kit-bidings</li>
<li>starter-kit-eshell</li>
<li>starter-kit-js</li>
<li>starter-kit-ruby</li>
<li>starter-kit-lisp</li>
</ul>

<p>あとはなんか自分でインストールしたことあるパッケージのリストをメンテしておけばいいんじゃない？という感じで<br>
次のようなコードを init.el に書いておくことを薦めてた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archive</span><span class=\"o\">-</span><span class=\"n\">contents</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">refresh</span><span class=\"o\">-</span><span class=\"n\">contents</span><span class=\"p\">))</span>

<span class=\"p\">;;</span> <span class=\"n\">Add</span> <span class=\"n\">in</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">as</span> <span class=\"n\">you</span> <span class=\"n\">wish</span><span class=\"p\">:</span>
<span class=\"p\">(</span><span class=\"n\">defvar</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">packages</span> <span class=\"s\">&#39;</span><span class=\"err\">(starter-kit starter-kit-lisp starter-kit-bindings)</span>
  &quot;<span class=\"n\">A</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">packages</span> <span class=\"n\">to</span> <span class=\"n\">ensure</span> <span class=\"n\">are</span> <span class=\"n\">installed</span> <span class=\"n\">at</span> <span class=\"n\">launch</span><span class=\"p\">.</span>&quot;<span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"n\">dolist</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">installed</span><span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">p</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<h1>Color Theme</h1>

<p>色が寂しいので <a href=\"http://www.nongnu.org/color-theme/\">color-theme</a> しましょう。</p>

<h2>fetch</h2>

<p><a href=\"http://www.nongnu.org/color-theme/\">color-theme</a> のページを見て必要なものを取得。<br>
私が見たときは color-theme-6.6.0 でした。</p>

<h2>unpack</h2>

<p>常識の範囲内で好きなところに置けばいいでしょう。<br>
私は <em>d:\\bin\\Emacs\\site-lisp\\color-theme</em> にしました。<br>
<em>~/.emacs.d</em> の下はスラム化しそうなので分けたほうがよいかと。</p>

<p>subdir.el があるとはいえ、起動時に load-path に足してくれるだけです。<br>
Emacs を再起動しましょう。</p>

<h2>use</h2>

<p>init.el に次のコードを追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;</span><span class=\"err\">color-theme)</span>
<span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">theme</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>あとは M-x color-theme-xxx から何か選んで評価すればテーマが変わります。</p>

<p>私は color-theme-dark-laptop が好きなので、最初から設定されるよう init.el に次の式を書いてます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">theme</span><span class=\"o\">-</span><span class=\"n\">dark</span><span class=\"o\">-</span><span class=\"n\">laptop</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h1>skk</h1>

<p>文字入力が skk でなければ Emacs を使う意味が半分くらいになるくらい、skk に依存していますので使えるようにします。</p>

<h2>fetch</h2>

<p><a href=\"http://openlab.ring.gr.jp/skk/ddskk-ja.html\">Daredevil SKK(DDSKK)</a> のページから、ダウンロードサイトへ。<br>
私は ddskk-14.4.tar.bz2 にしました。<br>
(chrome のせいか tar.bz2 を保存すると何故か拡張子が tar.bz2.tar.bz2 とかになってしまう不思議!)</p>

<h2>unpack</h2>

<p>展開してすぐ使えるパッケージじゃないので、とりあえず展開します。</p>

<p>READMEs/README.w32.ja を読めばどうすればいいのかはすぐ分かりますね。</p>

<ol>
<li><a href=\"http://openlab.jp/skk/dic/SKK-JISYO.L.gz\">L辞書</a>をダウンロードして dic の下に解凍</li>
<li>make what-where EMACS=d:/where/to/emacs.exe</li>
<li>make install EMACS=d:/where/to/emacs.exe</li>
</ol>

<h2>use</h2>

<p>etc/dot.skk を HOME に .skk としてコピーしましょう。</p>

<p>だいたい元のままでもなんとかなるのです。<br>
ただ、92 行目の skk-show-tooltip は f または nil にしないと、変換候補がちゃんと表示されなくて悲しいので注意。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">skk</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">tooltip</span> <span class=\"n\">nil</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-08-25T00:26:49Z") (updated nil "2012-09-21T23:16:31Z") (author nil (name nil "yujiorama@github")))) ("scss-mode.elを使う" "<p>compassを使ってsass(scss)を書くようことにしたので設定</p>
<p>scss-mode.elを取得<br>
<a href=\"https://github.com/antonj/scss-mode\">https://github.com/antonj/scss-mode</a></p>
<p>emacs-lispファイル用のパスの通ったところに置く</p>
<p>下記を.emacsに加える</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>;; パスを指定
(add-to-list 'load-path &quot;~/.emacs.d/vendor&quot;)
(require 'scss-mode)
(add-to-list 'auto-mode-alist '(&quot;\\\\.scss$&quot; . scss-mode))
;; インデント幅を2にする
;; コンパイルは compass watchで行うので自動コンパイルをオフ
(defun scss-custom ()
&quot;scss-mode-hook&quot;
(and
(set (make-local-variable 'css-indent-offset) 2)
(set (make-local-variable 'scss-compile-at-save) nil)
)
)
(add-hook 'scss-mode-hook
'(lambda() (scss-custom)))
</pre>
</div>
</div>
<p>そのうちscss-modeを改造して保存時に<code>compass watch</code>が走るcompass-modeを作りたい</p>" "http://qiita.com/items/bb50d84af4d01a2eb5c2" (20532 15531) old 59 nil nil ((id nil "tag:qiita.com,2005:Item/8274") (published nil "2012-08-22T10:58:03+09:00") (updated nil "2012-08-22T10:58:03+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/bb50d84af4d01a2eb5c2"))) (url nil "http://qiita.com/items/bb50d84af4d01a2eb5c2") (title nil "scss-mode.elを使う") (content ((type . "html")) "<p>compassを使ってsass(scss)を書くようことにしたので設定</p>

<p>scss-mode.elを取得<br>
<a href=\"https://github.com/antonj/scss-mode\">https://github.com/antonj/scss-mode</a></p>

<p>emacs-lispファイル用のパスの通ったところに置く</p>

<p>下記を.emacsに加える</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>;; パスを指定
(add-to-list &#39;load-path &quot;~/.emacs.d/vendor&quot;)

(require &#39;scss-mode)
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\\\.scss$&quot; . scss-mode))

;; インデント幅を2にする
;; コンパイルは compass watchで行うので自動コンパイルをオフ
(defun scss-custom ()
  &quot;scss-mode-hook&quot;
  (and
   (set (make-local-variable &#39;css-indent-offset) 2)
   (set (make-local-variable &#39;scss-compile-at-save) nil)
   )
  )
(add-hook &#39;scss-mode-hook
  &#39;(lambda() (scss-custom)))
</pre>
</div>
</div>
<p>そのうちscss-modeを改造して保存時に<code>compass watch</code>が走るcompass-modeを作りたい</p>
") (published nil "2012-08-22T10:58:03Z") (updated nil "2012-08-22T10:58:03Z") (author nil (name nil "sawamur@github")))) ("コマンドが存在するかしないかを判定して, 条件分岐する構文のまとめ" "<h1>Vim</h1>
<hr>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.vimrc</span></div><div class=\"highlight\"><pre><span class=\"c\">&quot; コマンドが存在すれば</span>
<span class=\"k\">if</span> executable<span class=\"p\">(</span><span class=\"s1\">'git'</span><span class=\"p\">)</span>
Bundle <span class=\"s1\">'mattn/gist-vim'</span>
<span class=\"k\">endif</span>
</pre>
</div>
</div>
<h1>Emacs</h1>
<hr>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">executable-find</span> <span class=\"s\">&quot;pandoc&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; コマンドが存在すれば</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">markdown-command</span> <span class=\"s\">&quot;pandoc&quot;</span><span class=\"p\">)</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>
<h1>sh</h1>
<hr>
<h3>ワンライナー</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo </span>Success !
<span class=\"c\"># コマンドが存在すれば</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null <span class=\"o\">||</span> <span class=\"nb\">echo </span>Error !
<span class=\"c\"># コマンドが存在しなければ</span>
</pre>
</div>
</div>
<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null
<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$?</span> -eq 0 <span class=\"o\">]</span> ; <span class=\"k\">then</span> <span class=\"c\"># コマンドが存在すれば</span>
<span class=\"nb\">echo </span>Success !
<span class=\"nb\">alias </span><span class=\"nv\">top</span><span class=\"o\">=</span>htop
<span class=\"k\">else</span>                   <span class=\"c\"># コマンドが存在しなければ</span>
<span class=\"nb\">echo </span>Error ! &gt;&amp;2
<span class=\"nb\">exit </span>1
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<p>簡潔に書くと:</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">if </span>which htop &gt; /dev/null ; <span class=\"k\">then</span> <span class=\"c\"># コマンドが存在すれば</span>
<span class=\"nb\">echo </span>Success !
<span class=\"nb\">alias </span><span class=\"nv\">top</span><span class=\"o\">=</span>htop
<span class=\"k\">else</span>                             <span class=\"c\"># コマンドが存在しなければ</span>
<span class=\"nb\">echo </span>Error ! &gt;&amp;2
<span class=\"nb\">exit </span>1
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<h1>PowerShell</h1>
<hr>
<h3>ワンライナー</h3>
<p><code>&amp;&amp;</code>や<code>||</code>に対応するものはたぶんない ?</p>
<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"n\">gcm</span> <span class=\"n\">perldoc</span> <span class=\"n\">-ea</span> <span class=\"n\">SilentlyContinue</span> <span class=\"p\">|</span> <span class=\"nb\">Out-Null</span>
<span class=\"k\">if</span> <span class=\"p\">($?</span> <span class=\"o\">-eq</span> <span class=\"nv\">$true</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c\"># コマンドが存在すれば</span>
<span class=\"nb\">Write-Output</span> <span class=\"s1\">'Success !'</span>
<span class=\"n\">perldoc</span> <span class=\"n\">perldoc</span>
<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"c\"># コマンドが存在しなければ</span>
<span class=\"nb\">Write-Error</span> <span class=\"s1\">'Error !'</span>
<span class=\"n\">exit</span> <span class=\"n\">1</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<p>簡潔に書くと:</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">gcm</span> <span class=\"n\">perldoc</span> <span class=\"n\">-ea</span> <span class=\"n\">SilentlyContinue</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c\"># コマンドが存在すれば</span>
<span class=\"nb\">Write-Output</span> <span class=\"s1\">'Success !'</span>
<span class=\"n\">perldoc</span> <span class=\"n\">perldoc</span>
<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                                <span class=\"c\"># コマンドが存在しなければ</span>
<span class=\"nb\">Write-Error</span> <span class=\"s1\">'Error !'</span>
<span class=\"n\">exit</span> <span class=\"n\">1</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<h1>コマンドプロンプト</h1>
<hr>
<p><code>WHERE</code>コマンドがあるなら:</p>
<h3>ワンライナー</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc &amp;&amp; <span class=\"k\">ECHO</span> Success !
<span class=\"c\">REM コマンドが存在すれば</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc |<span class=\"p\">|</span> <span class=\"n\">ECHO</span> Error !
<span class=\"c\">REM コマンドが存在しなければ</span>
</pre>
</div>
</div>
<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc
<span class=\"k\">IF</span> <span class=\"nv\">%ERRORLEVEL%</span> <span class=\"o\">==</span> <span class=\"m\">0</span> ( <span class=\"c\">:: コマンドが存在すれば</span>
<span class=\"k\">ECHO</span> Success !
perldoc perldoc
) <span class=\"k\">ELSE</span> (               <span class=\"c\">:: コマンドが存在しなければ</span>
<span class=\"k\">ECHO</span> Error ! &gt;&amp;<span class=\"m\">2</span>
EXIT <span class=\"n\">/B</span> <span class=\"m\">1</span>
)
</pre>
</div>
</div>
<h2>追記</h2>
<ul>
<li>2012年9月: PowerShellの部分を書き換え</li>
</ul>" "http://qiita.com/items/d63861293fd6bde1b0d8" (20575 37333) old 60 nil nil ((id nil "tag:qiita.com,2005:Item/8219") (published nil "2012-08-19T17:03:52+09:00") (updated nil "2012-09-24T07:48:53+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d63861293fd6bde1b0d8"))) (url nil "http://qiita.com/items/d63861293fd6bde1b0d8") (title nil "コマンドが存在するかしないかを判定して, 条件分岐する構文のまとめ") (content ((type . "html")) "<h1>Vim</h1>

<hr>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.vimrc</span></div><div class=\"highlight\"><pre><span class=\"c\">&quot; コマンドが存在すれば</span>
<span class=\"k\">if</span> executable<span class=\"p\">(</span><span class=\"s1\">&#39;git&#39;</span><span class=\"p\">)</span>
    Bundle <span class=\"s1\">&#39;mattn/gist-vim&#39;</span>
<span class=\"k\">endif</span>
</pre>
</div>
</div>
<h1>Emacs</h1>

<hr>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">executable-find</span> <span class=\"s\">&quot;pandoc&quot;</span><span class=\"p\">)</span> <span class=\"c1\">; コマンドが存在すれば</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">markdown-command</span> <span class=\"s\">&quot;pandoc&quot;</span><span class=\"p\">)</span>
<span class=\"p\">)</span>
</pre>
</div>
</div>
<h1>sh</h1>

<hr>

<h3>ワンライナー</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo </span>Success !
 <span class=\"c\"># コマンドが存在すれば</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null <span class=\"o\">||</span> <span class=\"nb\">echo </span>Error !
 <span class=\"c\"># コマンドが存在しなければ</span>
</pre>
</div>
</div>
<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>which htop &gt; /dev/null
<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$?</span> -eq 0 <span class=\"o\">]</span> ; <span class=\"k\">then</span> <span class=\"c\"># コマンドが存在すれば</span>
    <span class=\"nb\">echo </span>Success !
    <span class=\"nb\">alias </span><span class=\"nv\">top</span><span class=\"o\">=</span>htop
<span class=\"k\">else</span>                   <span class=\"c\"># コマンドが存在しなければ</span>
    <span class=\"nb\">echo </span>Error ! &gt;&amp;2
    <span class=\"nb\">exit </span>1
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<p>簡潔に書くと:</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">if </span>which htop &gt; /dev/null ; <span class=\"k\">then</span> <span class=\"c\"># コマンドが存在すれば</span>
    <span class=\"nb\">echo </span>Success !
    <span class=\"nb\">alias </span><span class=\"nv\">top</span><span class=\"o\">=</span>htop
<span class=\"k\">else</span>                             <span class=\"c\"># コマンドが存在しなければ</span>
    <span class=\"nb\">echo </span>Error ! &gt;&amp;2
    <span class=\"nb\">exit </span>1
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<h1>PowerShell</h1>

<hr>

<h3>ワンライナー</h3>

<p><code>&amp;&amp;</code>や<code>||</code>に対応するものはたぶんない ?</p>

<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"n\">gcm</span> <span class=\"n\">perldoc</span> <span class=\"n\">-ea</span> <span class=\"n\">SilentlyContinue</span> <span class=\"p\">|</span> <span class=\"nb\">Out-Null</span>
<span class=\"k\">if</span> <span class=\"p\">($?</span> <span class=\"o\">-eq</span> <span class=\"nv\">$true</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c\"># コマンドが存在すれば</span>
    <span class=\"nb\">Write-Output</span> <span class=\"s1\">&#39;Success !&#39;</span>
    <span class=\"n\">perldoc</span> <span class=\"n\">perldoc</span>
<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"c\"># コマンドが存在しなければ</span>
    <span class=\"nb\">Write-Error</span> <span class=\"s1\">&#39;Error !&#39;</span>
    <span class=\"n\">exit</span> <span class=\"n\">1</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<p>簡潔に書くと:</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">gcm</span> <span class=\"n\">perldoc</span> <span class=\"n\">-ea</span> <span class=\"n\">SilentlyContinue</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c\"># コマンドが存在すれば</span>
    <span class=\"nb\">Write-Output</span> <span class=\"s1\">&#39;Success !&#39;</span>
    <span class=\"n\">perldoc</span> <span class=\"n\">perldoc</span>
<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                                <span class=\"c\"># コマンドが存在しなければ</span>
    <span class=\"nb\">Write-Error</span> <span class=\"s1\">&#39;Error !&#39;</span>
    <span class=\"n\">exit</span> <span class=\"n\">1</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<h1>コマンドプロンプト</h1>

<hr>

<p><code>WHERE</code>コマンドがあるなら:</p>

<h3>ワンライナー</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc &amp;&amp; <span class=\"k\">ECHO</span> Success !
<span class=\"c\">REM コマンドが存在すれば</span>
</pre>
</div>
</div><div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc |<span class=\"p\">|</span> <span class=\"n\">ECHO</span> Error !
<span class=\"c\">REM コマンドが存在しなければ</span>
</pre>
</div>
</div>
<h3>複数行</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Windows batch files</span></div><div class=\"highlight\"><pre>WHERE <span class=\"n\">/Q</span> perldoc
<span class=\"k\">IF</span> <span class=\"nv\">%ERRORLEVEL%</span> <span class=\"o\">==</span> <span class=\"m\">0</span> ( <span class=\"c\">:: コマンドが存在すれば</span>
    <span class=\"k\">ECHO</span> Success !
    perldoc perldoc
) <span class=\"k\">ELSE</span> (               <span class=\"c\">:: コマンドが存在しなければ</span>
    <span class=\"k\">ECHO</span> Error ! &gt;&amp;<span class=\"m\">2</span>
    EXIT <span class=\"n\">/B</span> <span class=\"m\">1</span>
)
</pre>
</div>
</div>
<h2>追記</h2>

<ul>
<li>2012年9月: PowerShellの部分を書き換え</li>
</ul>
") (published nil "2012-08-19T17:03:52Z") (updated nil "2012-09-24T07:48:53Z") (author nil (name nil "skkzsh@github")))) ("正規表現にマッチした部分を自動ハイライトする: highlight-regexp" "<p>highlight-regexpを使えば、ソースを読んでいるときなど特定のキーワードに注目したいときに色をつけることができます。</p>
<p>標準の機能なので特にインストールは不要です。下記で実行します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">highlight</span><span class=\"o\">-</span><span class=\"n\">regexp</span>
</pre>
</div>
</div>
<p>キーワードの入力が求められるので、色をつけたいキーワードを正規表現で入力します。次に背景色を指定することができます。<code>hl-色</code>もしくは<code>hl-色-b</code>という形式で指定します。</p>" "http://qiita.com/items/94b992d7f11a4ad746ff" (20513 60997) old 61 nil nil ((id nil "tag:qiita.com,2005:Item/7915") (published nil "2012-08-08T12:30:12+09:00") (updated nil "2012-08-08T13:42:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/94b992d7f11a4ad746ff"))) (url nil "http://qiita.com/items/94b992d7f11a4ad746ff") (title nil "正規表現にマッチした部分を自動ハイライトする: highlight-regexp") (content ((type . "html")) "<p>highlight-regexpを使えば、ソースを読んでいるときなど特定のキーワードに注目したいときに色をつけることができます。</p>

<p>標準の機能なので特にインストールは不要です。下記で実行します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">highlight</span><span class=\"o\">-</span><span class=\"n\">regexp</span>
</pre>
</div>
</div>
<p>キーワードの入力が求められるので、色をつけたいキーワードを正規表現で入力します。次に背景色を指定することができます。<code>hl-色</code>もしくは<code>hl-色-b</code>という形式で指定します。</p>
") (published nil "2012-08-08T12:30:12Z") (updated nil "2012-08-08T13:42:45Z") (author nil (name nil "icb54615")))) ("現在桁をハイライトする: col-highlight.el" "<p>Emacsではインデントが分かりづらいことがあるので、現在桁をハイライトしてくれるcol-highlight.elをいれました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">marker</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; col-highlight.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'col-highlight</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>必要な時に<code>M-x column-highlight-mode</code>をします。</p>
<p>常にハイライトしたい場合は下記を設定ファイルに追加するとできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">column-highlight-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>また、下記の様にすると5秒間何もしないでいるとハイライトするようにすることもできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">toggle-highlight-column-when-idle</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">col-highlight-set-interval</span> <span class=\"mi\">6</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>よくHTMLを編集していての閉じ忘れで体裁が崩れたり苦労することがよくあるのですがそのような時に重宝しそうです。</p>" "http://qiita.com/items/5be6467d0947a057c807" (20512 45845) old 62 nil nil ((id nil "tag:qiita.com,2005:Item/7888") (published nil "2012-08-07T15:17:57+09:00") (updated nil "2012-08-07T15:17:57+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5be6467d0947a057c807"))) (url nil "http://qiita.com/items/5be6467d0947a057c807") (title nil "現在桁をハイライトする: col-highlight.el") (content ((type . "html")) "<p>Emacsではインデントが分かりづらいことがあるので、現在桁をハイライトしてくれるcol-highlight.elをいれました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">column</span><span class=\"o\">-</span><span class=\"n\">marker</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; col-highlight.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;col-highlight</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>必要な時に<code>M-x column-highlight-mode</code>をします。</p>

<p>常にハイライトしたい場合は下記を設定ファイルに追加するとできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">column-highlight-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>また、下記の様にすると5秒間何もしないでいるとハイライトするようにすることもできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">toggle-highlight-column-when-idle</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">col-highlight-set-interval</span> <span class=\"mi\">6</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>よくHTMLを編集していての閉じ忘れで体裁が崩れたり苦労することがよくあるのですがそのような時に重宝しそうです。</p>
") (published nil "2012-08-07T15:17:57Z") (updated nil "2012-08-07T15:17:57Z") (author nil (name nil "icb54615")))) ("複数ファイルの置換: grep-edit.el" "<p>複数ファイルの置換ができるようにgrep-edit.elをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"nb\">grep</span><span class=\"o\">-</span><span class=\"n\">edit</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; grep-edit.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'grep-edit</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-x grep</code>でテキストを検索します。検索結果の<code>*grep*</code>バッファを編集します。<code>C-c C-e</code>をすると、編集を該当ファイルに反映します。この状態ではまだ変更が保存されていないので、<code>C-x s</code>をすると変更されたファイルが保存されます。</p>" "http://qiita.com/items/19be55b78a4022dc4962" (20512 44507) old 63 nil nil ((id nil "tag:qiita.com,2005:Item/7883") (published nil "2012-08-07T14:55:39+09:00") (updated nil "2012-08-07T14:55:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/19be55b78a4022dc4962"))) (url nil "http://qiita.com/items/19be55b78a4022dc4962") (title nil "複数ファイルの置換: grep-edit.el") (content ((type . "html")) "<p>複数ファイルの置換ができるようにgrep-edit.elをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"nb\">grep</span><span class=\"o\">-</span><span class=\"n\">edit</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; grep-edit.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;grep-edit</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-x grep</code>でテキストを検索します。検索結果の<code>*grep*</code>バッファを編集します。<code>C-c C-e</code>をすると、編集を該当ファイルに反映します。この状態ではまだ変更が保存されていないので、<code>C-x s</code>をすると変更されたファイルが保存されます。</p>
") (published nil "2012-08-07T14:55:39Z") (updated nil "2012-08-07T14:55:39Z") (author nil (name nil "icb54615")))) ("複数のgrepバッファを使えるようにする: grep-a-lot.el" "<p>標準のgrepだと、繰り返してgrepコマンドをすると前回の結果が上書きされてしまいます。バッファの名前を変えればいいのですがいちいち面倒です。自動でバッファー名がかぶらないようにするためにgrep-a-lotをいれました。</p>
<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>grep-a-lot</code>をインストールします。</p>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; grep-a-lot</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'grep-a-lot</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">grep-a-lot-setup-keys</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">grep-a-lot-advise</span> <span class=\"nv\">igrep</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>M-x igrep</code>を複数回繰り返しても、複数の検索結果のバッファが保持されるようになります。</p>" "http://qiita.com/items/4406d1cd656c6abf8544" (20507 19845) old 64 nil nil ((id nil "tag:qiita.com,2005:Item/7775") (published nil "2012-08-03T13:03:17+09:00") (updated nil "2012-08-03T13:03:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4406d1cd656c6abf8544"))) (url nil "http://qiita.com/items/4406d1cd656c6abf8544") (title nil "複数のgrepバッファを使えるようにする: grep-a-lot.el") (content ((type . "html")) "<p>標準のgrepだと、繰り返してgrepコマンドをすると前回の結果が上書きされてしまいます。バッファの名前を変えればいいのですがいちいち面倒です。自動でバッファー名がかぶらないようにするためにgrep-a-lotをいれました。</p>

<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>grep-a-lot</code>をインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; grep-a-lot</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;grep-a-lot</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">grep-a-lot-setup-keys</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">grep-a-lot-advise</span> <span class=\"nv\">igrep</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>M-x igrep</code>を複数回繰り返しても、複数の検索結果のバッファが保持されるようになります。</p>
") (published nil "2012-08-03T13:03:17Z") (updated nil "2012-08-03T13:03:17Z") (author nil (name nil "icb54615")))) ("grep検索を使いやすくする: igrep.el" "<p>Emacsから<code>M-x grep</code>だとコマンドラインを打つだけなので、パターンをクオートしたり大変です。igrepをいれて対話的なインターフェースにします。</p>
<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>igrep</code>をインストールします。</p>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; igrep.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'igrep</span><span class=\"p\">)</span>
<span class=\"c1\">; lgrepの出力をUTF-8にする</span>
<span class=\"p\">(</span><span class=\"nv\">igrep-define</span> <span class=\"nv\">lgrep</span> <span class=\"p\">(</span><span class=\"nv\">igrep-use-zgrep</span> <span class=\"no\">nil</span><span class=\"p\">)(</span><span class=\"nv\">igre-regex-option</span> <span class=\"s\">&quot;-n -Ou8&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">igrep-find-define</span> <span class=\"nv\">lgrep</span> <span class=\"p\">(</span><span class=\"nv\">igrep-use-zgrep</span> <span class=\"no\">nil</span><span class=\"p\">)(</span><span class=\"nv\">igrep-regex-option</span> <span class=\"s\">&quot;-n -Ou8&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p><code>M-x igrep</code>をします。そうすると、正規表現と検索対象のファイルの入力がうながされるので、それぞれ入力します。</p>" "http://qiita.com/items/e60970251502fdee081e" (20507 19082) old 65 nil nil ((id nil "tag:qiita.com,2005:Item/7774") (published nil "2012-08-03T12:50:34+09:00") (updated nil "2012-08-03T12:50:34+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e60970251502fdee081e"))) (url nil "http://qiita.com/items/e60970251502fdee081e") (title nil "grep検索を使いやすくする: igrep.el") (content ((type . "html")) "<p>Emacsから<code>M-x grep</code>だとコマンドラインを打つだけなので、パターンをクオートしたり大変です。igrepをいれて対話的なインターフェースにします。</p>

<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>igrep</code>をインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; igrep.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;igrep</span><span class=\"p\">)</span>
<span class=\"c1\">; lgrepの出力をUTF-8にする</span>
<span class=\"p\">(</span><span class=\"nv\">igrep-define</span> <span class=\"nv\">lgrep</span> <span class=\"p\">(</span><span class=\"nv\">igrep-use-zgrep</span> <span class=\"no\">nil</span><span class=\"p\">)(</span><span class=\"nv\">igre-regex-option</span> <span class=\"s\">&quot;-n -Ou8&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">igrep-find-define</span> <span class=\"nv\">lgrep</span> <span class=\"p\">(</span><span class=\"nv\">igrep-use-zgrep</span> <span class=\"no\">nil</span><span class=\"p\">)(</span><span class=\"nv\">igrep-regex-option</span> <span class=\"s\">&quot;-n -Ou8&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p><code>M-x igrep</code>をします。そうすると、正規表現と検索対象のファイルの入力がうながされるので、それぞれ入力します。</p>
") (published nil "2012-08-03T12:50:34Z") (updated nil "2012-08-03T12:50:34Z") (author nil (name nil "icb54615")))) ("color-moccur.elの結果を編集する: moccur-edit.el" "<p><a href=\"http://qiita.com/items/e5fd73e03323f3d8f7bc\">先日のポスト</a>でいれたcolor-moccurの結果を編集できるようにmoccur-edit.elをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">moccur</span><span class=\"o\">-</span><span class=\"n\">edit</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; moccur-edit.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'moccur-edit</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>M-x occur-by-moccur</code>で検索をし、そのバッファで<code>r (moccur-edit-mode-in)</code>を押します。すると、バッファを編集することができます。通常のバッファと同じように<code>M-% (query-replace)</code>なども使用できます。変更点もわかりやすいようにハイライトされます。</p>
<p>変更が完了したら、<code>C-c C-c (moccur-edit-finish-edit)</code>をすると変更箇所がファイルに反映されます。もしくは、<code>C-c C-k (moccur-edit-kill-all-change)</code>をすると変更を取り消せます。</p>
<p>これで、プログラミンをしているときなどクラスやメソッドの名前などがだいぶ変更しやすくなりました。</p>" "http://qiita.com/items/8cacf69fbcc7fc4f2ea5" (20504 49916) old 66 nil nil ((id nil "tag:qiita.com,2005:Item/7703") (published nil "2012-08-01T14:47:40+09:00") (updated nil "2012-08-01T14:47:40+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8cacf69fbcc7fc4f2ea5"))) (url nil "http://qiita.com/items/8cacf69fbcc7fc4f2ea5") (title nil "color-moccur.elの結果を編集する: moccur-edit.el") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/e5fd73e03323f3d8f7bc\">先日のポスト</a>でいれたcolor-moccurの結果を編集できるようにmoccur-edit.elをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">moccur</span><span class=\"o\">-</span><span class=\"n\">edit</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; moccur-edit.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;moccur-edit</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>M-x occur-by-moccur</code>で検索をし、そのバッファで<code>r (moccur-edit-mode-in)</code>を押します。すると、バッファを編集することができます。通常のバッファと同じように<code>M-% (query-replace)</code>なども使用できます。変更点もわかりやすいようにハイライトされます。</p>

<p>変更が完了したら、<code>C-c C-c (moccur-edit-finish-edit)</code>をすると変更箇所がファイルに反映されます。もしくは、<code>C-c C-k (moccur-edit-kill-all-change)</code>をすると変更を取り消せます。</p>

<p>これで、プログラミンをしているときなどクラスやメソッドの名前などがだいぶ変更しやすくなりました。</p>
") (published nil "2012-08-01T14:47:40Z") (updated nil "2012-08-01T14:47:40Z") (author nil (name nil "icb54615")))) ("正規表現置換をする: C-M-%" "<p>正規表現で置換をするキーバインドは<code>C-M-%</code>で、これまた押しにくいので、「Emacsテクニックバイブル」を参考に、下記の通り短い別名を定義することにしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">; M-x qrr for query-replace-regexp</span>
<span class=\"p\">(</span><span class=\"nv\">defalias</span> <span class=\"ss\">'qrr</span> <span class=\"ss\">'query-replace-regexp</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/aff8048f7037c86ee05a" (20502 10923) old 67 nil nil ((id nil "tag:qiita.com,2005:Item/7645") (published nil "2012-07-30T15:33:15+09:00") (updated nil "2012-07-30T15:33:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/aff8048f7037c86ee05a"))) (url nil "http://qiita.com/items/aff8048f7037c86ee05a") (title nil "正規表現置換をする: C-M-%") (content ((type . "html")) "<p>正規表現で置換をするキーバインドは<code>C-M-%</code>で、これまた押しにくいので、「Emacsテクニックバイブル」を参考に、下記の通り短い別名を定義することにしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">; M-x qrr for query-replace-regexp</span>
<span class=\"p\">(</span><span class=\"nv\">defalias</span> <span class=\"ss\">&#39;qrr</span> <span class=\"ss\">&#39;query-replace-regexp</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-07-30T15:33:15Z") (updated nil "2012-07-30T15:33:15Z") (author nil (name nil "icb54615")))) ("文字列変換: M-%" "<p>前々から文字列置換のキーバインド(<code>M-%</code>)が、使用頻度が高いわりには押しづらいと思ってました。</p>
<p>そこで、「Emacsテクニックバイブル」を参考に、<code>C-c r</code>に割り当てることにしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">; C-c r aka M-%</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c r&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'query-replace</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>だいぶ押しやすくなった。</p>" "http://qiita.com/items/5062bbb3d8810b9326af" (20502 10490) old 68 nil nil ((id nil "tag:qiita.com,2005:Item/7644") (published nil "2012-07-30T15:26:02+09:00") (updated nil "2012-07-30T15:26:02+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5062bbb3d8810b9326af"))) (url nil "http://qiita.com/items/5062bbb3d8810b9326af") (title nil "文字列変換: M-%") (content ((type . "html")) "<p>前々から文字列置換のキーバインド(<code>M-%</code>)が、使用頻度が高いわりには押しづらいと思ってました。</p>

<p>そこで、「Emacsテクニックバイブル」を参考に、<code>C-c r</code>に割り当てることにしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">; C-c r aka M-%</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c r&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;query-replace</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>だいぶ押しやすくなった。</p>
") (published nil "2012-07-30T15:26:02Z") (updated nil "2012-07-30T15:26:02Z") (author nil (name nil "icb54615")))) ("Emacs 初心者はいかにして変態キーバインドを覚えるか" "<p>Emacs 使い始めはついついカーソルキーや BS、Enter キーを使ってしまいがちだ。それだと、いつまで経っても Emacs のキーバインドを覚えることはできない。基本的なキーバインドを使えなければ Emacs を使う価値などない。</p>
<p>では Emacs 使い始めの初心者はどのようにキーバインドを覚えればよいか。答えは簡単。普段使っているキーを Emacs で使えないようにすればいいのだ。つまり、Emacs 内では下にカーソルキーを移動するのに C-n 以外のキーの使用を認めないということだ。</p>
<p>そのような厳しい指導をしてくれるのが <a href=\"https://github.com/k1LoW/emacs-drill-instructor\">鬼軍曹.el</a> である。<a href=\"https://raw.github.com/k1LoW/emacs-drill-instructor/master/drill-instructor.el\">Elisp</a> をパスのあるところに置き、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'drill-instructor</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">drill-instructor-global</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を記述すると、カーソルキー、BackSpaceキー、Enterキー、TABキーが使用できなくなり、代わりにどのキーを使えばいいかミニバッファに表示してくれる。詳しくは <a href=\"https://github.com/k1LoW/emacs-drill-instructor/wiki/\">Wiki</a> を見てほしい。</p>
<p>Emacs を使うのであれば、これらの基本キーは必須だ。まだ覚えていない Emacs ユーザは、厳しい教官の指導のもと、是非 Emacs キーバインドをマスターしてほしい。</p>" "http://qiita.com/items/c090d0733ec6ccab4724" (20499 56315) old 69 nil nil ((id nil "tag:qiita.com,2005:Item/7595") (published nil "2012-07-28T21:32:59+09:00") (updated nil "2012-07-28T21:32:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c090d0733ec6ccab4724"))) (url nil "http://qiita.com/items/c090d0733ec6ccab4724") (title nil "Emacs 初心者はいかにして変態キーバインドを覚えるか") (content ((type . "html")) "<p>Emacs 使い始めはついついカーソルキーや BS、Enter キーを使ってしまいがちだ。それだと、いつまで経っても Emacs のキーバインドを覚えることはできない。基本的なキーバインドを使えなければ Emacs を使う価値などない。</p>

<p>では Emacs 使い始めの初心者はどのようにキーバインドを覚えればよいか。答えは簡単。普段使っているキーを Emacs で使えないようにすればいいのだ。つまり、Emacs 内では下にカーソルキーを移動するのに C-n 以外のキーの使用を認めないということだ。</p>

<p>そのような厳しい指導をしてくれるのが <a href=\"https://github.com/k1LoW/emacs-drill-instructor\">鬼軍曹.el</a> である。<a href=\"https://raw.github.com/k1LoW/emacs-drill-instructor/master/drill-instructor.el\">Elisp</a> をパスのあるところに置き、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;drill-instructor</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">drill-instructor-global</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を記述すると、カーソルキー、BackSpaceキー、Enterキー、TABキーが使用できなくなり、代わりにどのキーを使えばいいかミニバッファに表示してくれる。詳しくは <a href=\"https://github.com/k1LoW/emacs-drill-instructor/wiki/\">Wiki</a> を見てほしい。</p>

<p>Emacs を使うのであれば、これらの基本キーは必須だ。まだ覚えていない Emacs ユーザは、厳しい教官の指導のもと、是非 Emacs キーバインドをマスターしてほしい。</p>
") (published nil "2012-07-28T21:32:59Z") (updated nil "2012-07-28T21:32:59Z") (author nil (name nil "akisute3@github")))) ("バッファ内で正規表現にマッチする行を出力する: color-moccur.el" "<p>バッファ内で正規表現にマッチする行を出力するには<code>occur</code>というのがデフォルトではいっているのですが、より操作性が優れている<code>color-moccur</code>をいれます。</p>
<p>インストールは下記を実行します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">moccur</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; color-occur.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'color-moccur</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">moccur-split-word</span> <span class=\"no\">t</span><span class=\"p\">)</span> <span class=\"c1\">;スペースで区切られた複数の単語にマッチさせる</span>
</pre>
</div>
</div>
<p><code>M-x occur-by-moccur</code>で起動します。検索したい単語を入力します。複数の単語の入力もできます。単語を入力したらマッチした行の一覧が表示されるので、<code>n</code>や<code>p</code>でマッチした箇所をいきいきできます。</p>
<p>また、isearch実行時に<code>M-o</code>を押すと、<code>M-x occur-by-moccur</code>に切り替えてくれます。</p>
<p><code>color-moccur</code>の特徴として、Migemoをいれていればローマ字でも検索してくれるそうなのですが、残念ながら私の環境ではできませんでした。cmigemoだとだめなのかな。</p>" "http://qiita.com/items/e5fd73e03323f3d8f7bc" (20502 12573) old 70 nil nil ((id nil "tag:qiita.com,2005:Item/7548") (published nil "2012-07-27T16:10:33+09:00") (updated nil "2012-07-30T16:00:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e5fd73e03323f3d8f7bc"))) (url nil "http://qiita.com/items/e5fd73e03323f3d8f7bc") (title nil "バッファ内で正規表現にマッチする行を出力する: color-moccur.el") (content ((type . "html")) "<p>バッファ内で正規表現にマッチする行を出力するには<code>occur</code>というのがデフォルトではいっているのですが、より操作性が優れている<code>color-moccur</code>をいれます。</p>

<p>インストールは下記を実行します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">moccur</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; color-occur.el</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;color-moccur</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">moccur-split-word</span> <span class=\"no\">t</span><span class=\"p\">)</span> <span class=\"c1\">;スペースで区切られた複数の単語にマッチさせる</span>
</pre>
</div>
</div>
<p><code>M-x occur-by-moccur</code>で起動します。検索したい単語を入力します。複数の単語の入力もできます。単語を入力したらマッチした行の一覧が表示されるので、<code>n</code>や<code>p</code>でマッチした箇所をいきいきできます。</p>

<p>また、isearch実行時に<code>M-o</code>を押すと、<code>M-x occur-by-moccur</code>に切り替えてくれます。</p>

<p><code>color-moccur</code>の特徴として、Migemoをいれていればローマ字でも検索してくれるそうなのですが、残念ながら私の環境ではできませんでした。cmigemoだとだめなのかな。</p>
") (published nil "2012-07-27T16:10:33Z") (updated nil "2012-07-30T16:00:45Z") (author nil (name nil "icb54615")))) (".emacs.d/init.el を複数のプラットフォームで安定して動かすためのplatform-p" "<p>platform-p.el というライブラリをGithubに置きました。</p>
<p>EmacsにはOS固有の機能が実装されていることがありますが、それらの関数を呼び出す時に<code>platform-darwin-p</code>等で囲んでおくと<code>.emacs.d/init.el</code>を他プラットフォームに移植した時に変なエラーに悩まされずに済みます。</p>
<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120725/1343232098\">.emacs.d/init.el を複数のプラットフォームで安定して動かすためのplatform-p - おんがえしの日記</a> </p>" "http://qiita.com/items/ec59978a7ac3d4ad13c1" (20496 40523) old 71 nil nil ((id nil "tag:qiita.com,2005:Item/7499") (published nil "2012-07-26T10:32:59+09:00") (updated nil "2012-07-26T10:32:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ec59978a7ac3d4ad13c1"))) (url nil "http://qiita.com/items/ec59978a7ac3d4ad13c1") (title nil ".emacs.d/init.el を複数のプラットフォームで安定して動かすためのplatform-p") (content ((type . "html")) "<p>platform-p.el というライブラリをGithubに置きました。</p>

<p>EmacsにはOS固有の機能が実装されていることがありますが、それらの関数を呼び出す時に<code>platform-darwin-p</code>等で囲んでおくと<code>.emacs.d/init.el</code>を他プラットフォームに移植した時に変なエラーに悩まされずに済みます。</p>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120725/1343232098\">.emacs.d/init.el を複数のプラットフォームで安定して動かすためのplatform-p - おんがえしの日記</a> </p>
") (published nil "2012-07-26T10:32:59Z") (updated nil "2012-07-26T10:32:59Z") (author nil (name nil "ongaeshi")))) ("正規表現を対話的に作成する: M-x re-builder" "<p><code>M-x re-builder</code>とすると、対話的に正規表現を作成できて便利です。使い方を簡単にまとめておきます。</p>
<p>新しく開かれたバッファ内の&quot;&quot;に正規表現を入力していくと、バッファ内でマッチした文字列がハイライトされます。<code>C-c C-r (reb-prev-match)</code>や<code>C-c C-s (reb-next-match)</code>でマッチ部分へジャンプします。<code>C-c C-w (reb-copy)</code>で作成した正規表現をコピーすることができます。<code>C-c C-q (reb-quit)</code>で終了します。</p>
<p>Emacsの標準機能なのですね。長年Emacs使っていましたが知らなかった。。。</p>" "http://qiita.com/items/ecf43284633ba03a60af" (20492 61548) old 72 nil nil ((id nil "tag:qiita.com,2005:Item/7413") (published nil "2012-07-23T15:34:20+09:00") (updated nil "2012-07-23T15:34:20+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ecf43284633ba03a60af"))) (url nil "http://qiita.com/items/ecf43284633ba03a60af") (title nil "正規表現を対話的に作成する: M-x re-builder") (content ((type . "html")) "<p><code>M-x re-builder</code>とすると、対話的に正規表現を作成できて便利です。使い方を簡単にまとめておきます。</p>

<p>新しく開かれたバッファ内の&quot;&quot;に正規表現を入力していくと、バッファ内でマッチした文字列がハイライトされます。<code>C-c C-r (reb-prev-match)</code>や<code>C-c C-s (reb-next-match)</code>でマッチ部分へジャンプします。<code>C-c C-w (reb-copy)</code>で作成した正規表現をコピーすることができます。<code>C-c C-q (reb-quit)</code>で終了します。</p>

<p>Emacsの標準機能なのですね。長年Emacs使っていましたが知らなかった。。。</p>
") (published nil "2012-07-23T15:34:20Z") (updated nil "2012-07-23T15:34:20Z") (author nil (name nil "icb54615")))) ("補完候補を一覧で表示: auto-complete.el" "<p>テキスト入力中に補完候補を出してくれる<code>auto-complete.el</code>をいれましました。</p>
<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>auto-complete</code>をインストールします。</p>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'auto-complete-config</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-auto-complete-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで文字を入力していくと、<code>dabbrev-expand</code>の候補がポップアップで一覧が表示されるようになります。</p>
<p><a href=\"http://d.hatena.ne.jp/tkng/20090207/1234020003\">ここ</a>を参考に、rubyのコードを補完できる<code>auto-complete-ruby</code>をいれたかったのですが、<code>auto-complete-ruby</code>のページがNot Foundになってしまっていますね。便利そうなのにな。</p>" "http://qiita.com/items/97a45253b44cc0ac53f6" (20488 64687) old 73 nil nil ((id nil "tag:qiita.com,2005:Item/7342") (published nil "2012-07-20T15:37:35+09:00") (updated nil "2012-07-20T15:37:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/97a45253b44cc0ac53f6"))) (url nil "http://qiita.com/items/97a45253b44cc0ac53f6") (title nil "補完候補を一覧で表示: auto-complete.el") (content ((type . "html")) "<p>テキスト入力中に補完候補を出してくれる<code>auto-complete.el</code>をいれましました。</p>

<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>auto-complete</code>をインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-complete-config</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-auto-complete-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで文字を入力していくと、<code>dabbrev-expand</code>の候補がポップアップで一覧が表示されるようになります。</p>

<p><a href=\"http://d.hatena.ne.jp/tkng/20090207/1234020003\">ここ</a>を参考に、rubyのコードを補完できる<code>auto-complete-ruby</code>をいれたかったのですが、<code>auto-complete-ruby</code>のページがNot Foundになってしまっていますね。便利そうなのにな。</p>
") (published nil "2012-07-20T15:37:35Z") (updated nil "2012-07-20T15:37:35Z") (author nil (name nil "icb54615")))) ("Rail用のスニペット: yasnippet-rails" "<p>yasnippetにはruby-mode用のスニペットは標準でついているのですが、Railsには最適されていないので別途いれます。</p>
<p>まず、rhtml編集用のモードをいれます。</p>
<p>インストールはMELPAでパッケージがなかったので手動でいれます。<a href=\"http://qiita.com/items/4c652ad4afccae5fe2ef\">こちら</a>の設定をしているディレクトリにcloneします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"nv\">$</span> <span class=\"nv\">cd</span> <span class=\"o\">.</span><span class=\"n\">emacs</span><span class=\"o\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">eslip</span>
<span class=\"nv\">$</span> <span class=\"nv\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git:</span><span class=\"sr\">//gi</span><span class=\"n\">thub</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"sr\">/eschulte/</span><span class=\"n\">rhtml</span><span class=\"o\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.e</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; rhtml-mode</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'rhtml-mode</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>次に、yasnippet-railsをいれます。インストールするディレクトリは<code>.emacs.d/snippets</code>にいれる事にしました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"nv\">$</span> <span class=\"nv\">cd</span> <span class=\"o\">.</span><span class=\"n\">emacs</span><span class=\"o\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">snippets</span>
<span class=\"nv\">$</span> <span class=\"nv\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https:</span><span class=\"sr\">//gi</span><span class=\"n\">thub</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"sr\">/eschulte/</span><span class=\"n\">yasnippets</span><span class=\"o\">-</span><span class=\"n\">rails</span><span class=\"o\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.e</span></div><div class=\"highlight\"><pre><span class=\"c1\">; yasnippets-rails</span>
<span class=\"p\">(</span><span class=\"nv\">yas/load-directory</span> <span class=\"s\">&quot;~/.emacs.d/snippets/yasnippets-rails&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>rhtml-modeでファイルを開いて、<code>%if</code>と入力して<code>TAB</code>を押すと以下で補完されます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"o\">&lt;</span><span class=\"sx\">% if </span><span class=\"n\">cond</span> <span class=\"o\">-</span><span class=\"sx\">%&gt;</span>
<span class=\"sx\">&lt;% end -%&gt;</span>
</pre>
</div>
</div>
<p>ただ、なぜか同じ内容の候補が2つでます。これは、<code>~/.emacs.d/snippets/yasnippets-rails/rails-snippets</code>で<code>html-mode</code>が<code>rhtml-mode</code>にシンボリックリンクされているからのようです。私の場合は、<code>html-mode</code>では使わないのでシンボリックリンクを削除しました。そうすると候補が2つ出てこなくなります。</p>" "http://qiita.com/items/81ffd42b7edc75264079" (20486 27786) old 74 nil nil ((id nil "tag:qiita.com,2005:Item/7283") (published nil "2012-07-18T16:58:02+09:00") (updated nil "2012-07-18T16:58:02+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/81ffd42b7edc75264079"))) (url nil "http://qiita.com/items/81ffd42b7edc75264079") (title nil "Rail用のスニペット: yasnippet-rails") (content ((type . "html")) "<p>yasnippetにはruby-mode用のスニペットは標準でついているのですが、Railsには最適されていないので別途いれます。</p>

<p>まず、rhtml編集用のモードをいれます。</p>

<p>インストールはMELPAでパッケージがなかったので手動でいれます。<a href=\"http://qiita.com/items/4c652ad4afccae5fe2ef\">こちら</a>の設定をしているディレクトリにcloneします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"nv\">$</span> <span class=\"nv\">cd</span> <span class=\"o\">.</span><span class=\"n\">emacs</span><span class=\"o\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">eslip</span>
<span class=\"nv\">$</span> <span class=\"nv\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git:</span><span class=\"sr\">//gi</span><span class=\"n\">thub</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"sr\">/eschulte/</span><span class=\"n\">rhtml</span><span class=\"o\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.e</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; rhtml-mode</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;rhtml-mode</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>次に、yasnippet-railsをいれます。インストールするディレクトリは<code>.emacs.d/snippets</code>にいれる事にしました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"nv\">$</span> <span class=\"nv\">cd</span> <span class=\"o\">.</span><span class=\"n\">emacs</span><span class=\"o\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">snippets</span>
<span class=\"nv\">$</span> <span class=\"nv\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https:</span><span class=\"sr\">//gi</span><span class=\"n\">thub</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"sr\">/eschulte/</span><span class=\"n\">yasnippets</span><span class=\"o\">-</span><span class=\"n\">rails</span><span class=\"o\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.e</span></div><div class=\"highlight\"><pre><span class=\"c1\">; yasnippets-rails</span>
<span class=\"p\">(</span><span class=\"nv\">yas/load-directory</span> <span class=\"s\">&quot;~/.emacs.d/snippets/yasnippets-rails&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>rhtml-modeでファイルを開いて、<code>%if</code>と入力して<code>TAB</code>を押すと以下で補完されます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"o\">&lt;</span><span class=\"sx\">% if </span><span class=\"n\">cond</span> <span class=\"o\">-</span><span class=\"sx\">%&gt;</span>

<span class=\"sx\">&lt;% end -%&gt;</span>
</pre>
</div>
</div>
<p>ただ、なぜか同じ内容の候補が2つでます。これは、<code>~/.emacs.d/snippets/yasnippets-rails/rails-snippets</code>で<code>html-mode</code>が<code>rhtml-mode</code>にシンボリックリンクされているからのようです。私の場合は、<code>html-mode</code>では使わないのでシンボリックリンクを削除しました。そうすると候補が2つ出てこなくなります。</p>
") (published nil "2012-07-18T16:58:02Z") (updated nil "2012-07-18T16:58:02Z") (author nil (name nil "icb54615")))) ("特定のディレクトリ配下のディレクトリをload-pathに追加する" "<p>手動でelispをいれる際に、いちいちload-pathを指定するのが面倒だったので下記の設定をしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; load-pathを追加する関数を定義</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">add-to-load-path</span> <span class=\"p\">(</span><span class=\"k\">&amp;rest</span> <span class=\"nv\">paths</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">path</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">dolist</span> <span class=\"p\">(</span><span class=\"nv\">path</span> <span class=\"nv\">paths</span> <span class=\"nv\">paths</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"nv\">path</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'load-path</span> <span class=\"nv\">default-directory</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">fboundp</span> <span class=\"ss\">'normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">))))))</span>
<span class=\"c1\">;;; ディレクトリをサブディレクトリごとload-pathに追加</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-load-path</span> <span class=\"s\">&quot;elisp&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>.emacs.d/elisp</code>以下にいれればload-pathに追加します。</p>" "http://qiita.com/items/4c652ad4afccae5fe2ef" (20486 26955) old 75 nil nil ((id nil "tag:qiita.com,2005:Item/7282") (published nil "2012-07-18T16:44:11+09:00") (updated nil "2012-07-18T16:44:11+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4c652ad4afccae5fe2ef"))) (url nil "http://qiita.com/items/4c652ad4afccae5fe2ef") (title nil "特定のディレクトリ配下のディレクトリをload-pathに追加する") (content ((type . "html")) "<p>手動でelispをいれる際に、いちいちload-pathを指定するのが面倒だったので下記の設定をしました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; load-pathを追加する関数を定義</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">add-to-load-path</span> <span class=\"p\">(</span><span class=\"k\">&amp;rest</span> <span class=\"nv\">paths</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">path</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nb\">dolist</span> <span class=\"p\">(</span><span class=\"nv\">path</span> <span class=\"nv\">paths</span> <span class=\"nv\">paths</span><span class=\"p\">)</span>
     <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">default-directory</span> <span class=\"p\">(</span><span class=\"nv\">expand-file-name</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">user-emacs-directory</span> <span class=\"nv\">path</span><span class=\"p\">))))</span>
        <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"nv\">default-directory</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">fboundp</span> <span class=\"ss\">&#39;normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">)</span>
             <span class=\"p\">(</span><span class=\"nv\">normal-top-level-add-subdirs-to-load-path</span><span class=\"p\">))))))</span>

<span class=\"c1\">;;; ディレクトリをサブディレクトリごとload-pathに追加</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-load-path</span> <span class=\"s\">&quot;elisp&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、<code>.emacs.d/elisp</code>以下にいれればload-pathに追加します。</p>
") (published nil "2012-07-18T16:44:11Z") (updated nil "2012-07-18T16:44:11Z") (author nil (name nil "icb54615")))) ("略語から定型文を入力する: yasnippet" "<p>定型文を入力できるようにyasnippetをいれます。</p>
<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>yasnippet-bundle</code>をインストールします。</p>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; yasnippet</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'yasnippet-bundle</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>デフォルトでいろんなmode毎にスニペットが用意されています。</p>
<p>ここでは、ruby-modeでファイルを開いて、<code>if</code>を入力して<code>TAB</code>を押してみます。</p>
<p>そうすると、下記の様なコードが入力されます。カーソルもconditionの前に移動してくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"n\">condition</span>
<span class=\"k\">end</span>
</pre>
</div>
</div>
<p>これでだいぶプログラムする際の入力の手間が減らせそうです。</p>" "http://qiita.com/items/2c4f0a4a31286cf4bc51" (20485 11155) old 76 nil nil ((id nil "tag:qiita.com,2005:Item/7245") (published nil "2012-07-17T18:08:35+09:00") (updated nil "2012-07-17T18:08:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2c4f0a4a31286cf4bc51"))) (url nil "http://qiita.com/items/2c4f0a4a31286cf4bc51") (title nil "略語から定型文を入力する: yasnippet") (content ((type . "html")) "<p>定型文を入力できるようにyasnippetをいれます。</p>

<p>インストールは、<a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">こちら</a>の設定がしてあれば、<code>M-x package-list-packages</code>の一覧から<code>yasnippet-bundle</code>をインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; yasnippet</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;yasnippet-bundle</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>デフォルトでいろんなmode毎にスニペットが用意されています。</p>

<p>ここでは、ruby-modeでファイルを開いて、<code>if</code>を入力して<code>TAB</code>を押してみます。</p>

<p>そうすると、下記の様なコードが入力されます。カーソルもconditionの前に移動してくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"n\">condition</span>

<span class=\"k\">end</span>
</pre>
</div>
</div>
<p>これでだいぶプログラムする際の入力の手間が減らせそうです。</p>
") (published nil "2012-07-17T18:08:35Z") (updated nil "2012-07-17T18:08:35Z") (author nil (name nil "icb54615")))) ("Tramp でポート指定する方法" "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"sr\">/ssh:localhost#22:/</span>
</pre>
</div>
</div>" "http://qiita.com/items/1e4899ccb8f91cb69ff4" (20484 10982) old 77 nil nil ((id nil "tag:qiita.com,2005:Item/7218") (published nil "2012-07-16T23:53:26+09:00") (updated nil "2012-07-16T23:53:26+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1e4899ccb8f91cb69ff4"))) (url nil "http://qiita.com/items/1e4899ccb8f91cb69ff4") (title nil "Tramp でポート指定する方法") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"sr\">/ssh:localhost#22:/</span>
</pre>
</div>
</div>") (published nil "2012-07-16T23:53:26Z") (updated nil "2012-07-16T23:53:26Z") (author nil (name nil "biwakonbu")))) ("formatの~<newline>支援コマンド" "<p>formatの&quot;~改行&quot;を使うと、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"no\">t</span> <span class=\"s\">&quot;tilde immediately followed by a newline ~</span>
<span class=\"s\">           ignores the newline and any ~</span>
<span class=\"s\">           following non-newline whitespace[1] ~</span>
<span class=\"s\">           characters.&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;&gt;&gt;  tilde immediately followed by a newline ignores the newline and any following non-newline whitespace[1] characters.</span>
<span class=\"c1\">;=&gt;  NIL</span>
</pre>
</div>
</div>
<p>のように長くなる行を分割して書けます。<br>
しかし、インデントが面倒臭いのであまり使われません。<br>
これがもったいないので支援のelisp書いてみました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">'slime)</span>
<span class=\"s\">(define-key slime-mode-map [(control ?~)]</span>
<span class=\"s\">  (defun slime-format-ignored-newline ()</span>
<span class=\"s\">    (interactive)</span>
<span class=\"s\">    (and (in-string-p)</span>
<span class=\"s\">         (let* ((find-\\&quot; (lambda (n)</span>
<span class=\"s\">                           (string-match &quot;\\&quot;&quot; </span>
<span class=\"s\">                                         (concat (nreverse (string-to-list thing)))</span>
<span class=\"s\">                                         (or n 0) )))</span>
<span class=\"s\">                (thing (thing-at-point '</span><span class=\"n\">line</span><span class=\"p\">))</span>
<span class=\"p\">;;</span> <span class=\"n\">FIXME</span>
<span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">(</span><span class=\"n\">funcall</span> <span class=\"n\">find</span><span class=\"o\">-\\</span><span class=\"s\">&quot; </span>
<span class=\"s\">                                (1+ (funcall find-\\&quot; 0)) )))</span>
<span class=\"s\">           (insert &quot;</span><span class=\"o\">~</span><span class=\"s\">&quot;)</span>
<span class=\"s\">           (cond (start</span>
<span class=\"s\">                   (split-line)</span>
<span class=\"s\">                   (next-line)</span>
<span class=\"s\">                   (delete-backward-char (- start 2)) )</span>
<span class=\"s\">                 (t (let ((beg (string-match &quot;</span><span class=\"o\">\\\\</span><span class=\"n\">S</span> <span class=\"err\">&quot;</span> <span class=\"n\">thing</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"n\">newline</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"n\">make</span><span class=\"o\">-</span><span class=\"n\">string</span> <span class=\"n\">beg</span> <span class=\"mi\">32</span><span class=\"p\">))</span> <span class=\"p\">)))))))</span>
</pre>
</div>
</div>
<p>かなり手抜きなので、ダブルクォートは先行して入力する必要があります。<br>
使えそうなら是非まともなコードに書き直してやって下さい。</p>" "http://qiita.com/items/505bd1bff866e59b47c3" (20481 58785) old 78 nil nil ((id nil "tag:qiita.com,2005:Item/7177") (published nil "2012-07-15T06:30:14+09:00") (updated nil "2012-07-15T06:33:21+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/505bd1bff866e59b47c3"))) (url nil "http://qiita.com/items/505bd1bff866e59b47c3") (title nil "formatの~<newline>支援コマンド") (content ((type . "html")) "<p>formatの&quot;~改行&quot;を使うと、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"no\">t</span> <span class=\"s\">&quot;tilde immediately followed by a newline ~</span>
<span class=\"s\">           ignores the newline and any ~</span>
<span class=\"s\">           following non-newline whitespace[1] ~</span>
<span class=\"s\">           characters.&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;&gt;&gt;  tilde immediately followed by a newline ignores the newline and any following non-newline whitespace[1] characters.</span>
<span class=\"c1\">;=&gt;  NIL</span>
</pre>
</div>
</div>
<p>のように長くなる行を分割して書けます。<br>
しかし、インデントが面倒臭いのであまり使われません。<br>
これがもったいないので支援のelisp書いてみました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">&#39;slime)</span>

<span class=\"s\">(define-key slime-mode-map [(control ?~)]</span>
<span class=\"s\">  (defun slime-format-ignored-newline ()</span>
<span class=\"s\">    (interactive)</span>
<span class=\"s\">    (and (in-string-p)</span>
<span class=\"s\">         (let* ((find-\\&quot; (lambda (n)</span>
<span class=\"s\">                           (string-match &quot;\\&quot;&quot; </span>
<span class=\"s\">                                         (concat (nreverse (string-to-list thing)))</span>
<span class=\"s\">                                         (or n 0) )))</span>
<span class=\"s\">                (thing (thing-at-point &#39;</span><span class=\"n\">line</span><span class=\"p\">))</span>
                <span class=\"p\">;;</span> <span class=\"n\">FIXME</span>
                <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">(</span><span class=\"n\">funcall</span> <span class=\"n\">find</span><span class=\"o\">-\\</span><span class=\"s\">&quot; </span>
<span class=\"s\">                                (1+ (funcall find-\\&quot; 0)) )))</span>
<span class=\"s\">           (insert &quot;</span><span class=\"o\">~</span><span class=\"s\">&quot;)</span>
<span class=\"s\">           (cond (start</span>
<span class=\"s\">                   (split-line)</span>
<span class=\"s\">                   (next-line)</span>
<span class=\"s\">                   (delete-backward-char (- start 2)) )</span>
<span class=\"s\">                 (t (let ((beg (string-match &quot;</span><span class=\"o\">\\\\</span><span class=\"n\">S</span> <span class=\"err\">&quot;</span> <span class=\"n\">thing</span><span class=\"p\">)))</span>
                      <span class=\"p\">(</span><span class=\"n\">newline</span><span class=\"p\">)</span>
                      <span class=\"p\">(</span><span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"n\">make</span><span class=\"o\">-</span><span class=\"n\">string</span> <span class=\"n\">beg</span> <span class=\"mi\">32</span><span class=\"p\">))</span> <span class=\"p\">)))))))</span>
</pre>
</div>
</div>
<p>かなり手抜きなので、ダブルクォートは先行して入力する必要があります。<br>
使えそうなら是非まともなコードに書き直してやって下さい。</p>
") (published nil "2012-07-15T06:30:14Z") (updated nil "2012-07-15T06:33:21Z") (author nil (name nil "g000001")))) ("Emacs における快適な Ruby 開発環境を求めて" "<p>今日は Emacs で Ruby を編集する場合に是非知っておきたい便利なツールについて紹介したいと思います．紹介するツールは以下の 3種類 + 1 です．</p>
<ul>
<li>Smart Compile</li>
<li>xmpfilter</li>
<li>what_methods (anything-ruby-methods)</li>
</ul>
<h1>Smart Compile</h1>
<p><a href=\"http://emacswiki.org/emacs/SmartCompile\">Smart Compile</a> は Emacs からキーを叩くだけで編集中のファイルをコンパイル/実行できる elisp です．これは Ruby に限らず，様々な言語での開発に使用できます．</p>
<p>Emacs には標準のコンパイル機能(M-x compile)があるのですが，これは残念ながら make -k を呼び出すだけとなっており，使用場面が限られてしまいます．C 言語であればこれでいいけど，Ruby であれば，「ruby [編集ファイル]」を呼び出したいです．Smart Compile を使用すると，プログラミング言語ごとに別々のコマンドを割り当てることができるようになります．</p>
<p>C などではコンパイルだけを行いますが，Ruby は分割されたウィンドウに結果を表示してくれます．インストール方法は以下のとおりです．</p>
<ol>
<li><a href=\"http://www.emacswiki.org/emacs/download/smart-compile.el\">smart-compile.el</a> をダウンロードして，ロードパスの通ったところに置く．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">'smart-compile)</span>
<span class=\"s\">    (define-key ruby-mode-map (kbd &quot;C-c c&quot;) '</span><span class=\"n\">smart</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">define</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"n\">ruby</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"nb\">map</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> <span class=\"s\">&quot;C-c C-c&quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> <span class=\"s\">&quot;C-c c C-m&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これで，Ruby 編集中に C-c C-c を入力すると即座にそのファイルを実行して結果を表示してくれます．C-c c を入力すると，ミニバッファに実行するコマンドを入力した状態になるので，こっちは引数などを入力したいときにどうぞ．</p>
<p><img src=\"http://www.fastpic.jp/images.php?file=7328235544.png\" alt=\"Smart Compile 実行画面\"></p>
<h1>xmpfilter</h1>
<p><a href=\"http://d.hatena.ne.jp/keyword/xmpfilter\">xmpfilter</a> は Smart Compile よりも簡単に Ruby の実行結果を見ることができるツールで，rcodetools に付属しています．Ruby コードの行末に「# =&gt;」を入れて xmpfilter を実行すると，その行の返り値を表示してくれます．また，標準出力もコードの末尾に表示してくれます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"mi\">10</span><span class=\"o\">.</span><span class=\"n\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>
<span class=\"n\">i</span>                             <span class=\"c1\"># =&gt;</span>
<span class=\"k\">end</span>
<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_a</span>                 <span class=\"c1\"># =&gt;</span>
<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">map!</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">}</span>              <span class=\"c1\"># =&gt;</span>
<span class=\"nb\">p</span> <span class=\"n\">a</span>
</pre>
</div>
</div>
<p>のコードが</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"mi\">10</span><span class=\"o\">.</span><span class=\"n\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>
<span class=\"n\">i</span>                             <span class=\"c1\"># =&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span>
<span class=\"k\">end</span>
<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_a</span>                 <span class=\"c1\"># =&gt; [1, 2, 3, 4, 5]</span>
<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">map!</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">}</span>              <span class=\"c1\"># =&gt; [2, 4, 6, 8, 10]</span>
<span class=\"nb\">p</span> <span class=\"n\">a</span>
<span class=\"c1\"># &gt;&gt; [2, 4, 6, 8, 10]</span>
</pre>
</div>
</div>
<p>となります．試行錯誤にはすごく便利! インストール方法は以下のとおりです．</p>
<ol>
<li>gem install rcodetools で rcodetools をインストール．</li>
<li>rcodetools.el をロードパスが通ったところにコピー (/usr/lib/ruby/gems/1.9.1/gems/rcodetools-0.8.5.0 の中とかにあります)．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">'rcodetools)</span>
<span class=\"s\">    (define-key ruby-mode-map (kbd &quot;C-c C-d&quot;) '</span><span class=\"n\">xmp</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>この設定で C-c C-d を入力すると，編集中のファイルに xmp が実行されます．「# =&gt;」を書くのが面倒だと思うかもしれませんが，コードが記述されている行で M-; を 2 回入力すれば挿入されるので大丈夫です．</p>
<p>たいていのコードの試行錯誤はこれで事足ります．ただ，唯一コマンドライン引数が入力できないのが弱点．適宜 Smart Compile と使い分けましょう．</p>
<p>余談ですが，Emacs Lisp で同じことを行える <a href=\"http://www.emacswiki.org/LispXmp\">Lisp Xmp</a> というのもあります．Emacs Lisp を書く人は是非．</p>
<h1>what_methods</h1>
<p>「このオブジェクトを○○にするメソッドって何だっけ？」ってときありますよね．そういうときに <a href=\"https://github.com/BMorearty/what_methods\">what_methods</a> の what? メソッドで簡単に調べられます．</p>
<p>例えば，「(1..3)」を「[1,2,3]」にするメソッドが思いだせないときは，irb で以下のように実行します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"n\">irb</span><span class=\"o\">&gt;</span> <span class=\"nb\">require</span> <span class=\"s1\">'what_methods'</span>
<span class=\"o\">=&gt;</span> <span class=\"kp\">true</span>
<span class=\"n\">irb</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">what?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>
<span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">to_a</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
<span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">entries</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
<span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">sort</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
<span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"ss\">:to_a</span><span class=\"p\">,</span> <span class=\"ss\">:entries</span><span class=\"p\">,</span> <span class=\"ss\">:sort</span><span class=\"o\">]</span>
</pre>
</div>
</div>
<h2>Emacs で what_methods を使う</h2>
<p>この what_methods を Emacs で使うとき，eshell を開いたりしてもいいのですが，anything のインターフェイスを利用して簡単に挿入できるような Elisp (<a href=\"https://github.com/akisute3/anything-ruby-methods\">anything-ruby-methods</a>) を書きました．オブジェクトの後ろで実行するとミニバッファが出力され，そこに出力結果を入力して RET を押すと，anything バッファにメソッド一覧が表示されるというものです．</p>
<p><img src=\"http://www.fastpic.jp/images.php?file=2560853622.png\" alt=\"(1..3)がメソッドによって返してほしいオブジェクトをミニバッファに入力\"></p>
<p><img src=\"http://www.fastpic.jp/images.php?file=2389010507.png\" alt=\"するとメソッドがanythingバッファに表示される．選択して挿入可能\"></p>
<p>インストール方法は以下のとおりです．</p>
<ol>
<li>anything をインストール (auto-install が入っているなら M-x auto-install-batch anything でインストールできます)．</li>
<li>gem install what_methods で what_methods をインストール．</li>
<li><a href=\"https://raw.github.com/akisute3/anything-ruby-methods/master/anything-ruby-methods.el\">anything-ruby-methods.el</a> をダウンロードして，ロードパスの通ったところに置く．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>     <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">'anything-ruby-methods)</span>
<span class=\"s\">     (define-key ruby-mode-map (kbd &quot;C-c d&quot;) '</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">ruby</span><span class=\"o\">-</span><span class=\"n\">methods</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-c d を入力すると，行頭からカーソルまでを self として what? を実行します．transient-mark-mode がオン (リージョンが色つき) のときは，リージョンが self となります．</p>
<p>ちなみにこれは what_methods にも言えることなのですが，お察しのとおり全メソッドを全て実行して出力が一致するか確認しています．そのため，what? に渡すオブジェクトにファイルを削除するなどの危険なコードが含まれているとそれを実行してしまうので，使用には十分注意しましょう．</p>
<h1>まとめ</h1>
<p>Emacs で Ruby の編集に便利なツールをいくつか紹介しました．その中でも断トツで xmpfilter が便利なのですが，まあ Emacs で Ruby 開発してる人ならほとんどの人が知ってますよね．「Emacs ではそんなことができるのか!?」と思った人がいれば，Emacs を使ってみるのもいいと思います．たぶん Vim でもできますが．</p>
<p>anything-ruby-methods は作ったばかりなので全く洗練されていません．Elisp のコードも非常に残念な感じです．とりあえず私自身が使っていて今のところ問題が起こったことはありません．</p>
<p>今後の機能拡張として，オブジェクトに使用可能な全てのメソッドを並べる情報源の追加はやりたいですね．これがあると，とりあえず実行してメソッドを眺めて (文字入力でメソッドを絞り込んで) 選択ってのが可能になります．ただ，メソッド補完は rcodetools とか RSense 使った方がいいような……．あとは，候補にカーソルをあわせて C-z で，そのメソッドのリファレンスを別のバッファに表示するとか．できるのかな？ そもそも本当にやるのかな？</p>" "http://qiita.com/items/f02ab0c38ad5e9ba385a" (20480 60596) old 79 nil nil ((id nil "tag:qiita.com,2005:Item/7164") (published nil "2012-07-14T12:51:16+09:00") (updated nil "2012-07-14T12:51:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f02ab0c38ad5e9ba385a"))) (url nil "http://qiita.com/items/f02ab0c38ad5e9ba385a") (title nil "Emacs における快適な Ruby 開発環境を求めて") (content ((type . "html")) "<p>今日は Emacs で Ruby を編集する場合に是非知っておきたい便利なツールについて紹介したいと思います．紹介するツールは以下の 3種類 + 1 です．</p>

<ul>
<li>Smart Compile</li>
<li>xmpfilter</li>
<li>what_methods (anything-ruby-methods)</li>
</ul>

<h1>Smart Compile</h1>

<p><a href=\"http://emacswiki.org/emacs/SmartCompile\">Smart Compile</a> は Emacs からキーを叩くだけで編集中のファイルをコンパイル/実行できる elisp です．これは Ruby に限らず，様々な言語での開発に使用できます．</p>

<p>Emacs には標準のコンパイル機能(M-x compile)があるのですが，これは残念ながら make -k を呼び出すだけとなっており，使用場面が限られてしまいます．C 言語であればこれでいいけど，Ruby であれば，「ruby [編集ファイル]」を呼び出したいです．Smart Compile を使用すると，プログラミング言語ごとに別々のコマンドを割り当てることができるようになります．</p>

<p>C などではコンパイルだけを行いますが，Ruby は分割されたウィンドウに結果を表示してくれます．インストール方法は以下のとおりです．</p>

<ol>
<li><a href=\"http://www.emacswiki.org/emacs/download/smart-compile.el\">smart-compile.el</a> をダウンロードして，ロードパスの通ったところに置く．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">&#39;smart-compile)</span>
<span class=\"s\">    (define-key ruby-mode-map (kbd &quot;C-c c&quot;) &#39;</span><span class=\"n\">smart</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"n\">define</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"n\">ruby</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"nb\">map</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> <span class=\"s\">&quot;C-c C-c&quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> <span class=\"s\">&quot;C-c c C-m&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これで，Ruby 編集中に C-c C-c を入力すると即座にそのファイルを実行して結果を表示してくれます．C-c c を入力すると，ミニバッファに実行するコマンドを入力した状態になるので，こっちは引数などを入力したいときにどうぞ．</p>

<p><img src=\"http://www.fastpic.jp/images.php?file=7328235544.png\" alt=\"Smart Compile 実行画面\"></p>

<h1>xmpfilter</h1>

<p><a href=\"http://d.hatena.ne.jp/keyword/xmpfilter\">xmpfilter</a> は Smart Compile よりも簡単に Ruby の実行結果を見ることができるツールで，rcodetools に付属しています．Ruby コードの行末に「# =&gt;」を入れて xmpfilter を実行すると，その行の返り値を表示してくれます．また，標準出力もコードの末尾に表示してくれます．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"mi\">10</span><span class=\"o\">.</span><span class=\"n\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>
      <span class=\"n\">i</span>                             <span class=\"c1\"># =&gt;</span>
    <span class=\"k\">end</span>

    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_a</span>                 <span class=\"c1\"># =&gt;</span>
    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">map!</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">}</span>              <span class=\"c1\"># =&gt;</span>

    <span class=\"nb\">p</span> <span class=\"n\">a</span>
</pre>
</div>
</div>
<p>のコードが</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"mi\">10</span><span class=\"o\">.</span><span class=\"n\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>
      <span class=\"n\">i</span>                             <span class=\"c1\"># =&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span>
    <span class=\"k\">end</span>

    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_a</span>                 <span class=\"c1\"># =&gt; [1, 2, 3, 4, 5]</span>
    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">map!</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">}</span>              <span class=\"c1\"># =&gt; [2, 4, 6, 8, 10]</span>

    <span class=\"nb\">p</span> <span class=\"n\">a</span>
    <span class=\"c1\"># &gt;&gt; [2, 4, 6, 8, 10]</span>
</pre>
</div>
</div>
<p>となります．試行錯誤にはすごく便利! インストール方法は以下のとおりです．</p>

<ol>
<li>gem install rcodetools で rcodetools をインストール．</li>
<li>rcodetools.el をロードパスが通ったところにコピー (/usr/lib/ruby/gems/1.9.1/gems/rcodetools-0.8.5.0 の中とかにあります)．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">&#39;rcodetools)</span>
<span class=\"s\">    (define-key ruby-mode-map (kbd &quot;C-c C-d&quot;) &#39;</span><span class=\"n\">xmp</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>この設定で C-c C-d を入力すると，編集中のファイルに xmp が実行されます．「# =&gt;」を書くのが面倒だと思うかもしれませんが，コードが記述されている行で M-; を 2 回入力すれば挿入されるので大丈夫です．</p>

<p>たいていのコードの試行錯誤はこれで事足ります．ただ，唯一コマンドライン引数が入力できないのが弱点．適宜 Smart Compile と使い分けましょう．</p>

<p>余談ですが，Emacs Lisp で同じことを行える <a href=\"http://www.emacswiki.org/LispXmp\">Lisp Xmp</a> というのもあります．Emacs Lisp を書く人は是非．</p>

<h1>what_methods</h1>

<p>「このオブジェクトを○○にするメソッドって何だっけ？」ってときありますよね．そういうときに <a href=\"https://github.com/BMorearty/what_methods\">what_methods</a> の what? メソッドで簡単に調べられます．</p>

<p>例えば，「(1..3)」を「[1,2,3]」にするメソッドが思いだせないときは，irb で以下のように実行します．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre>    <span class=\"n\">irb</span><span class=\"o\">&gt;</span> <span class=\"nb\">require</span> <span class=\"s1\">&#39;what_methods&#39;</span>
    <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span>
    <span class=\"n\">irb</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">what?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>
    <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">to_a</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
    <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">entries</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
    <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"n\">sort</span> <span class=\"o\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>
    <span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"ss\">:to_a</span><span class=\"p\">,</span> <span class=\"ss\">:entries</span><span class=\"p\">,</span> <span class=\"ss\">:sort</span><span class=\"o\">]</span>
</pre>
</div>
</div>
<h2>Emacs で what_methods を使う</h2>

<p>この what_methods を Emacs で使うとき，eshell を開いたりしてもいいのですが，anything のインターフェイスを利用して簡単に挿入できるような Elisp (<a href=\"https://github.com/akisute3/anything-ruby-methods\">anything-ruby-methods</a>) を書きました．オブジェクトの後ろで実行するとミニバッファが出力され，そこに出力結果を入力して RET を押すと，anything バッファにメソッド一覧が表示されるというものです．</p>

<p><img src=\"http://www.fastpic.jp/images.php?file=2560853622.png\" alt=\"(1..3)がメソッドによって返してほしいオブジェクトをミニバッファに入力\"></p>

<p><img src=\"http://www.fastpic.jp/images.php?file=2389010507.png\" alt=\"するとメソッドがanythingバッファに表示される．選択して挿入可能\"></p>

<p>インストール方法は以下のとおりです．</p>

<ol>
<li>anything をインストール (auto-install が入っているなら M-x auto-install-batch anything でインストールできます)．</li>
<li>gem install what_methods で what_methods をインストール．</li>
<li><a href=\"https://raw.github.com/akisute3/anything-ruby-methods/master/anything-ruby-methods.el\">anything-ruby-methods.el</a> をダウンロードして，ロードパスの通ったところに置く．</li>
<li>以下を .emacs に記述する．</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>     <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"s\">&#39;anything-ruby-methods)</span>
<span class=\"s\">     (define-key ruby-mode-map (kbd &quot;C-c d&quot;) &#39;</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">ruby</span><span class=\"o\">-</span><span class=\"n\">methods</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-c d を入力すると，行頭からカーソルまでを self として what? を実行します．transient-mark-mode がオン (リージョンが色つき) のときは，リージョンが self となります．</p>

<p>ちなみにこれは what_methods にも言えることなのですが，お察しのとおり全メソッドを全て実行して出力が一致するか確認しています．そのため，what? に渡すオブジェクトにファイルを削除するなどの危険なコードが含まれているとそれを実行してしまうので，使用には十分注意しましょう．</p>

<h1>まとめ</h1>

<p>Emacs で Ruby の編集に便利なツールをいくつか紹介しました．その中でも断トツで xmpfilter が便利なのですが，まあ Emacs で Ruby 開発してる人ならほとんどの人が知ってますよね．「Emacs ではそんなことができるのか!?」と思った人がいれば，Emacs を使ってみるのもいいと思います．たぶん Vim でもできますが．</p>

<p>anything-ruby-methods は作ったばかりなので全く洗練されていません．Elisp のコードも非常に残念な感じです．とりあえず私自身が使っていて今のところ問題が起こったことはありません．</p>

<p>今後の機能拡張として，オブジェクトに使用可能な全てのメソッドを並べる情報源の追加はやりたいですね．これがあると，とりあえず実行してメソッドを眺めて (文字入力でメソッドを絞り込んで) 選択ってのが可能になります．ただ，メソッド補完は rcodetools とか RSense 使った方がいいような……．あとは，候補にカーソルをあわせて C-z で，そのメソッドのリファレンスを別のバッファに表示するとか．できるのかな？ そもそも本当にやるのかな？</p>
") (published nil "2012-07-14T12:51:16Z") (updated nil "2012-07-14T12:51:16Z") (author nil (name nil "akisute3@github")))) ("Emacsで現在のキーバインドを確認する" "<p>Emacsで現在のキーバインドを確認するにはキーバインドの一覧を表示するか知りたいキーをタイプして確認します。</p>
<p>キーバインド一覧を表示するには、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">bindings</span>
</pre>
</div>
</div>
<p>また、特定のキーのバインドを知りたいときは、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">key</span>
</pre>
</div>
</div>
<p>と打った後に知りたいキーをタイプします。</p>" "http://qiita.com/items/3e9976bb9ae8a0b793dd" (20479 43562) old 80 nil nil ((id nil "tag:qiita.com,2005:Item/7147") (published nil "2012-07-13T13:55:06+09:00") (updated nil "2012-07-13T13:55:06+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3e9976bb9ae8a0b793dd"))) (url nil "http://qiita.com/items/3e9976bb9ae8a0b793dd") (title nil "Emacsで現在のキーバインドを確認する") (content ((type . "html")) "<p>Emacsで現在のキーバインドを確認するにはキーバインドの一覧を表示するか知りたいキーをタイプして確認します。</p>

<p>キーバインド一覧を表示するには、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">bindings</span>
</pre>
</div>
</div>
<p>また、特定のキーのバインドを知りたいときは、</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">key</span>
</pre>
</div>
</div>
<p>と打った後に知りたいキーをタイプします。</p>
") (published nil "2012-07-13T13:55:06Z") (updated nil "2012-07-13T13:55:06Z") (author nil (name nil "icb54615")))) ("redo+: undoしすぎたのを元に戻す" "<p>undoしすぎたのを元に戻すようにredo+をいれます。</p>
<p>インストールは<code>M-x packege-list-packages</code>の一覧から<code>redo+</code>を選択してインストールします。</p>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; redo+</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'redo+</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-/&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'redo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-no-redo</span> <span class=\"no\">t</span><span class=\"p\">)</span> <span class=\"c1\">; 過去のundoがredoされないようにする</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-limit</span> <span class=\"mi\">600000</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-strong-limit</span> <span class=\"mi\">900000</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>C-/</code>でundoをして、undoしすぎた場合は<code>C-M-/</code>で元に戻します。</p>" "http://qiita.com/items/cbcf021eec77f546c7b6" (20479 43360) old 81 nil nil ((id nil "tag:qiita.com,2005:Item/7145") (published nil "2012-07-13T13:51:44+09:00") (updated nil "2012-07-13T13:51:44+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/cbcf021eec77f546c7b6"))) (url nil "http://qiita.com/items/cbcf021eec77f546c7b6") (title nil "redo+: undoしすぎたのを元に戻す") (content ((type . "html")) "<p>undoしすぎたのを元に戻すようにredo+をいれます。</p>

<p>インストールは<code>M-x packege-list-packages</code>の一覧から<code>redo+</code>を選択してインストールします。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; redo+</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;redo+</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-/&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;redo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-no-redo</span> <span class=\"no\">t</span><span class=\"p\">)</span> <span class=\"c1\">; 過去のundoがredoされないようにする</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-limit</span> <span class=\"mi\">600000</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">undo-strong-limit</span> <span class=\"mi\">900000</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>C-/</code>でundoをして、undoしすぎた場合は<code>C-M-/</code>で元に戻します。</p>
") (published nil "2012-07-13T13:51:44Z") (updated nil "2012-07-13T13:51:44Z") (author nil (name nil "icb54615")))) ("ファイル作成時にテンプレートを挿入する" "<p>プログラムなどで新規にファイルを作成する際に、HTMLであれば<code>&lt;html&gt;&lt;head&gt;&lt;/head&gt;...&lt;/html&gt;</code>や、rubyであれば先頭に<code>#!/usr/bin/env ruby</code>など決まった内容をいれる場合が結構あるかと思います。auto-insert-modeを使うと自動でそういった内容を作成時に自動的にいれてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">auto-insert-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">auto-insert-directory</span> <span class=\"s\">&quot;~/.emacs.d/insert/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-auto-insert</span> <span class=\"s\">&quot;\\\\.rb$&quot;</span> <span class=\"s\">&quot;ruby-template.rb&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>.rb</code>のファイルを新しく作成した際に、<code>ruby-template.rb</code>の内容が自動的に挿入されます。</p>" "http://qiita.com/items/7b7536e903591dd347ca" (20478 21445) old 82 nil nil ((id nil "tag:qiita.com,2005:Item/7107") (published nil "2012-07-12T13:34:13+09:00") (updated nil "2012-07-12T13:34:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7b7536e903591dd347ca"))) (url nil "http://qiita.com/items/7b7536e903591dd347ca") (title nil "ファイル作成時にテンプレートを挿入する") (content ((type . "html")) "<p>プログラムなどで新規にファイルを作成する際に、HTMLであれば<code>&lt;html&gt;&lt;head&gt;&lt;/head&gt;...&lt;/html&gt;</code>や、rubyであれば先頭に<code>#!/usr/bin/env ruby</code>など決まった内容をいれる場合が結構あるかと思います。auto-insert-modeを使うと自動でそういった内容を作成時に自動的にいれてくれます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">auto-insert-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">auto-insert-directory</span> <span class=\"s\">&quot;~/.emacs.d/insert/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-auto-insert</span> <span class=\"s\">&quot;\\\\.rb$&quot;</span> <span class=\"s\">&quot;ruby-template.rb&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>.rb</code>のファイルを新しく作成した際に、<code>ruby-template.rb</code>の内容が自動的に挿入されます。</p>
") (published nil "2012-07-12T13:34:13Z") (updated nil "2012-07-12T13:34:13Z") (author nil (name nil "icb54615")))) ("ファイルを保存した時にFlymakeの結果をGrowlで通知する" "<p>flymakeでエラーが検出されると通知される奴は自分には少しアクティブすぎたので保存した段階でエラーが検出されると通知されるようにした。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">executable</span><span class=\"o\">-</span><span class=\"n\">find</span> <span class=\"s\">&quot;growlnotify&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">growlnotify</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">count</span> <span class=\"p\">(</span><span class=\"nb\">length</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"o\">&gt;</span> <span class=\"n\">count</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">dolist</span> <span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">line</span>    <span class=\"p\">(</span><span class=\"n\">car</span> <span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">text</span>    <span class=\"p\">(</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">ler</span><span class=\"o\">-</span><span class=\"n\">text</span> <span class=\"p\">(</span><span class=\"n\">caadr</span> <span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"n\">title</span>   <span class=\"p\">(</span><span class=\"n\">concat</span> <span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">))</span> <span class=\"s\">&quot;:&quot;</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">string</span> <span class=\"n\">line</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span> <span class=\"s\">&quot;emacs-flymake&quot;</span> <span class=\"n\">nil</span> <span class=\"s\">&quot;growlnotify&quot;</span>
<span class=\"s\">&quot;-a&quot;</span> <span class=\"s\">&quot;Emacs&quot;</span> <span class=\"s\">&quot;-n&quot;</span> <span class=\"s\">&quot;'Emacs - Flymake'&quot;</span> <span class=\"s\">&quot;-p&quot;</span> <span class=\"s\">&quot;2&quot;</span> <span class=\"s\">&quot;-s&quot;</span>
<span class=\"s\">&quot;-t&quot;</span> <span class=\"n\">title</span> <span class=\"s\">&quot;-m&quot;</span> <span class=\"p\">(</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">quote</span><span class=\"o\">-</span><span class=\"n\">argument</span> <span class=\"n\">text</span><span class=\"p\">)))))))</span>
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">'after-save-hook '</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">growlnotify</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>後会社ではimacで開発してるのでGrowlで<code>Emacs - Flymake</code>の通知をMusic Videoにするとかなり目立つのでオススメ</p>
<p>flymake-after-save-hookが反応しなかったので普通にafter-save-hookで書いているけど想像したhookとは別なのだろうか。</p>" "http://qiita.com/items/3790bcf9cdab7e28fb0f" (20477 30812) old 83 nil nil ((id nil "tag:qiita.com,2005:Item/7087") (published nil "2012-07-11T21:58:04+09:00") (updated nil "2012-07-11T21:58:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3790bcf9cdab7e28fb0f"))) (url nil "http://qiita.com/items/3790bcf9cdab7e28fb0f") (title nil "ファイルを保存した時にFlymakeの結果をGrowlで通知する") (content ((type . "html")) "<p>flymakeでエラーが検出されると通知される奴は自分には少しアクティブすぎたので保存した段階でエラーが検出されると通知されるようにした。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">executable</span><span class=\"o\">-</span><span class=\"n\">find</span> <span class=\"s\">&quot;growlnotify&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">growlnotify</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">count</span> <span class=\"p\">(</span><span class=\"nb\">length</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)))</span>
      <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"o\">&gt;</span> <span class=\"n\">count</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"n\">dolist</span> <span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">line</span>    <span class=\"p\">(</span><span class=\"n\">car</span> <span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">))</span>
                 <span class=\"p\">(</span><span class=\"n\">text</span>    <span class=\"p\">(</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">ler</span><span class=\"o\">-</span><span class=\"n\">text</span> <span class=\"p\">(</span><span class=\"n\">caadr</span> <span class=\"n\">err</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)))</span>
                 <span class=\"p\">(</span><span class=\"n\">title</span>   <span class=\"p\">(</span><span class=\"n\">concat</span> <span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">))</span> <span class=\"s\">&quot;:&quot;</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">string</span> <span class=\"n\">line</span><span class=\"p\">))))</span>
            <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span> <span class=\"s\">&quot;emacs-flymake&quot;</span> <span class=\"n\">nil</span> <span class=\"s\">&quot;growlnotify&quot;</span>
                                         <span class=\"s\">&quot;-a&quot;</span> <span class=\"s\">&quot;Emacs&quot;</span> <span class=\"s\">&quot;-n&quot;</span> <span class=\"s\">&quot;&#39;Emacs - Flymake&#39;&quot;</span> <span class=\"s\">&quot;-p&quot;</span> <span class=\"s\">&quot;2&quot;</span> <span class=\"s\">&quot;-s&quot;</span>
                                         <span class=\"s\">&quot;-t&quot;</span> <span class=\"n\">title</span> <span class=\"s\">&quot;-m&quot;</span> <span class=\"p\">(</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">quote</span><span class=\"o\">-</span><span class=\"n\">argument</span> <span class=\"n\">text</span><span class=\"p\">)))))))</span>
  <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;after-save-hook &#39;</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">growlnotify</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>後会社ではimacで開発してるのでGrowlで<code>Emacs - Flymake</code>の通知をMusic Videoにするとかなり目立つのでオススメ</p>

<p>flymake-after-save-hookが反応しなかったので普通にafter-save-hookで書いているけど想像したhookとは別なのだろうか。</p>
") (published nil "2012-07-11T21:58:04Z") (updated nil "2012-07-11T21:58:04Z") (author nil (name nil "Daic_h")))) ("Emacsで文字コード指定" "<h2>開き直し</h2>
<p>C-x RET c {文字コード} RET C-x C-v RET </p>
<p>↓ 簡単</p>
<blockquote>
<p>C-x RET r </p>
</blockquote>
<h2>文字コード指定</h2>
<blockquote>
<p>C-x RET f {文字コード} RET</p>
</blockquote>" "http://qiita.com/items/6848f14a4ff89649ce44" (20484 50025) old 84 nil nil ((id nil "tag:qiita.com,2005:Item/7054") (published nil "2012-07-11T11:42:22+09:00") (updated nil "2012-07-17T10:44:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/6848f14a4ff89649ce44"))) (url nil "http://qiita.com/items/6848f14a4ff89649ce44") (title nil "Emacsで文字コード指定") (content ((type . "html")) "<h2>開き直し</h2>

<p>C-x RET c {文字コード} RET C-x C-v RET </p>

<p>↓ 簡単</p>

<blockquote>
<p>C-x RET r </p>
</blockquote>

<h2>文字コード指定</h2>

<blockquote>
<p>C-x RET f {文字コード} RET</p>
</blockquote>
") (published nil "2012-07-11T11:42:22Z") (updated nil "2012-07-17T10:44:09Z") (author nil (name nil "swanky_days")))) ("最後の変更箇所にジャンプする" "<p>テキストを編集していて前の編集した箇所に戻りたいときがよくあります。その際に便利なのがgoto-chg.elになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"nb\">goto</span><span class=\"o\">-</span><span class=\"n\">chg</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'goto-chg</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;&lt;f8&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'goto-last-change</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;S-&lt;f8&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'goto-last-change-reverse</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>F8</code>を押すと、前回修正した箇所に移動します。<code>F8</code>を押し続けると、さらに過去の変更箇所に移動することができます。移動しすぎた際には、<code>Shift-F8</code>で元に戻ります。</p>" "http://qiita.com/items/ce366054d15472134a72" (20475 27959) old 85 nil nil ((id nil "tag:qiita.com,2005:Item/7011") (published nil "2012-07-10T08:45:59+09:00") (updated nil "2012-07-10T08:45:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ce366054d15472134a72"))) (url nil "http://qiita.com/items/ce366054d15472134a72") (title nil "最後の変更箇所にジャンプする") (content ((type . "html")) "<p>テキストを編集していて前の編集した箇所に戻りたいときがよくあります。その際に便利なのがgoto-chg.elになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"nb\">goto</span><span class=\"o\">-</span><span class=\"n\">chg</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;goto-chg</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;&lt;f8&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;goto-last-change</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;S-&lt;f8&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;goto-last-change-reverse</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>F8</code>を押すと、前回修正した箇所に移動します。<code>F8</code>を押し続けると、さらに過去の変更箇所に移動することができます。移動しすぎた際には、<code>Shift-F8</code>で元に戻ります。</p>
") (published nil "2012-07-10T08:45:59Z") (updated nil "2012-07-10T08:45:59Z") (author nil (name nil "icb54615")))) ("Emacsで hl-line-mode にしたらカーソル行の文字色が固定されちゃったので直しました" "<p>Emacsでカーソル行をハイライトするモード<code>hl-line-mode</code>を使っていたら、元々なのか途中からそうなってしまったのか定かではありませんが、プログラム用にハイライトされていてもカーソル行の文字色だけ全て同じになっていて見づらいことこの上無かったので直しました。というかいじってたら勝手に直りました。</p>
<p>で、直し方なんですが、<code>hl-line+.el</code>を入れたら直りました。ただ、他にもいじってたので本当にこれが原因なのか分かりません。</p>
<p>僕の環境はMacのiTerm2でEmacs24を使ってます。</p>" "http://qiita.com/items/afe26bb5c8abf694425e" (20473 41837) old 86 nil nil ((id nil "tag:qiita.com,2005:Item/6980") (published nil "2012-07-09T00:12:45+09:00") (updated nil "2012-07-09T00:12:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/afe26bb5c8abf694425e"))) (url nil "http://qiita.com/items/afe26bb5c8abf694425e") (title nil "Emacsで hl-line-mode にしたらカーソル行の文字色が固定されちゃったので直しました") (content ((type . "html")) "<p>Emacsでカーソル行をハイライトするモード<code>hl-line-mode</code>を使っていたら、元々なのか途中からそうなってしまったのか定かではありませんが、プログラム用にハイライトされていてもカーソル行の文字色だけ全て同じになっていて見づらいことこの上無かったので直しました。というかいじってたら勝手に直りました。</p>

<p>で、直し方なんですが、<code>hl-line+.el</code>を入れたら直りました。ただ、他にもいじってたので本当にこれが原因なのか分かりません。</p>

<p>僕の環境はMacのiTerm2でEmacs24を使ってます。</p>
") (published nil "2012-07-09T00:12:45Z") (updated nil "2012-07-09T00:12:45Z") (author nil (name nil "takc923")))) ("yasnippet の新しいスニペットをリージョンから作成する" "<p><a href=\"http://capitaomorte.github.com/yasnippet/\">yasnippet</a> は Emacs でコードを書くときに便利なツール。短い文字列を定義されたスニペットに応じて展開してくれる。</p>
<p>この新しいスニペットを作成するために、関数 yas/new-snippet が用意されているのだが、コードを書いてる時に「ここをスニペットにしておくと今後便利かもしれない」と思うことがあると思う。そういう時のために、新規スニペット作成用のバッファにリージョンの内容を展開する Elisp を書いた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">yas/new-snippet-region</span> <span class=\"p\">(</span><span class=\"k\">&amp;optional</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">no-template</span><span class=\"p\">)</span>
<span class=\"s\">&quot;Pops a new buffer for writing a snippet.</span>
<span class=\"s\">Expands a snippet-writing snippet, unless the optional prefix arg</span>
<span class=\"s\">NO-TEMPLATE is non-nil.&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;rP&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">yas/region-string</span> <span class=\"p\">(</span><span class=\"nv\">buffer-substring-no-properties</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">guessed-directories</span> <span class=\"p\">(</span><span class=\"nv\">yas/guess-snippet-directories</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"s\">&quot;*new snippet*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">erase-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">kill-all-local-variables</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">snippet-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">yas/minor-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">'yas/guessed-modes</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">mapcar</span> <span class=\"nf\">#'</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">d</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">intern</span> <span class=\"p\">(</span><span class=\"nv\">yas/table-name</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nv\">d</span><span class=\"p\">))))</span>
<span class=\"nv\">guessed-directories</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"nv\">no-template</span> <span class=\"p\">(</span><span class=\"nv\">yas/expand-snippet</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"err\">&quot;\\</span>
<span class=\"err\">#</span> <span class=\"nv\">-*-</span> <span class=\"nv\">mode:</span> <span class=\"nv\">snippet</span> <span class=\"nv\">-*-</span>
<span class=\"err\">#</span> <span class=\"nv\">name:</span> <span class=\"nv\">$1</span>
<span class=\"err\">#</span> <span class=\"nv\">key:</span> <span class=\"nv\">${2:${1:$</span><span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"nv\">\\&quot;\\\\\\\\\\\\\\\\</span><span class=\"p\">(</span><span class=\"nv\">\\\\\\\\\\\\\\\\w+\\\\\\\\\\\\\\\\</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nv\">*\\&quot;</span> <span class=\"nv\">\\&quot;\\\\\\\\\\\\\\\\1\\&quot;</span> <span class=\"nv\">yas/text</span><span class=\"p\">)</span><span class=\"nv\">}}</span>
<span class=\"err\">#</span> <span class=\"nv\">--</span>
<span class=\"nv\">%s$0</span><span class=\"err\">&quot;</span> <span class=\"nv\">yas/region-string</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>使い方は、リージョンを指定して M-x yas/new-snippet-region でOK。</p>
<p>「書いた」といっても、yas/new-snippet に (interactive &quot;r&quot;) を追加してその間の文字列を文字列内に挿入しているだけ。また、自分は name: と key: 以外はスニペットに書くことがほとんどないので、テンプレートから残りの項目を削除している。必要なら最後の文字列を元の yas/new-snippet を参照して変更すればいい。</p>
<p>このコードは現在の最新版であるバージョン 0.7 の yas/new-snippet を参考に書いた。yasnippet はコロコロ仕様が変わるから、0.6 系だとおそらく動かない。</p>" "http://qiita.com/items/695f370c596cf99bd647" (20473 6894) old 87 nil nil ((id nil "tag:qiita.com,2005:Item/6972") (published nil "2012-07-08T14:30:22+09:00") (updated nil "2012-07-08T14:30:22+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/695f370c596cf99bd647"))) (url nil "http://qiita.com/items/695f370c596cf99bd647") (title nil "yasnippet の新しいスニペットをリージョンから作成する") (content ((type . "html")) "<p><a href=\"http://capitaomorte.github.com/yasnippet/\">yasnippet</a> は Emacs でコードを書くときに便利なツール。短い文字列を定義されたスニペットに応じて展開してくれる。</p>

<p>この新しいスニペットを作成するために、関数 yas/new-snippet が用意されているのだが、コードを書いてる時に「ここをスニペットにしておくと今後便利かもしれない」と思うことがあると思う。そういう時のために、新規スニペット作成用のバッファにリージョンの内容を展開する Elisp を書いた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">yas/new-snippet-region</span> <span class=\"p\">(</span><span class=\"k\">&amp;optional</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">no-template</span><span class=\"p\">)</span>
  <span class=\"s\">&quot;Pops a new buffer for writing a snippet.</span>

<span class=\"s\">Expands a snippet-writing snippet, unless the optional prefix arg</span>
<span class=\"s\">NO-TEMPLATE is non-nil.&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;rP&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">yas/region-string</span> <span class=\"p\">(</span><span class=\"nv\">buffer-substring-no-properties</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">guessed-directories</span> <span class=\"p\">(</span><span class=\"nv\">yas/guess-snippet-directories</span><span class=\"p\">)))</span>

    <span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"s\">&quot;*new snippet*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">erase-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">kill-all-local-variables</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">snippet-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">yas/minor-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">&#39;yas/guessed-modes</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">mapcar</span> <span class=\"nf\">#&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">d</span><span class=\"p\">)</span>
                                                              <span class=\"p\">(</span><span class=\"nb\">intern</span> <span class=\"p\">(</span><span class=\"nv\">yas/table-name</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nv\">d</span><span class=\"p\">))))</span>
                                                          <span class=\"nv\">guessed-directories</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"nv\">no-template</span> <span class=\"p\">(</span><span class=\"nv\">yas/expand-snippet</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"err\">&quot;\\</span>
<span class=\"err\">#</span> <span class=\"nv\">-*-</span> <span class=\"nv\">mode:</span> <span class=\"nv\">snippet</span> <span class=\"nv\">-*-</span>
<span class=\"err\">#</span> <span class=\"nv\">name:</span> <span class=\"nv\">$1</span>
<span class=\"err\">#</span> <span class=\"nv\">key:</span> <span class=\"nv\">${2:${1:$</span><span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"nv\">\\&quot;\\\\\\\\\\\\\\\\</span><span class=\"p\">(</span><span class=\"nv\">\\\\\\\\\\\\\\\\w+\\\\\\\\\\\\\\\\</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nv\">*\\&quot;</span> <span class=\"nv\">\\&quot;\\\\\\\\\\\\\\\\1\\&quot;</span> <span class=\"nv\">yas/text</span><span class=\"p\">)</span><span class=\"nv\">}}</span>
<span class=\"err\">#</span> <span class=\"nv\">--</span>
<span class=\"nv\">%s$0</span><span class=\"err\">&quot;</span> <span class=\"nv\">yas/region-string</span><span class=\"p\">)))))</span>
</pre>
</div>
</div>
<p>使い方は、リージョンを指定して M-x yas/new-snippet-region でOK。</p>

<p>「書いた」といっても、yas/new-snippet に (interactive &quot;r&quot;) を追加してその間の文字列を文字列内に挿入しているだけ。また、自分は name: と key: 以外はスニペットに書くことがほとんどないので、テンプレートから残りの項目を削除している。必要なら最後の文字列を元の yas/new-snippet を参照して変更すればいい。</p>

<p>このコードは現在の最新版であるバージョン 0.7 の yas/new-snippet を参考に書いた。yasnippet はコロコロ仕様が変わるから、0.6 系だとおそらく動かない。</p>
") (published nil "2012-07-08T14:30:22Z") (updated nil "2012-07-08T14:30:22Z") (author nil (name nil "akisute3@github")))) ("Emacsでファイルを自動保存する auto-save-buffers-enhanced" "<p>auto-save-buffersの機能追加版です、私はこっちを使っています。</p>
<p><a href=\"http://d.hatena.ne.jp/antipop/20080222/1203688543\">auto-save-buffers-enhanced更新 - antipop</a></p>
<h2>インストール</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> <span class=\"s\">&quot;https://raw.github.com/kentaro/auto-save-buffers-enhanced/master/auto-save-buffers-enhanced.el&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>設定</h2>
<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120514/1336983541\">auto-shell-command</a>と一緒に使いたかったのでアイドルタイムを0.5→1秒に伸ばしました。ここは大切なので再調整するかも。auto-shell-commandは実行を一時的にサスペンド出来るのでその機能と組み合わせながら使うことになりそうです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"err\">'</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span><span class=\"o\">-</span><span class=\"n\">interval</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">;</span> <span class=\"err\">指定のアイドル秒で保存</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span> <span class=\"n\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/8cbd8d3c792476c59a11" (20470 16653) old 88 nil nil ((id nil "tag:qiita.com,2005:Item/6913") (published nil "2012-07-06T02:09:51+09:00") (updated nil "2012-07-06T10:36:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8cbd8d3c792476c59a11"))) (url nil "http://qiita.com/items/8cbd8d3c792476c59a11") (title nil "Emacsでファイルを自動保存する auto-save-buffers-enhanced") (content ((type . "html")) "<p>auto-save-buffersの機能追加版です、私はこっちを使っています。</p>

<p><a href=\"http://d.hatena.ne.jp/antipop/20080222/1203688543\">auto-save-buffers-enhanced更新 - antipop</a></p>

<h2>インストール</h2>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> <span class=\"s\">&quot;https://raw.github.com/kentaro/auto-save-buffers-enhanced/master/auto-save-buffers-enhanced.el&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>設定</h2>

<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120514/1336983541\">auto-shell-command</a>と一緒に使いたかったのでアイドルタイムを0.5→1秒に伸ばしました。ここは大切なので再調整するかも。auto-shell-commandは実行を一時的にサスペンド出来るのでその機能と組み合わせながら使うことになりそうです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"err\">&#39;</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span><span class=\"o\">-</span><span class=\"n\">interval</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">;</span> <span class=\"err\">指定のアイドル秒で保存</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"o\">-</span><span class=\"n\">enhanced</span> <span class=\"n\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-07-06T02:09:51Z") (updated nil "2012-07-06T10:36:13Z") (author nil (name nil "ongaeshi")))) ("read-only-only-mode.el" "<p>grepから開いた時とか、自動で view-mode にしたいと思った。</p>
<p><a href=\"https://raw.github.com/10sr/emacs-lisp/master/read-only-only-mode.el\">https://raw.github.com/10sr/emacs-lisp/master/read-only-only-mode.el</a></p>
<p><code>M-x read-only-only-mode</code> でモードをトグルする。有効な時、ファイルを開くと常に view-mode が有効になる。</p>" "http://qiita.com/items/53c85841ca290a6cee52" (20469 9709) old 89 nil nil ((id nil "tag:qiita.com,2005:Item/6893") (published nil "2012-07-05T14:28:13+09:00") (updated nil "2012-07-05T14:28:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/53c85841ca290a6cee52"))) (url nil "http://qiita.com/items/53c85841ca290a6cee52") (title nil "read-only-only-mode.el") (content ((type . "html")) "<p>grepから開いた時とか、自動で view-mode にしたいと思った。</p>

<p><a href=\"https://raw.github.com/10sr/emacs-lisp/master/read-only-only-mode.el\">https://raw.github.com/10sr/emacs-lisp/master/read-only-only-mode.el</a></p>

<p><code>M-x read-only-only-mode</code> でモードをトグルする。有効な時、ファイルを開くと常に view-mode が有効になる。</p>
") (published nil "2012-07-05T14:28:13Z") (updated nil "2012-07-05T14:28:13Z") (author nil (name nil "10sr")))) ("カーソル位置を記録してハイライトする" "<p>ファイル内でカーソル位置を記憶して、いきいきできるようにします。さらに記憶したカーソル位置をハイライトします。</p>
<p>インストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span> <span class=\"n\">http:</span><span class=\"sr\">//c</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">savannah</span><span class=\"o\">.</span><span class=\"n\">gnu</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"sr\">/viewvc/</span><span class=\"o\">*</span><span class=\"n\">checkout</span><span class=\"o\">*</span><span class=\"sr\">/bm/</span><span class=\"n\">bm</span><span class=\"o\">/</span><span class=\"n\">bm</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">setq-default</span> <span class=\"nv\">bm-buffer-persitence</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bm-restore-repository-on-load</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'bm</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'find-file-hooks</span> <span class=\"ss\">'bm-buffer-restore</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'kill-buffer-hook</span> <span class=\"ss\">'bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'after-save-hook</span> <span class=\"ss\">'bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'after-revert-hook</span> <span class=\"ss\">'bm-buffer-restore</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'vc-before-checkin-hook</span> <span class=\"ss\">'bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-SPC&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'bm-toggle</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-[&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'bm-previous</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-]&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'bm-next</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-SPC (bm-toggle)</code>でその行をハイライトします。<code>M-[ (bm-previous)</code>で前の印へ、<code>M-] (bm-next)</code>で次の印へ移動します。</p>
<p>上記の設定でEmacsを終了しても印は記録されます。</p>
<h2>参考</h2>
<p>「Emacsテクニックバイブル」P116</p>" "http://qiita.com/items/98242b51c569e90fdde0" (20469 597) old 90 nil nil ((id nil "tag:qiita.com,2005:Item/6883") (published nil "2012-07-05T11:56:21+09:00") (updated nil "2012-07-05T11:56:21+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/98242b51c569e90fdde0"))) (url nil "http://qiita.com/items/98242b51c569e90fdde0") (title nil "カーソル位置を記録してハイライトする") (content ((type . "html")) "<p>ファイル内でカーソル位置を記憶して、いきいきできるようにします。さらに記憶したカーソル位置をハイライトします。</p>

<p>インストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span> <span class=\"n\">http:</span><span class=\"sr\">//c</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">savannah</span><span class=\"o\">.</span><span class=\"n\">gnu</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"sr\">/viewvc/</span><span class=\"o\">*</span><span class=\"n\">checkout</span><span class=\"o\">*</span><span class=\"sr\">/bm/</span><span class=\"n\">bm</span><span class=\"o\">/</span><span class=\"n\">bm</span><span class=\"o\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">setq-default</span> <span class=\"nv\">bm-buffer-persitence</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bm-restore-repository-on-load</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;bm</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;find-file-hooks</span> <span class=\"ss\">&#39;bm-buffer-restore</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;kill-buffer-hook</span> <span class=\"ss\">&#39;bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;after-save-hook</span> <span class=\"ss\">&#39;bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;after-revert-hook</span> <span class=\"ss\">&#39;bm-buffer-restore</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;vc-before-checkin-hook</span> <span class=\"ss\">&#39;bm-buffer-save</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-SPC&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;bm-toggle</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-[&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;bm-previous</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;M-]&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;bm-next</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-SPC (bm-toggle)</code>でその行をハイライトします。<code>M-[ (bm-previous)</code>で前の印へ、<code>M-] (bm-next)</code>で次の印へ移動します。</p>

<p>上記の設定でEmacsを終了しても印は記録されます。</p>

<h2>参考</h2>

<p>「Emacsテクニックバイブル」P116</p>
") (published nil "2012-07-05T11:56:21Z") (updated nil "2012-07-05T11:56:21Z") (author nil (name nil "icb54615")))) ("Windows+Emacs+xmpfilter を改行コード LF の環境で使用する" "<p>xmpfilter は Ruby 開発に非常に便利なツール。「コード # =&gt;」と記述している行の末尾に，その行の返り値を出力してくれる．Emacs or Vim + Ruby な人はたいてい使っているんじゃないだろうか。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>                           <span class=\"c1\"># =&gt; 3</span>
<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">].</span><span class=\"n\">map</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">}</span>       <span class=\"c1\"># =&gt; [4, 5, 6]</span>
<span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>                          <span class=\"c1\"># =&gt; false</span>
</pre>
</div>
</div>
<p>興味があれば是非使ってみて欲しい。<br>
はてなキーワード → <a href=\"http://d.hatena.ne.jp/keyword/xmpfilter\">http://d.hatena.ne.jp/keyword/xmpfilter</a></p>
<p>さて、本題に移ろう。この xmpfilter、Windows の Emacs で改行コードが LF の環境で使用すると、改行コードを CR+LF に変換して返してくる。これは Ruby が Windows では '\\n' を CR+LF と認識するためである。</p>
<p>この問題は xmpfilter のソースコードを少し弄るだけでなんとかなる。rcodetools-0.8.5.0/bin/xmpfilter の最終行を以下のように変更すればいい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"c1\"># Do the job. dispatched by klass.</span>
<span class=\"c1\"># puts klass.run(targetcode, options)</span>
<span class=\"vg\">$stdout</span><span class=\"o\">.</span><span class=\"n\">binmode</span><span class=\"o\">.</span><span class=\"n\">puts</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">targetcode</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>しっかりテストしたわけでもないが、今のところは期待通りに動いている。同じ症状に困っている人がいれば参考にどうぞ。</p>" "http://qiita.com/items/7209d291655b8fdf281f" (20467 58722) old 91 nil nil ((id nil "tag:qiita.com,2005:Item/6859") (published nil "2012-07-04T15:40:34+09:00") (updated nil "2012-07-04T15:40:34+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7209d291655b8fdf281f"))) (url nil "http://qiita.com/items/7209d291655b8fdf281f") (title nil "Windows+Emacs+xmpfilter を改行コード LF の環境で使用する") (content ((type . "html")) "<p>xmpfilter は Ruby 開発に非常に便利なツール。「コード # =&gt;」と記述している行の末尾に，その行の返り値を出力してくれる．Emacs or Vim + Ruby な人はたいてい使っているんじゃないだろうか。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>                           <span class=\"c1\"># =&gt; 3</span>
<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">].</span><span class=\"n\">map</span> <span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">}</span>       <span class=\"c1\"># =&gt; [4, 5, 6]</span>
<span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>                          <span class=\"c1\"># =&gt; false</span>
</pre>
</div>
</div>
<p>興味があれば是非使ってみて欲しい。<br>
はてなキーワード → <a href=\"http://d.hatena.ne.jp/keyword/xmpfilter\">http://d.hatena.ne.jp/keyword/xmpfilter</a></p>

<p>さて、本題に移ろう。この xmpfilter、Windows の Emacs で改行コードが LF の環境で使用すると、改行コードを CR+LF に変換して返してくる。これは Ruby が Windows では &#39;\\n&#39; を CR+LF と認識するためである。</p>

<p>この問題は xmpfilter のソースコードを少し弄るだけでなんとかなる。rcodetools-0.8.5.0/bin/xmpfilter の最終行を以下のように変更すればいい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Ruby</span></div><div class=\"highlight\"><pre><span class=\"c1\"># Do the job. dispatched by klass.</span>
<span class=\"c1\"># puts klass.run(targetcode, options)</span>
<span class=\"vg\">$stdout</span><span class=\"o\">.</span><span class=\"n\">binmode</span><span class=\"o\">.</span><span class=\"n\">puts</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">targetcode</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>しっかりテストしたわけでもないが、今のところは期待通りに動いている。同じ症状に困っている人がいれば参考にどうぞ。</p>
") (published nil "2012-07-04T15:40:34Z") (updated nil "2012-07-04T15:40:34Z") (author nil (name nil "akisute3@github")))) ("Emacs でカーソル位置のシンボルをハイライト" "<p>Eclipse みたいなやつ。こんなことができる → <a href=\"http://www.youtube.com/watch?v=xzJ2r4-s7fo\">Youtube</a>。</p>
<p>インストールは、<br>
M-x auto-install-from-url <a href=\"https://raw.github.com/mitsuo-saito/auto-highlight-symbol-mode/master/auto-highlight-symbol.el\">https://raw.github.com/mitsuo-saito/auto-highlight-symbol-mode/master/auto-highlight-symbol.el</a><br>
の後に以下を .emacs に記述すればOK。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'auto-highlight-symbol</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-auto-highlight-symbol-mode</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>シンボル間のカーソル移動や、ハイライトされているシンボルを一括リネームできたりして便利。</p>" "http://qiita.com/items/4348839edcf510bdf71d" (20466 63513) old 92 nil nil ((id nil "tag:qiita.com,2005:Item/6827") (published nil "2012-07-03T22:48:09+09:00") (updated nil "2012-07-03T22:48:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4348839edcf510bdf71d"))) (url nil "http://qiita.com/items/4348839edcf510bdf71d") (title nil "Emacs でカーソル位置のシンボルをハイライト") (content ((type . "html")) "<p>Eclipse みたいなやつ。こんなことができる → <a href=\"http://www.youtube.com/watch?v=xzJ2r4-s7fo\">Youtube</a>。</p>

<p>インストールは、<br>
M-x auto-install-from-url <a href=\"https://raw.github.com/mitsuo-saito/auto-highlight-symbol-mode/master/auto-highlight-symbol.el\">https://raw.github.com/mitsuo-saito/auto-highlight-symbol-mode/master/auto-highlight-symbol.el</a><br>
の後に以下を .emacs に記述すればOK。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-highlight-symbol</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-auto-highlight-symbol-mode</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>シンボル間のカーソル移動や、ハイライトされているシンボルを一括リネームできたりして便利。</p>
") (published nil "2012-07-03T22:48:09Z") (updated nil "2012-07-03T22:48:09Z") (author nil (name nil "akisute3@github")))) ("Emacsのclojure-modeを更新したい" "<p>clojure-modeはELPAパッケージを使って入れてたのだが、メンテの流れが滞ってるっぽい?!</p>
<p>ググると<a href=\"http://marmalade-repo.org/\">Marmalade</a>なるリポジトリが良いみたいな？<br>
ELPA完全互換で流れもよさげなので切り替えまする。</p>
<p>ここのサイトからpackage.elをコピペって設置してみる。<br>
書いてあるelispを記述してevalる、いやemacs再起動。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'package)</span>
<span class=\"s\">(add-to-list '</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span>
<span class=\"s\">'</span><span class=\"err\">(&quot;marmalade&quot; .</span>
&quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">marmalade</span><span class=\"o\">-</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>書いてある通りやってみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">refresh</span><span class=\"o\">-</span><span class=\"n\">contents</span>
</pre>
</div>
</div>
<p>さっそくパッケージリスト一覧を見てみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"o\">-</span><span class=\"n\">packages</span>
</pre>
</div>
</div>
<p>リターンキーでコネクトしてくれて一覧とパッケージ情報を表示してくれるので、一覧からclojure-modeをセレクトする。</p>
<p>パッケージ情報のところの<code>Install</code>を押すとインストールしてくれる親切さ、素晴らしい (・∀・)</p>
<p>clojure-modeの設定をinit.elに記述する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'clojure-mode)</span>
<span class=\"s\">(defun turn-on-paredit () (paredit-mode 1))</span>
<span class=\"s\">(add-hook  '</span><span class=\"n\">clojure</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">'</span><span class=\"err\">turn-on-paedit)</span>
</pre>
</div>
</div>
<p>さっそくleiningenでClojureプロジェクトを作ってみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">&gt;</span><span class=\"n\">lein</span> <span class=\"n\">new</span> <span class=\"n\">sample</span>
</pre>
</div>
</div>
<p>emacsでフォルダを開く<br>
<code><br>
C-x C-f sample<br>
</code></p>
<p>ここで<code>M-x clojure-jack-in</code>としたらREPLが自動的に立ち上がった (<em>´∀｀</em>)<br>
こんなにお手軽になってるなんて！素晴らしい。</p>" "http://qiita.com/items/b867758fcc5106382a30" (20464 22250) old 93 nil nil ((id nil "tag:qiita.com,2005:Item/6753") (published nil "2012-07-01T22:55:54+09:00") (updated nil "2012-07-01T22:55:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b867758fcc5106382a30"))) (url nil "http://qiita.com/items/b867758fcc5106382a30") (title nil "Emacsのclojure-modeを更新したい") (content ((type . "html")) "<p>clojure-modeはELPAパッケージを使って入れてたのだが、メンテの流れが滞ってるっぽい?!</p>

<p>ググると<a href=\"http://marmalade-repo.org/\">Marmalade</a>なるリポジトリが良いみたいな？<br>
ELPA完全互換で流れもよさげなので切り替えまする。</p>

<p>ここのサイトからpackage.elをコピペって設置してみる。<br>
書いてあるelispを記述してevalる、いやemacs再起動。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;package)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span> 
    <span class=\"s\">&#39;</span><span class=\"err\">(&quot;marmalade&quot; .</span>
      &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">marmalade</span><span class=\"o\">-</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>書いてある通りやってみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">refresh</span><span class=\"o\">-</span><span class=\"n\">contents</span>    
</pre>
</div>
</div>
<p>さっそくパッケージリスト一覧を見てみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"o\">-</span><span class=\"n\">packages</span>
</pre>
</div>
</div>
<p>リターンキーでコネクトしてくれて一覧とパッケージ情報を表示してくれるので、一覧からclojure-modeをセレクトする。</p>

<p>パッケージ情報のところの<code>Install</code>を押すとインストールしてくれる親切さ、素晴らしい (・∀・)</p>

<p>clojure-modeの設定をinit.elに記述する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;clojure-mode)</span>
<span class=\"s\">(defun turn-on-paredit () (paredit-mode 1))</span>
<span class=\"s\">(add-hook  &#39;</span><span class=\"n\">clojure</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;</span><span class=\"err\">turn-on-paedit)</span>
</pre>
</div>
</div>
<p>さっそくleiningenでClojureプロジェクトを作ってみる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">&gt;</span><span class=\"n\">lein</span> <span class=\"n\">new</span> <span class=\"n\">sample</span>
</pre>
</div>
</div>
<p>emacsでフォルダを開く<br>
<code><br>
C-x C-f sample<br>
</code></p>

<p>ここで<code>M-x clojure-jack-in</code>としたらREPLが自動的に立ち上がった (<em>´∀｀</em>)<br>
こんなにお手軽になってるなんて！素晴らしい。</p>
") (published nil "2012-07-01T22:55:54Z") (updated nil "2012-07-01T22:55:54Z") (author nil (name nil "gokoku_h")))) ("カーソルの位置を戻す" "<p>point-undoを使うと、カーソルが変なところに行ってしまっても元の位置にに戻すことができます。</p>
<p>インストールは、</p>
<p><code>M-x install-elisp-from-emacswiki point-undo.el</code></p>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'point-undo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;&lt;f7&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'point-undo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;S-&lt;f7&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'point-redo</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>F7</code>を押すとカーソルが元の位置に戻ります。連続して押すこともできます。戻りすぎてしまった場合は、<code>S-F7</code>ことで戻ったのを戻すことができます。</p>
<h2>参考</h2>
<p>「Emacsテクニックバイブル」P115</p>" "http://qiita.com/items/5ff996a5c708631824aa" (20459 57407) old 94 nil nil ((id nil "tag:qiita.com,2005:Item/6680") (published nil "2012-06-28T13:40:31+09:00") (updated nil "2012-06-28T13:40:31+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5ff996a5c708631824aa"))) (url nil "http://qiita.com/items/5ff996a5c708631824aa") (title nil "カーソルの位置を戻す") (content ((type . "html")) "<p>point-undoを使うと、カーソルが変なところに行ってしまっても元の位置にに戻すことができます。</p>

<p>インストールは、</p>

<p><code>M-x install-elisp-from-emacswiki point-undo.el</code></p>

<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;point-undo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;&lt;f7&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;point-undo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;S-&lt;f7&gt;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;point-redo</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>F7</code>を押すとカーソルが元の位置に戻ります。連続して押すこともできます。戻りすぎてしまった場合は、<code>S-F7</code>ことで戻ったのを戻すことができます。</p>

<h2>参考</h2>

<p>「Emacsテクニックバイブル」P115</p>
") (published nil "2012-06-28T13:40:31Z") (updated nil "2012-06-28T13:40:31Z") (author nil (name nil "icb54615")))) ("Windows で無変換キーをプレフィックスキーとして利用する。" "<p>私はこのような設定をで無変換キーをプレフィックスキーとして利用しています。</p>
<p>(when (eq system-type 'windows-nt)<br>
(defvar non-convert-map (make-keymap))<br>
(define-key global-map (kbd &quot;&quot;) non-convert-map)<br>
)</p>
<p>これで、<br>
(define-key non-convert-map (kbd &quot;キー&quot;) '関数名)<br>
のように定義できます。</p>
<p>わざわざキーマップを定義しなくても、<br>
(global-set-key (kbd &quot;キー&quot;) '関数名)<br>
でもできます。</p>
<p>アプリケーションキーなども使えると思いますがそちらは試していません。</p>
<p>Emacs 側にどのような名前で認識されているかは、<br>
キーを押した時に、エコーエリアに表示されるメッセージから<br>
知ることができます。</p>" "http://qiita.com/items/f66cb8c76cdff729826c" (20459 4886) old 95 nil nil ((id nil "tag:qiita.com,2005:Item/6660") (published nil "2012-06-27T23:05:10+09:00") (updated nil "2012-06-27T23:05:10+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f66cb8c76cdff729826c"))) (url nil "http://qiita.com/items/f66cb8c76cdff729826c") (title nil "Windows で無変換キーをプレフィックスキーとして利用する。") (content ((type . "html")) "<p>私はこのような設定をで無変換キーをプレフィックスキーとして利用しています。</p>

<p>(when (eq system-type &#39;windows-nt)<br>
 (defvar non-convert-map (make-keymap))<br>
 (define-key global-map (kbd &quot;&quot;) non-convert-map)<br>
 )</p>

<p>これで、<br>
(define-key non-convert-map (kbd &quot;キー&quot;) &#39;関数名)<br>
のように定義できます。</p>

<p>わざわざキーマップを定義しなくても、<br>
(global-set-key (kbd &quot;キー&quot;) &#39;関数名)<br>
でもできます。</p>

<p>アプリケーションキーなども使えると思いますがそちらは試していません。</p>

<p>Emacs 側にどのような名前で認識されているかは、<br>
キーを押した時に、エコーエリアに表示されるメッセージから<br>
知ることができます。</p>
") (published nil "2012-06-27T23:05:10Z") (updated nil "2012-06-27T23:05:10Z") (author nil (name nil "Fenril058")))) ("Ubuntu11.10にmigemoをいれる" "<p>ローマ字でインクリメンタルサーチできるようにmigemoをいれました。</p>
<p>Ubuntu11.10でRuby実装のmigemoをパッケージでいれたのですがうまく動作しなかったので、cmigemoを使うことにしました。</p>
<p>標準ではcmigemoのパッケージはないのでPPAをリポジトリに追加します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">repository</span> <span class=\"n\">ppa</span><span class=\"p\">:</span><span class=\"n\">kakurasan</span><span class=\"o\">/</span><span class=\"n\">stable</span>
$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">update</span>
</pre>
</div>
</div>
<p>elispが必要なので、migemoをいれておきます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">migemo</span>
</pre>
</div>
</div>
<p>cmigemoをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">cmigemo</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">load</span> <span class=\"s\">&quot;migemo&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-coding-system</span> <span class=\"ss\">'euc-jp-unix</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-command</span> <span class=\"s\">&quot;cmigemo&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-options</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;-q&quot;</span> <span class=\"s\">&quot;--emacs&quot;</span> <span class=\"s\">&quot;-i&quot;</span> <span class=\"s\">&quot;\\a&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-user-dictionary</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-regex-dictionary</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/910b2672f5d0949c66cc" (20458 54635) old 96 nil nil ((id nil "tag:qiita.com,2005:Item/6648") (published nil "2012-06-27T18:42:03+09:00") (updated nil "2012-06-27T18:42:03+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/910b2672f5d0949c66cc"))) (url nil "http://qiita.com/items/910b2672f5d0949c66cc") (title nil "Ubuntu11.10にmigemoをいれる") (content ((type . "html")) "<p>ローマ字でインクリメンタルサーチできるようにmigemoをいれました。</p>

<p>Ubuntu11.10でRuby実装のmigemoをパッケージでいれたのですがうまく動作しなかったので、cmigemoを使うことにしました。</p>

<p>標準ではcmigemoのパッケージはないのでPPAをリポジトリに追加します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">repository</span> <span class=\"n\">ppa</span><span class=\"p\">:</span><span class=\"n\">kakurasan</span><span class=\"o\">/</span><span class=\"n\">stable</span>
$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">update</span>
</pre>
</div>
</div>
<p>elispが必要なので、migemoをいれておきます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">migemo</span>
</pre>
</div>
</div>
<p>cmigemoをいれます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">cmigemo</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">load</span> <span class=\"s\">&quot;migemo&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-coding-system</span> <span class=\"ss\">&#39;euc-jp-unix</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-command</span> <span class=\"s\">&quot;cmigemo&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-options</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;-q&quot;</span> <span class=\"s\">&quot;--emacs&quot;</span> <span class=\"s\">&quot;-i&quot;</span> <span class=\"s\">&quot;\\a&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-user-dictionary</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">migemo-regex-dictionary</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-27T18:42:03Z") (updated nil "2012-06-27T18:42:03Z") (author nil (name nil "icb54615")))) ("Flymake を有効にしていると Magit の Ediff でエラーが発生する" "<p>Ruby でファイルを開くと Flymake が有効になるように設定しているのだが、Magit で e を押して Ediff による比較をするとき、以下のようなエラーが発生する。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">filter</span><span class=\"p\">:</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">and</span><span class=\"o\">-</span><span class=\"n\">masks</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">filter</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">sentinel</span><span class=\"p\">:</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">and</span><span class=\"o\">-</span><span class=\"n\">masks</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">sentinel</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
</pre>
</div>
</div>
<p>Ediff が使えないわけではないのだが、Magit で Ediff を起動した直後はエラー発生で固まって非常に鬱陶しいのでいろいろ調べてみた。</p>
<p>発生箇所は magit.el の magit-show 関数内部、2769行目の (normal-mode) のようだ。ここで flymake-mode がロードされ、最終的に flymake.el の flymake-get-file-name-mode-and-masks 関数内部、289行目で引数のファイル名が不正なためにエラーを出力している。</p>
<p>ステップ実行だとエラーを出力しないので外部プロセス関連かとは思うのだが、原因究明はあまりにも面倒なので以下のように応急処置で対処することにした。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">magit-ediff</span> <span class=\"p\">(</span><span class=\"nv\">around</span> <span class=\"nv\">flymake-off</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">'ruby-mode-hook</span> <span class=\"ss\">'ruby-flymake-hooks</span><span class=\"p\">)</span>
<span class=\"nv\">ad-do-it</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'ruby-mode-hook</span> <span class=\"ss\">'ruby-flymake-hooks</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>magit-ediff 開始時に Ruby の Flymake 関連のフックを削除し、Ediff の準備が完了したら元に戻すというもの。とりあえずエラーが発生しなくなったので、原因がわかるまではこれで凌ごうと思う。</p>
<p>もしも同じ問題を解決した人がいれば是非教えてほしい。</p>" "http://qiita.com/items/54f0387284ac57c106c0" (20459 5099) old 97 nil nil ((id nil "tag:qiita.com,2005:Item/6629") (published nil "2012-06-27T02:09:22+09:00") (updated nil "2012-06-27T23:08:43+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/54f0387284ac57c106c0"))) (url nil "http://qiita.com/items/54f0387284ac57c106c0") (title nil "Flymake を有効にしていると Magit の Ediff でエラーが発生する") (content ((type . "html")) "<p>Ruby でファイルを開くと Flymake が有効になるように設定しているのだが、Magit で e を押して Ediff による比較をするとき、以下のようなエラーが発生する。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">filter</span><span class=\"p\">:</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">and</span><span class=\"o\">-</span><span class=\"n\">masks</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">filter</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">sentinel</span><span class=\"p\">:</span> <span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">and</span><span class=\"o\">-</span><span class=\"n\">masks</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
<span class=\"n\">error</span> <span class=\"n\">in</span> <span class=\"n\">process</span> <span class=\"n\">sentinel</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span>
</pre>
</div>
</div>
<p>Ediff が使えないわけではないのだが、Magit で Ediff を起動した直後はエラー発生で固まって非常に鬱陶しいのでいろいろ調べてみた。</p>

<p>発生箇所は magit.el の magit-show 関数内部、2769行目の (normal-mode) のようだ。ここで flymake-mode がロードされ、最終的に flymake.el の flymake-get-file-name-mode-and-masks 関数内部、289行目で引数のファイル名が不正なためにエラーを出力している。</p>

<p>ステップ実行だとエラーを出力しないので外部プロセス関連かとは思うのだが、原因究明はあまりにも面倒なので以下のように応急処置で対処することにした。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">magit-ediff</span> <span class=\"p\">(</span><span class=\"nv\">around</span> <span class=\"nv\">flymake-off</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">&#39;ruby-mode-hook</span> <span class=\"ss\">&#39;ruby-flymake-hooks</span><span class=\"p\">)</span>
  <span class=\"nv\">ad-do-it</span>
  <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;ruby-mode-hook</span> <span class=\"ss\">&#39;ruby-flymake-hooks</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>magit-ediff 開始時に Ruby の Flymake 関連のフックを削除し、Ediff の準備が完了したら元に戻すというもの。とりあえずエラーが発生しなくなったので、原因がわかるまではこれで凌ごうと思う。</p>

<p>もしも同じ問題を解決した人がいれば是非教えてほしい。</p>
") (published nil "2012-06-27T02:09:22Z") (updated nil "2012-06-27T23:08:43Z") (author nil (name nil "akisute3@github")))) ("リモートのファイルを操作する" "<p>リモートファイルを操作するときのやり方をメモしておきます。</p>
<p>リモートファイル名の書式は「/METHOD:USERNAME@HOSTNAME:FILENAME」になります。</p>
<p>ここでMETHODには、ssh ,rsh, telnet, su, sudo がはいります。</p>
<p>sshでユーザ「foo」がホスト「ruby」にある<code>~/.bash_profile</code>を編集するには、<code>C-x C-f /ssh:foo@ruby:~/.bash_profile</code>を実行します。</p>
<p>また、root権限で<code>/etc/passwd</code>を編集するときは、<code>C-x C-f /sudo:root@localhost:/etc/passwd</code>を実行します。</p>" "http://qiita.com/items/c4955b7950cada2786b4" (20455 35724) old 98 nil nil ((id nil "tag:qiita.com,2005:Item/6528") (published nil "2012-06-25T06:50:04+09:00") (updated nil "2012-06-25T06:50:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c4955b7950cada2786b4"))) (url nil "http://qiita.com/items/c4955b7950cada2786b4") (title nil "リモートのファイルを操作する") (content ((type . "html")) "<p>リモートファイルを操作するときのやり方をメモしておきます。</p>

<p>リモートファイル名の書式は「/METHOD:USERNAME@HOSTNAME:FILENAME」になります。</p>

<p>ここでMETHODには、ssh ,rsh, telnet, su, sudo がはいります。</p>

<p>sshでユーザ「foo」がホスト「ruby」にある<code>~/.bash_profile</code>を編集するには、<code>C-x C-f /ssh:foo@ruby:~/.bash_profile</code>を実行します。</p>

<p>また、root権限で<code>/etc/passwd</code>を編集するときは、<code>C-x C-f /sudo:root@localhost:/etc/passwd</code>を実行します。</p>
") (published nil "2012-06-25T06:50:04Z") (updated nil "2012-06-25T06:50:04Z") (author nil (name nil "icb54615")))) ("ghc-mod の flymake でファイルを勝手に保存させない" "<p>「&gt; Also, a timer executes syntax check automatically.」ってあるけどあんま嬉しくない。</p>
<p><a href=\"https://gist.github.com/2983617\">https://gist.github.com/2983617</a> で様子見ることにする。</p>" "http://qiita.com/items/60f2d6b5d83db653d719" (20455 13969) old 99 nil nil ((id nil "tag:qiita.com,2005:Item/6525") (published nil "2012-06-25T00:47:29+09:00") (updated nil "2012-06-25T00:47:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/60f2d6b5d83db653d719"))) (url nil "http://qiita.com/items/60f2d6b5d83db653d719") (title nil "ghc-mod の flymake でファイルを勝手に保存させない") (content ((type . "html")) "<p>「&gt; Also, a timer executes syntax check automatically.」ってあるけどあんま嬉しくない。</p>

<p><a href=\"https://gist.github.com/2983617\">https://gist.github.com/2983617</a> で様子見ることにする。</p>
") (published nil "2012-06-25T00:47:29Z") (updated nil "2012-06-25T00:47:29Z") (author nil (name nil "hiratara")))) ("flymake で一時ファイルの出力先をファイルと同じディレクトリにしない" "<p>Dropbox 内部でプログラムを書いていると、頻繁にファイルのアップロードと削除が行われて嫌だったので調べてみた。</p>
<p>結論としては、<code>flymake-create-temp-inplace</code> ではなく <code>flymake-create-temp-with-folder-structure</code> を使用すれば良さそうだ。例えば Ruby であればこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">flymake-ruby-init</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">temp-file</span>   <span class=\"p\">(</span><span class=\"nv\">flymake-init-create-temp-buffer-copy</span>
<span class=\"c1\">;; 'flymake-create-temp-inplace ← ここを変更</span>
<span class=\"ss\">'flymake-create-temp-with-folder-structure</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">local-file</span>  <span class=\"p\">(</span><span class=\"nv\">file-relative-name</span>
<span class=\"nv\">temp-file</span>
<span class=\"p\">(</span><span class=\"nv\">file-name-directory</span> <span class=\"nv\">buffer-file-name</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;ruby&quot;</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;-c&quot;</span> <span class=\"nv\">local-file</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>まあ temp-file を書き換えればどうにでもなるわけだけど、わざわざ関数が用意されてるのでそれを使わせてもらうことにする。</p>
<p>ちなみに私の環境だとこの設定によって、/tmp 以下に絶対パスのディレクトリ構成を作成し、そこにソースファイルを作成するようになった。あと、パスの途中にピリオドの入ったディレクトリが存在するとエラーが出るようなので注意。</p>" "http://qiita.com/items/139b5f4590f120c301a7" (20455 12558) old 100 nil nil ((id nil "tag:qiita.com,2005:Item/6524") (published nil "2012-06-25T00:23:58+09:00") (updated nil "2012-06-25T00:23:58+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/139b5f4590f120c301a7"))) (url nil "http://qiita.com/items/139b5f4590f120c301a7") (title nil "flymake で一時ファイルの出力先をファイルと同じディレクトリにしない") (content ((type . "html")) "<p>Dropbox 内部でプログラムを書いていると、頻繁にファイルのアップロードと削除が行われて嫌だったので調べてみた。</p>

<p>結論としては、<code>flymake-create-temp-inplace</code> ではなく <code>flymake-create-temp-with-folder-structure</code> を使用すれば良さそうだ。例えば Ruby であればこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">flymake-ruby-init</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">temp-file</span>   <span class=\"p\">(</span><span class=\"nv\">flymake-init-create-temp-buffer-copy</span>
                       <span class=\"c1\">;; &#39;flymake-create-temp-inplace ← ここを変更</span>
                       <span class=\"ss\">&#39;flymake-create-temp-with-folder-structure</span><span class=\"p\">))</span>
         <span class=\"p\">(</span><span class=\"nv\">local-file</span>  <span class=\"p\">(</span><span class=\"nv\">file-relative-name</span>
                       <span class=\"nv\">temp-file</span>
                       <span class=\"p\">(</span><span class=\"nv\">file-name-directory</span> <span class=\"nv\">buffer-file-name</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;ruby&quot;</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;-c&quot;</span> <span class=\"nv\">local-file</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>まあ temp-file を書き換えればどうにでもなるわけだけど、わざわざ関数が用意されてるのでそれを使わせてもらうことにする。</p>

<p>ちなみに私の環境だとこの設定によって、/tmp 以下に絶対パスのディレクトリ構成を作成し、そこにソースファイルを作成するようになった。あと、パスの途中にピリオドの入ったディレクトリが存在するとエラーが出るようなので注意。</p>
") (published nil "2012-06-25T00:23:58Z") (updated nil "2012-06-25T00:23:58Z") (author nil (name nil "akisute3@github")))) ("terminal上のEmacsでmetaキーをoptionキーに割り当てる" "<p>デフォだとescキーしか反応しない</p>
<p>terminalの環境設定 &gt; 設定タブ &gt; キーボード <br>
メタキーとしてoptionキーを使用 にチェックしてOK</p>" "http://qiita.com/items/ff857598019f07c4023a" (20452 41133) old 101 nil nil ((id nil "tag:qiita.com,2005:Item/6472") (published nil "2012-06-23T01:43:25+09:00") (updated nil "2012-06-23T01:43:25+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ff857598019f07c4023a"))) (url nil "http://qiita.com/items/ff857598019f07c4023a") (title nil "terminal上のEmacsでmetaキーをoptionキーに割り当てる") (content ((type . "html")) "<p>デフォだとescキーしか反応しない</p>

<p>terminalの環境設定 &gt; 設定タブ &gt; キーボード <br>
メタキーとしてoptionキーを使用 にチェックしてOK</p>
") (published nil "2012-06-23T01:43:25Z") (updated nil "2012-06-23T01:43:25Z") (author nil (name nil "flada_auxv")))) ("ELPA (Emacs Lisp Package Archive)" "<p>ELPAはemacsのパッケージマネージャー。emacs24以降はbuild-inされているが、24以前は自分でインストールする必要がある。</p>
<h2>ELPAのインストール (emacs24以前)</h2>
<p>下記サイトにインストール方法が載っているのでそれに従ってインストールする。<br>
-&gt; <a href=\"http://tromey.com/elpa/install.html\">http://tromey.com/elpa/install.html</a></p>
<h2>HowTo</h2>
<p>emacsを開いて</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>M-x list-packages <span class=\"o\">[</span>ret<span class=\"o\">]</span>
</pre>
</div>
</div>
<p>で起動。インストールしたパッケージを<code>i</code> で選択する。最後に<code>x</code>を押して選択したパッケージのインストールが始まる。インストールしたパッケージはデフォルトでは<code>.emacs.d/elpa/</code>に保存される。</p>
<p>またパッケージの取得先も追加することができ、<code>.emacs.d/init.el</code>に以下を追加する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'package</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'package-archives</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;melpa&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'package-archives</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;marmalade&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://marmalade-repo.org/packages/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">package-initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ELPAを開くとパッケージ候補が増えてます。</p>" "http://qiita.com/items/7a1111408c679c4478d8" (20452 13915) old 102 nil nil ((id nil "tag:qiita.com,2005:Item/6462") (published nil "2012-06-22T17:40:12+09:00") (updated nil "2012-06-22T18:09:47+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7a1111408c679c4478d8"))) (url nil "http://qiita.com/items/7a1111408c679c4478d8") (title nil "ELPA (Emacs Lisp Package Archive)") (content ((type . "html")) "<p>ELPAはemacsのパッケージマネージャー。emacs24以降はbuild-inされているが、24以前は自分でインストールする必要がある。</p>

<h2>ELPAのインストール (emacs24以前)</h2>

<p>下記サイトにインストール方法が載っているのでそれに従ってインストールする。<br>
-&gt; <a href=\"http://tromey.com/elpa/install.html\">http://tromey.com/elpa/install.html</a></p>

<h2>HowTo</h2>

<p>emacsを開いて</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>M-x list-packages <span class=\"o\">[</span>ret<span class=\"o\">]</span>
</pre>
</div>
</div>
<p>で起動。インストールしたパッケージを<code>i</code> で選択する。最後に<code>x</code>を押して選択したパッケージのインストールが始まる。インストールしたパッケージはデフォルトでは<code>.emacs.d/elpa/</code>に保存される。</p>

<p>またパッケージの取得先も追加することができ、<code>.emacs.d/init.el</code>に以下を追加する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;package</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;package-archives</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;melpa&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;package-archives</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;marmalade&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://marmalade-repo.org/packages/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">package-initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ELPAを開くとパッケージ候補が増えてます。</p>
") (published nil "2012-06-22T17:40:12Z") (updated nil "2012-06-22T18:09:47Z") (author nil (name nil "y_takagi")))) ("ディレクトリ内のファイル名を一括で変更する" "<p>diredで開いているディレクトリを編集してファイル面を一括で変更できるようにします。</p>
<p>操作を簡単にするために下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; wdired.el</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;r&quot;</span> <span class=\"ss\">'wdired-change-to-wdired-mode</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ディレクトリをdiredモードで開いた状態で<code>r</code>を押します。</p>
<p>この状態でバッファを編集し、変更したいファイル名にします。<code>M-!</code>で置換などもできます。</p>
<p><code>C-c C-c</code>か<code>C-x C-s</code>を押すと編集した内容でファイル名が変更されます。<code>C-c C-k</code>で編集した内容を破棄します。</p>
<p>これをシェルでやろうとすると結構手間です。このやり方でやるとEmacsの置換機能を最大限活用できるのですごく便利です。</p>
<h2>参考文献</h2>
<p>「Emacsテクニックバイブル」P102</p>" "http://qiita.com/items/2523a3ce0b712e42b720" (20451 58993) old 103 nil nil ((id nil "tag:qiita.com,2005:Item/6453") (published nil "2012-06-22T12:28:49+09:00") (updated nil "2012-06-22T12:28:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2523a3ce0b712e42b720"))) (url nil "http://qiita.com/items/2523a3ce0b712e42b720") (title nil "ディレクトリ内のファイル名を一括で変更する") (content ((type . "html")) "<p>diredで開いているディレクトリを編集してファイル面を一括で変更できるようにします。</p>

<p>操作を簡単にするために下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; wdired.el</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;r&quot;</span> <span class=\"ss\">&#39;wdired-change-to-wdired-mode</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ディレクトリをdiredモードで開いた状態で<code>r</code>を押します。</p>

<p>この状態でバッファを編集し、変更したいファイル名にします。<code>M-!</code>で置換などもできます。</p>

<p><code>C-c C-c</code>か<code>C-x C-s</code>を押すと編集した内容でファイル名が変更されます。<code>C-c C-k</code>で編集した内容を破棄します。</p>

<p>これをシェルでやろうとすると結構手間です。このやり方でやるとEmacsの置換機能を最大限活用できるのですごく便利です。</p>

<h2>参考文献</h2>

<p>「Emacsテクニックバイブル」P102</p>
") (published nil "2012-06-22T12:28:49Z") (updated nil "2012-06-22T12:28:49Z") (author nil (name nil "icb54615")))) ("分割したウィンドウの大きさを変更する" "<p>いままでノートPCで開発をしていた時は画面も小さかったのであまりバッファは分割していませんでした。最近広いモニタにしてバッファを分割することが多くなり、分割バッファの幅を変えるのに<code>C-x {</code>や<code>C-x }</code>でやっており結構面倒でした。</p>
<p>ネットで調べていいのがあったのでその設定をメモしておきます。</p>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">window-resizer</span> <span class=\"p\">()</span>
<span class=\"s\">&quot;Control window size and position.&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">window-obj</span> <span class=\"p\">(</span><span class=\"nv\">selected-window</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">current-width</span> <span class=\"p\">(</span><span class=\"nv\">window-width</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">current-height</span> <span class=\"p\">(</span><span class=\"nv\">window-height</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">dx</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nv\">window-edges</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">1</span>
<span class=\"mi\">-1</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">dy</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nv\">window-edges</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">1</span>
<span class=\"mi\">-1</span><span class=\"p\">))</span>
<span class=\"nv\">action</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">catch</span> <span class=\"ss\">'end-flag</span>
<span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"no\">t</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">action</span>
<span class=\"p\">(</span><span class=\"nv\">read-key-sequence-vector</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;size[%dx%d]&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">window-width</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">window-height</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">c</span> <span class=\"p\">(</span><span class=\"nb\">aref</span> <span class=\"nv\">action</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">cond</span> <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?l</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">enlarge-window-horizontally</span> <span class=\"nv\">dx</span><span class=\"p\">))</span>
<span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?h</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">shrink-window-horizontally</span> <span class=\"nv\">dx</span><span class=\"p\">))</span>
<span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?j</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">enlarge-window</span> <span class=\"nv\">dy</span><span class=\"p\">))</span>
<span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?k</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">shrink-window</span> <span class=\"nv\">dy</span><span class=\"p\">))</span>
<span class=\"c1\">;; otherwise</span>
<span class=\"p\">(</span><span class=\"no\">t</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">last-command-char</span> <span class=\"p\">(</span><span class=\"nb\">aref</span> <span class=\"nv\">action</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">command</span> <span class=\"p\">(</span><span class=\"nv\">key-binding</span> <span class=\"nv\">action</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">command</span>
<span class=\"p\">(</span><span class=\"nv\">call-interactively</span> <span class=\"nv\">command</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Quit&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">throw</span> <span class=\"ss\">'end-flag</span> <span class=\"no\">t</span><span class=\"p\">)))))))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\C-c\\C-r&quot;</span> <span class=\"ss\">'window-resizer</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、Emacsを再起動し、分割されたバッファで<code>C-c C-r</code>をして、<code>h</code>を押すと境界線が左に、<code>j</code>を押すと下に、<code>k</code>を押すと上に、<code>l</code>を押すと右に移動します。</p>
<p>これは直感的でわかりやすいです。</p>
<h2>参考URL</h2>
<p><a href=\"http://d.hatena.ne.jp/mooz/20100119/p1\">http://d.hatena.ne.jp/mooz/20100119/p1</a><br>
<a href=\"http://d.hatena.ne.jp/khiker/20100119/window_resize\">http://d.hatena.ne.jp/khiker/20100119/window_resize</a></p>" "http://qiita.com/items/b04be54caf46d2bf721a" (20450 44421) old 104 nil nil ((id nil "tag:qiita.com,2005:Item/6424") (published nil "2012-06-21T14:13:41+09:00") (updated nil "2012-06-21T14:13:41+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b04be54caf46d2bf721a"))) (url nil "http://qiita.com/items/b04be54caf46d2bf721a") (title nil "分割したウィンドウの大きさを変更する") (content ((type . "html")) "<p>いままでノートPCで開発をしていた時は画面も小さかったのであまりバッファは分割していませんでした。最近広いモニタにしてバッファを分割することが多くなり、分割バッファの幅を変えるのに<code>C-x {</code>や<code>C-x }</code>でやっており結構面倒でした。</p>

<p>ネットで調べていいのがあったのでその設定をメモしておきます。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">window-resizer</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;Control window size and position.&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">window-obj</span> <span class=\"p\">(</span><span class=\"nv\">selected-window</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">current-width</span> <span class=\"p\">(</span><span class=\"nv\">window-width</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">current-height</span> <span class=\"p\">(</span><span class=\"nv\">window-height</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">dx</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nv\">window-edges</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">1</span>
              <span class=\"mi\">-1</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">dy</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nv\">window-edges</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mi\">1</span>
              <span class=\"mi\">-1</span><span class=\"p\">))</span>
        <span class=\"nv\">action</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">catch</span> <span class=\"ss\">&#39;end-flag</span>
      <span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"no\">t</span>
        <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">action</span>
              <span class=\"p\">(</span><span class=\"nv\">read-key-sequence-vector</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;size[%dx%d]&quot;</span>
                                                <span class=\"p\">(</span><span class=\"nv\">window-width</span><span class=\"p\">)</span>
                                                <span class=\"p\">(</span><span class=\"nv\">window-height</span><span class=\"p\">))))</span>
        <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">c</span> <span class=\"p\">(</span><span class=\"nb\">aref</span> <span class=\"nv\">action</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nb\">cond</span> <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?l</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">enlarge-window-horizontally</span> <span class=\"nv\">dx</span><span class=\"p\">))</span>
              <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?h</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">shrink-window-horizontally</span> <span class=\"nv\">dx</span><span class=\"p\">))</span>
              <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?j</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">enlarge-window</span> <span class=\"nv\">dy</span><span class=\"p\">))</span>
              <span class=\"p\">((</span><span class=\"nb\">=</span> <span class=\"nv\">c</span> <span class=\"nv\">?k</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">shrink-window</span> <span class=\"nv\">dy</span><span class=\"p\">))</span>
              <span class=\"c1\">;; otherwise</span>
              <span class=\"p\">(</span><span class=\"no\">t</span>
               <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">last-command-char</span> <span class=\"p\">(</span><span class=\"nb\">aref</span> <span class=\"nv\">action</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
                     <span class=\"p\">(</span><span class=\"nv\">command</span> <span class=\"p\">(</span><span class=\"nv\">key-binding</span> <span class=\"nv\">action</span><span class=\"p\">)))</span>
                 <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">command</span>
                   <span class=\"p\">(</span><span class=\"nv\">call-interactively</span> <span class=\"nv\">command</span><span class=\"p\">)))</span>
               <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Quit&quot;</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"k\">throw</span> <span class=\"ss\">&#39;end-flag</span> <span class=\"no\">t</span><span class=\"p\">)))))))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\C-c\\C-r&quot;</span> <span class=\"ss\">&#39;window-resizer</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで、Emacsを再起動し、分割されたバッファで<code>C-c C-r</code>をして、<code>h</code>を押すと境界線が左に、<code>j</code>を押すと下に、<code>k</code>を押すと上に、<code>l</code>を押すと右に移動します。</p>

<p>これは直感的でわかりやすいです。</p>

<h2>参考URL</h2>

<p><a href=\"http://d.hatena.ne.jp/mooz/20100119/p1\">http://d.hatena.ne.jp/mooz/20100119/p1</a><br>
<a href=\"http://d.hatena.ne.jp/khiker/20100119/window_resize\">http://d.hatena.ne.jp/khiker/20100119/window_resize</a></p>
") (published nil "2012-06-21T14:13:41Z") (updated nil "2012-06-21T14:13:41Z") (author nil (name nil "icb54615")))) ("dired でファイルのフルパスを簡単に killing" "<p>dired は w でカーソル位置(もしくはマークしているファイル)のファイル名を killing できる。このとき、プレフィックスが 0 であればフルパスを killing するのだが、プレフィックス 0 は入力するのが面倒。なので C-u w で (すなわち、プレフィックス 4 で) フルパスを killing できるようにしてみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">dired-copy-filename-as-kill</span> <span class=\"p\">(</span><span class=\"nv\">before</span> <span class=\"nv\">four-prefix</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;P&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"mi\">4</span> <span class=\"p\">(</span><span class=\"nv\">prefix-numeric-value</span> <span class=\"p\">(</span><span class=\"nv\">ad-get-arg</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">ad-set-arg</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>この設定の問題は、プレフィックスが 1 以上 (n) であればカーソル以下 n 個のファイル名を killing するという機能のうち n = 4 が使えなくなることである。また、本来 C-u を入力することで得られる default-directory からの相対パスも取得できなくなる。絶対パスを取得する機会が少ないなら設定しない方がいいかと。</p>" "http://qiita.com/items/3737b15b37fed8f39c99" (20449 59899) old 105 nil nil ((id nil "tag:qiita.com,2005:Item/6407") (published nil "2012-06-21T00:19:23+09:00") (updated nil "2012-06-21T00:19:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3737b15b37fed8f39c99"))) (url nil "http://qiita.com/items/3737b15b37fed8f39c99") (title nil "dired でファイルのフルパスを簡単に killing") (content ((type . "html")) "<p>dired は w でカーソル位置(もしくはマークしているファイル)のファイル名を killing できる。このとき、プレフィックスが 0 であればフルパスを killing するのだが、プレフィックス 0 は入力するのが面倒。なので C-u w で (すなわち、プレフィックス 4 で) フルパスを killing できるようにしてみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">dired-copy-filename-as-kill</span> <span class=\"p\">(</span><span class=\"nv\">before</span> <span class=\"nv\">four-prefix</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;P&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"mi\">4</span> <span class=\"p\">(</span><span class=\"nv\">prefix-numeric-value</span> <span class=\"p\">(</span><span class=\"nv\">ad-get-arg</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nv\">ad-set-arg</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>この設定の問題は、プレフィックスが 1 以上 (n) であればカーソル以下 n 個のファイル名を killing するという機能のうち n = 4 が使えなくなることである。また、本来 C-u を入力することで得られる default-directory からの相対パスも取得できなくなる。絶対パスを取得する機会が少ないなら設定しない方がいいかと。</p>
") (published nil "2012-06-21T00:19:23Z") (updated nil "2012-06-21T00:19:23Z") (author nil (name nil "akisute3@github")))) ("Emacsのgitクライアントmagitのインストール" "<p>こちらのエントリを参考にEmacsのgitクライアントMagitを使い始めました。</p>
<p><a href=\"http://qiita.com/items/c7a11ff30caedc4c5ba7\">http://qiita.com/items/c7a11ff30caedc4c5ba7</a></p>
<p>私の場合、追加でいれるlisp類はユーザのディレクトリにいれるようにしているので、自分がしたインストールの仕方をメモしておきます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">cd</span> <span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">elisp</span><span class=\"o\">/</span>
$ <span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"p\">@</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"p\">:</span><span class=\"n\">magit</span><span class=\"o\">/</span><span class=\"n\">magit</span><span class=\"p\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'load-path</span> <span class=\"s\">&quot;~/.emacs.d/elisp/magit&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'magit</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/572881c2c199d1239926" (20449 29630) old 106 nil nil ((id nil "tag:qiita.com,2005:Item/6390") (published nil "2012-06-20T15:54:54+09:00") (updated nil "2012-06-20T15:54:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/572881c2c199d1239926"))) (url nil "http://qiita.com/items/572881c2c199d1239926") (title nil "Emacsのgitクライアントmagitのインストール") (content ((type . "html")) "<p>こちらのエントリを参考にEmacsのgitクライアントMagitを使い始めました。</p>

<p><a href=\"http://qiita.com/items/c7a11ff30caedc4c5ba7\">http://qiita.com/items/c7a11ff30caedc4c5ba7</a></p>

<p>私の場合、追加でいれるlisp類はユーザのディレクトリにいれるようにしているので、自分がしたインストールの仕方をメモしておきます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">cd</span> <span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">elisp</span><span class=\"o\">/</span>
$ <span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"p\">@</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"p\">:</span><span class=\"n\">magit</span><span class=\"o\">/</span><span class=\"n\">magit</span><span class=\"p\">.</span><span class=\"n\">git</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/.emacs.d/elisp/magit&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;magit</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-20T15:54:54Z") (updated nil "2012-06-20T15:54:54Z") (author nil (name nil "icb54615")))) ("ファイルを自動保存する" "<p>elispファイルをインストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">homepage3</span><span class=\"p\">.</span><span class=\"n\">nifty</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">oatu</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">/</span><span class=\"n\">archives</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; auto-save-buffers</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'auto-save-buffers</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">run-with-idle-timer</span> <span class=\"mi\">2</span> <span class=\"no\">t</span> <span class=\"ss\">'auto-save-buffers</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>アイドル2秒後に自動で保存されます。</p>
<h2>参考文献</h2>
<p>「Emacsテクニックバイブル」P94</p>" "http://qiita.com/items/97ca40dc5c44eece926e" (20449 26860) old 107 nil nil ((id nil "tag:qiita.com,2005:Item/6384") (published nil "2012-06-20T15:08:44+09:00") (updated nil "2012-06-20T15:08:44+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/97ca40dc5c44eece926e"))) (url nil "http://qiita.com/items/97ca40dc5c44eece926e") (title nil "ファイルを自動保存する") (content ((type . "html")) "<p>elispファイルをインストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">homepage3</span><span class=\"p\">.</span><span class=\"n\">nifty</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">oatu</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">/</span><span class=\"n\">archives</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">buffers</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>下記を設定ファイルに追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; auto-save-buffers</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-save-buffers</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">run-with-idle-timer</span> <span class=\"mi\">2</span> <span class=\"no\">t</span> <span class=\"ss\">&#39;auto-save-buffers</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>アイドル2秒後に自動で保存されます。</p>

<h2>参考文献</h2>

<p>「Emacsテクニックバイブル」P94</p>
") (published nil "2012-06-20T15:08:44Z") (updated nil "2012-06-20T15:08:44Z") (author nil (name nil "icb54615")))) ("Byte を KB や GB に変換する Elisp コード" "<p>1024で割った結果が1024以上である度に単位を1つ上げるという簡単な手法。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'cl</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">convert-file-size</span> <span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">loop</span> <span class=\"nv\">with</span> <span class=\"nv\">size-units</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;B&quot;</span> <span class=\"s\">&quot;KB&quot;</span> <span class=\"s\">&quot;MB&quot;</span> <span class=\"s\">&quot;GB&quot;</span> <span class=\"s\">&quot;TB&quot;</span><span class=\"p\">)</span>
<span class=\"nv\">with</span> <span class=\"nv\">first-unit</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nv\">size-units</span><span class=\"p\">)</span>
<span class=\"nv\">with</span> <span class=\"nv\">last-unit</span> <span class=\"nb\">=</span>  <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"p\">(</span><span class=\"nb\">last</span> <span class=\"nv\">size-units</span><span class=\"p\">))</span>
<span class=\"nv\">for</span> <span class=\"nv\">unit</span> <span class=\"nv\">in</span> <span class=\"nv\">size-units</span>
<span class=\"nb\">and</span> <span class=\"nv\">new_size</span> <span class=\"nb\">=</span> <span class=\"nv\">size</span> <span class=\"nv\">then</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">new_size</span> <span class=\"mf\">1024.0</span><span class=\"p\">)</span>
<span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"nv\">new_size</span> <span class=\"mf\">1024.0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">unit</span> <span class=\"nv\">last-unit</span><span class=\"p\">))</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">unit</span> <span class=\"nv\">first-unit</span><span class=\"p\">)</span> <span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%.0f%s&quot;</span> <span class=\"nv\">new_size</span> <span class=\"nv\">unit</span><span class=\"p\">)</span>
<span class=\"nv\">else</span> <span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%.1f%s&quot;</span> <span class=\"nv\">new_size</span> <span class=\"nv\">unit</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">30</span><span class=\"p\">)</span>                  <span class=\"c1\">; =&gt; &quot;30B&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; &quot;4.9KB&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">100000000</span><span class=\"p\">)</span>           <span class=\"c1\">; =&gt; &quot;95.4MB&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mf\">10000000000000000.0</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; &quot;9094.9TB&quot;</span>
</pre>
</div>
</div>
<p>Byteのときは小数点以下を表示しないという処理のため少し冗長に。整数だとオーバフローする可能性があるので、その場合は少数を渡す工夫が必要。</p>" "http://qiita.com/items/3aeaebcb8b03b8dc5a43" (20448 31983) old 108 nil nil ((id nil "tag:qiita.com,2005:Item/6361") (published nil "2012-06-19T22:21:51+09:00") (updated nil "2012-06-19T22:21:51+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3aeaebcb8b03b8dc5a43"))) (url nil "http://qiita.com/items/3aeaebcb8b03b8dc5a43") (title nil "Byte を KB や GB に変換する Elisp コード") (content ((type . "html")) "<p>1024で割った結果が1024以上である度に単位を1つ上げるという簡単な手法。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;cl</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">convert-file-size</span> <span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">loop</span> <span class=\"nv\">with</span> <span class=\"nv\">size-units</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"s\">&quot;B&quot;</span> <span class=\"s\">&quot;KB&quot;</span> <span class=\"s\">&quot;MB&quot;</span> <span class=\"s\">&quot;GB&quot;</span> <span class=\"s\">&quot;TB&quot;</span><span class=\"p\">)</span>
        <span class=\"nv\">with</span> <span class=\"nv\">first-unit</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nv\">size-units</span><span class=\"p\">)</span>
        <span class=\"nv\">with</span> <span class=\"nv\">last-unit</span> <span class=\"nb\">=</span>  <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"p\">(</span><span class=\"nb\">last</span> <span class=\"nv\">size-units</span><span class=\"p\">))</span>
        <span class=\"nv\">for</span> <span class=\"nv\">unit</span> <span class=\"nv\">in</span> <span class=\"nv\">size-units</span>
        <span class=\"nb\">and</span> <span class=\"nv\">new_size</span> <span class=\"nb\">=</span> <span class=\"nv\">size</span> <span class=\"nv\">then</span> <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"nv\">new_size</span> <span class=\"mf\">1024.0</span><span class=\"p\">)</span>
        <span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"nv\">new_size</span> <span class=\"mf\">1024.0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">unit</span> <span class=\"nv\">last-unit</span><span class=\"p\">))</span>
        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">equal</span> <span class=\"nv\">unit</span> <span class=\"nv\">first-unit</span><span class=\"p\">)</span> <span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%.0f%s&quot;</span> <span class=\"nv\">new_size</span> <span class=\"nv\">unit</span><span class=\"p\">)</span>
        <span class=\"nv\">else</span> <span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%.1f%s&quot;</span> <span class=\"nv\">new_size</span> <span class=\"nv\">unit</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">30</span><span class=\"p\">)</span>                  <span class=\"c1\">; =&gt; &quot;30B&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; &quot;4.9KB&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mi\">100000000</span><span class=\"p\">)</span>           <span class=\"c1\">; =&gt; &quot;95.4MB&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">convert-file-size</span> <span class=\"mf\">10000000000000000.0</span><span class=\"p\">)</span> <span class=\"c1\">; =&gt; &quot;9094.9TB&quot;</span>
</pre>
</div>
</div>
<p>Byteのときは小数点以下を表示しないという処理のため少し冗長に。整数だとオーバフローする可能性があるので、その場合は少数を渡す工夫が必要。</p>
") (published nil "2012-06-19T22:21:51Z") (updated nil "2012-06-19T22:21:51Z") (author nil (name nil "akisute3@github")))) ("コマンドラインから emacs (emacsclient) を read-only で開く" "<p>emacs 立ちあげてる状態なら <code>C-xC-r</code> (コマンド経由なら <code>C-xfind-file-read-only</code>) ってやれば、read-only でファイル開ける。じゃーそれをコマンドラインからやる時はどうするかって話。</p>
<h2>emacs ならこんな感じ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">function </span>read_only_emacs<span class=\"o\">()</span> <span class=\"o\">{</span>
<span class=\"o\">[</span> -f <span class=\"s2\">&quot;$1&quot;</span> <span class=\"o\">]</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;ファイルが見つかりませんでした: $1&quot;</span> &gt;&amp;2; <span class=\"nb\">exit </span>1<span class=\"o\">)</span>
emacs <span class=\"s2\">&quot;$1&quot;</span> --eval <span class=\"s1\">'(setq buffer-read-only t)'</span>
<span class=\"o\">}</span>
</pre>
</div>
</div>
<p>ファイル見つからなくても emacs が立ち上がってしまうので、実行前に存在チェックしてる。</p>
<h2>emacsclient ならこんな感じ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">function </span>read_only_emacsclient<span class=\"o\">()</span> <span class=\"o\">{</span>
emacsclient -e <span class=\"s2\">&quot;(find-file-read-only \\&quot;$1\\&quot;)&quot;</span>
<span class=\"o\">}</span>
</pre>
</div>
</div>
<p>ただ、<code>emacsclient -n</code> で普段から使ってない人は、ちょっと違和感のある挙動かも。</p>" "http://qiita.com/items/609681b9635e5563d4a9" (20447 64925) old 109 nil nil ((id nil "tag:qiita.com,2005:Item/6340") (published nil "2012-06-19T13:17:35+09:00") (updated nil "2012-06-19T13:18:37+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/609681b9635e5563d4a9"))) (url nil "http://qiita.com/items/609681b9635e5563d4a9") (title nil "コマンドラインから emacs (emacsclient) を read-only で開く") (content ((type . "html")) "<p>emacs 立ちあげてる状態なら <code>C-xC-r</code> (コマンド経由なら <code>C-xfind-file-read-only</code>) ってやれば、read-only でファイル開ける。じゃーそれをコマンドラインからやる時はどうするかって話。</p>

<h2>emacs ならこんな感じ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">function </span>read_only_emacs<span class=\"o\">()</span> <span class=\"o\">{</span>
    <span class=\"o\">[</span> -f <span class=\"s2\">&quot;$1&quot;</span> <span class=\"o\">]</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;ファイルが見つかりませんでした: $1&quot;</span> &gt;&amp;2; <span class=\"nb\">exit </span>1<span class=\"o\">)</span>
    emacs <span class=\"s2\">&quot;$1&quot;</span> --eval <span class=\"s1\">&#39;(setq buffer-read-only t)&#39;</span>
<span class=\"o\">}</span>
</pre>
</div>
</div>
<p>ファイル見つからなくても emacs が立ち上がってしまうので、実行前に存在チェックしてる。</p>

<h2>emacsclient ならこんな感じ</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">function </span>read_only_emacsclient<span class=\"o\">()</span> <span class=\"o\">{</span>
    emacsclient -e <span class=\"s2\">&quot;(find-file-read-only \\&quot;$1\\&quot;)&quot;</span>
<span class=\"o\">}</span>
</pre>
</div>
</div>
<p>ただ、<code>emacsclient -n</code> で普段から使ってない人は、ちょっと違和感のある挙動かも。</p>
") (published nil "2012-06-19T13:17:35Z") (updated nil "2012-06-19T13:18:37Z") (author nil (name nil "k_ui")))) ("dired の隠しファイル表示をトグルする minor-mode" "<p><a href=\"http://d.hatena.ne.jp/sr10/20120327/1332853421\">http://d.hatena.ne.jp/sr10/20120327/1332853421</a><br>
のリンクからダウンロード。隠しファイルだらけのホームディレクトリとかを見るときに結構便利。私は C-. に割り当てている。</p>" "http://qiita.com/items/c287ae72f55515d9cea1" (20445 56610) old 110 nil nil ((id nil "tag:qiita.com,2005:Item/6288") (published nil "2012-06-17T22:35:30+09:00") (updated nil "2012-06-17T22:35:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c287ae72f55515d9cea1"))) (url nil "http://qiita.com/items/c287ae72f55515d9cea1") (title nil "dired の隠しファイル表示をトグルする minor-mode") (content ((type . "html")) "<p><a href=\"http://d.hatena.ne.jp/sr10/20120327/1332853421\">http://d.hatena.ne.jp/sr10/20120327/1332853421</a><br>
のリンクからダウンロード。隠しファイルだらけのホームディレクトリとかを見るときに結構便利。私は C-. に割り当てている。</p>
") (published nil "2012-06-17T22:35:30Z") (updated nil "2012-06-17T22:35:30Z") (author nil (name nil "akisute3@github")))) ("Emacs の dired でディレクトリを先に表示する" "<p>これについてWebを調べると、大抵</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ls-lisp-dirs-first</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を .emacs に書くという情報が見つかるが，これは Windows で ls をエミュレートするための ls-lisp の機能であり，Ubuntu などでは動かない．</p>
<p>ls が使える環境でディレクトリを先に表示したいなら，以下のように .emacs に書く．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">dired-listing-switches</span> <span class=\"s\">&quot;-AFl --group-directories-first&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>dired の ls オプションは <code>dired-listing-switches</code> で変更でき，<code>--group-directories-first</code> によってディレクトリを先に表示できる．<code>-AFl</code> は好みと環境に合わせて設定する．</p>
<p>また，ディレクトリのシンボリックリンクがファイル側に表示するのが嫌なら <code>-L</code> を追加すればよい．</p>" "http://qiita.com/items/af9333eb66b56a9c62d8" (20445 54528) old 111 nil nil ((id nil "tag:qiita.com,2005:Item/6287") (published nil "2012-06-17T22:00:48+09:00") (updated nil "2012-06-17T22:00:48+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/af9333eb66b56a9c62d8"))) (url nil "http://qiita.com/items/af9333eb66b56a9c62d8") (title nil "Emacs の dired でディレクトリを先に表示する") (content ((type . "html")) "<p>これについてWebを調べると、大抵</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ls-lisp-dirs-first</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を .emacs に書くという情報が見つかるが，これは Windows で ls をエミュレートするための ls-lisp の機能であり，Ubuntu などでは動かない．</p>

<p>ls が使える環境でディレクトリを先に表示したいなら，以下のように .emacs に書く．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">dired-listing-switches</span> <span class=\"s\">&quot;-AFl --group-directories-first&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>dired の ls オプションは <code>dired-listing-switches</code> で変更でき，<code>--group-directories-first</code> によってディレクトリを先に表示できる．<code>-AFl</code> は好みと環境に合わせて設定する．</p>

<p>また，ディレクトリのシンボリックリンクがファイル側に表示するのが嫌なら <code>-L</code> を追加すればよい．</p>
") (published nil "2012-06-17T22:00:48Z") (updated nil "2012-06-17T22:00:48Z") (author nil (name nil "akisute3@github")))) ("EmacsのGitクライアント：Magit" "<p>これは<a href=\"http://qiita.com/advent-calendar/git\">Gitアドベントカレンダー</a>の17日目のエントリーです。</p>
<p>このエントリーではEmacsのGitクライアントであるMagitの紹介を行います。ひよっこプログラマのエントリなので間違いがあれば指摘して下さい。逆に、ひよっこプログラマだからこそ出来る、これを見たら初心者でも出来るようなエントリを目指しました。</p>
<h2>Magitって何？</h2>
<p>EmacsのGitクライアントです。Emacsでコード編集して、ターミナルに移動せずそのままEmacs上でGitの操作を行うことが出来ます。</p>
<h2>インストール方法</h2>
<p>ソースはgithubで公開されています。<br>
<a href=\"https://github.com/magit/magit\">https://github.com/magit/magit</a><br>
インストールします。  </p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ cd
$ mkdir tmp
$ cd tmp
$ git clone git@github.com:magit/magit.git
$ cd magit
$ ./configure
$ make
$ sudo make install
</pre>
</div>
</div>
<p>で、.emacs.d/init.elに次の記述を追加します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(require 'magit)
</pre>
</div>
</div>
<p>これだけ！</p>
<h2>チュートリアル</h2>
<p>とりあえずgit管理下のファイルを開いている状態で、 <code>git status</code>に対応する<code>M-x magit-status</code>してみましょう。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24
Changes:
Modified   .emacs.d/init.el
</pre>
</div>
</div>
<p>こんな画面が現れます。カーソルを<code>Modified   .emacs.d/init.el</code>の行に移動し、Tabキーを押すと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24
Changes:
Modified   .emacs.d/init.el
diff --git a/.emacs.d/init.el b/.emacs.d/init.el
index b0db796..103a40f 100644
--- a/.emacs.d/init.el
+++ b/.emacs.d/init.el
@@ -1,5 +1,6 @@
;; .emacs
+
; path
(setq load-path (cons &quot;~/.emacs.d/site-lisp&quot; load-path))
</pre>
</div>
</div>
<p>diffが見れます。変更が正しいことを確認したら、ファイルの行で<code>s</code>を押します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24
Staged changes:
Modified   .emacs.d/init.el
</pre>
</div>
</div>
<p>Stageされました(<code>git add .emacs.d/init.el</code>と同じ効果)。今は<code>Changes</code>なファイルが1つですが、複数ある時は<code>S</code>で全てStage出来ます。</p>
<p>次に<code>c</code>を押すと、新しくwindowが現れます。ここでcommitコメントを書いて<code>C-c C-c</code>を入力するとcommit出来ます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     dd0f21c test
Unpushed commits:
dd0f21c * test
</pre>
</div>
</div>
<p>commit出来ました。次に<code>git pull</code>を行います。<code>git pull</code>するにはgit-status画面で<code>F</code>を入力します。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Switches
-r: Rebase (--rebase)
Actions
F: Pull
</pre>
</div>
</div>
<p>という画面が現れます。<code>git pull --rebase</code>するなら<code>-r</code>と入力します。すると<code>--rebase</code>の色が変わるので、その後<code>F</code>を押すとpull出来ます。pullする前にもう一度<code>-r</code>を入力すると<code>--rebase</code>の色が戻り普通のpullが出来ます。<br>
すると、パスフレーズが聞かれるので入力します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Password for '/home/takc923/.ssh/id_rsa': ……………
</pre>
</div>
</div>
<p>pullが完了しました。<br>
次にpushします。pushするにはmagit-status画面で<code>P</code>を押します。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Switches
-f: Force (--force)      -d: Dry run (-n)         -u: Set upstream (-u)
Actions
P: Push         t: Push tags
</pre>
</div>
</div>
<p>という画面が現れます。ここもpull同様、オプションをつけるなら<code>-f</code>,<code>-d</code>,<code>-u</code>してから<code>P</code>を入力します。やっぱりパスフレーズを聞かれるので入力するとpush出来ます。</p>
<p>チュートリアルは以上です。</p>
<h2>終わりに</h2>
<p>magitのインストール方法と、簡単な使い方だけ紹介しました。これから使う人の入り口になれば幸いです。もちろんmagitでは他にも色んな操作が可能です。ここから先は以下の参考ページや、magitでぐぐって出てきたエントリを参考に使ってみてください。<br>
参考<br>
<a href=\"http://magit.github.com/magit/magit.html\">http://magit.github.com/magit/magit.html</a></p>" "http://qiita.com/items/c7a11ff30caedc4c5ba7" (20639 61599) old 112 nil nil ((id nil "tag:qiita.com,2005:Item/6286") (published nil "2012-06-17T21:19:30+09:00") (updated nil "2012-11-12T03:38:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c7a11ff30caedc4c5ba7"))) (url nil "http://qiita.com/items/c7a11ff30caedc4c5ba7") (title nil "EmacsのGitクライアント：Magit") (content ((type . "html")) "<p>これは<a href=\"http://qiita.com/advent-calendar/git\">Gitアドベントカレンダー</a>の17日目のエントリーです。</p>

<p>このエントリーではEmacsのGitクライアントであるMagitの紹介を行います。ひよっこプログラマのエントリなので間違いがあれば指摘して下さい。逆に、ひよっこプログラマだからこそ出来る、これを見たら初心者でも出来るようなエントリを目指しました。</p>

<h2>Magitって何？</h2>

<p>EmacsのGitクライアントです。Emacsでコード編集して、ターミナルに移動せずそのままEmacs上でGitの操作を行うことが出来ます。</p>

<h2>インストール方法</h2>

<p>ソースはgithubで公開されています。<br>
<a href=\"https://github.com/magit/magit\">https://github.com/magit/magit</a><br>
インストールします。  </p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ cd
$ mkdir tmp
$ cd tmp
$ git clone git@github.com:magit/magit.git
$ cd magit
$ ./configure
$ make
$ sudo make install
</pre>
</div>
</div>
<p>で、.emacs.d/init.elに次の記述を追加します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>(require &#39;magit)
</pre>
</div>
</div>
<p>これだけ！</p>

<h2>チュートリアル</h2>

<p>とりあえずgit管理下のファイルを開いている状態で、 <code>git status</code>に対応する<code>M-x magit-status</code>してみましょう。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24

Changes:                                                                                                                              
    Modified   .emacs.d/init.el
</pre>
</div>
</div>
<p>こんな画面が現れます。カーソルを<code>Modified   .emacs.d/init.el</code>の行に移動し、Tabキーを押すと</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24

Changes:
    Modified   .emacs.d/init.el
diff --git a/.emacs.d/init.el b/.emacs.d/init.el
index b0db796..103a40f 100644
--- a/.emacs.d/init.el                                                                                                               
+++ b/.emacs.d/init.el                                                                                                               
@@ -1,5 +1,6 @@
 ;; .emacs                                                                                                                           

+                                                                                                                                    
 ; path                                                                                                                              
 (setq load-path (cons &quot;~/.emacs.d/site-lisp&quot; load-path))  
</pre>
</div>
</div>
<p>diffが見れます。変更が正しいことを確認したら、ファイルの行で<code>s</code>を押します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     88b780e modified init.el and elscreen.el for emacs24

Staged changes:
    Modified   .emacs.d/init.el
</pre>
</div>
</div>
<p>Stageされました(<code>git add .emacs.d/init.el</code>と同じ効果)。今は<code>Changes</code>なファイルが1つですが、複数ある時は<code>S</code>で全てStage出来ます。</p>

<p>次に<code>c</code>を押すと、新しくwindowが現れます。ここでcommitコメントを書いて<code>C-c C-c</code>を入力するとcommit出来ます。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Remote:   master @ origin (git@github.com:takc923/dotfiles.git)
Local:    master ~/dotfiles/
Head:     dd0f21c test

Unpushed commits:
dd0f21c * test
</pre>
</div>
</div>
<p>commit出来ました。次に<code>git pull</code>を行います。<code>git pull</code>するにはgit-status画面で<code>F</code>を入力します。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Switches
-r: Rebase (--rebase)
Actions
F: Pull
</pre>
</div>
</div>
<p>という画面が現れます。<code>git pull --rebase</code>するなら<code>-r</code>と入力します。すると<code>--rebase</code>の色が変わるので、その後<code>F</code>を押すとpull出来ます。pullする前にもう一度<code>-r</code>を入力すると<code>--rebase</code>の色が戻り普通のpullが出来ます。<br>
すると、パスフレーズが聞かれるので入力します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Password for &#39;/home/takc923/.ssh/id_rsa&#39;: ……………
</pre>
</div>
</div>
<p>pullが完了しました。<br>
次にpushします。pushするにはmagit-status画面で<code>P</code>を押します。すると</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>Switches
 -f: Force (--force)      -d: Dry run (-n)         -u: Set upstream (-u)
Actions
P: Push         t: Push tags
</pre>
</div>
</div>
<p>という画面が現れます。ここもpull同様、オプションをつけるなら<code>-f</code>,<code>-d</code>,<code>-u</code>してから<code>P</code>を入力します。やっぱりパスフレーズを聞かれるので入力するとpush出来ます。</p>

<p>チュートリアルは以上です。</p>

<h2>終わりに</h2>

<p>magitのインストール方法と、簡単な使い方だけ紹介しました。これから使う人の入り口になれば幸いです。もちろんmagitでは他にも色んな操作が可能です。ここから先は以下の参考ページや、magitでぐぐって出てきたエントリを参考に使ってみてください。<br>
参考<br>
<a href=\"http://magit.github.com/magit/magit.html\">http://magit.github.com/magit/magit.html</a></p>
") (published nil "2012-06-17T21:19:30Z") (updated nil "2012-11-12T03:38:23Z") (author nil (name nil "takc923")))) ("初期化されていない可能性がある変数の真偽値で分岐" "<p>Elispで「変数が初期化されていて、かつその変数がnilでないとき」に処理を行いたいときはこんな感じで書ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">boundp</span> <span class=\"ss\">'var</span><span class=\"p\">)</span> <span class=\"nv\">var</span><span class=\"p\">)</span>
<span class=\"nv\">body...</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>(when var body)</code> としてしまうと void-variable が発生するので注意。</p>" "http://qiita.com/items/793606be49f046c4c42b" (20445 44010) old 113 nil nil ((id nil "tag:qiita.com,2005:Item/6284") (published nil "2012-06-17T19:05:09+09:00") (updated nil "2012-06-17T19:05:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/793606be49f046c4c42b"))) (url nil "http://qiita.com/items/793606be49f046c4c42b") (title nil "初期化されていない可能性がある変数の真偽値で分岐") (content ((type . "html")) "<p>Elispで「変数が初期化されていて、かつその変数がnilでないとき」に処理を行いたいときはこんな感じで書ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">boundp</span> <span class=\"ss\">&#39;var</span><span class=\"p\">)</span> <span class=\"nv\">var</span><span class=\"p\">)</span>
  <span class=\"nv\">body...</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>(when var body)</code> としてしまうと void-variable が発生するので注意。</p>
") (published nil "2012-06-17T19:05:09Z") (updated nil "2012-06-17T19:05:30Z") (author nil (name nil "akisute3@github")))) ("init-loaderでgnupack用の設定を分離" "<p><a href=\"http://d.hatena.ne.jp/kitokitoki/20101205/p1\">init-loader</a>を使えば、Emacsの設定ファイルを簡単に分割できる。<br>
しかも特定の環境でのみ読み込ませる設定ファイルなんてのも簡単に作ることができ、設定ファイルを一元管理して複数の環境で使う場合などにとても便利。</p>
<p>init-loaderには</p>
<ul>
<li>Meadow (meadow-*.el)</li>
<li>Carbon Emacs (carbon-emacs-*.el)</li>
<li>Cocoa Emacs (cocoa-emacs-*.el)</li>
<li>no-window環境 (nw-*.el)</li>
</ul>
<p>用の設定があらかじめ用意されているが、今回これらに<a href=\"http://gnupack.sourceforge.jp/docs/latest/UsersGuide.html\">gnupack</a>用の設定を付け加えてみる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init-loader.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-*</span><span class=\"p\">.</span><span class=\"n\">el</span> という名前のファイルのみ、<span class=\"n\">gnupack</span> <span class=\"n\">Emacs</span>で読み込む
<span class=\"p\">(</span><span class=\"n\">defcustom</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">regexp</span> &quot;^<span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span>&quot;
&quot;<span class=\"n\">MinGW</span>で起動する<span class=\"n\">Emacs</span><span class=\"p\">(</span><span class=\"n\">gnupack</span><span class=\"p\">)</span>で読み込まれる設定ファイルにマッチする正規表現&quot;
<span class=\"p\">:</span><span class=\"n\">group</span> <span class=\"s\">'init-loader</span>
<span class=\"s\">  :type '</span><span class=\"n\">regexp</span><span class=\"p\">)</span>
<span class=\"p\">;;;</span> <span class=\"n\">Code</span>
<span class=\"p\">(</span><span class=\"n\">defun</span><span class=\"o\">*</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">optional</span> <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">follow</span><span class=\"o\">-</span><span class=\"n\">symlink</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"n\">assert</span> <span class=\"p\">(</span><span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">stringp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">re</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">regexp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"n\">t</span><span class=\"p\">)</span>
<span class=\"p\">;;</span> <span class=\"o\">~</span> 略 <span class=\"o\">~</span>
<span class=\"p\">;;</span><span class=\"o\">----</span> ここから <span class=\"o\">----</span>
<span class=\"p\">(</span><span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">match</span> &quot;<span class=\"n\">mingw</span>&quot; <span class=\"n\">system</span><span class=\"o\">-</span><span class=\"n\">configuration</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">re</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">regexp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">))</span>
<span class=\"p\">;;</span><span class=\"o\">---</span> ここまで <span class=\"o\">----</span>
<span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"nb\">log</span><span class=\"o\">-</span><span class=\"n\">after</span><span class=\"o\">-</span><span class=\"n\">init</span>
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span>  <span class=\"s\">'after-init-hook '</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"nb\">log</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>これでinit-loaderで読み込ませるディレクトリ(デフォルトでは .emacs.d/inits)にgnupack-emacs-*.elという設定を配置すれば、gnupack Emacs起動時にのみ読み込まれることになる。</p>" "http://qiita.com/items/0815a60f632e694fd082" (20443 26457) old 114 nil nil ((id nil "tag:qiita.com,2005:Item/6224") (published nil "2012-06-16T01:48:25+09:00") (updated nil "2012-06-16T01:48:25+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0815a60f632e694fd082"))) (url nil "http://qiita.com/items/0815a60f632e694fd082") (title nil "init-loaderでgnupack用の設定を分離") (content ((type . "html")) "<p><a href=\"http://d.hatena.ne.jp/kitokitoki/20101205/p1\">init-loader</a>を使えば、Emacsの設定ファイルを簡単に分割できる。<br>
しかも特定の環境でのみ読み込ませる設定ファイルなんてのも簡単に作ることができ、設定ファイルを一元管理して複数の環境で使う場合などにとても便利。</p>

<p>init-loaderには</p>

<ul>
<li>Meadow (meadow-*.el)</li>
<li>Carbon Emacs (carbon-emacs-*.el)</li>
<li>Cocoa Emacs (cocoa-emacs-*.el)</li>
<li>no-window環境 (nw-*.el)</li>
</ul>

<p>用の設定があらかじめ用意されているが、今回これらに<a href=\"http://gnupack.sourceforge.jp/docs/latest/UsersGuide.html\">gnupack</a>用の設定を付け加えてみる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init-loader.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-*</span><span class=\"p\">.</span><span class=\"n\">el</span> という名前のファイルのみ、<span class=\"n\">gnupack</span> <span class=\"n\">Emacs</span>で読み込む
<span class=\"p\">(</span><span class=\"n\">defcustom</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">regexp</span> &quot;^<span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span>&quot;
  &quot;<span class=\"n\">MinGW</span>で起動する<span class=\"n\">Emacs</span><span class=\"p\">(</span><span class=\"n\">gnupack</span><span class=\"p\">)</span>で読み込まれる設定ファイルにマッチする正規表現&quot;
  <span class=\"p\">:</span><span class=\"n\">group</span> <span class=\"s\">&#39;init-loader</span>
<span class=\"s\">  :type &#39;</span><span class=\"n\">regexp</span><span class=\"p\">)</span>

<span class=\"p\">;;;</span> <span class=\"n\">Code</span>
<span class=\"p\">(</span><span class=\"n\">defun</span><span class=\"o\">*</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">optional</span> <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"n\">let</span> <span class=\"p\">((</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">follow</span><span class=\"o\">-</span><span class=\"n\">symlink</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"n\">assert</span> <span class=\"p\">(</span><span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">stringp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">re</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">regexp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span> <span class=\"n\">t</span><span class=\"p\">)</span>
    <span class=\"p\">;;</span> <span class=\"o\">~</span> 略 <span class=\"o\">~</span>
    <span class=\"p\">;;</span><span class=\"o\">----</span> ここから <span class=\"o\">----</span>
    <span class=\"p\">(</span><span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">match</span> &quot;<span class=\"n\">mingw</span>&quot; <span class=\"n\">system</span><span class=\"o\">-</span><span class=\"n\">configuration</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">re</span><span class=\"o\">-</span><span class=\"n\">load</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">gnupack</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">regexp</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"p\">))</span>
    <span class=\"p\">;;</span><span class=\"o\">---</span> ここまで <span class=\"o\">----</span>
    <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"nb\">log</span><span class=\"o\">-</span><span class=\"n\">after</span><span class=\"o\">-</span><span class=\"n\">init</span>
      <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span>  <span class=\"s\">&#39;after-init-hook &#39;</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"o\">-</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"nb\">log</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>これでinit-loaderで読み込ませるディレクトリ(デフォルトでは .emacs.d/inits)にgnupack-emacs-*.elという設定を配置すれば、gnupack Emacs起動時にのみ読み込まれることになる。</p>
") (published nil "2012-06-16T01:48:25Z") (updated nil "2012-06-16T01:48:25Z") (author nil (name nil "usobuku")))) ("シェルからEmacsを立ち上げるときの起動を速くする" "<p>Emacsを一つ立ち上げっぱなしにして、シェルからファイルを編集するときにいちいちEmacsを新しく立ち上げないで、その立ち上がっているEmacsで編集できるようにする設定をします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.d</span></div><div class=\"highlight\"><pre><span class=\"p\">;;;</span> <span class=\"n\">emacsclient</span>
<span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">start</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">when</span><span class=\"o\">-</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">done</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"n\">unless</span> <span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">clients</span> <span class=\"p\">(</span><span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">frame</span><span class=\"p\">)))</span>
<span class=\"p\">;;</span> 編集が終了したら<span class=\"n\">Emacs</span>をアイコン化する
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">'server-done-hook '</span><span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">when</span><span class=\"o\">-</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">done</span><span class=\"p\">)</span>
<span class=\"p\">;;</span>  <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">c</span>に割り当てる
<span class=\"p\">(</span><span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">c</span>&quot;<span class=\"p\">)</span> <span class=\"s\">'server-edit)</span>
<span class=\"s\">;; M-x exitでEmacsを終了できるようにする</span>
<span class=\"s\">(defalias '</span><span class=\"n\">exit</span> <span class=\"s\">'</span><span class=\"err\">save-buffers-kill-emacs)</span>
</pre>
</div>
</div>
<p>再起動してEmacsを立ち上げます。シェルから下記を実行すると最初に立ち上げたEmacsで編集ができるようになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">emacsclinet</span> <span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">txt</span>
</pre>
</div>
</div>
<p>ちょっとした設定ファイルをいじるときはemacsだと起動が遅かったのでviを使っていたのですが、これでemacsでもよくなりそうです。</p>
<h2>参照</h2>
<p>「Emacsテクニックバイブル」P91</p>" "http://qiita.com/items/48ac0af1e31eb9f69525" (20442 57849) old 115 nil nil ((id nil "tag:qiita.com,2005:Item/6209") (published nil "2012-06-15T16:19:21+09:00") (updated nil "2012-06-15T16:19:21+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/48ac0af1e31eb9f69525"))) (url nil "http://qiita.com/items/48ac0af1e31eb9f69525") (title nil "シェルからEmacsを立ち上げるときの起動を速くする") (content ((type . "html")) "<p>Emacsを一つ立ち上げっぱなしにして、シェルからファイルを編集するときにいちいちEmacsを新しく立ち上げないで、その立ち上がっているEmacsで編集できるようにする設定をします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.d</span></div><div class=\"highlight\"><pre><span class=\"p\">;;;</span> <span class=\"n\">emacsclient</span>
<span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">start</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">when</span><span class=\"o\">-</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">done</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">unless</span> <span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">clients</span> <span class=\"p\">(</span><span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">frame</span><span class=\"p\">)))</span>
<span class=\"p\">;;</span> 編集が終了したら<span class=\"n\">Emacs</span>をアイコン化する
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;server-done-hook &#39;</span><span class=\"n\">iconify</span><span class=\"o\">-</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">when</span><span class=\"o\">-</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">done</span><span class=\"p\">)</span>
<span class=\"p\">;;</span>  <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">c</span>に割り当てる
<span class=\"p\">(</span><span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">C</span><span class=\"o\">-</span><span class=\"n\">c</span>&quot;<span class=\"p\">)</span> <span class=\"s\">&#39;server-edit)</span>
<span class=\"s\">;; M-x exitでEmacsを終了できるようにする</span>
<span class=\"s\">(defalias &#39;</span><span class=\"n\">exit</span> <span class=\"s\">&#39;</span><span class=\"err\">save-buffers-kill-emacs)</span>
</pre>
</div>
</div>
<p>再起動してEmacsを立ち上げます。シェルから下記を実行すると最初に立ち上げたEmacsで編集ができるようになります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">emacsclinet</span> <span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">txt</span>
</pre>
</div>
</div>
<p>ちょっとした設定ファイルをいじるときはemacsだと起動が遅かったのでviを使っていたのですが、これでemacsでもよくなりそうです。</p>

<h2>参照</h2>

<p>「Emacsテクニックバイブル」P91</p>
") (published nil "2012-06-15T16:19:21Z") (updated nil "2012-06-15T16:19:21Z") (author nil (name nil "icb54615")))) ("Elisp の変数の内容が無名関数かどうかチェックする" "<p>変数が無名関数かどうかは funcall が invalid-function エラーを発生するかで確認できそう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lambda-p</span> <span class=\"p\">(</span><span class=\"nv\">var</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
<span class=\"p\">(</span><span class=\"k\">progn</span>
<span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">var</span><span class=\"p\">)</span>
<span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">invalid-function</span> <span class=\"no\">nil</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">str</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-p</span> <span class=\"nv\">str</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; nil</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">lmd</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"s\">&quot;huga&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-p</span> <span class=\"nv\">lmd</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; t</span>
</pre>
</div>
</div>
<p>Elisp の変数が「文字列そのもの」と「文字列を返す関数」のどちらかに関わらず、その変数を文字列として扱いたい場合はこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lambda-to-str</span> <span class=\"p\">(</span><span class=\"nv\">str</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
<span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">str</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">invalid-function</span> <span class=\"nv\">str</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">str</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-to-str</span> <span class=\"nv\">str</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; &quot;hoge&quot;</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">lmd</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"s\">&quot;huga&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-to-str</span> <span class=\"nv\">lmd</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; &quot;huga&quot;</span>
</pre>
</div>
</div>" "http://qiita.com/items/37601adbf8ab141f7547" (20440 48539) old 116 nil nil ((id nil "tag:qiita.com,2005:Item/6163") (published nil "2012-06-14T01:14:18+09:00") (updated nil "2012-06-14T01:19:39+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/37601adbf8ab141f7547"))) (url nil "http://qiita.com/items/37601adbf8ab141f7547") (title nil "Elisp の変数の内容が無名関数かどうかチェックする") (content ((type . "html")) "<p>変数が無名関数かどうかは funcall が invalid-function エラーを発生するかで確認できそう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lambda-p</span> <span class=\"p\">(</span><span class=\"nv\">var</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
      <span class=\"p\">(</span><span class=\"k\">progn</span>
        <span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">var</span><span class=\"p\">)</span>
        <span class=\"no\">t</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">invalid-function</span> <span class=\"no\">nil</span><span class=\"p\">)))</span>


<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">str</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-p</span> <span class=\"nv\">str</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; nil</span>

<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">lmd</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"s\">&quot;huga&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-p</span> <span class=\"nv\">lmd</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; t</span>
</pre>
</div>
</div>
<p>Elisp の変数が「文字列そのもの」と「文字列を返す関数」のどちらかに関わらず、その変数を文字列として扱いたい場合はこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lambda-to-str</span> <span class=\"p\">(</span><span class=\"nv\">str</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
      <span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">str</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">invalid-function</span> <span class=\"nv\">str</span><span class=\"p\">)))</span>


<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">str</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-to-str</span> <span class=\"nv\">str</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; &quot;hoge&quot;</span>

<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">lmd</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;%s&quot;</span> <span class=\"s\">&quot;huga&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">lambda-to-str</span> <span class=\"nv\">lmd</span><span class=\"p\">)</span>                          <span class=\"c1\">; =&gt; &quot;huga&quot;</span>
</pre>
</div>
</div>") (published nil "2012-06-14T01:14:18Z") (updated nil "2012-06-14T01:19:39Z") (author nil (name nil "akisute3@github")))) ("ブックマークを便利にする設定" "<p>ファイルのある位置をブックマークするのに便利な設定をしました。</p>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; ブックマークを変更したら即保存する</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-save-flag</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"c1\">;; 超整理法</span>
<span class=\"p\">(</span><span class=\"k\">progn</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-sort-flag</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">bookmark-arrange-latest-top</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">latest</span> <span class=\"p\">(</span> <span class=\"nv\">bookmark-get-bookmark</span> <span class=\"nv\">bookmark</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-alist</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">latest</span> <span class=\"p\">(</span><span class=\"nv\">delq</span> <span class=\"nv\">latest</span> <span class=\"nv\">bookmark-aliset</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">bookmark-save</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'bookmark-after-jump-hook</span> <span class=\"ss\">'bookmark-arrange-latest-top</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>超整理法の設定をすると最近使ったブックマークを上に持ってきてくれるようになります。</p>
<p>ブックマークしたい箇所で、<code>C-x r m</code>(<code>bookmark-set</code>)をします。ブックマーク名を聞いてくるので、後で思い出しやすい名前を入力します。</p>
<p><code>C-x r l</code>(<code>bookmark-bmenu-list</code>)をすると登録しているブックマークの一覧のバッファに移動します。一覧から移動したいファイルを選択します。</p>
<h2>参照</h2>
<p>「Emacsテクニックバイブル」P89</p>" "http://qiita.com/items/50fb48801aa41f4534fd" (20440 19127) old 117 nil nil ((id nil "tag:qiita.com,2005:Item/6150") (published nil "2012-06-13T17:09:27+09:00") (updated nil "2012-06-13T17:09:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/50fb48801aa41f4534fd"))) (url nil "http://qiita.com/items/50fb48801aa41f4534fd") (title nil "ブックマークを便利にする設定") (content ((type . "html")) "<p>ファイルのある位置をブックマークするのに便利な設定をしました。</p>

<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; ブックマークを変更したら即保存する</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-save-flag</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"c1\">;; 超整理法</span>
<span class=\"p\">(</span><span class=\"k\">progn</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-sort-flag</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">bookmark-arrange-latest-top</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">latest</span> <span class=\"p\">(</span> <span class=\"nv\">bookmark-get-bookmark</span> <span class=\"nv\">bookmark</span><span class=\"p\">)))</span>
      <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">bookmark-alist</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">latest</span> <span class=\"p\">(</span><span class=\"nv\">delq</span> <span class=\"nv\">latest</span> <span class=\"nv\">bookmark-aliset</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nv\">bookmark-save</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;bookmark-after-jump-hook</span> <span class=\"ss\">&#39;bookmark-arrange-latest-top</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>超整理法の設定をすると最近使ったブックマークを上に持ってきてくれるようになります。</p>

<p>ブックマークしたい箇所で、<code>C-x r m</code>(<code>bookmark-set</code>)をします。ブックマーク名を聞いてくるので、後で思い出しやすい名前を入力します。</p>

<p><code>C-x r l</code>(<code>bookmark-bmenu-list</code>)をすると登録しているブックマークの一覧のバッファに移動します。一覧から移動したいファイルを選択します。</p>

<h2>参照</h2>

<p>「Emacsテクニックバイブル」P89</p>
") (published nil "2012-06-13T17:09:27Z") (updated nil "2012-06-13T17:09:27Z") (author nil (name nil "icb54615")))) ("Emacs: カーソル行を画面の中央/最上部/最下部に移動して再描画" "<p>よく忘れるのでメモ。</p>
<p>Emacsで</p>
<ul>
<li>カーソル行を画面の中央に移動(vimのzz)</li>
</ul>
<blockquote>
<p>C-l</p>
</blockquote>
<ul>
<li>カーソル行を画面の最上部に移動(vimのzt)</li>
</ul>
<blockquote>
<p>C-u 0 C-l</p>
</blockquote>
<ul>
<li>カーソル行を画面の最下部に移動(vimのzb)</li>
</ul>
<blockquote>
<p>C-u -1 C-l</p>
</blockquote>" "http://qiita.com/items/34d41633b6417324ae1a" (20439 61334) old 118 nil nil ((id nil "tag:qiita.com,2005:Item/6133") (published nil "2012-06-13T10:40:38+09:00") (updated nil "2012-06-13T10:40:38+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/34d41633b6417324ae1a"))) (url nil "http://qiita.com/items/34d41633b6417324ae1a") (title nil "Emacs: カーソル行を画面の中央/最上部/最下部に移動して再描画") (content ((type . "html")) "<p>よく忘れるのでメモ。</p>

<p>Emacsで</p>

<ul>
<li>カーソル行を画面の中央に移動(vimのzz)</li>
</ul>

<blockquote>
<p>C-l</p>
</blockquote>

<ul>
<li>カーソル行を画面の最上部に移動(vimのzt)</li>
</ul>

<blockquote>
<p>C-u 0 C-l</p>
</blockquote>

<ul>
<li>カーソル行を画面の最下部に移動(vimのzb)</li>
</ul>

<blockquote>
<p>C-u -1 C-l</p>
</blockquote>
") (published nil "2012-06-13T10:40:38Z") (updated nil "2012-06-13T10:40:38Z") (author nil (name nil "usobuku")))) ("特定のメジャーモードのバッファをリスト化する Elisp 関数" "<p>例えば dired-mode のバッファのみをリスト化したいならこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-mode-buffer-list</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nb\">loop</span> <span class=\"nv\">for</span> <span class=\"nv\">buf</span> <span class=\"nv\">in</span> <span class=\"p\">(</span><span class=\"nv\">buffer-list</span><span class=\"p\">)</span>
<span class=\"nv\">for</span> <span class=\"nv\">m</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">with-current-buffer</span> <span class=\"nv\">buf</span> <span class=\"nv\">major-mode</span><span class=\"p\">)</span>
<span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"nv\">m</span> <span class=\"ss\">'dired-mode</span><span class=\"p\">)</span>
<span class=\"nv\">collect</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span> <span class=\"nv\">buf</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>5行目の <code>'dired-mode</code> を別のメジャーモードに書き換えれば、そのモードのバッファをリスト化できる。リスト化したいメジャーモードが複数になるなら memq を使用するといい。</p>" "http://qiita.com/items/35616785f9194ca00ec1" (20439 21899) old 119 nil nil ((id nil "tag:qiita.com,2005:Item/6111") (published nil "2012-06-12T23:42:53+09:00") (updated nil "2012-06-12T23:43:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/35616785f9194ca00ec1"))) (url nil "http://qiita.com/items/35616785f9194ca00ec1") (title nil "特定のメジャーモードのバッファをリスト化する Elisp 関数") (content ((type . "html")) "<p>例えば dired-mode のバッファのみをリスト化したいならこんな感じ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-mode-buffer-list</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nb\">loop</span> <span class=\"nv\">for</span> <span class=\"nv\">buf</span> <span class=\"nv\">in</span> <span class=\"p\">(</span><span class=\"nv\">buffer-list</span><span class=\"p\">)</span>
        <span class=\"nv\">for</span> <span class=\"nv\">m</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">with-current-buffer</span> <span class=\"nv\">buf</span> <span class=\"nv\">major-mode</span><span class=\"p\">)</span>
        <span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">eq</span> <span class=\"nv\">m</span> <span class=\"ss\">&#39;dired-mode</span><span class=\"p\">)</span>
        <span class=\"nv\">collect</span> <span class=\"p\">(</span><span class=\"nv\">buffer-name</span> <span class=\"nv\">buf</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>5行目の <code>&#39;dired-mode</code> を別のメジャーモードに書き換えれば、そのモードのバッファをリスト化できる。リスト化したいメジャーモードが複数になるなら memq を使用するといい。</p>
") (published nil "2012-06-12T23:42:53Z") (updated nil "2012-06-12T23:43:23Z") (author nil (name nil "akisute3@github")))) ("パッチ適用済みelscreenを使う" "<p>探してみたらgithubにあった。<br>
<a href=\"https://github.com/knu/elscreen\">elscreen patched to work with recent Emacs</a></p>
<p>elscreenの問題については既出。</p>
<ul>
<li><p><a href=\"http://d.hatena.ne.jp/klon/20110822/1314002901\">Emacs+elscreen: &quot;command-line-1: Symbol's value as variable is void: dir&quot;</a></p></li>
<li><p><a href=\"http://jyukutyo.hatenablog.com/entry/20111115/1321414549\">Emacsでファイル名指定して実行しても、Symbol's value as variable is void: dirと表示されてファイルを開けない</a></p></li>
</ul>
<p>自分でパッチを当てるのが面倒な方や、<br>
<a href=\"http://www.morishima.net/%7Enaoto/elscreen-ja/\">elscreenの本家</a>からelscreenアドオンを個別にダウンロードするのが面倒な方はどうぞ。</p>" "http://qiita.com/items/56b39ecd2507363e7976" (20454 56993) old 120 nil nil ((id nil "tag:qiita.com,2005:Item/6104") (published nil "2012-06-12T21:58:23+09:00") (updated nil "2012-06-24T18:32:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/56b39ecd2507363e7976"))) (url nil "http://qiita.com/items/56b39ecd2507363e7976") (title nil "パッチ適用済みelscreenを使う") (content ((type . "html")) "<p>探してみたらgithubにあった。<br>
<a href=\"https://github.com/knu/elscreen\">elscreen patched to work with recent Emacs</a></p>

<p>elscreenの問題については既出。</p>

<ul>
<li><p><a href=\"http://d.hatena.ne.jp/klon/20110822/1314002901\">Emacs+elscreen: &quot;command-line-1: Symbol&#39;s value as variable is void: dir&quot;</a></p></li>
<li><p><a href=\"http://jyukutyo.hatenablog.com/entry/20111115/1321414549\">Emacsでファイル名指定して実行しても、Symbol&#39;s value as variable is void: dirと表示されてファイルを開けない</a></p></li>
</ul>

<p>自分でパッチを当てるのが面倒な方や、<br>
<a href=\"http://www.morishima.net/%7Enaoto/elscreen-ja/\">elscreenの本家</a>からelscreenアドオンを個別にダウンロードするのが面倒な方はどうぞ。</p>
") (published nil "2012-06-12T21:58:23Z") (updated nil "2012-06-24T18:32:17Z") (author nil (name nil "skkzsh@github")))) ("anythingで前後の情報源表示のキー割り当て" "<p>anythingで情報源を移動するには矢印キー（<code>←</code>、<code>→</code>）を使って前後の情報源を表示します。例えば、ファイルを開く際に「最近使ったファイル」や「バッファ」から串刺しで候補を見つけられますが、「最近使ったファイル」や「バッファ」に絞って候補を探したい場合には矢印キーを使って各情報源を表示します。</p>
<p>結構使用頻度が高そうなので、ホームポジションで操作できるように、次の情報源(<code>anything-previous-source</code>)に<code>C-M-n</code>、前の情報源(<code>anything-previous-source</code>)に<code>C-M-p</code>を割り当てます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">anything-map</span> <span class=\"s\">&quot;\\C-\\M-p&quot;</span> <span class=\"ss\">'anything-previous-source</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">anything-map</span> <span class=\"s\">&quot;\\C-\\M-n&quot;</span> <span class=\"ss\">'anything-next-source</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/257f37b795fd099c91e8" (20438 62137) old 121 nil nil ((id nil "tag:qiita.com,2005:Item/6093") (published nil "2012-06-12T16:41:45+09:00") (updated nil "2012-06-12T16:41:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/257f37b795fd099c91e8"))) (url nil "http://qiita.com/items/257f37b795fd099c91e8") (title nil "anythingで前後の情報源表示のキー割り当て") (content ((type . "html")) "<p>anythingで情報源を移動するには矢印キー（<code>←</code>、<code>→</code>）を使って前後の情報源を表示します。例えば、ファイルを開く際に「最近使ったファイル」や「バッファ」から串刺しで候補を見つけられますが、「最近使ったファイル」や「バッファ」に絞って候補を探したい場合には矢印キーを使って各情報源を表示します。</p>

<p>結構使用頻度が高そうなので、ホームポジションで操作できるように、次の情報源(<code>anything-previous-source</code>)に<code>C-M-n</code>、前の情報源(<code>anything-previous-source</code>)に<code>C-M-p</code>を割り当てます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">anything-map</span> <span class=\"s\">&quot;\\C-\\M-p&quot;</span> <span class=\"ss\">&#39;anything-previous-source</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">anything-map</span> <span class=\"s\">&quot;\\C-\\M-n&quot;</span> <span class=\"ss\">&#39;anything-next-source</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-12T16:41:45Z") (updated nil "2012-06-12T16:41:45Z") (author nil (name nil "icb54615")))) ("anything.elを導入する" "<p>以前から気にはなっていたのですが、なかなか導入できずにいたanything.elをようやく導入してみました。</p>
<p>インストールはコマンド一発でします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">anything</span>
</pre>
</div>
</div>
<p><code>C-c C-c</code>でそれぞれのファイルをインストールしていきます。</p>
<p>設定は、<code>.emacs.d/init.el</code>に下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'anything-startup</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これでEmacsを再起動すればanythingの世界になります。</p>" "http://qiita.com/items/b0801d406ad4d22a5c24" (20438 62070) old 122 nil nil ((id nil "tag:qiita.com,2005:Item/6092") (published nil "2012-06-12T16:40:38+09:00") (updated nil "2012-06-12T16:40:38+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b0801d406ad4d22a5c24"))) (url nil "http://qiita.com/items/b0801d406ad4d22a5c24") (title nil "anything.elを導入する") (content ((type . "html")) "<p>以前から気にはなっていたのですが、なかなか導入できずにいたanything.elをようやく導入してみました。</p>

<p>インストールはコマンド一発でします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">anything</span>
</pre>
</div>
</div>
<p><code>C-c C-c</code>でそれぞれのファイルをインストールしていきます。</p>

<p>設定は、<code>.emacs.d&#47;init.el</code>に下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;anything-startup</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これでEmacsを再起動すればanythingの世界になります。</p>
") (published nil "2012-06-12T16:40:38Z") (updated nil "2012-06-12T16:40:38Z") (author nil (name nil "icb54615")))) ("YaTeXのプレビュー(C-c t p)でプレビューアを追加する" "<h1>設定方法</h1>
<hr>
<p><strong>Emacs</strong>の<strong>YaTeXモード</strong>でプレビュー(C-c t p)を使うとき、<br>
指定したPreview Commandによっては<br>
Preview Fileの拡張子が自動補完されない場合がある。<br>
この場合には、補完リストを自分で追加する。<br>
補完リストは<code>yatex</code>ディレクトリ内にある<code>yatexprc.el</code>の849-852行目で<br>
以下のように定義されている(YaTeX 1.76)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">yatex/yatexprc.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">YaTeX-dvi2-command-ext-alist</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">&quot;[agx]dvi\\\\|dviout&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.dvi&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;ghostview\\\\|gv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.ps&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;acroread\\\\|pdf\\\\|Preview\\\\|TeXShop\\\\|Skim\\\\|evince&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.pdf&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>例えば、プレビューアとしてdviに<code>emacsclient</code>、<br>
pdfに<code>apvlv</code>を追加したい場合には以下の定義に変更するか、<code>~/.emacs</code>に書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">YaTeX-dvi2-command-ext-alist</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">&quot;[agx]dvi\\\\|dviout\\\\|emacsclient&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.dvi&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;ghostview\\\\|gv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.ps&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;acroread\\\\|pdf\\\\|Preview\\\\|TeXShop\\\\|Skim\\\\|evince\\\\|apvlv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.pdf&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以上のように設定すれば、<br>
これらのプレビューアでも拡張子が自動補完されるようになる。</p>
<h3>補足 (YaTeXモードのプレビュー)</h3>
<hr>
<p><strong>Emacs</strong>でTeXを編集するときには、<br>
入力補完の強い<strong>YaTeXモード</strong>を導入しておくと便利である。<br>
<a href=\"http://www.yatex.org/\">YaTeX</a><br>
<a href=\"http://www.nk.rim.or.jp/%7Enaru/yatex/\">YaTeX World</a><br>
C-c t pはプレビューにバインドされており、<br>
編集中のtexファイルをコンパイルして得たdviやpdfのファイルを<br>
Emacsから開いて閲覧することができる。<br>
具体的には、<code>~/.emacs</code>で設定した<code>dvi2-command</code></p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">dvi2-command</span> <span class=\"s\">&quot;xdvi&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>がEmacsの下の方にあるミニバッファに</p>
<blockquote>
<p>Preview Command: xdvi</p>
</blockquote>
<p>などと表示される。その後RETを押すと、</p>
<blockquote>
<p>Preview File: hoge.dvi</p>
</blockquote>
<p>と表示され、さらにRETを押すとそのファイルを開くことができる。</p>
<p>このとき、Preview Commandをミニバッファで編集することもでき、<br>
その場合は指定したコマンドに応じて<br>
Preview Fileの拡張子が自動補完される。例えば、</p>
<blockquote>
<p>Preview Command: xpdf</p>
</blockquote>
<p>と編集してRETを押すと、</p>
<blockquote>
<p>Preview File: hoge.pdf</p>
</blockquote>
<p>と拡張子が補完される。</p>
<h3>追記</h3>
<p>Lispのシンタックスハイライトが効いてなかったので、効くように変更。</p>" "http://qiita.com/items/bbb1991ab18514f11a6c" (20575 36504) old 123 nil nil ((id nil "tag:qiita.com,2005:Item/6077") (published nil "2012-06-12T00:59:14+09:00") (updated nil "2012-09-24T07:35:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/bbb1991ab18514f11a6c"))) (url nil "http://qiita.com/items/bbb1991ab18514f11a6c") (title nil "YaTeXのプレビュー(C-c t p)でプレビューアを追加する") (content ((type . "html")) "<h1>設定方法</h1>

<hr>

<p><strong>Emacs</strong>の<strong>YaTeXモード</strong>でプレビュー(C-c t p)を使うとき、<br>
指定したPreview Commandによっては<br>
Preview Fileの拡張子が自動補完されない場合がある。<br>
この場合には、補完リストを自分で追加する。<br>
補完リストは<code>yatex</code>ディレクトリ内にある<code>yatexprc.el</code>の849-852行目で<br>
以下のように定義されている(YaTeX 1.76)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">yatex/yatexprc.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">YaTeX-dvi2-command-ext-alist</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;[agx]dvi\\\\|dviout&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.dvi&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"s\">&quot;ghostview\\\\|gv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.ps&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"s\">&quot;acroread\\\\|pdf\\\\|Preview\\\\|TeXShop\\\\|Skim\\\\|evince&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.pdf&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>例えば、プレビューアとしてdviに<code>emacsclient</code>、<br>
pdfに<code>apvlv</code>を追加したい場合には以下の定義に変更するか、<code>~/.emacs</code>に書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">YaTeX-dvi2-command-ext-alist</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;[agx]dvi\\\\|dviout\\\\|emacsclient&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.dvi&quot;</span><span class=\"p\">)</span>
   <span class=\"p\">(</span><span class=\"s\">&quot;ghostview\\\\|gv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.ps&quot;</span><span class=\"p\">)</span>
   <span class=\"p\">(</span><span class=\"s\">&quot;acroread\\\\|pdf\\\\|Preview\\\\|TeXShop\\\\|Skim\\\\|evince\\\\|apvlv&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;.pdf&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以上のように設定すれば、<br>
これらのプレビューアでも拡張子が自動補完されるようになる。</p>

<h3>補足 (YaTeXモードのプレビュー)</h3>

<hr>

<p><strong>Emacs</strong>でTeXを編集するときには、<br>
入力補完の強い<strong>YaTeXモード</strong>を導入しておくと便利である。<br>
<a href=\"http://www.yatex.org/\">YaTeX</a><br>
<a href=\"http://www.nk.rim.or.jp/%7Enaru/yatex/\">YaTeX World</a><br>
C-c t pはプレビューにバインドされており、<br>
編集中のtexファイルをコンパイルして得たdviやpdfのファイルを<br>
Emacsから開いて閲覧することができる。<br>
具体的には、<code>~/.emacs</code>で設定した<code>dvi2-command</code></p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">dvi2-command</span> <span class=\"s\">&quot;xdvi&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>がEmacsの下の方にあるミニバッファに</p>

<blockquote>
<p>Preview Command: xdvi</p>
</blockquote>

<p>などと表示される。その後RETを押すと、</p>

<blockquote>
<p>Preview File: hoge.dvi</p>
</blockquote>

<p>と表示され、さらにRETを押すとそのファイルを開くことができる。</p>

<p>このとき、Preview Commandをミニバッファで編集することもでき、<br>
その場合は指定したコマンドに応じて<br>
Preview Fileの拡張子が自動補完される。例えば、</p>

<blockquote>
<p>Preview Command: xpdf</p>
</blockquote>

<p>と編集してRETを押すと、</p>

<blockquote>
<p>Preview File: hoge.pdf</p>
</blockquote>

<p>と拡張子が補完される。</p>

<h3>追記</h3>

<p>Lispのシンタックスハイライトが効いてなかったので、効くように変更。</p>
") (published nil "2012-06-12T00:59:14Z") (updated nil "2012-09-24T07:35:04Z") (author nil (name nil "skkzsh@github")))) ("MacでEmacsを使うときにCommandキーとOptionキーを入れ替える" "<p>デフォルトではCommandキーがSuper, OptionキーがMetaに割り当てられているため、親指が痛くてMacでのEmacs操作が苦痛。</p>
<p>なので、TerminalとCocoa EmacsでのみCommandとOptionを入れ替える方法。</p>
<h2>Terminal: KeyRemap4MacBook</h2>
<p>キーボードカスタマイズの定番KeyRemap4MacBookに、Terminal使用時のみ左Commandと左Optionを入れ替えるというありがたい設定があるので、これをオンに。<br>
<img src=\"http://4.bp.blogspot.com/-USokmhlsn6k/T9NTc6STe6I/AAAAAAAAAeM/NmjVe03B9W0/s1600/Screen+Shot+2012-06-09+at+22.34.44.png\" alt=\"KeyRemap4MacBook\"></p>
<h2>Cocoa Emacs: 設定ファイルにElispで</h2>
<p>KeyRemap4MacBookに「Command_L to Option_L (only in Emacs)」という項目もあるんだけど、これをオンにするとCommand+TabといったOSのショートカットキーが機能しなくなってしまい、ちょっと使いづらい。<br>
なので設定ファイルに以下を書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">Command</span>と<span class=\"n\">Option</span>を入れ替える
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">ns</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">-</span><span class=\"n\">modifier</span> <span class=\"p\">(</span><span class=\"n\">quote</span> <span class=\"n\">meta</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">ns</span><span class=\"o\">-</span><span class=\"n\">alternate</span><span class=\"o\">-</span><span class=\"n\">modifier</span> <span class=\"p\">(</span><span class=\"n\">quote</span> <span class=\"n\">super</span><span class=\"p\">))</span>
</pre>
</div>
</div>" "http://qiita.com/items/39342e2a4137dde894b4" (20435 24524) old 124 nil nil ((id nil "tag:qiita.com,2005:Item/6029") (published nil "2012-06-09T23:38:04+09:00") (updated nil "2012-06-09T23:38:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/39342e2a4137dde894b4"))) (url nil "http://qiita.com/items/39342e2a4137dde894b4") (title nil "MacでEmacsを使うときにCommandキーとOptionキーを入れ替える") (content ((type . "html")) "<p>デフォルトではCommandキーがSuper, OptionキーがMetaに割り当てられているため、親指が痛くてMacでのEmacs操作が苦痛。</p>

<p>なので、TerminalとCocoa EmacsでのみCommandとOptionを入れ替える方法。</p>

<h2>Terminal: KeyRemap4MacBook</h2>

<p>キーボードカスタマイズの定番KeyRemap4MacBookに、Terminal使用時のみ左Commandと左Optionを入れ替えるというありがたい設定があるので、これをオンに。<br>
<img src=\"http://4.bp.blogspot.com/-USokmhlsn6k/T9NTc6STe6I/AAAAAAAAAeM/NmjVe03B9W0/s1600/Screen+Shot+2012-06-09+at+22.34.44.png\" alt=\"KeyRemap4MacBook\"></p>

<h2>Cocoa Emacs: 設定ファイルにElispで</h2>

<p>KeyRemap4MacBookに「Command_L to Option_L (only in Emacs)」という項目もあるんだけど、これをオンにするとCommand+TabといったOSのショートカットキーが機能しなくなってしまい、ちょっと使いづらい。<br>
なので設定ファイルに以下を書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">Command</span>と<span class=\"n\">Option</span>を入れ替える
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">ns</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">-</span><span class=\"n\">modifier</span> <span class=\"p\">(</span><span class=\"n\">quote</span> <span class=\"n\">meta</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">ns</span><span class=\"o\">-</span><span class=\"n\">alternate</span><span class=\"o\">-</span><span class=\"n\">modifier</span> <span class=\"p\">(</span><span class=\"n\">quote</span> <span class=\"n\">super</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-06-09T23:38:04Z") (updated nil "2012-06-09T23:38:04Z") (author nil (name nil "usobuku")))) ("Emacs でオブジェクトを永続化するための参考コード" "<p>Auto Complete のコードあたりが参考になると思う。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-serialize</span> <span class=\"p\">(</span><span class=\"nv\">db</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">alist</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">maphash</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">push</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">)</span> <span class=\"nv\">alist</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">ac-comphist-tab</span> <span class=\"nv\">db</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">alist</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-deserialize</span> <span class=\"p\">(</span><span class=\"nv\">sexp</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
<span class=\"p\">(</span><span class=\"nv\">ac-comphist-make</span> <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">tab</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-make-tab</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">mapc</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nb\">cons</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">puthash</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nb\">cons</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">cdr</span> <span class=\"nb\">cons</span><span class=\"p\">)</span> <span class=\"nv\">tab</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">0</span> <span class=\"nv\">sexp</span><span class=\"p\">))</span>
<span class=\"nv\">tab</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">error</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Invalid comphist db.&quot;</span><span class=\"p\">)</span> <span class=\"no\">nil</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-init</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">ac-comphist-load</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'kill-emacs-hook</span> <span class=\"ss\">'ac-comphist-save</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-load</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">db</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">ignore-errors</span>
<span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
<span class=\"p\">(</span><span class=\"nv\">insert-file-contents</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">goto-char</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">ac-comphist-deserialize</span> <span class=\"p\">(</span><span class=\"nb\">read</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))))))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ac-comphist</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"nv\">db</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-make</span><span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-save</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'pp</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">ignore-errors</span>
<span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
<span class=\"p\">(</span><span class=\"nv\">pp</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-serialize</span> <span class=\"nv\">ac-comphist</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">write-region</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-max</span><span class=\"p\">)</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">))))</span>
</pre>
</div>
</div>" "http://qiita.com/items/7b888139724240bb19ae" (20432 49933) old 125 nil nil ((id nil "tag:qiita.com,2005:Item/5974") (published nil "2012-06-08T00:04:45+09:00") (updated nil "2012-06-08T00:04:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7b888139724240bb19ae"))) (url nil "http://qiita.com/items/7b888139724240bb19ae") (title nil "Emacs でオブジェクトを永続化するための参考コード") (content ((type . "html")) "<p>Auto Complete のコードあたりが参考になると思う。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-serialize</span> <span class=\"p\">(</span><span class=\"nv\">db</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"nv\">alist</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nb\">maphash</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nb\">push</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">)</span> <span class=\"nv\">alist</span><span class=\"p\">))</span>
             <span class=\"p\">(</span><span class=\"nv\">ac-comphist-tab</span> <span class=\"nv\">db</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">alist</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-deserialize</span> <span class=\"p\">(</span><span class=\"nv\">sexp</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">condition-case</span> <span class=\"no\">nil</span>
      <span class=\"p\">(</span><span class=\"nv\">ac-comphist-make</span> <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">tab</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-make-tab</span><span class=\"p\">)))</span>
                          <span class=\"p\">(</span><span class=\"nb\">mapc</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nb\">cons</span><span class=\"p\">)</span>
                                  <span class=\"p\">(</span><span class=\"nv\">puthash</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nb\">cons</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">cdr</span> <span class=\"nb\">cons</span><span class=\"p\">)</span> <span class=\"nv\">tab</span><span class=\"p\">))</span>
                                <span class=\"p\">(</span><span class=\"nb\">nth</span> <span class=\"mi\">0</span> <span class=\"nv\">sexp</span><span class=\"p\">))</span>
                          <span class=\"nv\">tab</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nb\">error</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Invalid comphist db.&quot;</span><span class=\"p\">)</span> <span class=\"no\">nil</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-init</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">ac-comphist-load</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;kill-emacs-hook</span> <span class=\"ss\">&#39;ac-comphist-save</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-load</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">db</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"nb\">ignore-errors</span>
                  <span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
                    <span class=\"p\">(</span><span class=\"nv\">insert-file-contents</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">)</span>
                    <span class=\"p\">(</span><span class=\"nv\">goto-char</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">))</span>
                    <span class=\"p\">(</span><span class=\"nv\">ac-comphist-deserialize</span> <span class=\"p\">(</span><span class=\"nb\">read</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))))))))</span>
    <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ac-comphist</span> <span class=\"p\">(</span><span class=\"nb\">or</span> <span class=\"nv\">db</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-make</span><span class=\"p\">)))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ac-comphist-save</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;pp</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">ignore-errors</span>
    <span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
      <span class=\"p\">(</span><span class=\"nv\">pp</span> <span class=\"p\">(</span><span class=\"nv\">ac-comphist-serialize</span> <span class=\"nv\">ac-comphist</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nv\">write-region</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-max</span><span class=\"p\">)</span> <span class=\"nv\">ac-comphist-file</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2012-06-08T00:04:45Z") (updated nil "2012-06-08T00:04:45Z") (author nil (name nil "akisute3@github")))) ("最近使ったファイル一覧を表示" "<p>最近使ったファイル一覧を表示するように、<code>recentf-ext.el</code>を導入します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">recentf</span><span class=\"o\">-</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; recentf-ext</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">recentf-max-saved-items</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">recentf-exclude</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;/TAGS$&quot;</span> <span class=\"s\">&quot;/var/tmp/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'recentf-ext</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-@&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'recentf-open-files</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-x recentf-opne-files</code>とすると履歴のバッファーが開かれます。頻繁に使用しそうなので<code>C-@</code>に割り当てをしました。</p>" "http://qiita.com/items/ed8ff0ac0443e0a9c7da" (20432 17778) old 126 nil nil ((id nil "tag:qiita.com,2005:Item/5956") (published nil "2012-06-07T15:08:50+09:00") (updated nil "2012-06-07T15:08:50+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ed8ff0ac0443e0a9c7da"))) (url nil "http://qiita.com/items/ed8ff0ac0443e0a9c7da") (title nil "最近使ったファイル一覧を表示") (content ((type . "html")) "<p>最近使ったファイル一覧を表示するように、<code>recentf-ext.el</code>を導入します。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">elisp</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">emacswiki</span> <span class=\"n\">recentf</span><span class=\"o\">-</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; recentf-ext</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">recentf-max-saved-items</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">recentf-exclude</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;/TAGS$&quot;</span> <span class=\"s\">&quot;/var/tmp/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;recentf-ext</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-@&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;recentf-open-files</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>M-x recentf-opne-files</code>とすると履歴のバッファーが開かれます。頻繁に使用しそうなので<code>C-@</code>に割り当てをしました。</p>
") (published nil "2012-06-07T15:08:50Z") (updated nil "2012-06-07T15:08:50Z") (author nil (name nil "icb54615")))) ("Emacs.appを-rvで起動する" "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">open</span> <span class=\"o\">-</span><span class=\"n\">a</span> <span class=\"n\">emacs</span> <span class=\"o\">--</span><span class=\"n\">args</span> <span class=\"s\">'-rv'</span>
</pre>
</div>
</div>" "http://qiita.com/items/9abe5ffb47e2b9f2df12" (20432 10103) old 127 nil nil ((id nil "tag:qiita.com,2005:Item/5954") (published nil "2012-06-07T13:00:55+09:00") (updated nil "2012-06-07T13:00:55+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9abe5ffb47e2b9f2df12"))) (url nil "http://qiita.com/items/9abe5ffb47e2b9f2df12") (title nil "Emacs.appを-rvで起動する") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">open</span> <span class=\"o\">-</span><span class=\"n\">a</span> <span class=\"n\">emacs</span> <span class=\"o\">--</span><span class=\"n\">args</span> <span class=\"s\">&#39;-rv&#39;</span>
</pre>
</div>
</div>") (published nil "2012-06-07T13:00:55Z") (updated nil "2012-06-07T13:00:55Z") (author nil (name nil "fumikony")))) ("Emacs の dired で現在のディレクトリを Nautilus で開く" "<p>以下のコードを .emacs に記述すれば、dired で e を入力したときに、現在のディレクトリを開いた Nautilus を起動できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-open-nautilus</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;nautilus&quot;</span> <span class=\"no\">nil</span> <span class=\"mi\">0</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">dired-current-directory</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;e&quot;</span> <span class=\"ss\">'dired-open-nautilus</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/2620874c802db60c99f9" (20430 8729) old 128 nil nil ((id nil "tag:qiita.com,2005:Item/5895") (published nil "2012-06-06T00:13:29+09:00") (updated nil "2012-06-06T00:13:29+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2620874c802db60c99f9"))) (url nil "http://qiita.com/items/2620874c802db60c99f9") (title nil "Emacs の dired で現在のディレクトリを Nautilus で開く") (content ((type . "html")) "<p>以下のコードを .emacs に記述すれば、dired で e を入力したときに、現在のディレクトリを開いた Nautilus を起動できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-open-nautilus</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;nautilus&quot;</span> <span class=\"no\">nil</span> <span class=\"mi\">0</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">dired-current-directory</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;e&quot;</span> <span class=\"ss\">&#39;dired-open-nautilus</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-06T00:13:29Z") (updated nil "2012-06-06T00:13:29Z") (author nil (name nil "akisute3@github")))) ("Emacs の dired でファイルを拡張子に適したアプリケーションで開く(Ubuntu)" "<p>以下のコードを .emacs に記述すれば、dired で o を入力したときに、カーソル位置のファイルを Nautilus でダブルクリックしたときと同じアプリケーションで開ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-open-file</span> <span class=\"p\">()</span>
<span class=\"s\">&quot;In dired, open the file named on this line.&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">file</span> <span class=\"p\">(</span><span class=\"nv\">dired-get-filename</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Opening %s...&quot;</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;gnome-open&quot;</span> <span class=\"no\">nil</span> <span class=\"mi\">0</span> <span class=\"no\">nil</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Opening %s done&quot;</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;o&quot;</span> <span class=\"ss\">'dired-open-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/e8d7194f32374ae05555" (20430 7846) old 129 nil nil ((id nil "tag:qiita.com,2005:Item/5892") (published nil "2012-06-05T23:58:46+09:00") (updated nil "2012-06-05T23:58:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e8d7194f32374ae05555"))) (url nil "http://qiita.com/items/e8d7194f32374ae05555") (title nil "Emacs の dired でファイルを拡張子に適したアプリケーションで開く(Ubuntu)") (content ((type . "html")) "<p>以下のコードを .emacs に記述すれば、dired で o を入力したときに、カーソル位置のファイルを Nautilus でダブルクリックしたときと同じアプリケーションで開ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dired-open-file</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;In dired, open the file named on this line.&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let*</span> <span class=\"p\">((</span><span class=\"nv\">file</span> <span class=\"p\">(</span><span class=\"nv\">dired-get-filename</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Opening %s...&quot;</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;gnome-open&quot;</span> <span class=\"no\">nil</span> <span class=\"mi\">0</span> <span class=\"no\">nil</span> <span class=\"nv\">file</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Opening %s done&quot;</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">dired-mode-map</span> <span class=\"s\">&quot;o&quot;</span> <span class=\"ss\">&#39;dired-open-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-05T23:58:46Z") (updated nil "2012-06-05T23:58:46Z") (author nil (name nil "akisute3@github")))) ("anything 導入時の describe-bindings で全てのキーバインドを表示する" "<p>Emacs 使いにはお馴染みの anything を導入すると、describe-bindings が descbinds-anything.el に置き換えられ、キーバインド一覧を anything インターフェイスで利用できる。</p>
<p>この describe-bindings、各モードにつきキーバインド最大表示数が 50 に制限されているため、一度に全てのキーを一覧表示することができない。その挙動に納得がいかなければ以下のコードを .emacs に記述すればよい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'descbinds-anything-source-template</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">candidate-number-limit</span> <span class=\"o\">.</span> <span class=\"mi\">9999</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>9999 は各モードの最大表示数なので、好みやスペックに合わせて好きな数に設定するのがいいだろう。</p>" "http://qiita.com/items/16a1014e0c8af9f89a05" (20430 5149) old 130 nil nil ((id nil "tag:qiita.com,2005:Item/5890") (published nil "2012-06-05T23:13:49+09:00") (updated nil "2012-06-05T23:13:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/16a1014e0c8af9f89a05"))) (url nil "http://qiita.com/items/16a1014e0c8af9f89a05") (title nil "anything 導入時の describe-bindings で全てのキーバインドを表示する") (content ((type . "html")) "<p>Emacs 使いにはお馴染みの anything を導入すると、describe-bindings が descbinds-anything.el に置き換えられ、キーバインド一覧を anything インターフェイスで利用できる。</p>

<p>この describe-bindings、各モードにつきキーバインド最大表示数が 50 に制限されているため、一度に全てのキーを一覧表示することができない。その挙動に納得がいかなければ以下のコードを .emacs に記述すればよい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;descbinds-anything-source-template</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">candidate-number-limit</span> <span class=\"o\">.</span> <span class=\"mi\">9999</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>9999 は各モードの最大表示数なので、好みやスペックに合わせて好きな数に設定するのがいいだろう。</p>
") (published nil "2012-06-05T23:13:49Z") (updated nil "2012-06-05T23:13:49Z") (author nil (name nil "akisute3@github")))) ("バッファの切替" "<p>バッファの切替を便利にするために、設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">ido-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">ido-everywhere</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>C-x b</code>でデフォルトだと前方一致で補完だったのが、部分文字列に一致する候補を並べてくれます。文字列を入力して、<code>C-s</code>で次候補、<code>C-r</code>で前候補を選択してくれます。</p>" "http://qiita.com/items/d4efe31a9f62a49c9259" (20429 40442) old 131 nil nil ((id nil "tag:qiita.com,2005:Item/5878") (published nil "2012-06-05T14:49:46+09:00") (updated nil "2012-06-05T14:49:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d4efe31a9f62a49c9259"))) (url nil "http://qiita.com/items/d4efe31a9f62a49c9259") (title nil "バッファの切替") (content ((type . "html")) "<p>バッファの切替を便利にするために、設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">ido-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">ido-everywhere</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>C-x b</code>でデフォルトだと前方一致で補完だったのが、部分文字列に一致する候補を並べてくれます。文字列を入力して、<code>C-s</code>で次候補、<code>C-r</code>で前候補を選択してくれます。</p>
") (published nil "2012-06-05T14:49:46Z") (updated nil "2012-06-05T14:49:46Z") (author nil (name nil "icb54615")))) ("Emacs のキーに一連の処理を割り当てる方法(及び便利なマクロ)" "<p>Emacs のキーには</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c r&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'query-replace</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>のように既存関数を割り当てることができるが、引数が必要な関数や一連の処理を割り当てたい場合は以下のように lambda を使用することで割り当て可能(interactive も必要)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-Z&quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>これを頻繁に記述するなら以下のようなマクロを定義するといいかもしれない。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defmacro</span> <span class=\"nv\">global-set-key-fn</span> <span class=\"p\">(</span><span class=\"nv\">key</span> <span class=\"nv\">args</span> <span class=\"k\">&amp;rest</span> <span class=\"nv\">body</span><span class=\"p\">)</span>
<span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"o\">,</span><span class=\"nv\">key</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"o\">,</span><span class=\"nv\">args</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span> <span class=\"o\">,@</span><span class=\"nv\">body</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>これで先ほどのキー割り当てを以下のように書ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key-fn</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-Z&quot;</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>" "http://qiita.com/items/d35860d844c06b40d2a5" (20428 52463) old 132 nil nil ((id nil "tag:qiita.com,2005:Item/5871") (published nil "2012-06-04T23:57:51+09:00") (updated nil "2012-06-04T23:57:51+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d35860d844c06b40d2a5"))) (url nil "http://qiita.com/items/d35860d844c06b40d2a5") (title nil "Emacs のキーに一連の処理を割り当てる方法(及び便利なマクロ)") (content ((type . "html")) "<p>Emacs のキーには</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-c r&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;query-replace</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>のように既存関数を割り当てることができるが、引数が必要な関数や一連の処理を割り当てたい場合は以下のように lambda を使用することで割り当て可能(interactive も必要)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-Z&quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>これを頻繁に記述するなら以下のようなマクロを定義するといいかもしれない。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defmacro</span> <span class=\"nv\">global-set-key-fn</span> <span class=\"p\">(</span><span class=\"nv\">key</span> <span class=\"nv\">args</span> <span class=\"k\">&amp;rest</span> <span class=\"nv\">body</span><span class=\"p\">)</span>
  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"o\">,</span><span class=\"nv\">key</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"o\">,</span><span class=\"nv\">args</span> <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span> <span class=\"o\">,@</span><span class=\"nv\">body</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>これで先ほどのキー割り当てを以下のように書ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">global-set-key-fn</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-M-Z&quot;</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-06-04T23:57:51Z") (updated nil "2012-06-04T23:57:51Z") (author nil (name nil "akisute3@github")))) ("Emacs で作成した使い捨てファイルを簡単に開く" "<p><a href=\"http://qiita.com/items/1d143b0b69e9aaf252ca\">http://qiita.com/items/1d143b0b69e9aaf252ca</a> で説明した open-junk-file.el だが、作成してバッファを閉じた後に再度開きたい時、ファイルパスをたどるのが面倒だったりする。</p>
<p>以下のコードを .emacs に書いておけば、<code>M-x open-last-junk-file</code> で最後に作成した使い捨てファイルを一発で開ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'em-glob</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-dir</span> <span class=\"s\">&quot;~/program/junk/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">open-last-junk-file</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"p\">(</span><span class=\"nb\">car</span>
<span class=\"p\">(</span><span class=\"nb\">last</span> <span class=\"p\">(</span><span class=\"nv\">eshell-extended-glob</span> <span class=\"p\">(</span><span class=\"nv\">concat</span>
<span class=\"p\">(</span><span class=\"nv\">file-name-as-directory</span> <span class=\"nv\">junk-file-dir</span><span class=\"p\">)</span>
<span class=\"s\">&quot;*/*/????-??-??-??????.*&quot;</span><span class=\"p\">))))))</span>
</pre>
</div>
</div>
<p>(設定は上記 URL の設定に合わせているので、<code>&quot;~/program/junk/&quot;</code> や <code>&quot;*/*/????-??-??-??????.*&quot;</code> の部分は設定に合わせて書き換える必要がある。)</p>
<p>また、anything を導入しているなら、以下のコードで使い捨てファイルを一覧表示するという方法もある。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'em-glob</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-dir</span> <span class=\"s\">&quot;~/program/junk/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-list</span>
<span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"p\">(</span><span class=\"nv\">eshell-extended-glob</span> <span class=\"p\">(</span><span class=\"nv\">concat</span>
<span class=\"p\">(</span><span class=\"nv\">file-name-as-directory</span> <span class=\"nv\">junk-file-dir</span><span class=\"p\">)</span>
<span class=\"s\">&quot;*/*/????-??-??-??????.*&quot;</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-source-junk-files</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;Junk Files&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">candidates</span> <span class=\"o\">.</span> <span class=\"nv\">junk-file-list</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"o\">.</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-open-junk-file</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span> <span class=\"ss\">'anything-c-source-junk-files</span> <span class=\"s\">&quot;*anything for junk file&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-x M-j&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'anything-open-junk-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで C-x M-j を入力すると使い捨てファイル一覧が anything で表示される。このコードでは新しいファイルを開きやすいように、リストに reverse をかけてから一覧表示している。</p>" "http://qiita.com/items/eba6bc64f66d278f0032" (20428 22666) old 133 nil nil ((id nil "tag:qiita.com,2005:Item/5861") (published nil "2012-06-04T15:41:14+09:00") (updated nil "2012-06-04T15:41:14+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/eba6bc64f66d278f0032"))) (url nil "http://qiita.com/items/eba6bc64f66d278f0032") (title nil "Emacs で作成した使い捨てファイルを簡単に開く") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/1d143b0b69e9aaf252ca\">http:&#47;&#47;qiita.com&#47;items&#47;1d143b0b69e9aaf252ca</a> で説明した open-junk-file.el だが、作成してバッファを閉じた後に再度開きたい時、ファイルパスをたどるのが面倒だったりする。</p>

<p>以下のコードを .emacs に書いておけば、<code>M-x open-last-junk-file</code> で最後に作成した使い捨てファイルを一発で開ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;em-glob</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-dir</span> <span class=\"s\">&quot;~/program/junk/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">open-last-junk-file</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"p\">(</span><span class=\"nb\">car</span>
              <span class=\"p\">(</span><span class=\"nb\">last</span> <span class=\"p\">(</span><span class=\"nv\">eshell-extended-glob</span> <span class=\"p\">(</span><span class=\"nv\">concat</span>
                                           <span class=\"p\">(</span><span class=\"nv\">file-name-as-directory</span> <span class=\"nv\">junk-file-dir</span><span class=\"p\">)</span>
                                           <span class=\"s\">&quot;*/*/????-??-??-??????.*&quot;</span><span class=\"p\">))))))</span>
</pre>
</div>
</div>
<p>(設定は上記 URL の設定に合わせているので、<code>&quot;~&#47;program&#47;junk&#47;&quot;</code> や <code>&quot;*&#47;*&#47;????-??-??-??????.*&quot;</code> の部分は設定に合わせて書き換える必要がある。)</p>

<p>また、anything を導入しているなら、以下のコードで使い捨てファイルを一覧表示するという方法もある。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;em-glob</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-dir</span> <span class=\"s\">&quot;~/program/junk/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">junk-file-list</span>
  <span class=\"p\">(</span><span class=\"nb\">reverse</span> <span class=\"p\">(</span><span class=\"nv\">eshell-extended-glob</span> <span class=\"p\">(</span><span class=\"nv\">concat</span>
                                  <span class=\"p\">(</span><span class=\"nv\">file-name-as-directory</span> <span class=\"nv\">junk-file-dir</span><span class=\"p\">)</span>
                                  <span class=\"s\">&quot;*/*/????-??-??-??????.*&quot;</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-source-junk-files</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;Junk Files&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">candidates</span> <span class=\"o\">.</span> <span class=\"nv\">junk-file-list</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"o\">.</span> <span class=\"nv\">file</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-open-junk-file</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span> <span class=\"ss\">&#39;anything-c-source-junk-files</span> <span class=\"s\">&quot;*anything for junk file&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-x M-j&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;anything-open-junk-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>これで C-x M-j を入力すると使い捨てファイル一覧が anything で表示される。このコードでは新しいファイルを開きやすいように、リストに reverse をかけてから一覧表示している。</p>
") (published nil "2012-06-04T15:41:14Z") (updated nil "2012-06-04T15:41:14Z") (author nil (name nil "akisute3@github")))) ("Emacs で使い捨てファイルを開く" "<p>Emacs には使い捨て用の <em>scratch</em> バッファがあるが、せっかく書いたコードが Emacs 終了と同時に消えてしまうのはもったいないし、不意に Emacs が落ちると面倒だ。</p>
<p>そこで open-junk-file.el を使用すれば、使い捨て用のファイルをすぐに開くことができる。インストール方法は以下の通り。</p>
<ol>
<li><a href=\"http://www.emacswiki.org/emacs/open-junk-file.el\">http://www.emacswiki.org/emacs/open-junk-file.el</a> から open-junk-file.el を入手し、パスの通ったところに置く (auto-install を導入していれば <code>M-x install-elisp-from-emacswiki open-junk-file.el</code> などでもインストール可)。</li>
<li>.emacs に以下のような設定を記述。</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">open-junk-file-format</span> <span class=\"s\">&quot;~/program/junk/%Y/%m/%Y-%m-%d-%H%M%S.&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-x j&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'open-junk-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>この設定を行えば、Emacs で C-x j を入力すると <code>Junk Code (Enter extension): ~/program/junk/2012/06/2012-06-04-152242.</code> のように表示され、拡張子を入力して RET を入力するだけで使い捨て用コードを開くことができる。</p>" "http://qiita.com/items/1d143b0b69e9aaf252ca" (20428 21662) old 134 nil nil ((id nil "tag:qiita.com,2005:Item/5860") (published nil "2012-06-04T15:24:30+09:00") (updated nil "2012-06-04T15:24:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1d143b0b69e9aaf252ca"))) (url nil "http://qiita.com/items/1d143b0b69e9aaf252ca") (title nil "Emacs で使い捨てファイルを開く") (content ((type . "html")) "<p>Emacs には使い捨て用の <em>scratch</em> バッファがあるが、せっかく書いたコードが Emacs 終了と同時に消えてしまうのはもったいないし、不意に Emacs が落ちると面倒だ。</p>

<p>そこで open-junk-file.el を使用すれば、使い捨て用のファイルをすぐに開くことができる。インストール方法は以下の通り。</p>

<ol>
<li><a href=\"http://www.emacswiki.org/emacs/open-junk-file.el\">http:&#47;&#47;www.emacswiki.org&#47;emacs&#47;open-junk-file.el</a> から open-junk-file.el を入手し、パスの通ったところに置く (auto-install を導入していれば <code>M-x install-elisp-from-emacswiki open-junk-file.el</code> などでもインストール可)。</li>
<li>.emacs に以下のような設定を記述。</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">open-junk-file-format</span> <span class=\"s\">&quot;~/program/junk/%Y/%m/%Y-%m-%d-%H%M%S.&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-x j&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;open-junk-file</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>この設定を行えば、Emacs で C-x j を入力すると <code>Junk Code (Enter extension): ~&#47;program&#47;junk&#47;2012&#47;06&#47;2012-06-04-152242.</code> のように表示され、拡張子を入力して RET を入力するだけで使い捨て用コードを開くことができる。</p>
") (published nil "2012-06-04T15:24:30Z") (updated nil "2012-06-04T15:24:30Z") (author nil (name nil "akisute3@github")))) ("Emacs のミニバッファで C-w を入力したときに区切りまでの語を削除する" "<p>zsh では C-w を入力すると区切りまでの文字を削除することができる。Emacs のミニバッファで同じ事をやりたい場合は、以下のコードを .emacs に記述すればよい。これを書いてると C-x C-f などで非常に便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">minibuffer-local-completion-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'backward-kill-word</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/0df65996288d4e110dbd" (20427 39075) old 135 nil nil ((id nil "tag:qiita.com,2005:Item/5854") (published nil "2012-06-04T02:02:27+09:00") (updated nil "2012-06-04T02:02:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0df65996288d4e110dbd"))) (url nil "http://qiita.com/items/0df65996288d4e110dbd") (title nil " Emacs のミニバッファで C-w を入力したときに区切りまでの語を削除する") (content ((type . "html")) "<p>zsh では C-w を入力すると区切りまでの文字を削除することができる。Emacs のミニバッファで同じ事をやりたい場合は、以下のコードを .emacs に記述すればよい。これを書いてると C-x C-f などで非常に便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">minibuffer-local-completion-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-w&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;backward-kill-word</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-04T02:02:27Z") (updated nil "2012-06-04T02:02:27Z") (author nil (name nil "akisute3@github")))) ("Emacs で root 権限が必要なファイルを編集する" "<p>C-x C-f でファイルを開くときに <code>/sudo::/etc/passwd</code> のようにファイルパスの先頭に <code>/sudo::</code> をつけると編集できる。</p>" "http://qiita.com/items/7e298a38f40dc2a153c3" (20427 28395) old 136 nil nil ((id nil "tag:qiita.com,2005:Item/5851") (published nil "2012-06-03T23:04:27+09:00") (updated nil "2012-06-03T23:04:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7e298a38f40dc2a153c3"))) (url nil "http://qiita.com/items/7e298a38f40dc2a153c3") (title nil "Emacs で root 権限が必要なファイルを編集する") (content ((type . "html")) "<p>C-x C-f でファイルを開くときに <code>&#47;sudo::&#47;etc&#47;passwd</code> のようにファイルパスの先頭に <code>&#47;sudo::</code> をつけると編集できる。</p>
") (published nil "2012-06-03T23:04:27Z") (updated nil "2012-06-03T23:04:27Z") (author nil (name nil "akisute3@github")))) ("Emacs の コピー/ペースト をクリップボードで行う" "<p>Emacs では コピー/ペースト を独自バッファで行っているため、OSのクリップボードと文字列を共有しない。以下のコードを .emacs に記述することで、Emacs でもクリップボードを使用できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">x-select-enable-clipboard</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\C-y&quot;</span> <span class=\"ss\">'x-clipboard-yank</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/f5ccc2b027a9aaa13fe4" (20426 15571) old 137 nil nil ((id nil "tag:qiita.com,2005:Item/5843") (published nil "2012-06-03T01:18:27+09:00") (updated nil "2012-06-03T01:18:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f5ccc2b027a9aaa13fe4"))) (url nil "http://qiita.com/items/f5ccc2b027a9aaa13fe4") (title nil "Emacs の コピー/ペースト をクリップボードで行う") (content ((type . "html")) "<p>Emacs では コピー&#47;ペースト を独自バッファで行っているため、OSのクリップボードと文字列を共有しない。以下のコードを .emacs に記述することで、Emacs でもクリップボードを使用できる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">x-select-enable-clipboard</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\C-y&quot;</span> <span class=\"ss\">&#39;x-clipboard-yank</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-06-03T01:18:27Z") (updated nil "2012-06-03T01:18:27Z") (author nil (name nil "akisute3@github")))) ("ファイル名がかぶった場合にバッファ名をわかりやすくする" "<p>uniquifyはEmacsに同梱されているようなので特にインストールは不要でした。</p>
<p>設定ファイルに下記を追加してEmacsを再起動します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'uniquify</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">uniquify-buffer-name-style</span> <span class=\"ss\">'post-forward-angle-brackets</span><span class=\"p\">)</span><span class=\"o\">`</span>
</pre>
</div>
</div>
<p>これで同じファイル名だとディレクトリ名も表示してくれます。</p>
<p>これは便利すぎる。いままで知らなかったのが悔やまれる。</p>" "http://qiita.com/items/db1e0f7d97fcb0afe416" (20421 56358) old 138 nil nil ((id nil "tag:qiita.com,2005:Item/5759") (published nil "2012-05-30T17:36:54+09:00") (updated nil "2012-05-30T17:36:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/db1e0f7d97fcb0afe416"))) (url nil "http://qiita.com/items/db1e0f7d97fcb0afe416") (title nil "ファイル名がかぶった場合にバッファ名をわかりやすくする") (content ((type . "html")) "<p>uniquifyはEmacsに同梱されているようなので特にインストールは不要でした。</p>

<p>設定ファイルに下記を追加してEmacsを再起動します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;uniquify</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">uniquify-buffer-name-style</span> <span class=\"ss\">&#39;post-forward-angle-brackets</span><span class=\"p\">)</span><span class=\"o\">`</span>
</pre>
</div>
</div>
<p>これで同じファイル名だとディレクトリ名も表示してくれます。</p>

<p>これは便利すぎる。いままで知らなかったのが悔やまれる。</p>
") (published nil "2012-05-30T17:36:54Z") (updated nil "2012-05-30T17:36:54Z") (author nil (name nil "icb54615")))) ("C-a C-aしてバッファーの頭に移動する" "<p>sequential-command.elをauto-installでインストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">sequential</span><span class=\"o\">-</span><span class=\"n\">command</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'sequential-command-config</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">sequential-command-setup-keys</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>Emacsを再起動して、<code>C-a C-a C-a</code>とかすると、行頭にいって、バッファーの頭にいって、元に戻ります。</p>
<p>なにげに便利だ。</p>" "http://qiita.com/items/888a0dbb451b7f9df1f0" (20421 56308) old 139 nil nil ((id nil "tag:qiita.com,2005:Item/5758") (published nil "2012-05-30T17:36:04+09:00") (updated nil "2012-05-30T17:36:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/888a0dbb451b7f9df1f0"))) (url nil "http://qiita.com/items/888a0dbb451b7f9df1f0") (title nil "C-a C-aしてバッファーの頭に移動する") (content ((type . "html")) "<p>sequential-command.elをauto-installでインストールします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">batch</span> <span class=\"n\">sequential</span><span class=\"o\">-</span><span class=\"n\">command</span>
</pre>
</div>
</div>
<p>設定ファイルに下記を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;sequential-command-config</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">sequential-command-setup-keys</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>Emacsを再起動して、<code>C-a C-a C-a</code>とかすると、行頭にいって、バッファーの頭にいって、元に戻ります。</p>

<p>なにげに便利だ。</p>
") (published nil "2012-05-30T17:36:04Z") (updated nil "2012-05-30T17:36:04Z") (author nil (name nil "icb54615")))) ("Rubyのflymakeが正しく動作しない時" "<p>具体的にはRuby1.9以降のハッシュ記法</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">hash.rb</span></div><div class=\"highlight\"><pre><span class=\"p\">{</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">value</span> <span class=\"p\">}</span>
</pre>
</div>
</div>
<p>がエラー行と見なされていた。<br>
実はflymakeはrubyを呼び出していて、Ruby1.9はrvmで入れていたので、システムのRuby1.8.7が呼び出されていた。<br>
rvm.el <a href=\"https://github.com/senny/rvm.el\">https://github.com/senny/rvm.el</a><br>
をloadpathの通った所に入れて、.emacsに</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">rvm-settings.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">rvm</span>
<span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'</span><span class=\"err\">rvm nil t)</span>
<span class=\"p\">(</span><span class=\"n\">rvm</span><span class=\"o\">-</span><span class=\"n\">use</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>で解決。</p>" "http://qiita.com/items/c1cd9f8ea77a31392159" (20461 13180) old 140 nil nil ((id nil "tag:qiita.com,2005:Item/5733") (published nil "2012-05-29T22:52:43+09:00") (updated nil "2012-06-29T13:47:56+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c1cd9f8ea77a31392159"))) (url nil "http://qiita.com/items/c1cd9f8ea77a31392159") (title nil "Rubyのflymakeが正しく動作しない時") (content ((type . "html")) "<p>具体的にはRuby1.9以降のハッシュ記法</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">hash.rb</span></div><div class=\"highlight\"><pre><span class=\"p\">{</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">value</span> <span class=\"p\">}</span>
</pre>
</div>
</div>
<p>がエラー行と見なされていた。<br>
実はflymakeはrubyを呼び出していて、Ruby1.9はrvmで入れていたので、システムのRuby1.8.7が呼び出されていた。<br>
rvm.el <a href=\"https://github.com/senny/rvm.el\">https://github.com/senny/rvm.el</a><br>
をloadpathの通った所に入れて、.emacsに</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">rvm-settings.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">rvm</span>
<span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;</span><span class=\"err\">rvm nil t)</span>
  <span class=\"p\">(</span><span class=\"n\">rvm</span><span class=\"o\">-</span><span class=\"n\">use</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>で解決。</p>
") (published nil "2012-05-29T22:52:43Z") (updated nil "2012-06-29T13:47:56Z") (author nil (name nil "nysalor")))) ("auto-installのインストールおよび設定" "<p>auto-installをダウンロードしてバイトコンパイルします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">mkdir</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"o\">~/</span><span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
$ <span class=\"n\">cd</span> <span class=\"o\">~/</span><span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
$ <span class=\"n\">wget</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">www</span><span class=\"p\">.</span><span class=\"n\">emacswiki</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">/</span><span class=\"n\">download</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">.</span><span class=\"n\">el</span>
$ <span class=\"n\">emacs</span> <span class=\"o\">--</span><span class=\"n\">batch</span> <span class=\"o\">-</span><span class=\"n\">Q</span> <span class=\"o\">-</span><span class=\"n\">f</span> <span class=\"n\">batch</span><span class=\"o\">-</span><span class=\"n\">byte</span><span class=\"o\">-</span><span class=\"n\">compile</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>Emacsの設定ファイルに下記を追加してEmacsを再起動します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; (install-elisp-from-emacswiki &quot;auto-install.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'auto-install</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'load-path</span> <span class=\"nv\">auto-install-directory</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">auto-install-update-emacswiki-package-name</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">auto-install-compatibility-setup</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ediff-window-setup-function</span> <span class=\"ss\">'ediff-setup-windows-plain</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/abc8b9ce2b2ee9441141" (20419 8746) old 141 nil nil ((id nil "tag:qiita.com,2005:Item/5693") (published nil "2012-05-28T15:58:50+09:00") (updated nil "2012-05-28T15:58:50+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/abc8b9ce2b2ee9441141"))) (url nil "http://qiita.com/items/abc8b9ce2b2ee9441141") (title nil "auto-installのインストールおよび設定") (content ((type . "html")) "<p>auto-installをダウンロードしてバイトコンパイルします。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">mkdir</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"o\">~/</span><span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
$ <span class=\"n\">cd</span> <span class=\"o\">~/</span><span class=\"p\">.</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
$ <span class=\"n\">wget</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">www</span><span class=\"p\">.</span><span class=\"n\">emacswiki</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">/</span><span class=\"n\">download</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">.</span><span class=\"n\">el</span>
$ <span class=\"n\">emacs</span> <span class=\"o\">--</span><span class=\"n\">batch</span> <span class=\"o\">-</span><span class=\"n\">Q</span> <span class=\"o\">-</span><span class=\"n\">f</span> <span class=\"n\">batch</span><span class=\"o\">-</span><span class=\"n\">byte</span><span class=\"o\">-</span><span class=\"n\">compile</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">.</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p>Emacsの設定ファイルに下記を追加してEmacsを再起動します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; (install-elisp-from-emacswiki &quot;auto-install.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;auto-install</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"nv\">auto-install-directory</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">auto-install-update-emacswiki-package-name</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">auto-install-compatibility-setup</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ediff-window-setup-function</span> <span class=\"ss\">&#39;ediff-setup-windows-plain</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-05-28T15:58:50Z") (updated nil "2012-05-28T15:58:50Z") (author nil (name nil "icb54615")))) ("markdown-modeをインストールする(Ubuntu11.10)" "<p>Emacsでmarkdown形式のテキストを編集したかったので、markdownモードを導入しました。</p>
<p>Ubuntuでパッケージがあったのでそちらをインストールしました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">goodies</span><span class=\"o\">-</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p><code>.emacs.d/init.el</code>に下記を追加して、拡張子が<code>.text</code>のファイルは自動でmarkdownモードにするようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; markdown-mode</span>
<span class=\"p\">(</span><span class=\"nv\">autoload</span> <span class=\"ss\">'markdown-mode</span> <span class=\"s\">&quot;markdown-mode.el&quot;</span>
<span class=\"s\">&quot;Major mode for editing Markdown files&quot;</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">auto-mode-alist</span>
<span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\.text&quot;</span> <span class=\"o\">.</span> <span class=\"nv\">markdown-mode</span><span class=\"p\">)</span> <span class=\"nv\">auto-mode-alist</span><span class=\"p\">))</span>
</pre>
</div>
</div>" "http://qiita.com/items/e4444a498ca65021ed89" (20415 8855) old 142 nil nil ((id nil "tag:qiita.com,2005:Item/5621") (published nil "2012-05-25T15:11:35+09:00") (updated nil "2012-05-25T15:11:35+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e4444a498ca65021ed89"))) (url nil "http://qiita.com/items/e4444a498ca65021ed89") (title nil "markdown-modeをインストールする(Ubuntu11.10)") (content ((type . "html")) "<p>Emacsでmarkdown形式のテキストを編集したかったので、markdownモードを導入しました。</p>

<p>Ubuntuでパッケージがあったのでそちらをインストールしました。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">goodies</span><span class=\"o\">-</span><span class=\"n\">el</span>
</pre>
</div>
</div>
<p><code>.emacs.d&#47;init.el</code>に下記を追加して、拡張子が<code>.text</code>のファイルは自動でmarkdownモードにするようにします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.d/init.el</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; markdown-mode</span>
<span class=\"p\">(</span><span class=\"nv\">autoload</span> <span class=\"ss\">&#39;markdown-mode</span> <span class=\"s\">&quot;markdown-mode.el&quot;</span>
  <span class=\"s\">&quot;Major mode for editing Markdown files&quot;</span> <span class=\"no\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">auto-mode-alist</span>
      <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;\\\\.text&quot;</span> <span class=\"o\">.</span> <span class=\"nv\">markdown-mode</span><span class=\"p\">)</span> <span class=\"nv\">auto-mode-alist</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-05-25T15:11:35Z") (updated nil "2012-05-25T15:11:35Z") (author nil (name nil "icb54615")))) ("個人的な Emacs インターフェース" "<p>いつも自分で Emacs を使うときに使い回すインターフェース用 .el</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">elisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; scroll-bar-mode &quot;right&quot; or &quot;left&quot; or &quot;nil&quot;</span>
<span class=\"p\">(</span><span class=\"nf\">set-scroll-bar-mode</span> <span class=\"ss\">'nil</span><span class=\"p\">)</span>
<span class=\"c1\">;; 補完で大文字小文字無視</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">read-file-name-completion-ignore-case</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"c1\">;; 対応する括弧を光らせる。</span>
<span class=\"p\">(</span><span class=\"nf\">show-paren-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"c1\">;; ファイル末の改行がなければ追加</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">require-final-newline</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"c1\">;; ウインドウ分割時に画面外へ出る文章を折り返す</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">truncate-partial-width-windows</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"c1\">;; 編集行のハイライト</span>
<span class=\"p\">(</span><span class=\"nf\">global-hl-line-mode</span><span class=\"p\">)</span>
<span class=\"c1\">;;tabは4文字分、改行後に自動インデント</span>
<span class=\"p\">(</span><span class=\"nf\">setq-default</span> <span class=\"nv\">tab-width</span> <span class=\"mi\">4</span> <span class=\"nv\">indent-tabs-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"c1\">;;; キーバインド</span>
<span class=\"p\">(</span><span class=\"nf\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"s\">&quot;\\C-h&quot;</span> <span class=\"ss\">'delete-backward-char</span><span class=\"p\">)</span> <span class=\"c1\">; 削除</span>
<span class=\"c1\">;;; ツールバー(add-to-list 'default-frame-alist '(alpha . 0))を非表示</span>
<span class=\"c1\">;; M-x tool-bar-mode で表示非表示を切り替えられる</span>
<span class=\"p\">(</span><span class=\"nf\">tool-bar-mode</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>
<span class=\"c1\">;;; メニューバーを非表示</span>
<span class=\"c1\">;; M-x menu-bar-mode で表示非表示を切り替えられる</span>
<span class=\"p\">(</span><span class=\"nf\">menu-bar-mode</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>
<span class=\"c1\">;; set alpha</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'default-frame-alist</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">alpha</span> <span class=\"o\">.</span> <span class=\"mi\">80</span><span class=\"p\">))</span>
<span class=\"c1\">;; set font and screen</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
<span class=\"c1\">;; 文字の色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'default-frame-alist</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">foreground-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;azure1&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; 背景色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'default-frame-alist</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">background-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;black&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; カーソルの色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'default-frame-alist</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">cursor-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;green&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; マウスポインタの色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'default-frame-alist</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">mouse-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;green&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; モードラインの文字の色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">set-face-foreground</span> <span class=\"ss\">'modeline</span> <span class=\"s\">&quot;white&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; モードラインの背景色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">'modeline</span> <span class=\"s\">&quot;DimGrey&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; 選択中のリージョンの色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">'region</span> <span class=\"s\">&quot;Blue&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; モードライン（アクティブでないバッファ）の文字色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">set-face-foreground</span> <span class=\"ss\">'mode-line-inactive</span> <span class=\"s\">&quot;gray30&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; モードライン（アクティブでないバッファ）の背景色を設定します。</span>
<span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">'mode-line-inactive</span> <span class=\"s\">&quot;gray85&quot;</span><span class=\"p\">)</span>
<span class=\"p\">)</span>
<span class=\"c1\">;====================================</span>
<span class=\"c1\">;;全角スペースとかに色を付ける</span>
<span class=\"c1\">;====================================</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-1</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-1</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-2</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-2</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-u-1</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:foreground</span> <span class=\"s\">&quot;SeaGreen&quot;</span> <span class=\"nv\">:underline</span> <span class=\"nv\">t</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-b-1</span> <span class=\"ss\">'my-face-b-1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-b-2</span> <span class=\"ss\">'my-face-b-2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-u-1</span> <span class=\"ss\">'my-face-u-1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">font-lock-mode</span> <span class=\"p\">(</span><span class=\"nf\">before</span> <span class=\"nv\">my-font-lock-mode</span> <span class=\"p\">())</span>
<span class=\"p\">(</span><span class=\"nf\">font-lock-add-keywords</span>
<span class=\"nv\">major-mode</span>
<span class=\"o\">'</span><span class=\"p\">(</span>
<span class=\"p\">(</span><span class=\"s\">&quot;　&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-b-1</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;\\t&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-b-2</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;[ ]+$&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-u-1</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
<span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">ad-enable-advice</span> <span class=\"ss\">'font-lock-mode</span> <span class=\"ss\">'before</span> <span class=\"ss\">'my-font-lock-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">ad-activate</span> <span class=\"ss\">'font-lock-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">add-hook</span> <span class=\"ss\">'find-file-hooks</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">font-lock-mode</span>
<span class=\"nv\">nil</span>
<span class=\"p\">(</span><span class=\"nf\">font-lock-mode</span> <span class=\"nv\">t</span><span class=\"p\">))))</span>
</pre>
</div>
</div>" "http://qiita.com/items/15a9a58cbb2b618a0069" (20415 60) old 143 nil nil ((id nil "tag:qiita.com,2005:Item/5615") (published nil "2012-05-25T03:53:09+09:00") (updated nil "2012-05-25T12:45:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/15a9a58cbb2b618a0069"))) (url nil "http://qiita.com/items/15a9a58cbb2b618a0069") (title nil "個人的な Emacs インターフェース") (content ((type . "html")) "<p>いつも自分で Emacs を使うときに使い回すインターフェース用 .el</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">elisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; scroll-bar-mode &quot;right&quot; or &quot;left&quot; or &quot;nil&quot;</span>
<span class=\"p\">(</span><span class=\"nf\">set-scroll-bar-mode</span> <span class=\"ss\">&#39;nil</span><span class=\"p\">)</span>

<span class=\"c1\">;; 補完で大文字小文字無視</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">read-file-name-completion-ignore-case</span> <span class=\"nv\">t</span><span class=\"p\">)</span>

<span class=\"c1\">;; 対応する括弧を光らせる。</span>
<span class=\"p\">(</span><span class=\"nf\">show-paren-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span> 

<span class=\"c1\">;; ファイル末の改行がなければ追加</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">require-final-newline</span> <span class=\"nv\">t</span><span class=\"p\">)</span> 

<span class=\"c1\">;; ウインドウ分割時に画面外へ出る文章を折り返す</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">truncate-partial-width-windows</span> <span class=\"nv\">nil</span><span class=\"p\">)</span> 

<span class=\"c1\">;; 編集行のハイライト</span>
<span class=\"p\">(</span><span class=\"nf\">global-hl-line-mode</span><span class=\"p\">)</span> 

<span class=\"c1\">;;tabは4文字分、改行後に自動インデント</span>
<span class=\"p\">(</span><span class=\"nf\">setq-default</span> <span class=\"nv\">tab-width</span> <span class=\"mi\">4</span> <span class=\"nv\">indent-tabs-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>

<span class=\"c1\">;;; キーバインド</span>
<span class=\"p\">(</span><span class=\"nf\">define-key</span> <span class=\"nv\">global-map</span> <span class=\"s\">&quot;\\C-h&quot;</span> <span class=\"ss\">&#39;delete-backward-char</span><span class=\"p\">)</span> <span class=\"c1\">; 削除</span>

<span class=\"c1\">;;; ツールバー(add-to-list &#39;default-frame-alist &#39;(alpha . 0))を非表示</span>
<span class=\"c1\">;; M-x tool-bar-mode で表示非表示を切り替えられる</span>
<span class=\"p\">(</span><span class=\"nf\">tool-bar-mode</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>

<span class=\"c1\">;;; メニューバーを非表示</span>
<span class=\"c1\">;; M-x menu-bar-mode で表示非表示を切り替えられる</span>
<span class=\"p\">(</span><span class=\"nf\">menu-bar-mode</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>

<span class=\"c1\">;; set alpha</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">alpha</span> <span class=\"o\">.</span> <span class=\"mi\">80</span><span class=\"p\">))</span>

<span class=\"c1\">;; set font and screen</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
  <span class=\"c1\">;; 文字の色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">foreground-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;azure1&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; 背景色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">background-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;black&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; カーソルの色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">cursor-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;green&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; マウスポインタの色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;default-frame-alist</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">mouse-color</span> <span class=\"o\">.</span> <span class=\"s\">&quot;green&quot;</span><span class=\"p\">))</span>
  <span class=\"c1\">;; モードラインの文字の色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-foreground</span> <span class=\"ss\">&#39;modeline</span> <span class=\"s\">&quot;white&quot;</span><span class=\"p\">)</span>
  <span class=\"c1\">;; モードラインの背景色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">&#39;modeline</span> <span class=\"s\">&quot;DimGrey&quot;</span><span class=\"p\">)</span>
  <span class=\"c1\">;; 選択中のリージョンの色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">&#39;region</span> <span class=\"s\">&quot;Blue&quot;</span><span class=\"p\">)</span>
  <span class=\"c1\">;; モードライン（アクティブでないバッファ）の文字色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-foreground</span> <span class=\"ss\">&#39;mode-line-inactive</span> <span class=\"s\">&quot;gray30&quot;</span><span class=\"p\">)</span>
  <span class=\"c1\">;; モードライン（アクティブでないバッファ）の背景色を設定します。</span>
  <span class=\"p\">(</span><span class=\"nf\">set-face-background</span> <span class=\"ss\">&#39;mode-line-inactive</span> <span class=\"s\">&quot;gray85&quot;</span><span class=\"p\">)</span>
<span class=\"p\">)</span>

<span class=\"c1\">;====================================</span>
<span class=\"c1\">;;全角スペースとかに色を付ける</span>
<span class=\"c1\">;====================================</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-1</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-1</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-2</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-b-2</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;SeaGreen&quot;</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defface</span> <span class=\"nv\">my-face-u-1</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:foreground</span> <span class=\"s\">&quot;SeaGreen&quot;</span> <span class=\"nv\">:underline</span> <span class=\"nv\">t</span><span class=\"p\">)))</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-b-1</span> <span class=\"ss\">&#39;my-face-b-1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-b-2</span> <span class=\"ss\">&#39;my-face-b-2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">my-face-u-1</span> <span class=\"ss\">&#39;my-face-u-1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">font-lock-mode</span> <span class=\"p\">(</span><span class=\"nf\">before</span> <span class=\"nv\">my-font-lock-mode</span> <span class=\"p\">())</span>
  <span class=\"p\">(</span><span class=\"nf\">font-lock-add-keywords</span>
   <span class=\"nv\">major-mode</span>
   <span class=\"o\">&#39;</span><span class=\"p\">(</span>
     <span class=\"p\">(</span><span class=\"s\">&quot;　&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-b-1</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
     <span class=\"p\">(</span><span class=\"s\">&quot;\\t&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-b-2</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
     <span class=\"p\">(</span><span class=\"s\">&quot;[ ]+$&quot;</span> <span class=\"mi\">0</span> <span class=\"nv\">my-face-u-1</span> <span class=\"nv\">append</span><span class=\"p\">)</span>
     <span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">ad-enable-advice</span> <span class=\"ss\">&#39;font-lock-mode</span> <span class=\"ss\">&#39;before</span> <span class=\"ss\">&#39;my-font-lock-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">ad-activate</span> <span class=\"ss\">&#39;font-lock-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">add-hook</span> <span class=\"ss\">&#39;find-file-hooks</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">()</span>
                              <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">font-lock-mode</span>
                                  <span class=\"nv\">nil</span>
                                <span class=\"p\">(</span><span class=\"nf\">font-lock-mode</span> <span class=\"nv\">t</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2012-05-25T03:53:09Z") (updated nil "2012-05-25T12:45:00Z") (author nil (name nil "biwakonbu")))) ("emacsのプラグイン置き場、MELPAに自作の.elを登録する" "<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">duplicate-thing.el</a> というプラグインをMELPA経由でインストール出来るようにするまでのメモ</p>
<p>MELPAに上げるとバージョンアップ時の更新がとても簡単になります。(githubのmasterにコミットするだけでバージョンアップ完了) Emacs24ではpackage.elが標準搭載されるようですし、手持ちの.elがあればアップロードしておくとたくさんの人に使ってもらえる確率が上がりそうです。</p>
<h1>melpaをforkしてcloneする</h1>
<ul>
<li><a href=\"https://github.com/milkypostman/melpa\">milkypostman/melpa</a> を fork</li>
<li>fork したものを git clone </li>
</ul>
<h1>recipes/duplicate-thing を追加</h1>
<ul>
<li>dulicate-thing.elの場合、こんな感じ - <a href=\"https://github.com/ongaeshi/melpa/commit/6878e9cfc903567d4a812451b674ce89e5703d48\">6878e9c</a></li>
<li>詳しくはこちらを参照 - <a href=\"https://github.com/milkypostman/melpa/blob/master/README.md\">melpa/README.md</a></li>
</ul>
<h1>動作確認</h1>
<p>README.md にある</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"o\">./</span><span class=\"n\">buildpkg</span>
</pre>
</div>
</div>
<p>が失敗したので、以下の方法で確認。</p>
<ol>
<li>M-x load-file package-build.el</li>
<li>M-x pacage-build-archive duplicate-thihng</li>
</ol>
<p>要はスクリプト内の処理を直接Emacsで行っているだけです。</p>
<h1>ソースコードを整える</h1>
<ul>
<li>先頭にコメント追加- <a href=\"https://github.com/ongaeshi/duplicate-thing/commit/42b8010fc6cc3a333a5bc6328020d30d3239e57d\">42b8010fc</a></li>
<li>autoloadマクロの挿入- <a href=\"https://github.com/ongaeshi/duplicate-thing/commit/42b8010fc6cc3a333a5bc6328020d30d3239e57d\">42b8010f</a></li>
</ul>
<h1>コミットしてpull request</h1>
<p>一時間位でpullしてもらえました。</p>
<p><a href=\"https://github.com/milkypostman/melpa/pull/118\">Pull Request #118: duplicate-thing by ongaeshi · milkypostman/melpa</a></p>" "http://qiita.com/items/0502030e0875b6902fe1" (20403 53982) old 144 nil nil ((id nil "tag:qiita.com,2005:Item/5367") (published nil "2012-05-17T01:16:30+09:00") (updated nil "2012-05-17T01:16:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0502030e0875b6902fe1"))) (url nil "http://qiita.com/items/0502030e0875b6902fe1") (title nil "emacsのプラグイン置き場、MELPAに自作の.elを登録する") (content ((type . "html")) "<p><a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">duplicate-thing.el</a> というプラグインをMELPA経由でインストール出来るようにするまでのメモ</p>

<p>MELPAに上げるとバージョンアップ時の更新がとても簡単になります。(githubのmasterにコミットするだけでバージョンアップ完了) Emacs24ではpackage.elが標準搭載されるようですし、手持ちの.elがあればアップロードしておくとたくさんの人に使ってもらえる確率が上がりそうです。</p>

<h1>melpaをforkしてcloneする</h1>

<ul>
<li><a href=\"https://github.com/milkypostman/melpa\">milkypostman&#47;melpa</a> を fork</li>
<li>fork したものを git clone </li>
</ul>

<h1>recipes&#47;duplicate-thing を追加</h1>

<ul>
<li>dulicate-thing.elの場合、こんな感じ - <a href=\"https://github.com/ongaeshi/melpa/commit/6878e9cfc903567d4a812451b674ce89e5703d48\">6878e9c</a></li>
<li>詳しくはこちらを参照 - <a href=\"https://github.com/milkypostman/melpa/blob/master/README.md\">melpa&#47;README.md</a></li>
</ul>

<h1>動作確認</h1>

<p>README.md にある</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ <span class=\"o\">./</span><span class=\"n\">buildpkg</span> 
</pre>
</div>
</div>
<p>が失敗したので、以下の方法で確認。</p>

<ol>
<li>M-x load-file package-build.el</li>
<li>M-x pacage-build-archive duplicate-thihng</li>
</ol>

<p>要はスクリプト内の処理を直接Emacsで行っているだけです。</p>

<h1>ソースコードを整える</h1>

<ul>
<li>先頭にコメント追加- <a href=\"https://github.com/ongaeshi/duplicate-thing/commit/42b8010fc6cc3a333a5bc6328020d30d3239e57d\">42b8010fc</a></li>
<li>autoloadマクロの挿入- <a href=\"https://github.com/ongaeshi/duplicate-thing/commit/42b8010fc6cc3a333a5bc6328020d30d3239e57d\">42b8010f</a></li>
</ul>

<h1>コミットしてpull request</h1>

<p>一時間位でpullしてもらえました。</p>

<p><a href=\"https://github.com/milkypostman/melpa/pull/118\">Pull Request #118: duplicate-thing by ongaeshi · milkypostman&#47;melpa</a></p>
") (published nil "2012-05-17T01:16:30Z") (updated nil "2012-05-17T01:16:30Z") (author nil (name nil "ongaeshi")))) ("Emacs Lisp を簡単にインストールするための package.el & MELPA" "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120515/20120515030929_original.jpg?1337018972\" alt=\"package-list\"></p>
<h2>1. package.el をインストールする</h2>
<p><a href=\"https://github.com/technomancy/package.el\">technomancy/package.el</a></p>
<p>以下のURLから.elをロードパスの通った場所に置くか</p>
<p>Emacs24 : <a href=\"http://bit.ly/pkg-el\">http://bit.ly/pkg-el</a><br>
Emacs23 : <a href=\"http://bit.ly/pkg-el23\">http://bit.ly/pkg-el23</a></p>
<p>auto-install がある場合は以下のS式を評価してインストールして下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;</span> <span class=\"n\">Emacs24</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">or</span><span class=\"p\">.</span><span class=\"n\">cz</span><span class=\"o\">/</span><span class=\"n\">w</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">blob_plain</span><span class=\"o\">/</span><span class=\"n\">HEAD</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">package</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
<span class=\"p\">:</span> <span class=\"n\">Emacs23</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">or</span><span class=\"p\">.</span><span class=\"n\">cz</span><span class=\"o\">/</span><span class=\"n\">w</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">blob_plain</span><span class=\"o\">/</span>1<span class=\"n\">a0a666f941c99882093d7bd08ced15033bc3f0c</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">package</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>2. MELPAをレポジトリに追加</h2>
<p><a href=\"http://melpa.milkbox.net/#development\">MELPA</a>はgithubで管理されたパッケージレポジトリです。</p>
<p>まずは melpla.el をインストールします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">progn</span>
<span class=\"p\">(</span><span class=\"k\">switch</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">buffer</span>
<span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">-</span><span class=\"n\">retrieve</span><span class=\"o\">-</span><span class=\"n\">synchronously</span>
&quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">milkypostman</span><span class=\"o\">/</span><span class=\"n\">melpa</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">melpa</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">buffer</span>  <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)</span> <span class=\"s\">'</span><span class=\"err\">single))</span>
</pre>
</div>
</div>
<p>package.el経由でインストールしたパッケージは<code>~/.emacs.d/elpa</code>以下に置かれます。</p>
<p>.emacs.d/init.el に以下を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'package)</span>
<span class=\"s\">; Add package-archives</span>
<span class=\"s\">(add-to-list '</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span> <span class=\"s\">'(&quot;melpa&quot; . &quot;http://melpa.milkbox.net/packages/&quot;) t)</span>
<span class=\"s\">(add-to-list '</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span> <span class=\"s\">'(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;)) ; ついでにmarmaladeも追加</span>
<span class=\"s\">; Initialize</span>
<span class=\"s\">(package-initialize)</span>
<span class=\"s\">; melpa.el</span>
<span class=\"s\">(require '</span><span class=\"n\">melpa</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>3. 実際に使ってみる</h2>
<p><code>M-x package-list-packages</code> で一覧を取得します。ページ先頭のような画面が出るので後は選んでインストールしていきます。試しにyaml-modeをインストールしてみます。メニューから探してマウスクリックか<code>ENTER</code>を押して下さい。</p>
<p>インストール終了後、.emacs.d/init.elに設定を書き加えて完了です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'yaml-mode)</span>
<span class=\"s\">(add-to-list '</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">alist</span> <span class=\"s\">'</span><span class=\"err\">(&quot;\\\\.yml$\\\\|\\\\.yaml$&quot; . yaml-mode))</span>
</pre>
</div>
</div>" "http://qiita.com/items/e81fca7a9797fe203e9f" (20403 53069) old 145 nil nil ((id nil "tag:qiita.com,2005:Item/5299") (published nil "2012-05-15T03:14:32+09:00") (updated nil "2012-05-17T01:01:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e81fca7a9797fe203e9f"))) (url nil "http://qiita.com/items/e81fca7a9797fe203e9f") (title nil "Emacs Lisp を簡単にインストールするための package.el & MELPA") (content ((type . "html")) "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120515/20120515030929_original.jpg?1337018972\" alt=\"package-list\"></p>

<h2>1. package.el をインストールする</h2>

<p><a href=\"https://github.com/technomancy/package.el\">technomancy&#47;package.el</a></p>

<p>以下のURLから.elをロードパスの通った場所に置くか</p>

<p>Emacs24 : <a href=\"http://bit.ly/pkg-el\">http:&#47;&#47;bit.ly&#47;pkg-el</a><br>
Emacs23 : <a href=\"http://bit.ly/pkg-el23\">http:&#47;&#47;bit.ly&#47;pkg-el23</a></p>

<p>auto-install がある場合は以下のS式を評価してインストールして下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;</span> <span class=\"n\">Emacs24</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">or</span><span class=\"p\">.</span><span class=\"n\">cz</span><span class=\"o\">/</span><span class=\"n\">w</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">blob_plain</span><span class=\"o\">/</span><span class=\"n\">HEAD</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">package</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>

<span class=\"p\">:</span> <span class=\"n\">Emacs23</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">or</span><span class=\"p\">.</span><span class=\"n\">cz</span><span class=\"o\">/</span><span class=\"n\">w</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">blob_plain</span><span class=\"o\">/</span>1<span class=\"n\">a0a666f941c99882093d7bd08ced15033bc3f0c</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">lisp</span><span class=\"o\">/</span><span class=\"n\">package</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>2. MELPAをレポジトリに追加</h2>

<p><a href=\"http://melpa.milkbox.net/#development\">MELPA</a>はgithubで管理されたパッケージレポジトリです。</p>

<p>まずは melpla.el をインストールします。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">progn</span>
  <span class=\"p\">(</span><span class=\"k\">switch</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">buffer</span>
   <span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">-</span><span class=\"n\">retrieve</span><span class=\"o\">-</span><span class=\"n\">synchronously</span>
    &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">milkypostman</span><span class=\"o\">/</span><span class=\"n\">melpa</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">melpa</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">buffer</span>  <span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"p\">)</span> <span class=\"s\">&#39;</span><span class=\"err\">single))</span>
</pre>
</div>
</div>
<p>package.el経由でインストールしたパッケージは<code>~&#47;.emacs.d&#47;elpa</code>以下に置かれます。</p>

<p>.emacs.d&#47;init.el に以下を追加します。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;package)</span>

<span class=\"s\">; Add package-archives</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span> <span class=\"s\">&#39;(&quot;melpa&quot; . &quot;http://melpa.milkbox.net/packages/&quot;) t)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span> <span class=\"s\">&#39;(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;)) ; ついでにmarmaladeも追加</span>

<span class=\"s\">; Initialize</span>
<span class=\"s\">(package-initialize)</span>

<span class=\"s\">; melpa.el</span>
<span class=\"s\">(require &#39;</span><span class=\"n\">melpa</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>3. 実際に使ってみる</h2>

<p><code>M-x package-list-packages</code> で一覧を取得します。ページ先頭のような画面が出るので後は選んでインストールしていきます。試しにyaml-modeをインストールしてみます。メニューから探してマウスクリックか<code>ENTER</code>を押して下さい。</p>

<p>インストール終了後、.emacs.d&#47;init.elに設定を書き加えて完了です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;yaml-mode)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">alist</span> <span class=\"s\">&#39;</span><span class=\"err\">(&quot;\\\\.yml$\\\\|\\\\.yaml$&quot; . yaml-mode))</span>
</pre>
</div>
</div>") (published nil "2012-05-15T03:14:32Z") (updated nil "2012-05-17T01:01:17Z") (author nil (name nil "ongaeshi")))) ("日々の定型作業を自動化する auto-shell-command.el を作りました" "<p><a href=\"http://qiita.com/items/0e45e4bfa5a813c1b9e4\">前にQiitaに投稿した記事</a> からバージョンアップしました。</p>
<ul>
<li><a href=\"http://d.hatena.ne.jp/tuto0621/20120514/1336983541\">日々の定型作業を自動化する auto-shell-command.el を作りました - おんがえしの日記</a>
<ul>
<li>モードラインへの実行中プロセス数の表示</li>
<li>一時的なコマンドを追加 (ascmd:add)</li>
<li>ファイルを書き換えずに関連づけたコマンドを実行する (ascm:exec)</li>
</ul></li>
</ul>
<p>・・・等、色々と便利な機能を足しています。</p>" "http://qiita.com/items/b3f4315082c1c7942fcd" (20400 49647) old 146 nil nil ((id nil "tag:qiita.com,2005:Item/5280") (published nil "2012-05-14T17:27:27+09:00") (updated nil "2012-05-14T17:27:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b3f4315082c1c7942fcd"))) (url nil "http://qiita.com/items/b3f4315082c1c7942fcd") (title nil "日々の定型作業を自動化する auto-shell-command.el を作りました") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/0e45e4bfa5a813c1b9e4\">前にQiitaに投稿した記事</a> からバージョンアップしました。</p>

<ul>
<li><a href=\"http://d.hatena.ne.jp/tuto0621/20120514/1336983541\">日々の定型作業を自動化する auto-shell-command.el を作りました - おんがえしの日記</a> 

<ul>
<li>モードラインへの実行中プロセス数の表示</li>
<li>一時的なコマンドを追加 (ascmd:add)</li>
<li>ファイルを書き換えずに関連づけたコマンドを実行する (ascm:exec)</li>
</ul></li>
</ul>

<p>・・・等、色々と便利な機能を足しています。</p>
") (published nil "2012-05-14T17:27:27Z") (updated nil "2012-05-14T17:27:27Z") (author nil (name nil "ongaeshi")))) ("Emacs Lisp の情報源" "<p>他にあれば是非とも知りたいです。 ※ 随時更新中！！</p>
<h2>便利な Emacs Lisp を探す</h2>
<ul>
<li><a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">Emacs Lisp を簡単にインストールするための package.el &amp; MELPA</a>
<ul>
<li><a href=\"http://tromey.com/elpa/package.el\">package.el</a> : Emacs24で標準搭載予定のパッケージ管理スクリプト</li>
<li><a href=\"http://melpa.milkbox.net/\">MELPA</a> : パッケージレポジトリの一つ、github管理</li>
</ul></li>
<li><a href=\"http://emacswiki.org/\">EmacsWiki: Site Map</a>
<ul>
<li>auto-intall.el 経由で直接インストール可能なwikiサイト</li>
</ul></li>
<li><a href=\"http://www.damtp.cam.ac.uk/user/sje30/emacs/ell.html\">Emacs Lisp List</a></li>
</ul>
<h2>日本語で読める情報源</h2>
<ul>
<li><a href=\"http://d.hatena.ne.jp/rubikitch/\">(rubikitch loves (Emacs Ruby CUI Books))</a>
<ul>
<li>anything.el の作者でもある、るびきちさんのblogです。<a href=\"http://d.hatena.ne.jp/rubikitch/20100201/elispsyntax\">Emacs Lisp基礎文法最速マスター</a> とかおすすめです</li>
</ul></li>
<li><a href=\"http://sakito.jp/emacs/emacs23.html\">Emacs23 (Cocoa Emacs) 入門から中毒まで : 紹介マニア</a>
<ul>
<li>OSXでEmacsを使う上で貴重な情報がたくさんあります</li>
</ul></li>
<li><a href=\"http://www.bookshelf.jp/soft/\">Meadow/Emacs memo:</a>
<ul>
<li>最近は更新されていないようですが、昔よくお世話になってました</li>
</ul></li>
</ul>
<h2>書籍</h2>
<p>るびきちさんの本です。使い方からelispの書き方までほぼ網羅されていおり、私はこの二冊でほぼ事足りました。最近だと<a href=\"http://www.amazon.co.jp/Emacs%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%EF%BD%9E%E6%80%9D%E8%80%83%E3%82%92%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%AB%E3%82%B3%E3%83%BC%E3%83%89%E5%8C%96%E3%81%97%E3%80%81%E9%96%8B%E7%99%BA%E3%82%92%E5%8A%A0%E9%80%9F%E3%81%99%E3%82%8B-WEB-DB-PRESS-plus/dp/4774150029/ref=sr_1_1?ie=UTF8&amp;qid=1336923333&amp;sr=8-1\">Emacs実践入門</a>が評判よいみたいですがまだ読めていません。</p>
<ul>
<li><a href=\"http://www.amazon.co.jp/Emacs%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%83%90%E3%82%A4%E3%83%96%E3%83%AB-%EF%BD%9E%E4%BD%9C%E6%A5%AD%E5%8A%B9%E7%8E%87%E3%82%92%E3%82%AB%E3%82%A4%E3%82%BC%E3%83%B3%E3%81%99%E3%82%8B200%E3%81%AE%E6%8A%80%EF%BD%9E-%E3%82%8B%E3%81%B3%E3%81%8D%E3%81%A1/dp/4774143278/ref=sr_1_2?ie=UTF8&amp;qid=1336923333&amp;sr=8-2\">Emacsテクニックバイブル　~作業効率をカイゼンする200の技~</a></li>
<li><a href=\"http://www.amazon.co.jp/Emacs-Lisp%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%83%90%E3%82%A4%E3%83%96%E3%83%AB-%E3%82%8B%E3%81%B3%E3%81%8D%E3%81%A1/dp/4774148970/ref=sr_1_4?ie=UTF8&amp;qid=1336923333&amp;sr=8-4\">Emacs Lispテクニックバイブル</a></li>
</ul>
<h2>資料</h2>
<ul>
<li><a href=\"http://lc.linux.or.jp/lc2002/papers/komatsu0920h.pdf\">taiyaki.org/elisp programming techniques</a> - Linux Conference 2002 での小松弘幸氏の発表資料(pdf)</li>
<li><a href=\"http://d.hatena.ne.jp/shigemk2/20120428/1335604884\">多様なelispインストール手法に関する一考察</a> -  #kansai_emacs - by shigemk2氏</li>
</ul>" "http://qiita.com/items/3f6415732867d2ba0e27" (20401 19582) old 147 nil nil ((id nil "tag:qiita.com,2005:Item/5266") (published nil "2012-05-14T00:40:58+09:00") (updated nil "2012-05-15T03:18:38+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3f6415732867d2ba0e27"))) (url nil "http://qiita.com/items/3f6415732867d2ba0e27") (title nil "Emacs Lisp の情報源") (content ((type . "html")) "<p>他にあれば是非とも知りたいです。 ※ 随時更新中！！</p>

<h2>便利な Emacs Lisp を探す</h2>

<ul>
<li><a href=\"http://qiita.com/items/e81fca7a9797fe203e9f\">Emacs Lisp を簡単にインストールするための package.el &amp; MELPA</a>

<ul>
<li><a href=\"http://tromey.com/elpa/package.el\">package.el</a> : Emacs24で標準搭載予定のパッケージ管理スクリプト</li>
<li><a href=\"http://melpa.milkbox.net/\">MELPA</a> : パッケージレポジトリの一つ、github管理</li>
</ul></li>
<li><a href=\"http://emacswiki.org/\">EmacsWiki: Site Map</a>

<ul>
<li>auto-intall.el 経由で直接インストール可能なwikiサイト</li>
</ul></li>
<li><a href=\"http://www.damtp.cam.ac.uk/user/sje30/emacs/ell.html\">Emacs Lisp List</a></li>
</ul>

<h2>日本語で読める情報源</h2>

<ul>
<li><a href=\"http://d.hatena.ne.jp/rubikitch/\">(rubikitch loves (Emacs Ruby CUI Books))</a>

<ul>
<li>anything.el の作者でもある、るびきちさんのblogです。<a href=\"http://d.hatena.ne.jp/rubikitch/20100201/elispsyntax\">Emacs Lisp基礎文法最速マスター</a> とかおすすめです</li>
</ul></li>
<li><a href=\"http://sakito.jp/emacs/emacs23.html\">Emacs23 (Cocoa Emacs) 入門から中毒まで : 紹介マニア</a>

<ul>
<li>OSXでEmacsを使う上で貴重な情報がたくさんあります</li>
</ul></li>
<li><a href=\"http://www.bookshelf.jp/soft/\">Meadow&#47;Emacs memo:</a>

<ul>
<li>最近は更新されていないようですが、昔よくお世話になってました</li>
</ul></li>
</ul>

<h2>書籍</h2>

<p>るびきちさんの本です。使い方からelispの書き方までほぼ網羅されていおり、私はこの二冊でほぼ事足りました。最近だと<a href=\"http://www.amazon.co.jp/Emacs%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%EF%BD%9E%E6%80%9D%E8%80%83%E3%82%92%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%AB%E3%82%B3%E3%83%BC%E3%83%89%E5%8C%96%E3%81%97%E3%80%81%E9%96%8B%E7%99%BA%E3%82%92%E5%8A%A0%E9%80%9F%E3%81%99%E3%82%8B-WEB-DB-PRESS-plus/dp/4774150029/ref=sr_1_1?ie=UTF8&amp;qid=1336923333&amp;sr=8-1\">Emacs実践入門</a>が評判よいみたいですがまだ読めていません。</p>

<ul>
<li><a href=\"http://www.amazon.co.jp/Emacs%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%83%90%E3%82%A4%E3%83%96%E3%83%AB-%EF%BD%9E%E4%BD%9C%E6%A5%AD%E5%8A%B9%E7%8E%87%E3%82%92%E3%82%AB%E3%82%A4%E3%82%BC%E3%83%B3%E3%81%99%E3%82%8B200%E3%81%AE%E6%8A%80%EF%BD%9E-%E3%82%8B%E3%81%B3%E3%81%8D%E3%81%A1/dp/4774143278/ref=sr_1_2?ie=UTF8&amp;qid=1336923333&amp;sr=8-2\">Emacsテクニックバイブル　~作業効率をカイゼンする200の技~</a></li>
<li><a href=\"http://www.amazon.co.jp/Emacs-Lisp%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%83%90%E3%82%A4%E3%83%96%E3%83%AB-%E3%82%8B%E3%81%B3%E3%81%8D%E3%81%A1/dp/4774148970/ref=sr_1_4?ie=UTF8&amp;qid=1336923333&amp;sr=8-4\">Emacs Lispテクニックバイブル</a></li>
</ul>

<h2>資料</h2>

<ul>
<li><a href=\"http://lc.linux.or.jp/lc2002/papers/komatsu0920h.pdf\">taiyaki.org&#47;elisp programming techniques</a> - Linux Conference 2002 での小松弘幸氏の発表資料(pdf)</li>
<li><a href=\"http://d.hatena.ne.jp/shigemk2/20120428/1335604884\">多様なelispインストール手法に関する一考察</a> -  #kansai_emacs - by shigemk2氏</li>
</ul>
") (published nil "2012-05-14T00:40:58Z") (updated nil "2012-05-15T03:18:38Z") (author nil (name nil "ongaeshi")))) ("Emacsユーザーのための LESS 導入" "<p>Emacsユーザーが快適に LESS を使えるようになるまでの導入記事です。</p>
<h2>LESS とは何か。</h2>
<p><a href=\"http://lesscss.org/\">LESS</a>とは、CSSメタ言語と呼ばれるもので、LESS の他に <a href=\"http://sass-lang.com/\">Sass(SCSS)</a> と呼ばれるものがあります(SassとSCSSはちょっとだけ文法の違う兄弟みたいなもの)。</p>
<h3>LESS と Sass の違い</h3>
<p>文法がわりと違います。詳しくは<a href=\"http://tech.naver.jp/blog/?p=951\">はじめてのCSSメタ言語はLessがおすすめ！ « NAVER Engineers' Blog</a>あたりを参照。</p>
<h2>LESS の導入。</h2>
<p>LESS は JS によるクライアントサイド（要するにブラウザ上）の変換（less-&gt;css）に対応しているので、てっとり早く試してみるのに向いています。<br>
具体的には style.less ファイルと一緒に、lessサイトからダウンロードできる less.js を読み込むだけで使えます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">HTML</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet/less&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text/css&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;styles.less&quot;</span><span class=\"nt\">&gt;</span>
<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">&quot;less.js&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text/javascript&quot;</span><span class=\"nt\">&gt;&lt;/script&gt;</span>
</pre>
</div>
</div>
<h3>サーバーサイドの変換。</h3>
<p>サーバーで変換したい（要するにブラウザ以外でCSSファイルを出力したい）場合は、node.js（以下、Node）を導入する必要があります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>npm install -g less
</pre>
</div>
</div>
<p>Node を導入した上で、npm に -g を付けてコマンドラインツールをインストールすると lessc コマンドが /usr/local/bin/lessc にインストールされて、使えるようになります。<br>
-g を知らない人は、<code>$ man npm</code> で調べて下さい。</p>
<p>これは、標準出力に less ファイルを css に変換したもの出力するコマンドなので、&gt; によるリダイレクトでファイルに出力できます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc style.less &gt; style.css
</pre>
</div>
</div>
<p>という感じに、CSSファイルを出力します。<br>
引数に -x（--compress）もしくは --yui-compress を付けると圧縮して出力できます。</p>
<p>-x はセレクタ毎に1行づつ、--yui-compress は<a href=\"http://developer.yahoo.com/yui/compressor/css.html\">YUI CSS Compressor</a>のように全て1行にして圧縮することができます。</p>
<h3>圧縮サンプル。</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">example.less</span></div><div class=\"highlight\"><pre><span class=\"k\">@the-border</span><span class=\"o\">:</span> <span class=\"nt\">1px</span><span class=\"p\">;</span>
<span class=\"k\">@base-color</span><span class=\"o\">:</span> <span class=\"nf\">#111</span><span class=\"p\">;</span>
<span class=\"k\">@red</span><span class=\"o\">:</span>        <span class=\"nf\">#842210</span><span class=\"p\">;</span>
<span class=\"nf\">#header</span> <span class=\"p\">{</span>
<span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">base</span><span class=\"o\">-</span><span class=\"k\">color</span> <span class=\"o\">*</span> <span class=\"m\">3</span><span class=\"p\">;</span>
<span class=\"k\">border-left</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"k\">border</span><span class=\"p\">;</span>
<span class=\"k\">border-right</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"k\">border</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"nf\">#footer</span> <span class=\"p\">{</span>
<span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">base</span><span class=\"o\">-</span><span class=\"k\">color</span> <span class=\"o\">+</span> <span class=\"m\">#003300</span><span class=\"p\">;</span>
<span class=\"k\">border-color</span><span class=\"o\">:</span> <span class=\"n\">desaturate</span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"nb\">red</span><span class=\"o\">,</span> <span class=\"m\">10</span><span class=\"o\">%</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<p>上記の example.less を圧縮すると、以下のようになる。</p>
<h4>-x（--compress）の場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc -x example.less
<span class=\"c\">#header{color:#333333;border-left:1px;border-right:2px;}</span>
<span class=\"c\">#footer{color:#114411;border-color:#7d2717;}</span>
</pre>
</div>
</div>
<p>2行になる。</p>
<h4>--yui-compress の場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc --yui-compress example.less
<span class=\"c\">#header{color:#333;border-left:1px;border-right:2px}#footer{color:#141;border-color:#7d2717}</span>
</pre>
</div>
</div>
<p>1行になる。</p>
<h4>おまけ：引数なしの場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">CSS</span></div><div class=\"highlight\"><pre><span class=\"nf\">#header</span> <span class=\"p\">{</span>
<span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#333333</span><span class=\"p\">;</span>
<span class=\"k\">border-left</span><span class=\"o\">:</span> <span class=\"m\">1px</span><span class=\"p\">;</span>
<span class=\"k\">border-right</span><span class=\"o\">:</span> <span class=\"m\">2px</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"nf\">#footer</span> <span class=\"p\">{</span>
<span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#114411</span><span class=\"p\">;</span>
<span class=\"k\">border-color</span><span class=\"o\">:</span> <span class=\"m\">#7d2717</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<h2>Emacsの LESS CSSモードについて。</h2>
<p>いまのところ、メジャーモードはひとつだけで<a href=\"https://github.com/purcell/less-css-mode/\">LESS CSSモード</a>というのがある（Emacs上のモード名は less-css-mode）。</p>
<p>less-css-mode は css-modeの派生モードとして定義されているため、css-mode を使っている人にとっては、違和感なく使うことができます。</p>
<p>導入後、拡張子 .less ファイルを開くと自動的に less-css-mode になります。</p>
<h2>LESS CSSモードの導入。</h2>
<p>GitHub から直接 less-css-mode.el ファイルをダウンロードしてインストールする方法と、package.el を使った Marmalade リポジトリからのインストール方法の2種類があります。</p>
<p>package.elが使える場合は、以下のように Marmaladeリポジトリを追加しておくと、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">'package-archives</span>
<span class=\"s\"> '</span><span class=\"p\">(</span>&quot;<span class=\"n\">marmalade</span>&quot; <span class=\"p\">.</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">marmalade</span><span class=\"o\">-</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>以下のコマンドで LESS CSSモードが導入できる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">RET</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span> <span class=\"n\">RET</span>
</pre>
</div>
</div>
<h2>LESS CSSモードの特徴。</h2>
<ul>
<li>Flymake による文法チェック</li>
<li>css への書き出し</li>
</ul>
<p>標準で lessc コマンドを利用した Flymake による動的文法チェックと、cssファイルへの出力に対応しています。<br>
なので、LESS CSSモードを使いたい場合は、npm による less 導入がほぼ必須です。<br>
また、Emacsで /usr/local/bin のパスが exec-path に追加されている必要があります。まぁ、基本的には大丈夫でしょう。<br>
どうしても Flymake が嫌だという人は、以下のように less-css-mode 実行時の hook に flymake-mode-off を挟んでオフにすることもできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hooks</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">off</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">'less-css-mode-hook '</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hooks</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h3>CSSファイルを書き出す。</h3>
<p>less-css-compile というコマンドが定義されており、less-css-mode-map に C-c C-c というキーバインドが登録されています。<br>
なので、いつでも C-c C-c で、編集中の less ファイルを css ファイルに書き出すことができます。</p>
<h3>保存時に自動的にCSSファイルを書き出す。</h-1197742446>
<p>less-css-mode の after-save-hook に less-css-compile-maybe という関数が追加されています。<br>
これは、less-css-compile-at-save 変数が nil 以外の場合、less-css-compile が実行されるというものです。<br>
まぁ、要するに 以下のように設定しておくと、less-css-mode でファイルを保存したときに、自動的に CSSファイルを書き出してくれるようになります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">at</span><span class=\"o\">-</span><span class=\"n\">save</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">;</span> 初期値は <span class=\"n\">nil</span>
<span class=\"p\">;;</span> <span class=\"n\">lessc</span> への引数 <span class=\"s\">'(&quot;arg&quot;) 形式で</span>
<span class=\"s\">;; (setq less-css-lessc-options '</span><span class=\"p\">(</span>&quot;<span class=\"o\">--</span><span class=\"n\">yui</span><span class=\"o\">-</span><span class=\"n\">compress</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>また、バッファローカル変数として less-css-output-file-name というのがあるので、これに値を入れるとCSS出力時のファイル名を任意のものに変更することもできます。</p>
<h3>おまけ：CSS書き出し時のwindow分割がうざい。</h3>
<p>CSSへの書き出しは compile.el の機能を使っており、<em>compilation</em> というバッファが表示される仕様になっています。<br>
これを制御するには色々と方法がありますが、<a href=\"http://emacswiki.org/emacs/ModeCompile\">EmacsWiki: Mode Compile</a>に自動的に隠すコードがあるので、これを紹介しておきましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">fboundp</span> <span class=\"s\">'winner-mode)</span>
<span class=\"s\">  (winner-mode t))</span>
<span class=\"s\">(setq compilation-finish-functions '</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">autoclose</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">autoclose</span> <span class=\"p\">(</span><span class=\"n\">buffer</span> <span class=\"n\">string</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">cond</span> <span class=\"p\">((</span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">match</span> &quot;<span class=\"n\">finished</span>&quot; <span class=\"n\">string</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">bury</span><span class=\"o\">-</span><span class=\"n\">buffer</span> &quot;<span class=\"o\">*</span><span class=\"n\">compilation</span><span class=\"o\">*</span>&quot;<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">winner</span><span class=\"o\">-</span><span class=\"n\">undo</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">Build</span> <span class=\"n\">successful</span><span class=\"p\">.</span>&quot;<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">t</span>
<span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">Compilation</span> <span class=\"n\">exited</span> <span class=\"n\">abnormally</span><span class=\"p\">:</span> <span class=\"c\">%s&quot; string))))</span>
</pre>
</div>
</div>
<p>window分割の undo/redo ができる winner-mode を使っています。<br>
C-c left と C-c right で window 分割状態を undo/redo できます。<br>
これについてはいつか書きましょう。</p>
<h3>おまけ2：less-css-mode で auto-complete を使う。</h3>
<p>auto-complete-config.el をインストールしている前提だと、以下の設定で可能です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">'ac-modes '</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">'less-css-mode-hook '</span><span class=\"n\">ac</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">setup</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/a1a765bfb32ad04b4b04" (20397 47110) old 148 nil nil ((id nil "tag:qiita.com,2005:Item/5226") (published nil "2012-05-12T08:34:03+09:00") (updated nil "2012-05-12T10:08:22+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/a1a765bfb32ad04b4b04"))) (url nil "http://qiita.com/items/a1a765bfb32ad04b4b04") (title nil "Emacsユーザーのための LESS 導入") (content ((type . "html")) "<p>Emacsユーザーが快適に LESS を使えるようになるまでの導入記事です。</p>

<h2>LESS とは何か。</h2>

<p><a href=\"http://lesscss.org/\">LESS</a>とは、CSSメタ言語と呼ばれるもので、LESS の他に <a href=\"http://sass-lang.com/\">Sass(SCSS)</a> と呼ばれるものがあります(SassとSCSSはちょっとだけ文法の違う兄弟みたいなもの)。</p>

<h3>LESS と Sass の違い</h3>

<p>文法がわりと違います。詳しくは<a href=\"http://tech.naver.jp/blog/?p=951\">はじめてのCSSメタ言語はLessがおすすめ！ « NAVER Engineers&#39; Blog</a>あたりを参照。</p>

<h2>LESS の導入。</h2>

<p>LESS は JS によるクライアントサイド（要するにブラウザ上）の変換（less-&gt;css）に対応しているので、てっとり早く試してみるのに向いています。<br>
具体的には style.less ファイルと一緒に、lessサイトからダウンロードできる less.js を読み込むだけで使えます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">HTML</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet/less&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text/css&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;styles.less&quot;</span><span class=\"nt\">&gt;</span>
<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">&quot;less.js&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text/javascript&quot;</span><span class=\"nt\">&gt;&lt;/script&gt;</span>
</pre>
</div>
</div>
<h3>サーバーサイドの変換。</h3>

<p>サーバーで変換したい（要するにブラウザ以外でCSSファイルを出力したい）場合は、node.js（以下、Node）を導入する必要があります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>npm install -g less
</pre>
</div>
</div>
<p>Node を導入した上で、npm に -g を付けてコマンドラインツールをインストールすると lessc コマンドが &#47;usr&#47;local&#47;bin&#47;lessc にインストールされて、使えるようになります。<br>
-g を知らない人は、<code>$ man npm</code> で調べて下さい。</p>

<p>これは、標準出力に less ファイルを css に変換したもの出力するコマンドなので、&gt; によるリダイレクトでファイルに出力できます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc style.less &gt; style.css
</pre>
</div>
</div>
<p>という感じに、CSSファイルを出力します。<br>
引数に -x（--compress）もしくは --yui-compress を付けると圧縮して出力できます。</p>

<p>-x はセレクタ毎に1行づつ、--yui-compress は<a href=\"http://developer.yahoo.com/yui/compressor/css.html\">YUI CSS Compressor</a>のように全て1行にして圧縮することができます。</p>

<h3>圧縮サンプル。</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">example.less</span></div><div class=\"highlight\"><pre><span class=\"k\">@the-border</span><span class=\"o\">:</span> <span class=\"nt\">1px</span><span class=\"p\">;</span>
<span class=\"k\">@base-color</span><span class=\"o\">:</span> <span class=\"nf\">#111</span><span class=\"p\">;</span>
<span class=\"k\">@red</span><span class=\"o\">:</span>        <span class=\"nf\">#842210</span><span class=\"p\">;</span>

<span class=\"nf\">#header</span> <span class=\"p\">{</span>
  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">base</span><span class=\"o\">-</span><span class=\"k\">color</span> <span class=\"o\">*</span> <span class=\"m\">3</span><span class=\"p\">;</span>
  <span class=\"k\">border-left</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"k\">border</span><span class=\"p\">;</span>
  <span class=\"k\">border-right</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"k\">border</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"nf\">#footer</span> <span class=\"p\">{</span> 
  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"o\">@</span><span class=\"n\">base</span><span class=\"o\">-</span><span class=\"k\">color</span> <span class=\"o\">+</span> <span class=\"m\">#003300</span><span class=\"p\">;</span>
  <span class=\"k\">border-color</span><span class=\"o\">:</span> <span class=\"n\">desaturate</span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"nb\">red</span><span class=\"o\">,</span> <span class=\"m\">10</span><span class=\"o\">%</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<p>上記の example.less を圧縮すると、以下のようになる。</p>

<h4>-x（--compress）の場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc -x example.less
<span class=\"c\">#header{color:#333333;border-left:1px;border-right:2px;}</span>
<span class=\"c\">#footer{color:#114411;border-color:#7d2717;}</span>
</pre>
</div>
</div>
<p>2行になる。</p>

<h4>--yui-compress の場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>lessc --yui-compress example.less
<span class=\"c\">#header{color:#333;border-left:1px;border-right:2px}#footer{color:#141;border-color:#7d2717}</span>
</pre>
</div>
</div>
<p>1行になる。</p>

<h4>おまけ：引数なしの場合。</h4>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">CSS</span></div><div class=\"highlight\"><pre><span class=\"nf\">#header</span> <span class=\"p\">{</span>
  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#333333</span><span class=\"p\">;</span>
  <span class=\"k\">border-left</span><span class=\"o\">:</span> <span class=\"m\">1px</span><span class=\"p\">;</span>
  <span class=\"k\">border-right</span><span class=\"o\">:</span> <span class=\"m\">2px</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"nf\">#footer</span> <span class=\"p\">{</span>
  <span class=\"k\">color</span><span class=\"o\">:</span> <span class=\"m\">#114411</span><span class=\"p\">;</span>
  <span class=\"k\">border-color</span><span class=\"o\">:</span> <span class=\"m\">#7d2717</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
</pre>
</div>
</div>
<h2>Emacsの LESS CSSモードについて。</h2>

<p>いまのところ、メジャーモードはひとつだけで<a href=\"https://github.com/purcell/less-css-mode/\">LESS CSSモード</a>というのがある（Emacs上のモード名は less-css-mode）。</p>

<p>less-css-mode は css-modeの派生モードとして定義されているため、css-mode を使っている人にとっては、違和感なく使うことができます。</p>

<p>導入後、拡張子 .less ファイルを開くと自動的に less-css-mode になります。</p>

<h2>LESS CSSモードの導入。</h2>

<p>GitHub から直接 less-css-mode.el ファイルをダウンロードしてインストールする方法と、package.el を使った Marmalade リポジトリからのインストール方法の2種類があります。</p>

<p>package.elが使える場合は、以下のように Marmaladeリポジトリを追加しておくと、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;package-archives</span>
<span class=\"s\"> &#39;</span><span class=\"p\">(</span>&quot;<span class=\"n\">marmalade</span>&quot; <span class=\"p\">.</span> &quot;<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">marmalade</span><span class=\"o\">-</span><span class=\"n\">repo</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>以下のコマンドで LESS CSSモードが導入できる。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">RET</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span> <span class=\"n\">RET</span>
</pre>
</div>
</div>
<h2>LESS CSSモードの特徴。</h2>

<ul>
<li>Flymake による文法チェック</li>
<li>css への書き出し</li>
</ul>

<p>標準で lessc コマンドを利用した Flymake による動的文法チェックと、cssファイルへの出力に対応しています。<br>
なので、LESS CSSモードを使いたい場合は、npm による less 導入がほぼ必須です。<br>
また、Emacsで &#47;usr&#47;local&#47;bin のパスが exec-path に追加されている必要があります。まぁ、基本的には大丈夫でしょう。<br>
どうしても Flymake が嫌だという人は、以下のように less-css-mode 実行時の hook に flymake-mode-off を挟んでオフにすることもできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hooks</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">flymake</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">off</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;less-css-mode-hook &#39;</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">hooks</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h3>CSSファイルを書き出す。</h3>

<p>less-css-compile というコマンドが定義されており、less-css-mode-map に C-c C-c というキーバインドが登録されています。<br>
なので、いつでも C-c C-c で、編集中の less ファイルを css ファイルに書き出すことができます。</p>

<h3>保存時に自動的にCSSファイルを書き出す。</h-1197742446>

<p>less-css-mode の after-save-hook に less-css-compile-maybe という関数が追加されています。<br>
これは、less-css-compile-at-save 変数が nil 以外の場合、less-css-compile が実行されるというものです。<br>
まぁ、要するに 以下のように設定しておくと、less-css-mode でファイルを保存したときに、自動的に CSSファイルを書き出してくれるようになります。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">at</span><span class=\"o\">-</span><span class=\"n\">save</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">;</span> 初期値は <span class=\"n\">nil</span>
<span class=\"p\">;;</span> <span class=\"n\">lessc</span> への引数 <span class=\"s\">&#39;(&quot;arg&quot;) 形式で</span>
<span class=\"s\">;; (setq less-css-lessc-options &#39;</span><span class=\"p\">(</span>&quot;<span class=\"o\">--</span><span class=\"n\">yui</span><span class=\"o\">-</span><span class=\"n\">compress</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>また、バッファローカル変数として less-css-output-file-name というのがあるので、これに値を入れるとCSS出力時のファイル名を任意のものに変更することもできます。</p>

<h3>おまけ：CSS書き出し時のwindow分割がうざい。</h3>

<p>CSSへの書き出しは compile.el の機能を使っており、<em>compilation</em> というバッファが表示される仕様になっています。<br>
これを制御するには色々と方法がありますが、<a href=\"http://emacswiki.org/emacs/ModeCompile\">EmacsWiki: Mode Compile</a>に自動的に隠すコードがあるので、これを紹介しておきましょう。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">fboundp</span> <span class=\"s\">&#39;winner-mode)</span>
<span class=\"s\">  (winner-mode t))</span>

<span class=\"s\">(setq compilation-finish-functions &#39;</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">autoclose</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">autoclose</span> <span class=\"p\">(</span><span class=\"n\">buffer</span> <span class=\"n\">string</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">cond</span> <span class=\"p\">((</span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">match</span> &quot;<span class=\"n\">finished</span>&quot; <span class=\"n\">string</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">bury</span><span class=\"o\">-</span><span class=\"n\">buffer</span> &quot;<span class=\"o\">*</span><span class=\"n\">compilation</span><span class=\"o\">*</span>&quot;<span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">winner</span><span class=\"o\">-</span><span class=\"n\">undo</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">Build</span> <span class=\"n\">successful</span><span class=\"p\">.</span>&quot;<span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"n\">t</span>
         <span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">Compilation</span> <span class=\"n\">exited</span> <span class=\"n\">abnormally</span><span class=\"p\">:</span> <span class=\"c\">%s&quot; string))))</span>
</pre>
</div>
</div>
<p>window分割の undo&#47;redo ができる winner-mode を使っています。<br>
C-c left と C-c right で window 分割状態を undo&#47;redo できます。<br>
これについてはいつか書きましょう。</p>

<h3>おまけ2：less-css-mode で auto-complete を使う。</h3>

<p>auto-complete-config.el をインストールしている前提だと、以下の設定で可能です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;ac-modes &#39;</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;less-css-mode-hook &#39;</span><span class=\"n\">ac</span><span class=\"o\">-</span><span class=\"n\">css</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">setup</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-05-12T08:34:03Z") (updated nil "2012-05-12T10:08:22Z") (author nil (name nil "tomoyaton")))) ("flymakeのデバッグmessage設定" "<p><code>M-:</code>(eval-expression)などで</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">elisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-log-level</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を評価する。flymakeが走るたびに<code>*Messages*</code>bufferにログ情報が出力される。どんな一時ファイルが作成されてどんなコマンドが実行されているのか、確認できる。</p>
<p>log levelは以下のようになっていて、defaultは<code>-1</code>。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">-</span>1 <span class=\"p\">=</span> <span class=\"n\">NONE</span><span class=\"p\">,</span>
0 <span class=\"p\">=</span> <span class=\"n\">ERROR</span><span class=\"p\">,</span>
1 <span class=\"p\">=</span> <span class=\"n\">WARNING</span><span class=\"p\">,</span>
2 <span class=\"p\">=</span> <span class=\"n\">INFO</span><span class=\"p\">,</span>
3 <span class=\"p\">=</span> <span class=\"n\">DEBUG</span>
</pre>
</div>
</div>" "http://qiita.com/items/5d593c7d96d63ed4b92c" (20395 36777) old 149 nil nil ((id nil "tag:qiita.com,2005:Item/5186") (published nil "2012-05-10T18:46:18+09:00") (updated nil "2012-05-10T18:51:37+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5d593c7d96d63ed4b92c"))) (url nil "http://qiita.com/items/5d593c7d96d63ed4b92c") (title nil "flymakeのデバッグmessage設定") (content ((type . "html")) "<p><code>M-:</code>(eval-expression)などで</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">elisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">flymake-log-level</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を評価する。flymakeが走るたびに<code>*Messages*</code>bufferにログ情報が出力される。どんな一時ファイルが作成されてどんなコマンドが実行されているのか、確認できる。</p>

<p>log levelは以下のようになっていて、defaultは<code>-1</code>。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">-</span>1 <span class=\"p\">=</span> <span class=\"n\">NONE</span><span class=\"p\">,</span>
 0 <span class=\"p\">=</span> <span class=\"n\">ERROR</span><span class=\"p\">,</span>
 1 <span class=\"p\">=</span> <span class=\"n\">WARNING</span><span class=\"p\">,</span>
 2 <span class=\"p\">=</span> <span class=\"n\">INFO</span><span class=\"p\">,</span>
 3 <span class=\"p\">=</span> <span class=\"n\">DEBUG</span>
</pre>
</div>
</div>") (published nil "2012-05-10T18:46:18Z") (updated nil "2012-05-10T18:51:37Z") (author nil (name nil "sugyan")))) ("折り畳み表示する見出しレベルを切り返えるコマンド" "<p>以前、<a href=\"http://d.hatena.ne.jp/kitokitoki/20120206/p1/\">markdown-mode の折りたたみ表示機能 - わからん</a> というブログ記事を書きました。# の見出しだけを表示, # と ## の見出しだけを表示, # と ## と ### の見出しだけを表示、をクルクルと一つのコマンドで実行できると一覧性があがります。次のように実現してみました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nf\">make-variable-buffer-local</span> <span class=\"ss\">'my-outline-level</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq-default</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">my-global-cycle-md</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">cond</span>
<span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
<span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
<span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
</pre>
</div>
</div>" "http://qiita.com/items/98c7cd3349bfd79e0d9b" (20393 10935) old 150 nil nil ((id nil "tag:qiita.com,2005:Item/5132") (published nil "2012-05-08T23:16:23+09:00") (updated nil "2012-05-08T23:16:23+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/98c7cd3349bfd79e0d9b"))) (url nil "http://qiita.com/items/98c7cd3349bfd79e0d9b") (title nil "折り畳み表示する見出しレベルを切り返えるコマンド") (content ((type . "html")) "<p>以前、<a href=\"http://d.hatena.ne.jp/kitokitoki/20120206/p1/\">markdown-mode の折りたたみ表示機能 - わからん</a> というブログ記事を書きました。# の見出しだけを表示, # と ## の見出しだけを表示, # と ## と ### の見出しだけを表示、をクルクルと一つのコマンドで実行できると一覧性があがります。次のように実現してみました。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>    <span class=\"p\">(</span><span class=\"nf\">make-variable-buffer-local</span> <span class=\"ss\">&#39;my-outline-level</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">setq-default</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">)</span>

    <span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">my-global-cycle-md</span> <span class=\"p\">()</span>
      <span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">cond</span>
       <span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
       <span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
       <span class=\"p\">((</span><span class=\"nf\">eq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">3</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">hide-sublevels</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-outline-level</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2012-05-08T23:16:23Z") (updated nil "2012-05-08T23:16:23Z") (author nil (name nil "mori_dev")))) ("自動テストやコンパイルを簡単に記述するためのauto-shell-command.elを作った" "<p>'auto-shell-command.el'は、ファイルセーブ時に指定したシェルコマンドを実行することが出来るものです。似たようなツールとしては flymake や autotest、Guard があります。</p>
<p><a href=\"https://github.com/ongaeshi/auto-shell-command\">ongaeshi/auto-shell-command - Github</a></p>
<h2>特徴</h2>
<ol>
<li><strong>ファイル名単位</strong> で実行するコマンドを指定することが出来る</li>
<li><strong>一時的にコマンドの実行をON/OFF</strong>することが出来る(まとめて複数のファイルを編集する時に便利)</li>
<li>ファイルの監視からプロセスの実行までEmacsの機能でまかなっているため安定して動作する。Emacsが動く全てのOSで動作する。</li>
<li>外部ツールによるファイル書き換えによって起こる期待していなかったコマンドの誤作動が起きない</li>
<li>Emacs再起動時に消える一時的なコマンドを登録することが出来る</li>
</ol>
<h2>インストール</h2>
<p>'emacs-deferred'が必要です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">kiwanami</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">deferred</span><span class=\"o\">/</span><span class=\"n\">raw</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">deferred</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>インストール後、<code>auto-shell-command</code>をインストールして下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ongaeshi</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>初期設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'auto-shell-command)</span>
<span class=\"s\">;; キーバインドの設定 (一時的にauto-shell-commandの実行をON/OFFする)</span>
<span class=\"s\">(global-set-key &quot;\\C-c\\C-m&quot; '</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">toggle</span><span class=\"p\">)</span>
<span class=\"p\">;;</span> 結果の通知を<span class=\"n\">Growl</span>で行う <span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">notify</span> <span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">deferred</span><span class=\"p\">:</span><span class=\"n\">process</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"p\">(</span><span class=\"n\">format</span> &quot;<span class=\"n\">growlnotify</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"c\">%s -t emacs&quot; msg))))</span>
<span class=\"p\">;;</span> エラー時のポップアップを見やすくする <span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"p\">,</span> <span class=\"s\">'(require '</span><span class=\"n\">popwin</span><span class=\"p\">)</span><span class=\"o\">'</span>が必要です<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">push</span> <span class=\"s\">'</span><span class=\"err\">(&quot;*Auto Shell Command*&quot; :height 20) popwin:special-display-config)</span>
</pre>
</div>
</div>
<h2>コマンドリストの設定</h2>
<p>コマンドリストを設定すると色々なことが出来ます。</p>
<p>とある<strong>C言語のプロジェクト</strong>の設定例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> 下が優先高
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">'(&quot;/path/to/dir&quot;                  &quot;make&quot;))     ; 基本は'</span><span class=\"n\">make</span><span class=\"o\">'</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">'(&quot;/path/to/dir/.gitignore&quot;       &quot;make run&quot;)) ; ルートフォルダ直下の'</span><span class=\"p\">.</span><span class=\"n\">gitignore</span><span class=\"o\">'</span>を触ったら<span class=\"s\">'make run'</span><span class=\"p\">(</span>実行<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">'(&quot;/path/to/dir/doc&quot;              &quot;make doc&quot;)) ; '</span><span class=\"n\">doc</span><span class=\"o\">'</span>以下を触ったら<span class=\"s\">'make doc'</span><span class=\"p\">(</span>ドキュメント生成<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">'</span><span class=\"err\">(&quot;/path/to/dir/BBB&quot;              &quot;(cd /path/to/dir/AAA &amp;&amp; make &amp;&amp; cd ../BBB &amp;&amp; make)&quot;)) ; BBBをビルドする時は先にAAAをビルドする必要が・・・(良くあることだよね？)</span>
</pre>
</div>
</div>
<p>とある<strong>Rubyプロジェクト</strong>の設定例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">'(&quot;/path/test/runner.rb&quot;          &quot;rake test&quot;))                     ; '</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"p\">.</span><span class=\"n\">rb</span><span class=\"o\">'</span>を触ったらフルテスト<span class=\"p\">(</span>時間がかかる<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">'(&quot;/path/test/test_/.*\\.rb&quot;       &quot;ruby -I../lib -I../test $FILE&quot;)) ; '</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">test_</span><span class=\"o\">*</span><span class=\"p\">.</span><span class=\"n\">rb</span><span class=\"o\">'</span>を触ったら編集したファイルだけを単体でテスト<span class=\"p\">(</span>時間節約<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ブラウザとの連携</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">'(&quot;Resources/.*\\.js&quot; &quot;wget -O /dev/null http://0.0.0.0:9090/run&quot;)) ; '</span><span class=\"n\">Resources</span><span class=\"o\">/*</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"o\">'</span>以下を触ったら<span class=\"s\">'http://0.0.0.0:9090/run'</span>にアクセス
</pre>
</div>
</div>
<h2>ご意見募集中</h2>
<p>わかりにくい部分やバグがありましたらコメント等でお知らせ下さい。</p>" "http://qiita.com/items/0e45e4bfa5a813c1b9e4" (20390 39056) old 151 nil nil ((id nil "tag:qiita.com,2005:Item/5090") (published nil "2012-05-07T00:23:50+09:00") (updated nil "2012-05-07T00:28:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0e45e4bfa5a813c1b9e4"))) (url nil "http://qiita.com/items/0e45e4bfa5a813c1b9e4") (title nil "自動テストやコンパイルを簡単に記述するためのauto-shell-command.elを作った") (content ((type . "html")) "<p>&#39;auto-shell-command.el&#39;は、ファイルセーブ時に指定したシェルコマンドを実行することが出来るものです。似たようなツールとしては flymake や autotest、Guard があります。</p>

<p><a href=\"https://github.com/ongaeshi/auto-shell-command\">ongaeshi&#47;auto-shell-command - Github</a></p>

<h2>特徴</h2>

<ol>
<li><strong>ファイル名単位</strong> で実行するコマンドを指定することが出来る</li>
<li><strong>一時的にコマンドの実行をON&#47;OFF</strong>することが出来る(まとめて複数のファイルを編集する時に便利)</li>
<li>ファイルの監視からプロセスの実行までEmacsの機能でまかなっているため安定して動作する。Emacsが動く全てのOSで動作する。</li>
<li>外部ツールによるファイル書き換えによって起こる期待していなかったコマンドの誤作動が起きない</li>
<li>Emacs再起動時に消える一時的なコマンドを登録することが出来る</li>
</ol>

<h2>インストール</h2>

<p>&#39;emacs-deferred&#39;が必要です。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">kiwanami</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">deferred</span><span class=\"o\">/</span><span class=\"n\">raw</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">deferred</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>インストール後、<code>auto-shell-command</code>をインストールして下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ongaeshi</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>初期設定</h2>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;auto-shell-command)</span>

<span class=\"s\">;; キーバインドの設定 (一時的にauto-shell-commandの実行をON/OFFする)</span>
<span class=\"s\">(global-set-key &quot;\\C-c\\C-m&quot; &#39;</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">toggle</span><span class=\"p\">)</span>

<span class=\"p\">;;</span> 結果の通知を<span class=\"n\">Growl</span>で行う <span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">notify</span> <span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">deferred</span><span class=\"p\">:</span><span class=\"n\">process</span><span class=\"o\">-</span><span class=\"n\">shell</span> <span class=\"p\">(</span><span class=\"n\">format</span> &quot;<span class=\"n\">growlnotify</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"c\">%s -t emacs&quot; msg))))</span>

<span class=\"p\">;;</span> エラー時のポップアップを見やすくする <span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"p\">,</span> <span class=\"s\">&#39;(require &#39;</span><span class=\"n\">popwin</span><span class=\"p\">)</span><span class=\"o\">&#39;</span>が必要です<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">push</span> <span class=\"s\">&#39;</span><span class=\"err\">(&quot;*Auto Shell Command*&quot; :height 20) popwin:special-display-config)</span>
</pre>
</div>
</div>
<h2>コマンドリストの設定</h2>

<p>コマンドリストを設定すると色々なことが出来ます。</p>

<p>とある<strong>C言語のプロジェクト</strong>の設定例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> 下が優先高
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/to/dir&quot;                  &quot;make&quot;))     ; 基本は&#39;</span><span class=\"n\">make</span><span class=\"o\">&#39;</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/to/dir/.gitignore&quot;       &quot;make run&quot;)) ; ルートフォルダ直下の&#39;</span><span class=\"p\">.</span><span class=\"n\">gitignore</span><span class=\"o\">&#39;</span>を触ったら<span class=\"s\">&#39;make run&#39;</span><span class=\"p\">(</span>実行<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/to/dir/doc&quot;              &quot;make doc&quot;)) ; &#39;</span><span class=\"n\">doc</span><span class=\"o\">&#39;</span>以下を触ったら<span class=\"s\">&#39;make doc&#39;</span><span class=\"p\">(</span>ドキュメント生成<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;</span><span class=\"err\">(&quot;/path/to/dir/BBB&quot;              &quot;(cd /path/to/dir/AAA &amp;&amp; make &amp;&amp; cd ../BBB &amp;&amp; make)&quot;)) ; BBBをビルドする時は先にAAAをビルドする必要が・・・(良くあることだよね？)</span>
</pre>
</div>
</div>
<p>とある<strong>Rubyプロジェクト</strong>の設定例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/test/runner.rb&quot;          &quot;rake test&quot;))                     ; &#39;</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"p\">.</span><span class=\"n\">rb</span><span class=\"o\">&#39;</span>を触ったらフルテスト<span class=\"p\">(</span>時間がかかる<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;/path/test/test_/.*\\.rb&quot;       &quot;ruby -I../lib -I../test $FILE&quot;)) ; &#39;</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">test_</span><span class=\"o\">*</span><span class=\"p\">.</span><span class=\"n\">rb</span><span class=\"o\">&#39;</span>を触ったら編集したファイルだけを単体でテスト<span class=\"p\">(</span>時間節約<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>ブラウザとの連携</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">ascmd</span><span class=\"p\">:</span><span class=\"n\">add</span> <span class=\"s\">&#39;(&quot;Resources/.*\\.js&quot; &quot;wget -O /dev/null http://0.0.0.0:9090/run&quot;)) ; &#39;</span><span class=\"n\">Resources</span><span class=\"o\">/*</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"o\">&#39;</span>以下を触ったら<span class=\"s\">&#39;http://0.0.0.0:9090/run&#39;</span>にアクセス
</pre>
</div>
</div>
<h2>ご意見募集中</h2>

<p>わかりにくい部分やバグがありましたらコメント等でお知らせ下さい。</p>
") (published nil "2012-05-07T00:23:50Z") (updated nil "2012-05-07T00:28:16Z") (author nil (name nil "ongaeshi")))) ("anythingから、ローカルにあるrubygemsのソースを開く" "<p>すでに誰か作ってるかもしれんけど、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-sources-local-gem-file</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;gems (local)&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">call-process-shell-command</span>
<span class=\"s\">&quot;gem list&quot;</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">'global</span><span class=\"p\">)</span>
<span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">action</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">gem-name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gem-name</span> <span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"s\">&quot;\\s+(.+)$&quot;</span> <span class=\"s\">&quot;&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
<span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;gem&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">t</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;which&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">buffer-substring-no-properties</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"p\">(</span><span class=\"nv\">point-max</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;no such file or directory:\\&quot;%s\\&quot;&quot;</span> <span class=\"nv\">path</span><span class=\"p\">))))</span>
<span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-local-gems</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">anything-c-sources-local-gem-file</span><span class=\"p\">)</span>
<span class=\"s\">&quot;*anything local gems*&quot;</span>
<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>M-x anything-local-gems で、インストールされているgemの一覧が出るので、選ぶと、それのソース開きます。</p>
<p>ffap + devel-whichあればそんなに必要ないか…</p>" "http://qiita.com/items/7a832e99d18cc8e507fd" (20387 65293) old 152 nil nil ((id nil "tag:qiita.com,2005:Item/5021") (published nil "2012-05-03T16:50:20+09:00") (updated nil "2012-05-05T01:08:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7a832e99d18cc8e507fd"))) (url nil "http://qiita.com/items/7a832e99d18cc8e507fd") (title nil "anythingから、ローカルにあるrubygemsのソースを開く") (content ((type . "html")) "<p>すでに誰か作ってるかもしれんけど、</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">anything-c-sources-local-gem-file</span>
  <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"s\">&quot;gems (local)&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
              <span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"nv\">call-process-shell-command</span>
                 <span class=\"s\">&quot;gem list&quot;</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">&#39;global</span><span class=\"p\">)</span>
                 <span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nv\">action</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">gem-name</span><span class=\"p\">)</span>
                <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">gem-name</span> <span class=\"p\">(</span><span class=\"nv\">replace-regexp-in-string</span> <span class=\"s\">&quot;\\s+(.+)$&quot;</span> <span class=\"s\">&quot;&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">))</span>
                <span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
                  <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;gem&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">t</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;which&quot;</span> <span class=\"nv\">gem-name</span><span class=\"p\">)</span>
                  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">path</span> <span class=\"p\">(</span><span class=\"nv\">buffer-substring-no-properties</span> <span class=\"p\">(</span><span class=\"nv\">point-min</span><span class=\"p\">)</span>
                                                              <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"p\">(</span><span class=\"nv\">point-max</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>
                    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">file-exists-p</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
                        <span class=\"p\">(</span><span class=\"nv\">find-file</span> <span class=\"nv\">path</span><span class=\"p\">)</span>
                      <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;no such file or directory:\\&quot;%s\\&quot;&quot;</span> <span class=\"nv\">path</span><span class=\"p\">))))</span>
                <span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-local-gems</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span>
   <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">anything-c-sources-local-gem-file</span><span class=\"p\">)</span>
   <span class=\"s\">&quot;*anything local gems*&quot;</span>
  <span class=\"p\">))</span>
</pre>
</div>
</div>
<p>M-x anything-local-gems で、インストールされているgemの一覧が出るので、選ぶと、それのソース開きます。</p>

<p>ffap + devel-whichあればそんなに必要ないか…</p>
") (published nil "2012-05-03T16:50:20Z") (updated nil "2012-05-05T01:08:45Z") (author nil (name nil "hadashiA")))) ("yaottiさんの便利なanything-git-projectコマンドを、 anything したときの情報源としてつかう" "<p><a href=\"http://qiita.com/items/d0d4959510acd9fd1abf#comment-9c3dfc76132f8f3b088a\">http://qiita.com/items/d0d4959510acd9fd1abf#comment-9c3dfc76132f8f3b088a</a><br>
↑これがとても使いやすので、独立したコマンドとしてでなく、普通にanythingしたときに出てくれるよう、情報源として定義しなおしてみる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">dolist</span> <span class=\"p\">(</span><span class=\"nb\">elt</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">&quot;modified&quot;</span> <span class=\"s\">&quot;Modified files (%s)&quot;</span> <span class=\"s\">&quot;--modified&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;untracked&quot;</span> <span class=\"s\">&quot;Untracked files (%s)&quot;</span> <span class=\"s\">&quot;--others --exclude-standard&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"s\">&quot;all &quot;&quot;All controlled files in this project (%s)&quot;</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">destructuring-bind</span> <span class=\"p\">(</span><span class=\"nv\">suffix</span> <span class=\"nv\">name</span> <span class=\"nv\">options</span><span class=\"p\">)</span> <span class=\"nb\">elt</span>
<span class=\"p\">(</span><span class=\"nb\">eval</span> <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">intern</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;anything-c-source-git-project-for-&quot;</span> <span class=\"nv\">suffix</span><span class=\"p\">))</span>
<span class=\"o\">`</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"nv\">name</span> <span class=\"nv\">default-directory</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">string=</span> <span class=\"nv\">options</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"c1\">;update candidate buffer every time except for that of all project files</span>
<span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">with-current-buffer</span>
<span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">'global</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">insert</span>
<span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
<span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;git ls-files $(git rev-parse --show-cdup) %s&quot;</span>
<span class=\"nv\">options</span><span class=\"p\">)))))))</span>
<span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"o\">.</span> <span class=\"nv\">file</span><span class=\"p\">))</span>
<span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-git-project</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">sources</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">anything-c-source-git-project-for-modified</span>
<span class=\"nv\">anything-c-source-git-project-for-untracked</span>
<span class=\"nv\">anything-c-source-git-project-for-all</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span> <span class=\"nv\">sources</span>
<span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;*Anything git project in %s*&quot;</span> <span class=\"nv\">default-directory</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>anything-c-sources に追加。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
<span class=\"o\">`</span><span class=\"p\">(</span>
<span class=\"nv\">anything-c-source-git-project-for-modified</span>
<span class=\"c1\">;; anything-c-source-git-project-for-untracked</span>
<span class=\"c1\">;; anything-c-source-git-project-for-all</span>
<span class=\"nv\">anything-c-source-buffers</span>
<span class=\"c1\">;; などなど、いつもの情報源いろいろ</span>
<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>M-x anything したとき、なによりも先に gitのmodifiedファイルが表示される。(存在すれば)</p>" "http://qiita.com/items/b6f40f344ee7e3573993" (20382 15397) old 153 nil nil ((id nil "tag:qiita.com,2005:Item/4938") (published nil "2012-04-30T16:15:49+09:00") (updated nil "2012-04-30T16:15:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b6f40f344ee7e3573993"))) (url nil "http://qiita.com/items/b6f40f344ee7e3573993") (title nil "yaottiさんの便利なanything-git-projectコマンドを、 anything したときの情報源としてつかう") (content ((type . "html")) "<p><a href=\"http://qiita.com/items/d0d4959510acd9fd1abf#comment-9c3dfc76132f8f3b088a\">http:&#47;&#47;qiita.com&#47;items&#47;d0d4959510acd9fd1abf#comment-9c3dfc76132f8f3b088a</a><br>
↑これがとても使いやすので、独立したコマンドとしてでなく、普通にanythingしたときに出てくれるよう、情報源として定義しなおしてみる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">dolist</span> <span class=\"p\">(</span><span class=\"nb\">elt</span> <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;modified&quot;</span> <span class=\"s\">&quot;Modified files (%s)&quot;</span> <span class=\"s\">&quot;--modified&quot;</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"s\">&quot;untracked&quot;</span> <span class=\"s\">&quot;Untracked files (%s)&quot;</span> <span class=\"s\">&quot;--others --exclude-standard&quot;</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"s\">&quot;all &quot;&quot;All controlled files in this project (%s)&quot;</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nb\">destructuring-bind</span> <span class=\"p\">(</span><span class=\"nv\">suffix</span> <span class=\"nv\">name</span> <span class=\"nv\">options</span><span class=\"p\">)</span> <span class=\"nb\">elt</span>
    <span class=\"p\">(</span><span class=\"nb\">eval</span> <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">intern</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;anything-c-source-git-project-for-&quot;</span> <span class=\"nv\">suffix</span><span class=\"p\">))</span>
             <span class=\"o\">`</span><span class=\"p\">((</span><span class=\"nv\">name</span> <span class=\"o\">.</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"nv\">name</span> <span class=\"nv\">default-directory</span><span class=\"p\">))</span>
               <span class=\"p\">(</span><span class=\"nv\">init</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
                         <span class=\"p\">(</span><span class=\"nb\">unless</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">string=</span> <span class=\"nv\">options</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"c1\">;update candidate buffer every time except for that of all project files</span>
                                      <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span><span class=\"p\">))</span>
                           <span class=\"p\">(</span><span class=\"nv\">with-current-buffer</span>
                               <span class=\"p\">(</span><span class=\"nv\">anything-candidate-buffer</span> <span class=\"ss\">&#39;global</span><span class=\"p\">)</span>
                             <span class=\"p\">(</span><span class=\"nv\">insert</span>
                              <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span>
                               <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;git ls-files $(git rev-parse --show-cdup) %s&quot;</span>
                                        <span class=\"nv\">options</span><span class=\"p\">)))))))</span>
               <span class=\"p\">(</span><span class=\"nv\">candidates-in-buffer</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"o\">.</span> <span class=\"nv\">file</span><span class=\"p\">))</span>
             <span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">anything-git-project</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">sources</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">anything-c-source-git-project-for-modified</span>
                   <span class=\"nv\">anything-c-source-git-project-for-untracked</span>
                   <span class=\"nv\">anything-c-source-git-project-for-all</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nv\">anything-other-buffer</span> <span class=\"nv\">sources</span>
     <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">&quot;*Anything git project in %s*&quot;</span> <span class=\"nv\">default-directory</span><span class=\"p\">))))</span>
</pre>
</div>
</div>
<p>anything-c-sources に追加。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">anything-sources</span>
      <span class=\"o\">`</span><span class=\"p\">(</span> 
        <span class=\"nv\">anything-c-source-git-project-for-modified</span>
        <span class=\"c1\">;; anything-c-source-git-project-for-untracked</span>
        <span class=\"c1\">;; anything-c-source-git-project-for-all</span>
        <span class=\"nv\">anything-c-source-buffers</span>
        <span class=\"c1\">;; などなど、いつもの情報源いろいろ</span>
        <span class=\"p\">))</span>
</pre>
</div>
</div>
<p>M-x anything したとき、なによりも先に gitのmodifiedファイルが表示される。(存在すれば)</p>
") (published nil "2012-04-30T16:15:49Z") (updated nil "2012-04-30T16:15:49Z") (author nil (name nil "hadashiA")))) ("Emacsでvimのf、F、; を" "<p>vimで、カーソル行の <strong>1文字</strong> を検索して飛ぶコマンドがとても便利なのでEmacsでもできる限り再現しようと試みた。</p>
<p>M-j 押した後、次に押した文字がカーソルより右にあればそこに飛ぶ。<br>
M-k 押した後、次に押した文字がカーソルより左にあればそこに飛ぶ。<br>
M-u は前回のコマンドを繰り返す。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">vimlike-f-recent-char</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">vimlike-f-recent-func</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-f</span> <span class=\"p\">(</span><span class=\"nb\">char</span><span class=\"p\">)</span>
<span class=\"s\">&quot;search to forward char into current line and move point (vim 'f' command)&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;cSearch to forward char: &quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">char-after</span> <span class=\"p\">(</span><span class=\"nv\">point</span><span class=\"p\">))</span> <span class=\"nb\">char</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">forward-char</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">search-forward</span> <span class=\"p\">(</span><span class=\"nv\">char-to-string</span> <span class=\"nb\">char</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-at-eol</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"c1\">;; (migemo-forward (char-to-string char) (point-at-eol) t 1)</span>
<span class=\"p\">(</span><span class=\"nv\">backward-char</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">vimlike-f-recent-search-char</span> <span class=\"nb\">char</span>
<span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"ss\">'vimlike-f</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-F</span> <span class=\"p\">(</span><span class=\"nb\">char</span><span class=\"p\">)</span>
<span class=\"s\">&quot;search to forward char into current line and move point. (vim 'F' command)&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;cSearch to backward char: &quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">search-backward</span> <span class=\"p\">(</span><span class=\"nv\">char-to-string</span> <span class=\"nb\">char</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-at-bol</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"c1\">;; (migemo-backward (char-to-string char) (point-at-bol) t 1)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">vimlike-f-recent-search-char</span> <span class=\"nb\">char</span>
<span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"ss\">'vimlike-F</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-semicolon</span> <span class=\"p\">()</span>
<span class=\"s\">&quot;search repeat recent vimlike 'f' or 'F' search char (vim ';' command)&quot;</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">vimlike-f-recent-search-char</span>
<span class=\"nv\">vimlike-f-recent-search-func</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"nv\">vimlike-f-recent-search-char</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Empty recent search char.&quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-j&quot;</span> <span class=\"ss\">'vimlike-f</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-k&quot;</span> <span class=\"ss\">'vimlike-F</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-u&quot;</span> <span class=\"ss\">'vimlike-semicolon</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-sなどの普通のインクリメンタルサーチと違って、Enter押す必要がない。<br>
検索コマンドじゃなくてカーソル移動コマンドとして使う。</p>" "http://qiita.com/items/5591e4c4c0bfdc558641" (20381 24253) old 154 nil nil ((id nil "tag:qiita.com,2005:Item/4921") (published nil "2012-04-30T00:28:25+09:00") (updated nil "2012-04-30T00:31:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5591e4c4c0bfdc558641"))) (url nil "http://qiita.com/items/5591e4c4c0bfdc558641") (title nil "Emacsでvimのf、F、; を") (content ((type . "html")) "<p>vimで、カーソル行の <strong>1文字</strong> を検索して飛ぶコマンドがとても便利なのでEmacsでもできる限り再現しようと試みた。</p>

<p>M-j 押した後、次に押した文字がカーソルより右にあればそこに飛ぶ。<br>
M-k 押した後、次に押した文字がカーソルより左にあればそこに飛ぶ。<br>
M-u は前回のコマンドを繰り返す。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">vimlike-f-recent-char</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">vimlike-f-recent-func</span> <span class=\"no\">nil</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-f</span> <span class=\"p\">(</span><span class=\"nb\">char</span><span class=\"p\">)</span>
  <span class=\"s\">&quot;search to forward char into current line and move point (vim &#39;f&#39; command)&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;cSearch to forward char: &quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">char-after</span> <span class=\"p\">(</span><span class=\"nv\">point</span><span class=\"p\">))</span> <span class=\"nb\">char</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">forward-char</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nv\">search-forward</span> <span class=\"p\">(</span><span class=\"nv\">char-to-string</span> <span class=\"nb\">char</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-at-eol</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
  <span class=\"c1\">;; (migemo-forward (char-to-string char) (point-at-eol) t 1)</span>
  <span class=\"p\">(</span><span class=\"nv\">backward-char</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">vimlike-f-recent-search-char</span> <span class=\"nb\">char</span>
        <span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"ss\">&#39;vimlike-f</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-F</span> <span class=\"p\">(</span><span class=\"nb\">char</span><span class=\"p\">)</span>
  <span class=\"s\">&quot;search to forward char into current line and move point. (vim &#39;F&#39; command)&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">&quot;cSearch to backward char: &quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">search-backward</span> <span class=\"p\">(</span><span class=\"nv\">char-to-string</span> <span class=\"nb\">char</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">point-at-bol</span><span class=\"p\">)</span> <span class=\"no\">nil</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
  <span class=\"c1\">;; (migemo-backward (char-to-string char) (point-at-bol) t 1)</span>
  <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">vimlike-f-recent-search-char</span> <span class=\"nb\">char</span>
        <span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"ss\">&#39;vimlike-F</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">vimlike-semicolon</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;search repeat recent vimlike &#39;f&#39; or &#39;F&#39; search char (vim &#39;;&#39; command)&quot;</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"nv\">vimlike-f-recent-search-char</span>
             <span class=\"nv\">vimlike-f-recent-search-func</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nb\">funcall</span> <span class=\"nv\">vimlike-f-recent-search-func</span> <span class=\"nv\">vimlike-f-recent-search-char</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Empty recent search char.&quot;</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-j&quot;</span> <span class=\"ss\">&#39;vimlike-f</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-k&quot;</span> <span class=\"ss\">&#39;vimlike-F</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"s\">&quot;\\M-u&quot;</span> <span class=\"ss\">&#39;vimlike-semicolon</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-sなどの普通のインクリメンタルサーチと違って、Enter押す必要がない。<br>
検索コマンドじゃなくてカーソル移動コマンドとして使う。</p>
") (published nil "2012-04-30T00:28:25Z") (updated nil "2012-04-30T00:31:09Z") (author nil (name nil "hadashiA")))) ("キーワード引数を取る関数の、interactiveにリストを渡す" "<p>関数をコマンド化する、interactive。<br>
これの引数にリストを渡すと、コマンド実行した場合の引数リストとして解釈してくれる。マニュアルに書いてる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">fuga</span> <span class=\"p\">(</span><span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">command-execute</span> <span class=\"nf\">#'</span><span class=\"nv\">unko</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; (1 2 3)</span>
</pre>
</div>
</div>
<p>ではキーワード引数ではどうかというと、以下のやり方でいける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defun*</span> <span class=\"nv\">unko</span> <span class=\"p\">(</span><span class=\"k\">&amp;key</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"ss\">:a</span> <span class=\"mi\">1</span> <span class=\"ss\">:b</span> <span class=\"mi\">2</span> <span class=\"ss\">:c</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">command-execute</span> <span class=\"nf\">#'</span><span class=\"nv\">unko</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; (1 2 3)</span>
<span class=\"p\">(</span><span class=\"nv\">unko</span> <span class=\"ss\">:a</span> <span class=\"mi\">4</span> <span class=\"ss\">:b</span> <span class=\"mi\">5</span> <span class=\"ss\">:c</span> <span class=\"mi\">6</span><span class=\"p\">)</span>                   <span class=\"c1\">; =&gt; (4 5 6)</span>
</pre>
</div>
</div>
<p>ちなみに、この話は、interactiveだけでなく、applyとか、引数をリストとして取る関数全般にあてはまる。</p>
<p>ところで、:a っていうのはどうやらシンボルらしい。<br>
&gt;|lisp|<br>
(type-of :a) ; =&gt; symbol<br>
||&lt;</p>
<p>あー。 :a は単体で評価してもエラーにならない。単に :a が返る。</p>" "http://qiita.com/items/2e35fe8f74a12281e101" (20381 23763) old 155 nil nil ((id nil "tag:qiita.com,2005:Item/4920") (published nil "2012-04-30T00:22:59+09:00") (updated nil "2012-04-30T00:22:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2e35fe8f74a12281e101"))) (url nil "http://qiita.com/items/2e35fe8f74a12281e101") (title nil "キーワード引数を取る関数の、interactiveにリストを渡す") (content ((type . "html")) "<p>関数をコマンド化する、interactive。<br>
これの引数にリストを渡すと、コマンド実行した場合の引数リストとして解釈してくれる。マニュアルに書いてる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">fuga</span> <span class=\"p\">(</span><span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nv\">command-execute</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">unko</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; (1 2 3)</span>
</pre>
</div>
</div>
<p>ではキーワード引数ではどうかというと、以下のやり方でいける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">defun*</span> <span class=\"nv\">unko</span> <span class=\"p\">(</span><span class=\"k\">&amp;key</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"ss\">:a</span> <span class=\"mi\">1</span> <span class=\"ss\">:b</span> <span class=\"mi\">2</span> <span class=\"ss\">:c</span> <span class=\"mi\">3</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nv\">command-execute</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">unko</span><span class=\"p\">)</span>                <span class=\"c1\">; =&gt; (1 2 3)</span>
<span class=\"p\">(</span><span class=\"nv\">unko</span> <span class=\"ss\">:a</span> <span class=\"mi\">4</span> <span class=\"ss\">:b</span> <span class=\"mi\">5</span> <span class=\"ss\">:c</span> <span class=\"mi\">6</span><span class=\"p\">)</span>                   <span class=\"c1\">; =&gt; (4 5 6)</span>
</pre>
</div>
</div>
<p>ちなみに、この話は、interactiveだけでなく、applyとか、引数をリストとして取る関数全般にあてはまる。</p>

<p>ところで、:a っていうのはどうやらシンボルらしい。<br>
&gt;|lisp|<br>
(type-of :a) ; =&gt; symbol<br>
||&lt;</p>

<p>あー。 :a は単体で評価してもエラーにならない。単に :a が返る。</p>
") (published nil "2012-04-30T00:22:59Z") (updated nil "2012-04-30T00:22:59Z") (author nil (name nil "hadashiA")))) ("Parallels Desktop for Mac を使ってOSXとWin7のEmacsを横に並べてみた" "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120428/20120428224407_original.jpg?1335620672\" alt=\"parallels_shell\"></p>
<p>左上 : OSXのターミナル<br>
右上 : OSX, Cocoa Emacs<br>
左下 : cygwinのbash<br>
右下 : Win7 Emacs, gnupack</p>
<p><em>iMac (Late 2009)</em> ですがOSXとWinのEmacsで動作速度の違いはほぼ体感出来ません。起動速度でいえばWin版の方が早い位。</p>
<p>これでやっと、<strong>作成したソフトウェアのMac版とWin版の動作確認がマシン一台で</strong>出来るようになりました、万歳！！</p>
<p>Linuxはもちろん、Win8 Preview版もインストール出来るようなので機会があれば試してみようと思います。</p>
<p>洞窟物語も動きました。(Mac版あるじゃん！とかいっちゃ駄目です)</p>
<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120428/20120428230440_original.jpg?1335621903\" alt=\"洞窟物語\"></p>" "http://qiita.com/items/562836a08a64c74e2a11" (20379 64056) old 156 nil nil ((id nil "tag:qiita.com,2005:Item/4888") (published nil "2012-04-28T23:10:00+09:00") (updated nil "2012-04-28T23:10:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/562836a08a64c74e2a11"))) (url nil "http://qiita.com/items/562836a08a64c74e2a11") (title nil "Parallels Desktop for Mac を使ってOSXとWin7のEmacsを横に並べてみた") (content ((type . "html")) "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120428/20120428224407_original.jpg?1335620672\" alt=\"parallels_shell\"></p>

<p>左上 : OSXのターミナル<br>
右上 : OSX, Cocoa Emacs<br>
左下 : cygwinのbash<br>
右下 : Win7 Emacs, gnupack</p>

<p><em>iMac (Late 2009)</em> ですがOSXとWinのEmacsで動作速度の違いはほぼ体感出来ません。起動速度でいえばWin版の方が早い位。</p>

<p>これでやっと、<strong>作成したソフトウェアのMac版とWin版の動作確認がマシン一台で</strong>出来るようになりました、万歳！！</p>

<p>Linuxはもちろん、Win8 Preview版もインストール出来るようなので機会があれば試してみようと思います。</p>

<p>洞窟物語も動きました。(Mac版あるじゃん！とかいっちゃ駄目です)</p>

<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120428/20120428230440_original.jpg?1335621903\" alt=\"洞窟物語\"></p>
") (published nil "2012-04-28T23:10:00Z") (updated nil "2012-04-28T23:10:00Z") (author nil (name nil "ongaeshi")))) ("Emacsで現在行や選択範囲を簡単に複製する duplicate-thing.el をパワーアップさせました" "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120427/20120427232210.jpg?1335536582\" alt=\"duplicate-line.el\"></p>
<p>現在行や選択範囲を簡単に複製するためのEmacsLispです。 <a href=\"http://qiita.com/items/3c783e47f0b9ccf8183e\">過去の記事</a></p>
<h2>更新内容</h2>
<ul>
<li>'C-u'(コメントアウト)と'C-u 4'(4回繰り返し)の違いを判別出来るように (thanks a_ars)</li>
<li>githubに <a href=\"https://github.com/ongaeshi/duplicate-thing\">README.markdown</a> を追加</li>
</ul>
<h2>インストール＆設定</h2>
<p> <a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">こちらの記事</a> をどうぞ</p>" "http://qiita.com/items/f7b82dd9466276840a44" (20378 43975) old 157 nil nil ((id nil "tag:qiita.com,2005:Item/4868") (published nil "2012-04-27T23:23:03+09:00") (updated nil "2012-04-27T23:23:03+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f7b82dd9466276840a44"))) (url nil "http://qiita.com/items/f7b82dd9466276840a44") (title nil "Emacsで現在行や選択範囲を簡単に複製する duplicate-thing.el をパワーアップさせました") (content ((type . "html")) "<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120427/20120427232210.jpg?1335536582\" alt=\"duplicate-line.el\"></p>

<p>現在行や選択範囲を簡単に複製するためのEmacsLispです。 <a href=\"http://qiita.com/items/3c783e47f0b9ccf8183e\">過去の記事</a></p>

<h2>更新内容</h2>

<ul>
<li>&#39;C-u&#39;(コメントアウト)と&#39;C-u 4&#39;(4回繰り返し)の違いを判別出来るように (thanks a_ars)</li>
<li>githubに <a href=\"https://github.com/ongaeshi/duplicate-thing\">README.markdown</a> を追加</li>
</ul>

<h2>インストール＆設定</h2>

<p> <a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">こちらの記事</a> をどうぞ</p>
") (published nil "2012-04-27T23:23:03Z") (updated nil "2012-04-27T23:23:03Z") (author nil (name nil "ongaeshi")))) ("apt-get で ddskk をインストールすると発生するエラーを解決" "<p>ddskk をインストールすると以下のようなエラーが出力されて困っていた．</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">...</span>
<span class=\"n\">ddskk</span> <span class=\"p\">(</span>14<span class=\"p\">.</span>3<span class=\"o\">-</span>1<span class=\"p\">)</span> を設定しています <span class=\"p\">...</span>
<span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span><span class=\"p\">:</span> <span class=\"n\">Handling</span> <span class=\"n\">install</span> <span class=\"k\">for</span> <span class=\"n\">emacsen</span> <span class=\"n\">flavor</span> <span class=\"n\">emacs23</span>
<span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span><span class=\"p\">:</span> <span class=\"n\">Handling</span> <span class=\"n\">install</span> <span class=\"k\">for</span> <span class=\"n\">emacsen</span> <span class=\"n\">flavor</span> <span class=\"n\">xemacs21</span>
<span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">emacsen</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span> <span class=\"n\">xemacs21</span> <span class=\"n\">emacs23</span> <span class=\"n\">xemacs21</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">emacsen</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">line</span> 30<span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">TSORT</span><span class=\"o\">&gt;</span> <span class=\"n\">line</span> 1<span class=\"p\">.</span>
<span class=\"n\">dpkg</span><span class=\"p\">:</span> <span class=\"n\">ddskk</span> の処理中にエラーが発生しました <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">configure</span><span class=\"p\">):</span>
サブプロセス インストール済みの <span class=\"n\">post</span><span class=\"o\">-</span><span class=\"n\">installation</span> スクリプト はエラー終了ステータス 255 を返しました
<span class=\"n\">MaxReports</span> にすでに達しているため、レポートは書き込まれません
以下のパッケージの処理中にエラーが発生しました<span class=\"p\">:</span>
<span class=\"n\">ddskk</span>
<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"n\">Sub</span><span class=\"o\">-</span><span class=\"n\">process</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">dpkg</span> <span class=\"n\">returned</span> <span class=\"n\">an</span> <span class=\"n\">error</span> <span class=\"n\">code</span> <span class=\"p\">(</span>1<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>原因は apel を remove してしまったことらしい．apel をインストールすれば解決する．</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">apel</span>
</pre>
</div>
</div>" "http://qiita.com/items/4707451ac48a5890d482" (20375 32426) old 158 nil nil ((id nil "tag:qiita.com,2005:Item/4723") (published nil "2012-04-25T13:33:46+09:00") (updated nil "2012-04-25T13:33:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4707451ac48a5890d482"))) (url nil "http://qiita.com/items/4707451ac48a5890d482") (title nil "apt-get で ddskk をインストールすると発生するエラーを解決") (content ((type . "html")) "<p>ddskk をインストールすると以下のようなエラーが出力されて困っていた．</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">...</span>
<span class=\"n\">ddskk</span> <span class=\"p\">(</span>14<span class=\"p\">.</span>3<span class=\"o\">-</span>1<span class=\"p\">)</span> を設定しています <span class=\"p\">...</span>
<span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span><span class=\"p\">:</span> <span class=\"n\">Handling</span> <span class=\"n\">install</span> <span class=\"k\">for</span> <span class=\"n\">emacsen</span> <span class=\"n\">flavor</span> <span class=\"n\">emacs23</span>
<span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span><span class=\"p\">:</span> <span class=\"n\">Handling</span> <span class=\"n\">install</span> <span class=\"k\">for</span> <span class=\"n\">emacsen</span> <span class=\"n\">flavor</span> <span class=\"n\">xemacs21</span>
<span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">emacsen</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">ddskk</span> <span class=\"n\">xemacs21</span> <span class=\"n\">emacs23</span> <span class=\"n\">xemacs21</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">emacsen</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">emacs</span><span class=\"o\">-</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">install</span> <span class=\"n\">line</span> 30<span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">TSORT</span><span class=\"o\">&gt;</span> <span class=\"n\">line</span> 1<span class=\"p\">.</span>
<span class=\"n\">dpkg</span><span class=\"p\">:</span> <span class=\"n\">ddskk</span> の処理中にエラーが発生しました <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">configure</span><span class=\"p\">):</span>
 サブプロセス インストール済みの <span class=\"n\">post</span><span class=\"o\">-</span><span class=\"n\">installation</span> スクリプト はエラー終了ステータス 255 を返しました
<span class=\"n\">MaxReports</span> にすでに達しているため、レポートは書き込まれません
以下のパッケージの処理中にエラーが発生しました<span class=\"p\">:</span>
 <span class=\"n\">ddskk</span>
<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"n\">Sub</span><span class=\"o\">-</span><span class=\"n\">process</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">dpkg</span> <span class=\"n\">returned</span> <span class=\"n\">an</span> <span class=\"n\">error</span> <span class=\"n\">code</span> <span class=\"p\">(</span>1<span class=\"p\">)</span>
</pre>
</div>
</div>
<p>原因は apel を remove してしまったことらしい．apel をインストールすれば解決する．</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">apel</span>
</pre>
</div>
</div>") (published nil "2012-04-25T13:33:46Z") (updated nil "2012-04-25T13:33:46Z") (author nil (name nil "akisute3@github")))) ("emacsの起動時にemacs: Cannot open termcap database fileというエラーが出る" "<p>emacs23.4をさくらVPSのCentOSにソースからコンパイルしてインストールする</p>
<p>$./configure --without-x<br>
$make<br>
$make install</p>
<p>しかし実行時<br>
$emacs<br>
emacs: Cannot open termcap database file</p>
<p>となって起動できない。<br>
調べるとlibncurses5-devが必要らしいがyumにない。<br>
yumだとncurses-develが対応しているらしい<br>
$sudo yum install ncurses-devel<br>
再コンパイル<br>
$./configure --without-x<br>
$make<br>
$make install</p>
<p>無事起動できた</p>" "http://qiita.com/items/ff3a4f2ed6d5ec4f726e" (20374 23217) old 159 nil nil ((id nil "tag:qiita.com,2005:Item/4689") (published nil "2012-04-24T16:48:01+09:00") (updated nil "2012-04-24T16:48:01+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ff3a4f2ed6d5ec4f726e"))) (url nil "http://qiita.com/items/ff3a4f2ed6d5ec4f726e") (title nil "emacsの起動時にemacs: Cannot open termcap database fileというエラーが出る") (content ((type . "html")) "<p>emacs23.4をさくらVPSのCentOSにソースからコンパイルしてインストールする</p>

<p>$.&#47;configure --without-x<br>
$make<br>
$make install</p>

<p>しかし実行時<br>
$emacs<br>
emacs: Cannot open termcap database file</p>

<p>となって起動できない。<br>
調べるとlibncurses5-devが必要らしいがyumにない。<br>
yumだとncurses-develが対応しているらしい<br>
$sudo yum install ncurses-devel<br>
再コンパイル<br>
$.&#47;configure --without-x<br>
$make<br>
$make install</p>

<p>無事起動できた</p>
") (published nil "2012-04-24T16:48:01Z") (updated nil "2012-04-24T16:48:01Z") (author nil (name nil "ysekkyy")))) ("TeX Live 2011 ユーザが org 文書を pdf に出力するための設定" "<p>org-export-as-pdf(C-c C-e p) は pdflatex コマンドを使って pdf 出力しようとするため、これを platex &amp; dvipdfmx に変更するための設定。</p>
<p>まずパスの通ったところに以下のシェルスクリプトを作成し、実行権限を付ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">mypdflatex</span></div><div class=\"highlight\"><pre><span class=\"c\">#!/bin/bash</span>
<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;${1##*.}&quot;</span> <span class=\"o\">=</span> <span class=\"s1\">'tex'</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;A&quot;</span>
<span class=\"nv\">src</span><span class=\"o\">=</span><span class=\"s2\">&quot;$1&quot;</span>
<span class=\"nv\">basename</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1%%.tex}&quot;</span>
<span class=\"k\">elif</span> <span class=\"o\">[</span> -r <span class=\"s2\">&quot;${1}.tex&quot;</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;B&quot;</span>
<span class=\"nv\">src</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1}.tex&quot;</span>
<span class=\"nv\">basename</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1}&quot;</span>
<span class=\"k\">else</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;file not found: $1&quot;</span> 1&gt;&amp;2
<span class=\"nb\">exit </span>8
<span class=\"k\">fi</span>
platex <span class=\"s2\">&quot;$basename&quot;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>
platex <span class=\"s2\">&quot;$basename&quot;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>
dvipdfmx <span class=\"s2\">&quot;$basename&quot;</span>
</pre>
</div>
</div>
<p>org-export-as-pdf でこのシェルスクリプトを使用するように、.emacs に以下を記述。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-latex-to-pdf-process</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;mypdflatex %f&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これで pdf 出力が1発で行えるようになる。</p>
<p>org-export-as-pdf-and-open(C-c C-e d) を使用するなら、pdf を開くソフトの設定もしておくといい。例えば evince で開くなら .emacs に以下のように記述するとか。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-file-apps</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">&quot;pdf&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;evince %s&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>" "http://qiita.com/items/da23c80d334139194a4d" (20373 28448) old 160 nil nil ((id nil "tag:qiita.com,2005:Item/4649") (published nil "2012-04-24T00:02:56+09:00") (updated nil "2012-04-24T00:02:56+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/da23c80d334139194a4d"))) (url nil "http://qiita.com/items/da23c80d334139194a4d") (title nil "TeX Live 2011 ユーザが org 文書を pdf に出力するための設定") (content ((type . "html")) "<p>org-export-as-pdf(C-c C-e p) は pdflatex コマンドを使って pdf 出力しようとするため、これを platex &amp; dvipdfmx に変更するための設定。</p>

<p>まずパスの通ったところに以下のシェルスクリプトを作成し、実行権限を付ける。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">mypdflatex</span></div><div class=\"highlight\"><pre><span class=\"c\">#!/bin/bash</span>

<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;${1##*.}&quot;</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;tex&#39;</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;A&quot;</span>
    <span class=\"nv\">src</span><span class=\"o\">=</span><span class=\"s2\">&quot;$1&quot;</span>
    <span class=\"nv\">basename</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1%%.tex}&quot;</span>
<span class=\"k\">elif</span> <span class=\"o\">[</span> -r <span class=\"s2\">&quot;${1}.tex&quot;</span> <span class=\"o\">]</span>; <span class=\"k\">then</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;B&quot;</span>
    <span class=\"nv\">src</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1}.tex&quot;</span>
    <span class=\"nv\">basename</span><span class=\"o\">=</span><span class=\"s2\">&quot;${1}&quot;</span>
<span class=\"k\">else</span>
<span class=\"k\">    </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;file not found: $1&quot;</span> 1&gt;&amp;2
    <span class=\"nb\">exit </span>8
<span class=\"k\">fi</span>

platex <span class=\"s2\">&quot;$basename&quot;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>
platex <span class=\"s2\">&quot;$basename&quot;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>
dvipdfmx <span class=\"s2\">&quot;$basename&quot;</span>
</pre>
</div>
</div>
<p>org-export-as-pdf でこのシェルスクリプトを使用するように、.emacs に以下を記述。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-latex-to-pdf-process</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;mypdflatex %f&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<p>これで pdf 出力が1発で行えるようになる。</p>

<p>org-export-as-pdf-and-open(C-c C-e d) を使用するなら、pdf を開くソフトの設定もしておくといい。例えば evince で開くなら .emacs に以下のように記述するとか。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">org-file-apps</span>
      <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;pdf&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;evince %s&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>") (published nil "2012-04-24T00:02:56Z") (updated nil "2012-04-24T00:02:56Z") (author nil (name nil "akisute3@github")))) ("Emacs 起動時の .emacs 読み込みが終わらない原因の1つ" "<p>Emacs に auto-install をインストールしていて，.emacs に</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">auto-install-update-emacswiki-package-name</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を記述していると，emacswiki が接続できない場合に .emacs の読み込みがいつまで経っても終わらない．<br>
そのときは上のコードをコメントアウトするだけで解決するのだが，エラーを発生してくれないため，知らないと解決に時間がかかる．頭の片隅にでも置いておくといいかと．</p>" "http://qiita.com/items/23a4ea56e8cafeb19336" (20372 64318) old 161 nil nil ((id nil "tag:qiita.com,2005:Item/4615") (published nil "2012-04-23T15:48:30+09:00") (updated nil "2012-04-23T15:48:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/23a4ea56e8cafeb19336"))) (url nil "http://qiita.com/items/23a4ea56e8cafeb19336") (title nil "Emacs 起動時の .emacs 読み込みが終わらない原因の1つ") (content ((type . "html")) "<p>Emacs に auto-install をインストールしていて，.emacs に</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">auto-install-update-emacswiki-package-name</span> <span class=\"no\">t</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を記述していると，emacswiki が接続できない場合に .emacs の読み込みがいつまで経っても終わらない．<br>
そのときは上のコードをコメントアウトするだけで解決するのだが，エラーを発生してくれないため，知らないと解決に時間がかかる．頭の片隅にでも置いておくといいかと．</p>
") (published nil "2012-04-23T15:48:30Z") (updated nil "2012-04-23T15:48:30Z") (author nil (name nil "akisute3@github")))) ("org-modeでmulticolumnな表を扱う" "<p>org-modeでLaTeX出力するための文書を書くとき、\\multicolumnを使用する表が必要な時がある。org-modeには一部のセルをつなげた表を書くことが(おそらく)できないので、そういう時は諦めが肝心。org文書にLaTeXを埋め込んでしまうのが手っ取り早い。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>#+begin<span class=\"nb\">_</span>latex
<span class=\"k\">\\begin</span><span class=\"nb\">{</span>table<span class=\"nb\">}</span>[b]
<span class=\"k\">\\caption</span><span class=\"nb\">{</span>caption<span class=\"nb\">}</span> <span class=\"k\">\\label</span><span class=\"nb\">{</span>label<span class=\"nb\">}</span>
<span class=\"k\">\\begin</span><span class=\"nb\">{</span>center<span class=\"nb\">}</span>
<span class=\"k\">\\begin</span><span class=\"nb\">{</span>tabular<span class=\"nb\">}{</span>|l|cc|cc|<span class=\"nb\">}</span>
<span class=\"k\">\\hline</span>
<span class=\"nb\">&amp;</span> <span class=\"k\">\\multicolumn</span><span class=\"nb\">{</span>2<span class=\"nb\">}{</span>|c|<span class=\"nb\">}{</span>multi1<span class=\"nb\">}</span> <span class=\"nb\">&amp;</span> <span class=\"k\">\\multicolumn</span><span class=\"nb\">{</span>2<span class=\"nb\">}{</span>|c|<span class=\"nb\">}{</span>multi2<span class=\"nb\">}</span> <span class=\"k\">\\\\</span>
<span class=\"nb\">&amp;</span>  1-1  <span class=\"nb\">&amp;</span>  1-2  <span class=\"nb\">&amp;</span>  2-1  <span class=\"nb\">&amp;</span>  2-2  <span class=\"k\">\\\\</span>
<span class=\"k\">\\hline</span>
a  <span class=\"nb\">&amp;</span>     1  <span class=\"nb\">&amp;</span>      2  <span class=\"nb\">&amp;</span>    3  <span class=\"nb\">&amp;</span>      4  <span class=\"k\">\\\\</span>
b  <span class=\"nb\">&amp;</span>     5  <span class=\"nb\">&amp;</span>      6  <span class=\"nb\">&amp;</span>    7  <span class=\"nb\">&amp;</span>      8  <span class=\"k\">\\\\</span>
<span class=\"k\">\\hline</span>
<span class=\"k\">\\end</span><span class=\"nb\">{</span>tabular<span class=\"nb\">}</span>
<span class=\"k\">\\end</span><span class=\"nb\">{</span>center<span class=\"nb\">}</span>
<span class=\"k\">\\end</span><span class=\"nb\">{</span>table<span class=\"nb\">}</span>
#+end<span class=\"nb\">_</span>latex
</pre>
</div>
</div>
<p>このように、#+begin_latex と #+end_latex で挟むことで LaTeX 記述を埋め込める。後はその間にカーソルを合わせて C-c ' を入力して、latex-mode で内容を編集しよう。</p>" "http://qiita.com/items/0d04acdc627f0817fc15" (20371 46037) old 162 nil nil ((id nil "tag:qiita.com,2005:Item/4568") (published nil "2012-04-22T16:31:33+09:00") (updated nil "2012-04-22T16:31:33+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/0d04acdc627f0817fc15"))) (url nil "http://qiita.com/items/0d04acdc627f0817fc15") (title nil "org-modeでmulticolumnな表を扱う") (content ((type . "html")) "<p>org-modeでLaTeX出力するための文書を書くとき、\\multicolumnを使用する表が必要な時がある。org-modeには一部のセルをつなげた表を書くことが(おそらく)できないので、そういう時は諦めが肝心。org文書にLaTeXを埋め込んでしまうのが手っ取り早い。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre>#+begin<span class=\"nb\">_</span>latex
  <span class=\"k\">\\begin</span><span class=\"nb\">{</span>table<span class=\"nb\">}</span>[b]
    <span class=\"k\">\\caption</span><span class=\"nb\">{</span>caption<span class=\"nb\">}</span> <span class=\"k\">\\label</span><span class=\"nb\">{</span>label<span class=\"nb\">}</span>
    <span class=\"k\">\\begin</span><span class=\"nb\">{</span>center<span class=\"nb\">}</span>
      <span class=\"k\">\\begin</span><span class=\"nb\">{</span>tabular<span class=\"nb\">}{</span>|l|cc|cc|<span class=\"nb\">}</span>
        <span class=\"k\">\\hline</span>
        <span class=\"nb\">&amp;</span> <span class=\"k\">\\multicolumn</span><span class=\"nb\">{</span>2<span class=\"nb\">}{</span>|c|<span class=\"nb\">}{</span>multi1<span class=\"nb\">}</span> <span class=\"nb\">&amp;</span> <span class=\"k\">\\multicolumn</span><span class=\"nb\">{</span>2<span class=\"nb\">}{</span>|c|<span class=\"nb\">}{</span>multi2<span class=\"nb\">}</span> <span class=\"k\">\\\\</span>
        <span class=\"nb\">&amp;</span>  1-1  <span class=\"nb\">&amp;</span>  1-2  <span class=\"nb\">&amp;</span>  2-1  <span class=\"nb\">&amp;</span>  2-2  <span class=\"k\">\\\\</span>
        <span class=\"k\">\\hline</span>
        a  <span class=\"nb\">&amp;</span>     1  <span class=\"nb\">&amp;</span>      2  <span class=\"nb\">&amp;</span>    3  <span class=\"nb\">&amp;</span>      4  <span class=\"k\">\\\\</span>
        b  <span class=\"nb\">&amp;</span>     5  <span class=\"nb\">&amp;</span>      6  <span class=\"nb\">&amp;</span>    7  <span class=\"nb\">&amp;</span>      8  <span class=\"k\">\\\\</span>
        <span class=\"k\">\\hline</span>
      <span class=\"k\">\\end</span><span class=\"nb\">{</span>tabular<span class=\"nb\">}</span>
    <span class=\"k\">\\end</span><span class=\"nb\">{</span>center<span class=\"nb\">}</span>
  <span class=\"k\">\\end</span><span class=\"nb\">{</span>table<span class=\"nb\">}</span>
#+end<span class=\"nb\">_</span>latex    
</pre>
</div>
</div>
<p>このように、#+begin_latex と #+end_latex で挟むことで LaTeX 記述を埋め込める。後はその間にカーソルを合わせて C-c &#39; を入力して、latex-mode で内容を編集しよう。</p>
") (published nil "2012-04-22T16:31:33Z") (updated nil "2012-04-22T16:31:33Z") (author nil (name nil "akisute3@github")))) ("iTerm2 で emacs で C-tab で other-window" "<p>C-x o で other-window するのは2ストロークでつらいので Chrome みたいに C-tab とか1ストロークにしたい。</p>
<p>ただ、iTerm2 でターミナル内の emacs で C-tab は、tab が C-i 扱いなのでとれない。そこで</p>
<ul>
<li>iTerm2 の preference の keys で C-tab に別のキーを送るようにカスタマイズ
** 自分は M-p にした</li>
<li>そのキーに、other-window を割り当て</li>
</ul>
<p>で ok</p>
<p>ついでなので <a href=\"http://d.hatena.ne.jp/rubikitch/20100210/emacs\">http://d.hatena.ne.jp/rubikitch/20100210/emacs</a> から other-window-or-split も拝借。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">split</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">one</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">split</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">horizontally</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">window</span> 1<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">p</span>&quot;<span class=\"p\">)</span> <span class=\"s\">'</span><span class=\"err\">other-window-or-split)</span>
</pre>
</div>
</div>
<p>tab が C-i なのに気づかなくて3時間くらいはまりました...。</p>" "http://qiita.com/items/bfb250aa76107a036127" (20370 31861) old 163 nil nil ((id nil "tag:qiita.com,2005:Item/4548") (published nil "2012-04-21T18:19:26+09:00") (updated nil "2012-04-21T18:23:01+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/bfb250aa76107a036127"))) (url nil "http://qiita.com/items/bfb250aa76107a036127") (title nil "iTerm2 で emacs で C-tab で other-window") (content ((type . "html")) "<p>C-x o で other-window するのは2ストロークでつらいので Chrome みたいに C-tab とか1ストロークにしたい。</p>

<p>ただ、iTerm2 でターミナル内の emacs で C-tab は、tab が C-i 扱いなのでとれない。そこで</p>

<ul>
<li>iTerm2 の preference の keys で C-tab に別のキーを送るようにカスタマイズ
** 自分は M-p にした</li>
<li>そのキーに、other-window を割り当て</li>
</ul>

<p>で ok</p>

<p>ついでなので <a href=\"http://d.hatena.ne.jp/rubikitch/20100210/emacs\">http:&#47;&#47;d.hatena.ne.jp&#47;rubikitch&#47;20100210&#47;emacs</a> から other-window-or-split も拝借。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">split</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">one</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"n\">split</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">horizontally</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">window</span> 1<span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">p</span>&quot;<span class=\"p\">)</span> <span class=\"s\">&#39;</span><span class=\"err\">other-window-or-split)</span>
</pre>
</div>
</div>
<p>tab が C-i なのに気づかなくて3時間くらいはまりました...。</p>
") (published nil "2012-04-21T18:19:26Z") (updated nil "2012-04-21T18:23:01Z") (author nil (name nil "naoya@github")))) ("MacのターミナルでEmacsを使う場合 C-@ と C-space は同じコマンドとして認識されるらしい" "<p>表題の通り。<br>
MacのターミナルだけなのかEmacsだけなのかなど詳しいことは分からない。</p>
<p>普段Emacsのキーバインドにanything起動を C-@ に設定していて、ターミナル上ではなくEmacs.appを使っていたが、この設定のままターミナル上でEmacsを使ったらC-spaceでMarksetされなくて大分長い時間四苦八苦しちゃったんでメモとして残しておく。<br>
anythingを別のキーにバインドしたら直った。</p>" "http://qiita.com/items/b4959e4ce9f4317c4d07" (20369 29180) old 164 nil nil ((id nil "tag:qiita.com,2005:Item/4520") (published nil "2012-04-20T23:26:04+09:00") (updated nil "2012-04-20T23:26:04+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b4959e4ce9f4317c4d07"))) (url nil "http://qiita.com/items/b4959e4ce9f4317c4d07") (title nil "MacのターミナルでEmacsを使う場合 C-@ と C-space は同じコマンドとして認識されるらしい") (content ((type . "html")) "<p>表題の通り。<br>
MacのターミナルだけなのかEmacsだけなのかなど詳しいことは分からない。</p>

<p>普段Emacsのキーバインドにanything起動を C-@ に設定していて、ターミナル上ではなくEmacs.appを使っていたが、この設定のままターミナル上でEmacsを使ったらC-spaceでMarksetされなくて大分長い時間四苦八苦しちゃったんでメモとして残しておく。<br>
anythingを別のキーにバインドしたら直った。</p>
") (published nil "2012-04-20T23:26:04Z") (updated nil "2012-04-20T23:26:04Z") (author nil (name nil "takc923")))) ("デフォルトのカレントディレクトリ変更" "<p>M-x cd　ぱす　</p>" "http://qiita.com/items/b953621e255cc471024f" (20368 2547) old 165 nil nil ((id nil "tag:qiita.com,2005:Item/4476") (published nil "2012-04-19T21:49:55+09:00") (updated nil "2012-04-19T21:49:55+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b953621e255cc471024f"))) (url nil "http://qiita.com/items/b953621e255cc471024f") (title nil "デフォルトのカレントディレクトリ変更") (content ((type . "html")) "<p>M-x cd　ぱす　</p>
") (published nil "2012-04-19T21:49:55Z") (updated nil "2012-04-19T21:49:55Z") (author nil (name nil "flada_auxv")))) ("ハッシュのキーをシンボルに統一するメソッド" "<p>Railsに用意されているメソッドに再帰を加えたもの。YAMLをパースした後などに便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">hash.rb</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Hash</span>
<span class=\"k\">def</span> <span class=\"nf\">symbolize_keys</span>
<span class=\"n\">inject</span><span class=\"p\">({})</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">|</span>
<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span> <span class=\"k\">if</span> <span class=\"n\">defined?</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span><span class=\"p\">)</span>
<span class=\"n\">options</span><span class=\"o\">[</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">to_sym</span> <span class=\"k\">rescue</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">key</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>
<span class=\"n\">options</span>
<span class=\"k\">end</span>
<span class=\"k\">end</span>
<span class=\"k\">end</span>
</pre>
</div>
</div>
<p>例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">example.rb</span></div><div class=\"highlight\"><pre><span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;a&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&quot;aaa&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ccc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;d&quot;</span><span class=\"o\">=&gt;</span><span class=\"s2\">&quot;ddd&quot;</span><span class=\"p\">},</span> <span class=\"s2\">&quot;e&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&quot;eee&quot;</span><span class=\"p\">}</span>
<span class=\"c1\"># =&gt; {&quot;a&quot;=&gt;&quot;aaa&quot;, &quot;b&quot;=&gt;{:c=&gt;&quot;ccc&quot;, &quot;d&quot;=&gt;&quot;ddd&quot;}, &quot;e&quot;=&gt;&quot;eee&quot;}</span>
<span class=\"nb\">hash</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span>
<span class=\"c1\"># =&gt; {:a=&gt;&quot;aaa&quot;, :b=&gt;{:c=&gt;&quot;ccc&quot;, :d=&gt;&quot;ddd&quot;}, :e=&gt;&quot;eee&quot;}</span>
</pre>
</div>
</div>" "http://qiita.com/items/874d2542facaa5993032" (20367 62587) old 166 nil nil ((id nil "tag:qiita.com,2005:Item/4471") (published nil "2012-04-19T20:18:19+09:00") (updated nil "2012-04-19T20:18:19+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/874d2542facaa5993032"))) (url nil "http://qiita.com/items/874d2542facaa5993032") (title nil "ハッシュのキーをシンボルに統一するメソッド") (content ((type . "html")) "<p>Railsに用意されているメソッドに再帰を加えたもの。YAMLをパースした後などに便利。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">hash.rb</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Hash</span>
  <span class=\"k\">def</span> <span class=\"nf\">symbolize_keys</span>
    <span class=\"n\">inject</span><span class=\"p\">({})</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">|</span>
      <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span> <span class=\"k\">if</span> <span class=\"n\">defined?</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span><span class=\"p\">)</span>
      <span class=\"n\">options</span><span class=\"o\">[</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">to_sym</span> <span class=\"k\">rescue</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">key</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>
      <span class=\"n\">options</span>
    <span class=\"k\">end</span>
  <span class=\"k\">end</span>
<span class=\"k\">end</span>
</pre>
</div>
</div>
<p>例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">example.rb</span></div><div class=\"highlight\"><pre><span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;a&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&quot;aaa&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ccc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;d&quot;</span><span class=\"o\">=&gt;</span><span class=\"s2\">&quot;ddd&quot;</span><span class=\"p\">},</span> <span class=\"s2\">&quot;e&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&quot;eee&quot;</span><span class=\"p\">}</span>
<span class=\"c1\"># =&gt; {&quot;a&quot;=&gt;&quot;aaa&quot;, &quot;b&quot;=&gt;{:c=&gt;&quot;ccc&quot;, &quot;d&quot;=&gt;&quot;ddd&quot;}, &quot;e&quot;=&gt;&quot;eee&quot;}</span>
<span class=\"nb\">hash</span><span class=\"o\">.</span><span class=\"n\">symbolize_keys</span>
<span class=\"c1\"># =&gt; {:a=&gt;&quot;aaa&quot;, :b=&gt;{:c=&gt;&quot;ccc&quot;, :d=&gt;&quot;ddd&quot;}, :e=&gt;&quot;eee&quot;}</span>
</pre>
</div>
</div>") (published nil "2012-04-19T20:18:19Z") (updated nil "2012-04-19T20:18:19Z") (author nil (name nil "akisute3@github")))) ("C-w を少し賢くする" "<p>C-w に少し空気を読んでもらうようにする。（transient-mark-mode 使ってるの前提）</p>
<ul>
<li><strong>region がアクティブじゃない時</strong> は、CLI の C-w と同じく、カーソル左の一単語を削除</li>
<li>region がアクティブの時は、通常の C-w</li>
<li>transient-mark-mode が無効の時も、通常の C-w</li>
</ul>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">backward-kill-word-or-kill-region</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">or </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">transient-mark-mode</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">region-active-p</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">kill-region</span> <span class=\"p\">(</span><span class=\"nf\">region-beginning</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">region-end</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">backward-kill-word</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"s\">&quot;\\C-w&quot;</span> <span class=\"ss\">'backward-kill-word-or-kill-region</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>こうでもしないと、region がアクティブじゃない時に Emacs 標準のマークセットで kill-region 発動して「うわあああああ」ってなる。</p>" "http://qiita.com/items/e6978008253ba70c037c" (20367 57213) old 167 nil nil ((id nil "tag:qiita.com,2005:Item/4436") (published nil "2012-04-19T11:07:30+09:00") (updated nil "2012-04-19T18:48:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/e6978008253ba70c037c"))) (url nil "http://qiita.com/items/e6978008253ba70c037c") (title nil "C-w を少し賢くする") (content ((type . "html")) "<p>C-w に少し空気を読んでもらうようにする。（transient-mark-mode 使ってるの前提）</p>

<ul>
<li><strong>region がアクティブじゃない時</strong> は、CLI の C-w と同じく、カーソル左の一単語を削除</li>
<li>region がアクティブの時は、通常の C-w</li>
<li>transient-mark-mode が無効の時も、通常の C-w</li>
</ul>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">backward-kill-word-or-kill-region</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">or </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">transient-mark-mode</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">region-active-p</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nf\">kill-region</span> <span class=\"p\">(</span><span class=\"nf\">region-beginning</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">region-end</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">backward-kill-word</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"s\">&quot;\\C-w&quot;</span> <span class=\"ss\">&#39;backward-kill-word-or-kill-region</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>こうでもしないと、region がアクティブじゃない時に Emacs 標準のマークセットで kill-region 発動して「うわあああああ」ってなる。</p>
") (published nil "2012-04-19T11:07:30Z") (updated nil "2012-04-19T18:48:45Z") (author nil (name nil "k_ui")))) ("load-pathの追加を便利にするマクロ" "<p>add-to-listは1つのパスしかload-pathに追加できない。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'load-path</span> <span class=\"s\">&quot;~/.emacs.d&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'load-path</span> <span class=\"s\">&quot;~/.emacs.d/elisp&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>そこで、以下のマクロを定義しておくと、複数のパスをまとめて追加できて便利(もちろん、load-path以外のリストにも使用可能)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defmacro</span> <span class=\"nv\">append-to-list</span> <span class=\"p\">(</span><span class=\"nv\">to</span> <span class=\"nv\">lst</span><span class=\"p\">)</span>
<span class=\"o\">`</span><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"o\">,</span><span class=\"nv\">to</span> <span class=\"p\">(</span><span class=\"nb\">append</span> <span class=\"o\">,</span><span class=\"nv\">lst</span> <span class=\"o\">,</span><span class=\"nv\">to</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以下のように使用する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">append-to-list</span> <span class=\"nv\">load-path</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;~/.emacs.d&quot;</span>
<span class=\"s\">&quot;~/.emacs.d/elisp&quot;</span>
<span class=\"s\">&quot;~/.emacs.d/elisp/my&quot;</span>
<span class=\"s\">&quot;~/.emacs.d/inits&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>" "http://qiita.com/items/647abd9f481e6010c4fc" (20366 49646) old 168 nil nil ((id nil "tag:qiita.com,2005:Item/4409") (published nil "2012-04-18T22:30:22+09:00") (updated nil "2012-04-18T22:30:22+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/647abd9f481e6010c4fc"))) (url nil "http://qiita.com/items/647abd9f481e6010c4fc") (title nil "load-pathの追加を便利にするマクロ") (content ((type . "html")) "<p>add-to-listは1つのパスしかload-pathに追加できない。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/.emacs.d&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/.emacs.d/elisp&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>そこで、以下のマクロを定義しておくと、複数のパスをまとめて追加できて便利(もちろん、load-path以外のリストにも使用可能)。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defmacro</span> <span class=\"nv\">append-to-list</span> <span class=\"p\">(</span><span class=\"nv\">to</span> <span class=\"nv\">lst</span><span class=\"p\">)</span>
  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"o\">,</span><span class=\"nv\">to</span> <span class=\"p\">(</span><span class=\"nb\">append</span> <span class=\"o\">,</span><span class=\"nv\">lst</span> <span class=\"o\">,</span><span class=\"nv\">to</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以下のように使用する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">append-to-list</span> <span class=\"nv\">load-path</span>
                <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;~/.emacs.d&quot;</span>
                  <span class=\"s\">&quot;~/.emacs.d/elisp&quot;</span>
                  <span class=\"s\">&quot;~/.emacs.d/elisp/my&quot;</span>
                  <span class=\"s\">&quot;~/.emacs.d/inits&quot;</span><span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2012-04-18T22:30:22Z") (updated nil "2012-04-18T22:30:22Z") (author nil (name nil "akisute3@github")))) (".emacsでダウンロードが必要なコードの管理" "<p>auto-install(install-elisp)をEmacsにインストールしているなら、.emacsで使用しているダウンロードが必要なrequireに対しては、インストールするためのS式をコメントとして記述しておくのがオススメ。</p>
<p>S式のあるコメント行で C-e C-x C-e (すなわち、S式の閉括弧の後ろで C-x C-e) を入力するだけで、新しい環境に移行した時に足りなかったelispファイルをインストールしたり、古くなったelispファイルを更新したりできる。</p>
<p>例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; (install-elisp &quot;https://raw.github.com/hoge/hoge.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'hoge</span><span class=\"p\">)</span>
<span class=\"c1\">;; (install-elisp-from-emacswiki &quot;huga.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'huga</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/a9f84d1b652c5a72123b" (20365 34773) old 169 nil nil ((id nil "tag:qiita.com,2005:Item/4368") (published nil "2012-04-18T00:10:13+09:00") (updated nil "2012-04-18T00:10:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/a9f84d1b652c5a72123b"))) (url nil "http://qiita.com/items/a9f84d1b652c5a72123b") (title nil ".emacsでダウンロードが必要なコードの管理") (content ((type . "html")) "<p>auto-install(install-elisp)をEmacsにインストールしているなら、.emacsで使用しているダウンロードが必要なrequireに対しては、インストールするためのS式をコメントとして記述しておくのがオススメ。</p>

<p>S式のあるコメント行で C-e C-x C-e (すなわち、S式の閉括弧の後ろで C-x C-e) を入力するだけで、新しい環境に移行した時に足りなかったelispファイルをインストールしたり、古くなったelispファイルを更新したりできる。</p>

<p>例</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; (install-elisp &quot;https://raw.github.com/hoge/hoge.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;hoge</span><span class=\"p\">)</span>

<span class=\"c1\">;; (install-elisp-from-emacswiki &quot;huga.el&quot;)</span>
<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">&#39;huga</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2012-04-18T00:10:13Z") (updated nil "2012-04-18T00:10:13Z") (author nil (name nil "akisute3@github")))) ("CarbonEmacs / CocoaEmacs で emacsclient" "<p>いろいろ試みたけれど，シェルの alias を使うのが一番素直な気がする．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"nb\">alias </span><span class=\"nv\">emacsclient</span><span class=\"o\">=</span>/Applications/Emacs.app/Contents/MacOS/bin/emacsclient
</pre>
</div>
</div>" "http://qiita.com/items/b7d20bc95c27cd645bcd" (20359 52766) old 170 nil nil ((id nil "tag:qiita.com,2005:Item/4148") (published nil "2012-04-13T15:56:30+09:00") (updated nil "2012-04-13T15:56:30+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b7d20bc95c27cd645bcd"))) (url nil "http://qiita.com/items/b7d20bc95c27cd645bcd") (title nil "CarbonEmacs / CocoaEmacs で emacsclient") (content ((type . "html")) "<p>いろいろ試みたけれど，シェルの alias を使うのが一番素直な気がする．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"nb\">alias </span><span class=\"nv\">emacsclient</span><span class=\"o\">=</span>/Applications/Emacs.app/Contents/MacOS/bin/emacsclient
</pre>
</div>
</div>") (published nil "2012-04-13T15:56:30Z") (updated nil "2012-04-13T15:56:30Z") (author nil (name nil "monamour555")))) ("TRAMPを使ってリモートのファイルを弄る" "<p>TRAMPなるリモートのものも透過的に扱えるようにしてくれるすばらしいソフトがあるらしい。<a href=\"\" title=\"http://tramp.sourceforge.net/tramp_ja.html\">TRAMPの日本語マニュアル</a><br>
で、これをemacsから使えるelispがあるらしいと本で見つけ、早速つかってみた。<br>
最近のemacs23.4.1では標準でそのelispが入ってる模様で私の環境ではそのままうごいた。<a href=\"\" title=\"http://www.bookshelf.jp/texi/tramp/tramp_ja_5.html\">日本語解説ページ</a></p>
<h2>使い方</h2>
<h3>基本的な使い方</h3>
<p>C-x C-fでファイルを開くときに<br>
/ssh:username@hostname:path/to/file<br>
こうしてやればリモートのファイルを開くことができる。<br>
また、リモートファイルのパスを指定せずにhostname後の:でRETをおしてDiredを表示することもできる。<br>
また、.ssh/configの設定がそのまま反映さえるのでaliasを設定してあったりするとかなり楽めに開ける。</p>
<p>基本的な使い方は以上。</p>
<h3>一般ユーザでしかログインできないサーバーでroot権限でファイルを編集する方法。</h3>
<p>リモートのサーバーがrootでのログインを許可してない場合、このままでは利用することができない。どうしたら、sshでログイン後root権限でファイルを編集できるようになるだろうか？<br>
いくつかの前のバージョンまで多段階にプロトコルをチェーンできるmultiプロトコルが使えたらしいが、使おうとするとdepricatedになったよとメッセージがでて使えない。</p>
<p>tramp-default-proxies-alist に (HOST USER PROXY) というエントリを追加する．こいつは，USER@HOST にあるファイルにアクセスするには PROXY を経由しろということを意味する．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">'tramp-default-proxies-alist</span>
<span class=\"s\">             '</span><span class=\"p\">(</span>&quot;<span class=\"n\">host1</span>&quot; &quot;<span class=\"n\">user2</span>&quot; &quot;<span class=\"o\">/</span><span class=\"n\">ssh</span><span class=\"p\">:</span><span class=\"n\">user1</span><span class=\"p\">@</span><span class=\"n\">host1</span><span class=\"p\">:</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>しかし、この方法だと複数のサーバーを扱っているとすべてのものに対してエントリを書かなければならなくなりかなり面倒になってしまう。</p>
<p>そこで以下の様にしてやると汎用的に使えるようにできる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">'tramp-default-proxies-alist</span>
<span class=\"s\">             '</span><span class=\"p\">(</span><span class=\"n\">nil</span> &quot;<span class=\"o\">\\\\</span>`<span class=\"n\">root</span><span class=\"o\">\\\\</span><span class=\"s\">'&quot; &quot;/ssh:%h:&quot;))</span>
<span class=\"s\">(add-to-list '</span><span class=\"n\">tramp</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">proxies</span><span class=\"o\">-</span><span class=\"n\">alist</span>
<span class=\"s\">'(&quot;localhost&quot; nil nil))</span>
<span class=\"s\">(add-to-list '</span><span class=\"n\">tramp</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">proxies</span><span class=\"o\">-</span><span class=\"n\">alist</span>
<span class=\"s\">'</span><span class=\"err\">((regexp-quote (system-name)) nil nil))</span>
</pre>
</div>
</div>
<p>これで<br>
/sudo:hostnameとすることでリモートでログインできるようになる。</p>
<p><a href=\"\" title=\"http://dukeiizu.blogspot.jp/2011/05/emacs-tramp-sudo.html\">参考にしたページ</a></p>" "http://qiita.com/items/d05e1ce07ad632c94720" (20357 18254) old 171 nil nil ((id nil "tag:qiita.com,2005:Item/4044") (published nil "2012-04-11T17:56:46+09:00") (updated nil "2012-04-11T17:56:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d05e1ce07ad632c94720"))) (url nil "http://qiita.com/items/d05e1ce07ad632c94720") (title nil "TRAMPを使ってリモートのファイルを弄る") (content ((type . "html")) "<p>TRAMPなるリモートのものも透過的に扱えるようにしてくれるすばらしいソフトがあるらしい。<a href=\"\" title=\"http:&#47;&#47;tramp.sourceforge.net&#47;tramp_ja.html\">TRAMPの日本語マニュアル</a><br>
で、これをemacsから使えるelispがあるらしいと本で見つけ、早速つかってみた。<br>
最近のemacs23.4.1では標準でそのelispが入ってる模様で私の環境ではそのままうごいた。<a href=\"\" title=\"http:&#47;&#47;www.bookshelf.jp&#47;texi&#47;tramp&#47;tramp_ja_5.html\">日本語解説ページ</a></p>

<h2>使い方</h2>

<h3>基本的な使い方</h3>

<p>C-x C-fでファイルを開くときに<br>
&#47;ssh:username@hostname:path&#47;to&#47;file<br>
こうしてやればリモートのファイルを開くことができる。<br>
また、リモートファイルのパスを指定せずにhostname後の:でRETをおしてDiredを表示することもできる。<br>
また、.ssh&#47;configの設定がそのまま反映さえるのでaliasを設定してあったりするとかなり楽めに開ける。</p>

<p>基本的な使い方は以上。</p>

<h3>一般ユーザでしかログインできないサーバーでroot権限でファイルを編集する方法。</h3>

<p>リモートのサーバーがrootでのログインを許可してない場合、このままでは利用することができない。どうしたら、sshでログイン後root権限でファイルを編集できるようになるだろうか？<br>
いくつかの前のバージョンまで多段階にプロトコルをチェーンできるmultiプロトコルが使えたらしいが、使おうとするとdepricatedになったよとメッセージがでて使えない。</p>

<p>tramp-default-proxies-alist に (HOST USER PROXY) というエントリを追加する．こいつは，USER@HOST にあるファイルにアクセスするには PROXY を経由しろということを意味する．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;tramp-default-proxies-alist</span>
<span class=\"s\">             &#39;</span><span class=\"p\">(</span>&quot;<span class=\"n\">host1</span>&quot; &quot;<span class=\"n\">user2</span>&quot; &quot;<span class=\"o\">/</span><span class=\"n\">ssh</span><span class=\"p\">:</span><span class=\"n\">user1</span><span class=\"p\">@</span><span class=\"n\">host1</span><span class=\"p\">:</span>&quot;<span class=\"p\">))</span>
</pre>
</div>
</div>
<p>しかし、この方法だと複数のサーバーを扱っているとすべてのものに対してエントリを書かなければならなくなりかなり面倒になってしまう。</p>

<p>そこで以下の様にしてやると汎用的に使えるようにできる。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">~/.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;tramp-default-proxies-alist</span>
<span class=\"s\">             &#39;</span><span class=\"p\">(</span><span class=\"n\">nil</span> &quot;<span class=\"o\">\\\\</span>`<span class=\"n\">root</span><span class=\"o\">\\\\</span><span class=\"s\">&#39;&quot; &quot;/ssh:%h:&quot;))</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">tramp</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">proxies</span><span class=\"o\">-</span><span class=\"n\">alist</span>
             <span class=\"s\">&#39;(&quot;localhost&quot; nil nil))</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">tramp</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">proxies</span><span class=\"o\">-</span><span class=\"n\">alist</span>
             <span class=\"s\">&#39;</span><span class=\"err\">((regexp-quote (system-name)) nil nil))</span>
</pre>
</div>
</div>
<p>これで<br>
&#47;sudo:hostnameとすることでリモートでログインできるようになる。</p>

<p><a href=\"\" title=\"http:&#47;&#47;dukeiizu.blogspot.jp&#47;2011&#47;05&#47;emacs-tramp-sudo.html\">参考にしたページ</a></p>
") (published nil "2012-04-11T17:56:46Z") (updated nil "2012-04-11T17:56:46Z") (author nil (name nil "miyakou1982")))) ("Emacs memo" "<h3>Grep setting</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">grep</span>結果バッファでのカーソル移動でダイナミックにファイルを開いてくれる
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'</span><span class=\"err\">color-grep)</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"o\">-</span><span class=\"n\">kill</span><span class=\"o\">-</span><span class=\"n\">buffer</span> <span class=\"n\">t</span><span class=\"p\">)</span>
<span class=\"p\">;;</span> <span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"nb\">find</span>で<span class=\"n\">Perl</span>の<span class=\"n\">ack</span>コマンドを使うよう変更
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"nb\">find</span><span class=\"o\">-</span><span class=\"n\">command</span> &quot;<span class=\"n\">ack</span> <span class=\"o\">--</span><span class=\"n\">nocolor</span> <span class=\"o\">--</span><span class=\"n\">nogroup</span> &quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h3>Reference page</h3>
<p><a href=\"http://www23.atwiki.jp/selflearn/pages/41.html#id_15e2b62b\">http://www23.atwiki.jp/selflearn/pages/41.html#id_15e2b62b</a></p>" "http://qiita.com/items/192ff9df05681563c2f5" (20354 45555) old 172 nil nil ((id nil "tag:qiita.com,2005:Item/3919") (published nil "2012-04-09T18:54:59+09:00") (updated nil "2012-04-09T18:54:59+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/192ff9df05681563c2f5"))) (url nil "http://qiita.com/items/192ff9df05681563c2f5") (title nil "Emacs memo") (content ((type . "html")) "<h3>Grep setting</h3>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">grep</span>結果バッファでのカーソル移動でダイナミックにファイルを開いてくれる
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;</span><span class=\"err\">color-grep)</span>
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">color</span><span class=\"o\">-</span><span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"o\">-</span><span class=\"n\">kill</span><span class=\"o\">-</span><span class=\"n\">buffer</span> <span class=\"n\">t</span><span class=\"p\">)</span>
<span class=\"p\">;;</span> <span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"nb\">find</span>で<span class=\"n\">Perl</span>の<span class=\"n\">ack</span>コマンドを使うよう変更
<span class=\"p\">(</span><span class=\"n\">setq</span> <span class=\"n\">grep</span><span class=\"o\">-</span><span class=\"nb\">find</span><span class=\"o\">-</span><span class=\"n\">command</span> &quot;<span class=\"n\">ack</span> <span class=\"o\">--</span><span class=\"n\">nocolor</span> <span class=\"o\">--</span><span class=\"n\">nogroup</span> &quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h3>Reference page</h3>

<p><a href=\"http://www23.atwiki.jp/selflearn/pages/41.html#id_15e2b62b\">http:&#47;&#47;www23.atwiki.jp&#47;selflearn&#47;pages&#47;41.html#id_15e2b62b</a></p>
") (published nil "2012-04-09T18:54:59Z") (updated nil "2012-04-09T18:54:59Z") (author nil (name nil "chabashilah")))) ("Emacs tips" "<h1>Emacs関係のメモ</h1>
<h2>文字コード変更</h2>
<p>C-x [RET] fで文字コード入力<br>
その後C-x C-s</p>
<h2>正規表現で置換</h2>
<p>M-x replace-regexp</p>
<p>()を使う場合は¥(¥)にする</p>
<h3>置換文字列</h3>
<p>マッチ全体は¥&amp; (Ruby,Perlの$&amp;)</p>
<p>()参照は¥1,¥2,¥3... (Ruby,Perlの$1,$2,$3...)</p>" "http://qiita.com/items/63d7379664fae0d54bfd" (20348 326) old 173 nil nil ((id nil "tag:qiita.com,2005:Item/3540") (published nil "2012-04-03T14:02:10+09:00") (updated nil "2012-04-04T17:07:34+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/63d7379664fae0d54bfd"))) (url nil "http://qiita.com/items/63d7379664fae0d54bfd") (title nil "Emacs tips") (content ((type . "html")) "<h1>Emacs関係のメモ</h1>

<h2>文字コード変更</h2>

<p>C-x [RET] fで文字コード入力<br>
その後C-x C-s</p>

<h2>正規表現で置換</h2>

<p>M-x replace-regexp</p>

<p>()を使う場合は¥(¥)にする</p>

<h3>置換文字列</h3>

<p>マッチ全体は¥&amp; (Ruby,Perlの$&amp;)</p>

<p>()参照は¥1,¥2,¥3... (Ruby,Perlの$1,$2,$3...)</p>
") (published nil "2012-04-03T14:02:10Z") (updated nil "2012-04-04T17:07:34Z") (author nil (name nil "nysalor")))) ("quickrunの言語ごとのコマンドの設定には関数も使える" "<p>例えば以下の設定を</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span>&quot;<span class=\"n\">python</span>&quot; <span class=\"p\">.</span> <span class=\"p\">((:</span><span class=\"n\">command</span> <span class=\"p\">.</span> &quot;<span class=\"n\">python</span>&quot;<span class=\"p\">)</span> <span class=\"p\">(:</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">only</span> <span class=\"p\">.</span> &quot;<span class=\"n\">pyflakes</span> <span class=\"c\">%s&quot;)</span>
<span class=\"p\">(:</span><span class=\"n\">description</span> <span class=\"p\">.</span> &quot;<span class=\"n\">Run</span> <span class=\"n\">Python</span> <span class=\"n\">script</span>&quot;<span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以下のような感じに変えても動く</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span>&quot;<span class=\"n\">python</span>&quot; <span class=\"p\">.</span> <span class=\"p\">((:</span><span class=\"n\">command</span> <span class=\"p\">.</span> <span class=\"p\">(</span><span class=\"n\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"n\">print</span> &quot;<span class=\"n\">hey</span>&quot;<span class=\"p\">)</span> &quot;<span class=\"n\">python</span>&quot;<span class=\"p\">))</span> <span class=\"p\">(:</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">only</span> <span class=\"p\">.</span> &quot;<span class=\"n\">pyflakes</span> <span class=\"c\">%s&quot;)</span>
<span class=\"p\">(:</span><span class=\"n\">description</span> <span class=\"p\">.</span> &quot;<span class=\"n\">Run</span> <span class=\"n\">Python</span> <span class=\"n\">script</span>&quot;<span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>現在のファイルパスや状況に合わせてコマンドのパスなどを変えることができる。</p>" "http://qiita.com/items/1f315165bd93b231bc6b" (20334 2713) old 174 nil nil ((id nil "tag:qiita.com,2005:Item/3365") (published nil "2012-03-25T02:55:37+09:00") (updated nil "2012-03-25T02:55:37+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1f315165bd93b231bc6b"))) (url nil "http://qiita.com/items/1f315165bd93b231bc6b") (title nil "quickrunの言語ごとのコマンドの設定には関数も使える") (content ((type . "html")) "<p>例えば以下の設定を</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span>&quot;<span class=\"n\">python</span>&quot; <span class=\"p\">.</span> <span class=\"p\">((:</span><span class=\"n\">command</span> <span class=\"p\">.</span> &quot;<span class=\"n\">python</span>&quot;<span class=\"p\">)</span> <span class=\"p\">(:</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">only</span> <span class=\"p\">.</span> &quot;<span class=\"n\">pyflakes</span> <span class=\"c\">%s&quot;)</span>
             <span class=\"p\">(:</span><span class=\"n\">description</span> <span class=\"p\">.</span> &quot;<span class=\"n\">Run</span> <span class=\"n\">Python</span> <span class=\"n\">script</span>&quot;<span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>以下のような感じに変えても動く</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span>&quot;<span class=\"n\">python</span>&quot; <span class=\"p\">.</span> <span class=\"p\">((:</span><span class=\"n\">command</span> <span class=\"p\">.</span> <span class=\"p\">(</span><span class=\"n\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"n\">print</span> &quot;<span class=\"n\">hey</span>&quot;<span class=\"p\">)</span> &quot;<span class=\"n\">python</span>&quot;<span class=\"p\">))</span> <span class=\"p\">(:</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">only</span> <span class=\"p\">.</span> &quot;<span class=\"n\">pyflakes</span> <span class=\"c\">%s&quot;)</span>
             <span class=\"p\">(:</span><span class=\"n\">description</span> <span class=\"p\">.</span> &quot;<span class=\"n\">Run</span> <span class=\"n\">Python</span> <span class=\"n\">script</span>&quot;<span class=\"p\">)))</span>
</pre>
</div>
</div>
<p>現在のファイルパスや状況に合わせてコマンドのパスなどを変えることができる。</p>
") (published nil "2012-03-25T02:55:37Z") (updated nil "2012-03-25T02:55:37Z") (author nil (name nil "podhmo")))) ("Emacsで現在行や選択範囲を簡単に複製するためのduplicate-thing.el" "<p>行や範囲のコピー＆ペーストを一手で出来るようにしました。<br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120321/20120321001639.png\" alt=\"コピー前\"> <br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120321/20120321001641.png\" alt=\"コピー後\"> </p>
<h2>インストール</h2>
<p>下記のS式を評価(C-xC-e)して下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">install.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ongaeshi</span><span class=\"o\">/</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>.emacs.d/init.el</h2>
<p>好きなキーを割り当てて下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'duplicate-thing)</span>
<span class=\"s\">(global-set-key (kbd &quot;M-c&quot;) '</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>詳しい使い方は<a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">コチラをどうぞ</a></p>" "http://qiita.com/items/3c783e47f0b9ccf8183e" (20330 2515) old 175 nil nil ((id nil "tag:qiita.com,2005:Item/3324") (published nil "2012-03-22T01:58:57+09:00") (updated nil "2012-03-22T02:03:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/3c783e47f0b9ccf8183e"))) (url nil "http://qiita.com/items/3c783e47f0b9ccf8183e") (title nil "Emacsで現在行や選択範囲を簡単に複製するためのduplicate-thing.el") (content ((type . "html")) "<p>行や範囲のコピー＆ペーストを一手で出来るようにしました。<br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120321/20120321001639.png\" alt=\"コピー前\"> <br>
<img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/t/tuto0621/20120321/20120321001641.png\" alt=\"コピー後\"> </p>

<h2>インストール</h2>

<p>下記のS式を評価(C-xC-e)して下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">install.el</span></div><div class=\"highlight\"><pre><span class=\"p\">;;</span> <span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span>
<span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">url</span> &quot;<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ongaeshi</span><span class=\"o\">/</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">/</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">el</span>&quot;<span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>.emacs.d&#47;init.el</h2>

<p>好きなキーを割り当てて下さい。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">init.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;duplicate-thing)</span>
<span class=\"s\">(global-set-key (kbd &quot;M-c&quot;) &#39;</span><span class=\"n\">duplicate</span><span class=\"o\">-</span><span class=\"n\">thing</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>詳しい使い方は<a href=\"http://d.hatena.ne.jp/tuto0621/20120321/1332329935\">コチラをどうぞ</a></p>
") (published nil "2012-03-22T01:58:57Z") (updated nil "2012-03-22T02:03:15Z") (author nil (name nil "ongaeshi")))) ("emacs使っている人へのいたずら" "<p>以下のコードをC-x C-e すると縦書きしかできなくなります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">'</span><span class=\"err\">after-change-functions (lambda (&amp;rest args) (insert &quot;\\n&quot;)))</span>
</pre>
</div>
</div>" "http://qiita.com/items/4ce169901c1a16ab3b1f" (20318 31645) old 176 nil nil ((id nil "tag:qiita.com,2005:Item/3149") (published nil "2012-03-13T07:41:33+09:00") (updated nil "2012-03-13T07:41:33+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4ce169901c1a16ab3b1f"))) (url nil "http://qiita.com/items/4ce169901c1a16ab3b1f") (title nil "emacs使っている人へのいたずら") (content ((type . "html")) "<p>以下のコードをC-x C-e すると縦書きしかできなくなります。</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"s\">&#39;</span><span class=\"err\">after-change-functions (lambda (&amp;rest args) (insert &quot;\\n&quot;)))</span>
</pre>
</div>
</div>") (published nil "2012-03-13T07:41:33Z") (updated nil "2012-03-13T07:41:33Z") (author nil (name nil "podhmo")))) ("ctags で CoffeeScript のタグを生成" "<p>~/.ctags に以下を追加</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">--</span><span class=\"n\">langdef</span><span class=\"p\">=</span><span class=\"n\">coffee</span>
<span class=\"o\">--</span><span class=\"n\">langmap</span><span class=\"p\">=</span><span class=\"n\">coffee</span><span class=\"p\">:.</span><span class=\"n\">coffee</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span><span class=\"n\">class</span> <span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">.]</span><span class=\"o\">+</span><span class=\"p\">)</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">class</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">.*</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">namespace</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">zA</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">class</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*-&gt;.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"k\">function</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">:</span><span class=\"o\">.*-&gt;.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">method</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"n\">var</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">(@[</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"nb\">i</span><span class=\"p\">,</span><span class=\"n\">ivar</span><span class=\"o\">/</span>
</pre>
</div>
</div>" "http://qiita.com/items/4ce0d15bf15b6434d7b1" (20315 30089) old 177 nil nil ((id nil "tag:qiita.com,2005:Item/3109") (published nil "2012-03-11T00:38:49+09:00") (updated nil "2012-03-11T00:38:49+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/4ce0d15bf15b6434d7b1"))) (url nil "http://qiita.com/items/4ce0d15bf15b6434d7b1") (title nil "ctags で CoffeeScript のタグを生成") (content ((type . "html")) "<p>~&#47;.ctags に以下を追加</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"o\">--</span><span class=\"n\">langdef</span><span class=\"p\">=</span><span class=\"n\">coffee</span>
<span class=\"o\">--</span><span class=\"n\">langmap</span><span class=\"p\">=</span><span class=\"n\">coffee</span><span class=\"p\">:.</span><span class=\"n\">coffee</span>

<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span><span class=\"n\">class</span> <span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">.]</span><span class=\"o\">+</span><span class=\"p\">)</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">class</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">.*</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">namespace</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">zA</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">class</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*-&gt;.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"k\">function</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">:</span><span class=\"o\">.*-&gt;.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">method</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">([</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"n\">var</span><span class=\"o\">/</span>
<span class=\"o\">--</span><span class=\"n\">regex</span><span class=\"o\">-</span><span class=\"n\">coffee</span><span class=\"p\">=</span><span class=\"o\">/</span>^<span class=\"p\">[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">(@[</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">Za</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"p\">)[</span> <span class=\"o\">\\</span><span class=\"n\">t</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">=</span><span class=\"o\">.*</span>$<span class=\"o\">/\\</span>1<span class=\"o\">/</span><span class=\"nb\">i</span><span class=\"p\">,</span><span class=\"n\">ivar</span><span class=\"o\">/</span>
</pre>
</div>
</div>") (published nil "2012-03-11T00:38:49Z") (updated nil "2012-03-11T00:38:49Z") (author nil (name nil "aki77@github")))) ("coffee-modeのタブ幅を2にする" "<p>emacsでcoffeescriptを書く時には下記のcoffee-mode.elを使うのがおすすめ<br>
<a href=\"https://github.com/defunkt/coffee-mode\">https://github.com/defunkt/coffee-mode</a></p>
<p>デフォルトだとタブ幅がひろいので2に変更したい。.emacsに下記のように記述する。<br>
※READMEにある通りに書くと改行動作の時にインデントが引き継がれない</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">coffee-custom</span> <span class=\"p\">()</span>
<span class=\"s\">&quot;coffee-mode-hook&quot;</span>
<span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">'tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">'coffee-tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'coffee-mode-hook</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">coffee-custom</span><span class=\"p\">)))</span>
</pre>
</div>
</div>" "http://qiita.com/items/2b5b0303f5a7aa69392a" (20309 56611) old 178 nil nil ((id nil "tag:qiita.com,2005:Item/3031") (published nil "2012-03-06T18:43:31+09:00") (updated nil "2012-03-06T18:47:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2b5b0303f5a7aa69392a"))) (url nil "http://qiita.com/items/2b5b0303f5a7aa69392a") (title nil "coffee-modeのタブ幅を2にする") (content ((type . "html")) "<p>emacsでcoffeescriptを書く時には下記のcoffee-mode.elを使うのがおすすめ<br>
<a href=\"https://github.com/defunkt/coffee-mode\">https://github.com/defunkt/coffee-mode</a></p>

<p>デフォルトだとタブ幅がひろいので2に変更したい。.emacsに下記のように記述する。<br>
※READMEにある通りに書くと改行動作の時にインデントが引き継がれない</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">coffee-custom</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;coffee-mode-hook&quot;</span>
  <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">&#39;tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
       <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">&#39;coffee-tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
  <span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;coffee-mode-hook</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">coffee-custom</span><span class=\"p\">)))</span>
</pre>
</div>
</div>") (published nil "2012-03-06T18:43:31Z") (updated nil "2012-03-06T18:47:15Z") (author nil (name nil "sawamur@github")))) ("Qiita Markdown で Emacs Lisp のシンタックスハイライト" "<p>Scheme としてシンタックスハイライトしてもらう。</p>
<p>つまり</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>```<span class=\"n\">scm</span>
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'</span><span class=\"err\">cl)</span>
<span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">foo</span>&quot;<span class=\"p\">)</span>
```
</pre>
</div>
</div>
<p>って書くと</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'cl</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>scm</code> じゃなくて <code>scheme</code> でもいける。</p>
<p>参考: <a href=\"http://pygments.org/docs/lexers/\">Pygments — Python syntax highlighter</a></p>" "http://qiita.com/items/7d4eeba7c812ae89cc34" (20307 23218) old 179 nil nil ((id nil "tag:qiita.com,2005:Item/2991") (published nil "2012-03-04T21:05:07+09:00") (updated nil "2012-03-04T21:06:10+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7d4eeba7c812ae89cc34"))) (url nil "http://qiita.com/items/7d4eeba7c812ae89cc34") (title nil "Qiita Markdown で Emacs Lisp のシンタックスハイライト") (content ((type . "html")) "<p>Scheme としてシンタックスハイライトしてもらう。</p>

<p>つまり</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>```<span class=\"n\">scm</span>
<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;</span><span class=\"err\">cl)</span>
<span class=\"p\">(</span><span class=\"n\">message</span> &quot;<span class=\"n\">foo</span>&quot;<span class=\"p\">)</span>
```
</pre>
</div>
</div>
<p>って書くと</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;cl</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p><code>scm</code> じゃなくて <code>scheme</code> でもいける。</p>

<p>参考: <a href=\"http://pygments.org/docs/lexers/\">Pygments — Python syntax highlighter</a></p>
") (published nil "2012-03-04T21:05:07Z") (updated nil "2012-03-04T21:06:10Z") (author nil (name nil "k_ui")))) ("cocoa emacs の透明度を変更する elisp" "<p>M-x set-alpha で mini buffer に透明度を入力すると(80とか90とか)変更できるよ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">alpha.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">alpha</span> <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"p\">)</span>
&quot;<span class=\"n\">set</span> <span class=\"n\">frame</span> <span class=\"n\">parameter</span> <span class=\"s\">'alpha&quot;</span>
<span class=\"s\">  (interactive &quot;nAlpha: &quot;)</span>
<span class=\"s\">  (set-frame-parameter nil '</span><span class=\"n\">alpha</span> <span class=\"p\">(</span><span class=\"n\">cons</span> <span class=\"n\">alpha</span><span class=\"o\">-</span><span class=\"n\">num</span> <span class=\"s\">'</span><span class=\"err\">(90))))</span>
</pre>
</div>
</div>" "http://qiita.com/items/ba0d018a03381a964f24" (20307 5208) old 180 nil nil ((id nil "tag:qiita.com,2005:Item/2988") (published nil "2012-03-04T16:06:00+09:00") (updated nil "2012-03-04T16:06:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ba0d018a03381a964f24"))) (url nil "http://qiita.com/items/ba0d018a03381a964f24") (title nil "cocoa emacs の透明度を変更する elisp") (content ((type . "html")) "<p>M-x set-alpha で mini buffer に透明度を入力すると(80とか90とか)変更できるよ。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">alpha.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">alpha</span> <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"p\">)</span>
  &quot;<span class=\"n\">set</span> <span class=\"n\">frame</span> <span class=\"n\">parameter</span> <span class=\"s\">&#39;alpha&quot;</span>
<span class=\"s\">  (interactive &quot;nAlpha: &quot;)</span>
<span class=\"s\">  (set-frame-parameter nil &#39;</span><span class=\"n\">alpha</span> <span class=\"p\">(</span><span class=\"n\">cons</span> <span class=\"n\">alpha</span><span class=\"o\">-</span><span class=\"n\">num</span> <span class=\"s\">&#39;</span><span class=\"err\">(90))))</span>
</pre>
</div>
</div>") (published nil "2012-03-04T16:06:00Z") (updated nil "2012-03-04T16:06:00Z") (author nil (name nil "marcy@github")))) ("今いるgitレポジトリ内のファイルを一瞬で開くelisp" "<p>自分で書いたelispの中で一番重宝しているもの．<br>
以下のコードを適当なところ(init.elなど)に貼れば，<code>C-;</code>でそのプロジェクト内のファイルをanything絞りこみして開ける．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">anything-git-project.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">sources</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"o\">-</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"k\">for</span> <span class=\"n\">elt</span> <span class=\"n\">in</span>
<span class=\"s\">'((&quot;Modified files (%s)&quot; . &quot;--modified&quot;)</span>
<span class=\"s\">          (&quot;Untracked files (%s)&quot; . &quot;--others --exclude-standard&quot;)</span>
<span class=\"s\">          (&quot;All controlled files in this project (%s)&quot; . &quot;&quot;))</span>
<span class=\"s\">        collect</span>
<span class=\"s\">        `((name . ,(format (car elt) pwd))</span>
<span class=\"s\">          (init . (lambda ()</span>
<span class=\"s\">                    (unless (and ,(string= (cdr elt) &quot;&quot;) ;update candidate buffer every time except for that of all project files</span>
<span class=\"s\">                                 (anything-candidate-buffer))</span>
<span class=\"s\">                      (with-current-buffer</span>
<span class=\"s\">                          (anything-candidate-buffer '</span><span class=\"k\">global</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">insert</span>
<span class=\"p\">(</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">string</span>
<span class=\"p\">,(</span><span class=\"n\">format</span> &quot;<span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"o\">-</span><span class=\"n\">files</span> $<span class=\"p\">(</span><span class=\"n\">git</span> <span class=\"n\">rev</span><span class=\"o\">-</span><span class=\"n\">parse</span> <span class=\"o\">--</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">cdup</span><span class=\"p\">)</span> <span class=\"c\">%s&quot;</span>
<span class=\"p\">(</span><span class=\"n\">cdr</span> <span class=\"n\">elt</span><span class=\"p\">))))))))</span>
<span class=\"p\">(</span><span class=\"n\">candidates</span><span class=\"o\">-</span><span class=\"n\">in</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"p\">.</span> <span class=\"n\">file</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">pwd</span> <span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">sources</span> <span class=\"p\">(</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">sources</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"o\">-</span><span class=\"k\">for</span> <span class=\"n\">pwd</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">buffer</span> <span class=\"n\">sources</span>
<span class=\"p\">(</span><span class=\"n\">format</span> &quot;<span class=\"o\">*</span><span class=\"n\">Anything</span> <span class=\"n\">git</span> <span class=\"n\">project</span> <span class=\"n\">in</span> <span class=\"c\">%s*&quot; pwd))))</span>
<span class=\"p\">(</span><span class=\"n\">define</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">C</span><span class=\"o\">-</span><span class=\"p\">;</span>&quot;<span class=\"p\">)</span> <span class=\"s\">'</span><span class=\"err\">anything-git-project)</span>
</pre>
</div>
</div>
<p>実行すると以下のようにそのレポジトリ内のファイルが一覧表示され，そこから絞り込んでファイルを開ける．</p>
<p><img src=\"http://f.cl.ly/items/180j0j0u1C1b3H2G3v0h/Screen%20Shot%202012-03-02%20at%205.23.28%20PM.png\" alt=\"\"></p>
<p>編集してコミットしてないファイルやトラックされていないファイルは分けて表示してくれる．便利．</p>" "http://qiita.com/items/d0d4959510acd9fd1abf" (20382 14697) old 181 nil nil ((id nil "tag:qiita.com,2005:Item/2940") (published nil "2012-03-02T17:25:52+09:00") (updated nil "2012-04-30T16:04:09+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d0d4959510acd9fd1abf"))) (url nil "http://qiita.com/items/d0d4959510acd9fd1abf") (title nil "今いるgitレポジトリ内のファイルを一瞬で開くelisp") (content ((type . "html")) "<p>自分で書いたelispの中で一番重宝しているもの．<br>
以下のコードを適当なところ(init.elなど)に貼れば，<code>C-;</code>でそのプロジェクト内のファイルをanything絞りこみして開ける．</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">anything-git-project.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">sources</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"o\">-</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"k\">for</span> <span class=\"n\">elt</span> <span class=\"n\">in</span>
        <span class=\"s\">&#39;((&quot;Modified files (%s)&quot; . &quot;--modified&quot;)</span>
<span class=\"s\">          (&quot;Untracked files (%s)&quot; . &quot;--others --exclude-standard&quot;)</span>
<span class=\"s\">          (&quot;All controlled files in this project (%s)&quot; . &quot;&quot;))</span>
<span class=\"s\">        collect</span>
<span class=\"s\">        `((name . ,(format (car elt) pwd))</span>
<span class=\"s\">          (init . (lambda ()</span>
<span class=\"s\">                    (unless (and ,(string= (cdr elt) &quot;&quot;) ;update candidate buffer every time except for that of all project files</span>
<span class=\"s\">                                 (anything-candidate-buffer))</span>
<span class=\"s\">                      (with-current-buffer</span>
<span class=\"s\">                          (anything-candidate-buffer &#39;</span><span class=\"k\">global</span><span class=\"p\">)</span>
                        <span class=\"p\">(</span><span class=\"n\">insert</span>
                         <span class=\"p\">(</span><span class=\"n\">shell</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">string</span>
                          <span class=\"p\">,(</span><span class=\"n\">format</span> &quot;<span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"o\">-</span><span class=\"n\">files</span> $<span class=\"p\">(</span><span class=\"n\">git</span> <span class=\"n\">rev</span><span class=\"o\">-</span><span class=\"n\">parse</span> <span class=\"o\">--</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">cdup</span><span class=\"p\">)</span> <span class=\"c\">%s&quot;</span>
                                   <span class=\"p\">(</span><span class=\"n\">cdr</span> <span class=\"n\">elt</span><span class=\"p\">))))))))</span>
          <span class=\"p\">(</span><span class=\"n\">candidates</span><span class=\"o\">-</span><span class=\"n\">in</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"p\">.</span> <span class=\"n\">file</span><span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">pwd</span> <span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"p\">)</span>
         <span class=\"p\">(</span><span class=\"n\">sources</span> <span class=\"p\">(</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">sources</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"o\">-</span><span class=\"k\">for</span> <span class=\"n\">pwd</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"n\">anything</span><span class=\"o\">-</span><span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">buffer</span> <span class=\"n\">sources</span>
     <span class=\"p\">(</span><span class=\"n\">format</span> &quot;<span class=\"o\">*</span><span class=\"n\">Anything</span> <span class=\"n\">git</span> <span class=\"n\">project</span> <span class=\"n\">in</span> <span class=\"c\">%s*&quot; pwd))))</span>
<span class=\"p\">(</span><span class=\"n\">define</span><span class=\"o\">-</span><span class=\"n\">key</span> <span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">kbd</span> &quot;<span class=\"n\">C</span><span class=\"o\">-</span><span class=\"p\">;</span>&quot;<span class=\"p\">)</span> <span class=\"s\">&#39;</span><span class=\"err\">anything-git-project)</span>
</pre>
</div>
</div>
<p>実行すると以下のようにそのレポジトリ内のファイルが一覧表示され，そこから絞り込んでファイルを開ける．</p>

<p><img src=\"http://f.cl.ly/items/180j0j0u1C1b3H2G3v0h/Screen%20Shot%202012-03-02%20at%205.23.28%20PM.png\" alt=\"\"></p>

<p>編集してコミットしてないファイルやトラックされていないファイルは分けて表示してくれる．便利．</p>
") (published nil "2012-03-02T17:25:52Z") (updated nil "2012-04-30T16:04:09Z") (author nil (name nil "yaotti")))) ("emacs 23 のjavascript-modeのタブ幅を変更するには" "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(setq js-indent-level 2)
</pre>
</div>
</div>
<p>(setq-default tab-width 4)<br>
ではうまくいかない</p>" "http://qiita.com/items/1eeacf63551c1215a1cd" (20300 52106) old 182 nil nil ((id nil "tag:qiita.com,2005:Item/2874") (published nil "2012-02-28T21:41:13+09:00") (updated nil "2012-02-28T21:41:46+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1eeacf63551c1215a1cd"))) (url nil "http://qiita.com/items/1eeacf63551c1215a1cd") (title nil "emacs 23 のjavascript-modeのタブ幅を変更するには") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre>(setq js-indent-level 2)
</pre>
</div>
</div>
<p>(setq-default tab-width 4)<br>
ではうまくいかない</p>
") (published nil "2012-02-28T21:41:13Z") (updated nil "2012-02-28T21:41:46Z") (author nil (name nil "sawamur@github")))) ("dired - emacs のファイルマネージャ機能について" "<p>ここがわかりやすい<br>
<a href=\"http://d.hatena.ne.jp/kakurasan/20070702/p1\" target=\"_blank\">http://d.hatena.ne.jp/kakurasan/20070702/p1</a></p>" "http://qiita.com/items/67e2cb441f5f9bf6cc63" (20297 30748) old 183 nil nil ((id nil "tag:qiita.com,2005:Item/2819") (published nil "2012-02-26T09:09:00+09:00") (updated nil "2012-02-26T09:09:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/67e2cb441f5f9bf6cc63"))) (url nil "http://qiita.com/items/67e2cb441f5f9bf6cc63") (title nil "dired - emacs のファイルマネージャ機能について") (content ((type . "html")) "<p>ここがわかりやすい<br>
<a href=\"http://d.hatena.ne.jp/kakurasan/20070702/p1\" target=\"_blank\">http://d.hatena.ne.jp/kakurasan/20070702/p1</a></p>
") (published nil "2012-02-26T09:09:00Z") (updated nil "2012-02-26T09:09:00Z") (author nil (name nil "dz_")))) ("emacs のバッファをタブみたいに表示したい" "<ol>
<li><a href=\"http://www.emacswiki.org/emacs/download/tabbar.el\">tabbar.el</a> を load-path のどこかに置く</li>
<li><code>.emacs</code> に以下を追記</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'tabbar</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">tabbar-mode</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<h3>タブのグループ</h3>
<p>タブをグループ化する機能があり、デフォルトだと一部を除き major-mode ごとにグループ分けされる。</p>
<p>このグループ分けが気に入らないなら、<a href=\"http://www.emacswiki.org/emacs/download/tabbar.el\">tabbar.el</a> の <code>tabbar-buffer-groups</code> を参考に下のように書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; 例: 全バッファを一つのグループにしまう</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">tabbar-buffer-groups-function</span> <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"s\">&quot;Buffers&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<h3>おわり</h3>
<p>あとで表示するタブのフィルタリングとかもっと書く</p>" "http://qiita.com/items/df9e742017d08444c4ac" (20291 17404) old 184 nil nil ((id nil "tag:qiita.com,2005:Item/2680") (published nil "2012-02-21T12:10:26+09:00") (updated nil "2012-02-21T16:13:00+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/df9e742017d08444c4ac"))) (url nil "http://qiita.com/items/df9e742017d08444c4ac") (title nil "emacs のバッファをタブみたいに表示したい") (content ((type . "html")) "<ol>
<li><a href=\"http://www.emacswiki.org/emacs/download/tabbar.el\">tabbar.el</a> を load-path のどこかに置く</li>
<li><code>.emacs</code> に以下を追記</li>
</ol>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;tabbar</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">tabbar-mode</span><span class=\"p\">))</span>
</pre>
</div>
</div>
<h3>タブのグループ</h3>

<p>タブをグループ化する機能があり、デフォルトだと一部を除き major-mode ごとにグループ分けされる。</p>

<p>このグループ分けが気に入らないなら、<a href=\"http://www.emacswiki.org/emacs/download/tabbar.el\">tabbar.el</a> の <code>tabbar-buffer-groups</code> を参考に下のように書く。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; 例: 全バッファを一つのグループにしまう</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">tabbar-buffer-groups-function</span> <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"s\">&quot;Buffers&quot;</span><span class=\"p\">)))</span>
</pre>
</div>
</div>
<h3>おわり</h3>

<p>あとで表示するタブのフィルタリングとかもっと書く</p>
") (published nil "2012-02-21T12:10:26Z") (updated nil "2012-02-21T16:13:00Z") (author nil (name nil "k_ui")))) ("coffee-mode のインデントをスペース2つに設定" "<p>READMEの設定例に加えて、coffee-tab-widthも設定する必要がある。</p>
<p><a href=\"https://github.com/defunkt/coffee-mode/pull/45\" target=\"_blank\">https://github.com/defunkt/coffee-mode/pull/45</a></p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">coffee-custom</span> <span class=\"p\">()</span>
<span class=\"s\">&quot;coffee-mode-hook&quot;</span>
<span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">'tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">coffee-tab-width</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'coffee-mode-hook</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">coffee-custom</span><span class=\"p\">)))</span>
</pre>
</div>
</div>" "http://qiita.com/items/a8d96ae95a1838500e37" (20281 18070) old 185 nil nil ((id nil "tag:qiita.com,2005:Item/2449") (published nil "2012-02-14T02:21:26+09:00") (updated nil "2012-02-14T02:21:26+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/a8d96ae95a1838500e37"))) (url nil "http://qiita.com/items/a8d96ae95a1838500e37") (title nil "coffee-mode のインデントをスペース2つに設定") (content ((type . "html")) "<p>READMEの設定例に加えて、coffee-tab-widthも設定する必要がある。</p>

<p><a href=\"https://github.com/defunkt/coffee-mode/pull/45\" target=\"_blank\">https://github.com/defunkt/coffee-mode/pull/45</a></p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">coffee-custom</span> <span class=\"p\">()</span>
  <span class=\"s\">&quot;coffee-mode-hook&quot;</span>
 <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"nv\">make-local-variable</span> <span class=\"ss\">&#39;tab-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
 <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">coffee-tab-width</span> <span class=\"mi\">2</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">&#39;coffee-mode-hook</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">coffee-custom</span><span class=\"p\">)))</span>
</pre>
</div>
</div>") (published nil "2012-02-14T02:21:26Z") (updated nil "2012-02-14T02:21:26Z") (author nil (name nil "aki77@github")))) ("server-mode の Emacs を複数立ち上げる" "<p>screen とかで、それぞれのセッションで emacs 使ってると掲題のような需要がでてくる。</p>
<p><code>~/.bashrc</code>, <code>~/.zshrc</code> などでこんな感じのをかく。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$STY</span> <span class=\"o\">]</span> <span class=\"c\"># screen 内での実行の時</span>
<span class=\"k\">then</span>
<span class=\"k\">  </span><span class=\"nb\">export </span><span class=\"nv\">EMACS_SERVER_NAME</span><span class=\"o\">=</span><span class=\"s2\">&quot;server-$STY&quot;</span>
<span class=\"nb\">alias </span><span class=\"nv\">emacsclient</span><span class=\"o\">=</span><span class=\"s2\">&quot;emacsclient -s \\&quot;$EMACS_SERVER_NAME\\&quot;&quot;</span>
<span class=\"k\">if</span> ! emacsclient -s <span class=\"s2\">&quot;$EMACS_SERVER_NAME&quot;</span> -e <span class=\"s2\">&quot;server-name&quot;</span> &gt; /dev/null 2&gt;&amp;1
<span class=\"k\">then</span>
<span class=\"k\">    </span>screen emacs --eval <span class=\"s2\">&quot;(let () (setq server-name \\&quot;$EMACS_SERVER_NAME\\&quot;)(server-start))&quot;</span>
<span class=\"k\">fi</span>
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<p>screen 立ちあげと同時に emacs 起動するの嫌なら <code>screen emacs --eval ...</code> を <code>alias emacs-server=&quot;emacs --eval ...</code> するのかな。</p>" "http://qiita.com/items/ef52c6f4a3784c10e2b6" (20274 19590) old 186 nil nil ((id nil "tag:qiita.com,2005:Item/2115") (published nil "2012-02-08T19:20:54+09:00") (updated nil "2012-02-08T19:20:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ef52c6f4a3784c10e2b6"))) (url nil "http://qiita.com/items/ef52c6f4a3784c10e2b6") (title nil "server-mode の Emacs を複数立ち上げる") (content ((type . "html")) "<p>screen とかで、それぞれのセッションで emacs 使ってると掲題のような需要がでてくる。</p>

<p><code>~&#47;.bashrc</code>, <code>~&#47;.zshrc</code> などでこんな感じのをかく。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$STY</span> <span class=\"o\">]</span> <span class=\"c\"># screen 内での実行の時</span>
<span class=\"k\">then</span>
<span class=\"k\">  </span><span class=\"nb\">export </span><span class=\"nv\">EMACS_SERVER_NAME</span><span class=\"o\">=</span><span class=\"s2\">&quot;server-$STY&quot;</span>
  <span class=\"nb\">alias </span><span class=\"nv\">emacsclient</span><span class=\"o\">=</span><span class=\"s2\">&quot;emacsclient -s \\&quot;$EMACS_SERVER_NAME\\&quot;&quot;</span>
  <span class=\"k\">if</span> ! emacsclient -s <span class=\"s2\">&quot;$EMACS_SERVER_NAME&quot;</span> -e <span class=\"s2\">&quot;server-name&quot;</span> &gt; /dev/null 2&gt;&amp;1
  <span class=\"k\">then</span>
<span class=\"k\">    </span>screen emacs --eval <span class=\"s2\">&quot;(let () (setq server-name \\&quot;$EMACS_SERVER_NAME\\&quot;)(server-start))&quot;</span> 
  <span class=\"k\">fi</span>
<span class=\"k\">fi</span>
</pre>
</div>
</div>
<p>screen 立ちあげと同時に emacs 起動するの嫌なら <code>screen emacs --eval ...</code> を <code>alias emacs-server=&quot;emacs --eval ...</code> するのかな。</p>
") (published nil "2012-02-08T19:20:54Z") (updated nil "2012-02-08T19:20:54Z") (author nil (name nil "k_ui")))) ("Windowsの音量をEmacsから制御する" "<p>Emacsでコーディング中に音量を変更したくなったので書いてみました。</p>
<p>実際のボリュームコントロールには、mcvc.exeを使っています。<br>
<a href=\"http://maglog.jp/mos-privpro/index.php?module=Article&amp;action=ReaderDetail&amp;article_id=10569\"><a href=\"http://maglog.jp/mos-privpro/index.php?module=Article&action=ReaderDetail&article_id=10569\" target=\"_blank\">http://maglog.jp/mos-privpro/index.php?module=Article&action=ReaderDetail&article_id=10569</a></a></p>
<p>あとはmcvcを呼び出す関数を定義して、キーに割り当てるだけです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; ボリューム</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">volume-up</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;mcvc.exe&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;m+10&quot;</span><span class=\"p\">)</span>
<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">volume-down</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;mcvc.exe&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;m-10&quot;</span><span class=\"p\">)</span>
<span class=\"p\">)</span>
<span class=\"c1\">;; キーバインド</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'volume-up</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-:&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'volume-down</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-;、C-:でボリュームが変更できます。</p>" "http://qiita.com/items/706a7ee72008abda8842" (20272 56448) old 187 nil nil ((id nil "tag:qiita.com,2005:Item/2038") (published nil "2012-02-07T17:10:40+09:00") (updated nil "2012-02-07T17:10:40+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/706a7ee72008abda8842"))) (url nil "http://qiita.com/items/706a7ee72008abda8842") (title nil "Windowsの音量をEmacsから制御する") (content ((type . "html")) "<p>Emacsでコーディング中に音量を変更したくなったので書いてみました。</p>

<p>実際のボリュームコントロールには、mcvc.exeを使っています。<br>
<a href=\"http://maglog.jp/mos-privpro/index.php?module=Article&amp;action=ReaderDetail&amp;article_id=10569\"><a href=\"http://maglog.jp/mos-privpro/index.php?module=Article&action=ReaderDetail&article_id=10569\" target=\"_blank\">http://maglog.jp/mos-privpro/index.php?module=Article&action=ReaderDetail&article_id=10569</a></a></p>

<p>あとはmcvcを呼び出す関数を定義して、キーに割り当てるだけです。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"c1\">;; ボリューム</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">volume-up</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;mcvc.exe&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;m+10&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">volume-down</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">call-process</span> <span class=\"s\">&quot;mcvc.exe&quot;</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"no\">nil</span> <span class=\"s\">&quot;m-10&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">)</span>

<span class=\"c1\">;; キーバインド</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-;&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;volume-up</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">&quot;C-:&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;volume-down</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>C-;、C-:でボリュームが変更できます。</p>
") (published nil "2012-02-07T17:10:40Z") (updated nil "2012-02-07T17:10:40Z") (author nil (name nil "natsutan")))) ("GNU Global のタグファイル自動更新" "<p>Emacsで日々コードと戦っている諸氏は、当然 GNU Global のタグファイルを作ってEmacsから便利に使っていることかと思います。まだの人は急げ <a href=\"http://d.hatena.ne.jp/aduka/20090308/1236493524\" target=\"_blank\">http://d.hatena.ne.jp/aduka/20090308/1236493524</a></p>
<p>そのような諸氏におかれましては、下記のような emacs lisp を .emacs などに書いておくことで、現在編集しているプロジェクトのタグファイルをファイル保存時に自動で更新するようにできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"o\">-</span><span class=\"n\">gtags</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">file</span> <span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"n\">dir</span> <span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">directory</span> <span class=\"n\">file</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">executable</span><span class=\"o\">-</span><span class=\"nb\">find</span> &quot;<span class=\"k\">global</span>&quot;<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span> &quot;<span class=\"n\">gtags</span><span class=\"o\">-</span><span class=\"n\">update</span>&quot; <span class=\"n\">nil</span>
&quot;<span class=\"k\">global</span>&quot; &quot;<span class=\"o\">-</span><span class=\"n\">uv</span>&quot;<span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">'after-save-hook</span>
<span class=\"s\">      '</span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"o\">-</span><span class=\"n\">gtags</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>中身の説明</h2>
<p><code>global -uv</code> を実行すると、カレントディレクトリからルートにさかのぼって GTAGS などのタグファイルを検索し、見つかったらタグファイルを更新してくれます。このコマンドを、ファイル保存のフックから起動しているだけです。</p>" "http://qiita.com/items/8e8c7fca64b4810d8e78" (20257 3293) old 188 nil nil ((id nil "tag:qiita.com,2005:Item/1889") (published nil "2012-01-26T17:20:03+09:00") (updated nil "2012-01-26T17:20:45+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8e8c7fca64b4810d8e78"))) (url nil "http://qiita.com/items/8e8c7fca64b4810d8e78") (title nil "GNU Global のタグファイル自動更新") (content ((type . "html")) "<p>Emacsで日々コードと戦っている諸氏は、当然 GNU Global のタグファイルを作ってEmacsから便利に使っていることかと思います。まだの人は急げ <a href=\"http://d.hatena.ne.jp/aduka/20090308/1236493524\" target=\"_blank\">http://d.hatena.ne.jp/aduka/20090308/1236493524</a></p>

<p>そのような諸氏におかれましては、下記のような emacs lisp を .emacs などに書いておくことで、現在編集しているプロジェクトのタグファイルをファイル保存時に自動で更新するようにできます。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">defun</span> <span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"o\">-</span><span class=\"n\">gtags</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"n\">let</span><span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">file</span> <span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">-</span><span class=\"n\">buffer</span><span class=\"p\">)))</span>
     <span class=\"p\">(</span><span class=\"n\">dir</span> <span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">directory</span> <span class=\"n\">file</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">executable</span><span class=\"o\">-</span><span class=\"nb\">find</span> &quot;<span class=\"k\">global</span>&quot;<span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">process</span> &quot;<span class=\"n\">gtags</span><span class=\"o\">-</span><span class=\"n\">update</span>&quot; <span class=\"n\">nil</span>
             &quot;<span class=\"k\">global</span>&quot; &quot;<span class=\"o\">-</span><span class=\"n\">uv</span>&quot;<span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;after-save-hook</span>
<span class=\"s\">      &#39;</span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"o\">-</span><span class=\"n\">gtags</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<h2>中身の説明</h2>

<p><code>global -uv</code> を実行すると、カレントディレクトリからルートにさかのぼって GTAGS などのタグファイルを検索し、見つかったらタグファイルを更新してくれます。このコマンドを、ファイル保存のフックから起動しているだけです。</p>
") (published nil "2012-01-26T17:20:03Z") (updated nil "2012-01-26T17:20:45Z") (author nil (name nil "hayamiz")))) ("install emacs23.3b on amazon-linux(ec2)" "<p>At first,I tried to install emacs23.1 but it failed with weird error which seemed that the makefile generated by configure script was in wrong format. I googleg that and found some guys tell that might have some illegal white spaces or tabs. Then I tried emacs23.3b. It worked.</p>
<p>emacs23.3b needs ncurses. So,install ncureses-devel before installing it.<br>
<code>$ sudo yum install ncurses-devel</code></p>
<p>Then did, as always.</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ wget http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-23.3b.tar.gz
$ tar xfvz emacs-23.3b.tar.gz
$  ./configure &amp;&amp; make &amp;&amp; sudo make install
</pre>
</div>
</div>" "http://qiita.com/items/2fd4ec126d5d993b5fea" (20253 5286) old 189 nil nil ((id nil "tag:qiita.com,2005:Item/1847") (published nil "2012-01-23T17:00:07+09:00") (updated nil "2012-01-23T17:04:54+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2fd4ec126d5d993b5fea"))) (url nil "http://qiita.com/items/2fd4ec126d5d993b5fea") (title nil "install emacs23.3b on amazon-linux(ec2)") (content ((type . "html")) "<p>At first,I tried to install emacs23.1 but it failed with weird error which seemed that the makefile generated by configure script was in wrong format. I googleg that and found some guys tell that might have some illegal white spaces or tabs. Then I tried emacs23.3b. It worked.</p>

<p>emacs23.3b needs ncurses. So,install ncureses-devel before installing it.<br>
<code>$ sudo yum install ncurses-devel</code></p>

<p>Then did, as always.</p>
<div class=\"code-frame\"><div class=\"highlight\"><pre>$ wget http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-23.3b.tar.gz
$ tar xfvz emacs-23.3b.tar.gz
$  ./configure &amp;&amp; make &amp;&amp; sudo make install
</pre>
</div>
</div>") (published nil "2012-01-23T17:00:07Z") (updated nil "2012-01-23T17:04:54Z") (author nil (name nil "sawamur@github")))) ("Emacs を半透明にすると資料を背景に作業ができてうれしい。" "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">frame</span><span class=\"o\">-</span><span class=\"n\">parameter</span> <span class=\"n\">nil</span> <span class=\"s\">'</span><span class=\"err\">alpha 91)</span>
</pre>
</div>
</div>" "http://qiita.com/items/5dc6b15941893f81bb28" (20249 34229) old 190 nil nil ((id nil "tag:qiita.com,2005:Item/1820") (published nil "2012-01-21T00:18:13+09:00") (updated nil "2012-01-21T00:18:13+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/5dc6b15941893f81bb28"))) (url nil "http://qiita.com/items/5dc6b15941893f81bb28") (title nil "Emacs を半透明にすると資料を背景に作業ができてうれしい。") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">frame</span><span class=\"o\">-</span><span class=\"n\">parameter</span> <span class=\"n\">nil</span> <span class=\"s\">&#39;</span><span class=\"err\">alpha 91)</span>
</pre>
</div>
</div>") (published nil "2012-01-21T00:18:13Z") (updated nil "2012-01-21T00:18:13Z") (author nil (name nil "fatrow")))) ("Unicodeコードポイントで文字を表示/入力" "<div class=\"code-frame\"><div class=\"highlight\"><pre># カーソル上にある文字のコードポイントを表示
<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">char</span>
# <span class=\"n\">Unicode</span>コードポイントを使って文字を入力
<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">ucs</span><span class=\"o\">-</span><span class=\"n\">insert</span>
</pre>
</div>
</div>
<p>non-Unicodeな環境ではどうなるんだろう。</p>" "http://qiita.com/items/b87d66fc7f2aac4a1b08" (20238 17289) old 191 nil nil ((id nil "tag:qiita.com,2005:Item/1661") (published nil "2012-01-12T11:20:57+09:00") (updated nil "2012-01-12T11:20:57+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b87d66fc7f2aac4a1b08"))) (url nil "http://qiita.com/items/b87d66fc7f2aac4a1b08") (title nil "Unicodeコードポイントで文字を表示/入力") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"highlight\"><pre># カーソル上にある文字のコードポイントを表示
<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">describe</span><span class=\"o\">-</span><span class=\"n\">char</span>

# <span class=\"n\">Unicode</span>コードポイントを使って文字を入力
<span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"n\">ucs</span><span class=\"o\">-</span><span class=\"n\">insert</span>
</pre>
</div>
</div>
<p>non-Unicodeな環境ではどうなるんだろう。</p>
") (published nil "2012-01-12T11:20:57Z") (updated nil "2012-01-12T11:20:57Z") (author nil (name nil "naka4")))) ("最強コメントキーバインド M-; (comment-dwim)" "<p>空気を読んでコメントアウトしてくれる。<br>
参考 <a href=\"http://d.hatena.ne.jp/tomoya/20091015/1255593575\">最近の Emacs のコメント機能についてのまとめ。</a></p>" "http://qiita.com/items/7867757f5ec8941d7da7" (20322 42435) old 192 nil nil ((id nil "tag:qiita.com,2005:Item/1498") (published nil "2011-12-31T17:45:50+09:00") (updated nil "2012-03-16T11:30:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7867757f5ec8941d7da7"))) (url nil "http://qiita.com/items/7867757f5ec8941d7da7") (title nil "最強コメントキーバインド M-; (comment-dwim)") (content ((type . "html")) "<p>空気を読んでコメントアウトしてくれる。<br>
参考 <a href=\"http://d.hatena.ne.jp/tomoya/20091015/1255593575\">最近の Emacs のコメント機能についてのまとめ。</a></p>
") (published nil "2011-12-31T17:45:50Z") (updated nil "2012-03-16T11:30:27Z") (author nil (name nil "fatrow")))) ("marmalade を使ってelispパッケージのインストールが出来ない時" "<p>package.el を load-path に置いて</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">'package)</span>
<span class=\"s\">(add-to-list '</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span>
<span class=\"s\">'</span><span class=\"err\">(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を書いたが、package-list-packages をやっても5分ぐらい固まって、marmaladeのパッケージを取得できない現象に当たる。<br>
<a href=\"http://marmalade-repo.org/packages/archive-contents\" target=\"_blank\">http://marmalade-repo.org/packages/archive-contents</a><br>
が proxy error を返しているのが原因だった。メールで連絡したら返事はなかったが次の日には直っていた。自然に直ったのかもしれない。</p>" "http://qiita.com/items/9924fbc870dac9e12804" (20322 42435) old 193 nil nil ((id nil "tag:qiita.com,2005:Item/1494") (published nil "2011-12-31T14:37:02+09:00") (updated nil "2012-03-16T11:30:27+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9924fbc870dac9e12804"))) (url nil "http://qiita.com/items/9924fbc870dac9e12804") (title nil "marmalade を使ってelispパッケージのインストールが出来ない時") (content ((type . "html")) "<p>package.el を load-path に置いて</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs.el</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"s\">&#39;package)</span>
<span class=\"s\">(add-to-list &#39;</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">archives</span>
             <span class=\"s\">&#39;</span><span class=\"err\">(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))</span>
<span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">-</span><span class=\"n\">initialize</span><span class=\"p\">)</span>
</pre>
</div>
</div>
<p>を書いたが、package-list-packages をやっても5分ぐらい固まって、marmaladeのパッケージを取得できない現象に当たる。<br>
<a href=\"http://marmalade-repo.org/packages/archive-contents\" target=\"_blank\">http://marmalade-repo.org/packages/archive-contents</a><br>
が proxy error を返しているのが原因だった。メールで連絡したら返事はなかったが次の日には直っていた。自然に直ったのかもしれない。</p>
") (published nil "2011-12-31T14:37:02Z") (updated nil "2012-03-16T11:30:27Z") (author nil (name nil "fatrow")))) ("Objective-Cモードでのインデント設定" "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">'c-mode-common-hook</span>
<span class=\"s\">          '</span><span class=\"p\">(</span><span class=\"n\">lambda</span><span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">style</span> &quot;<span class=\"n\">cc</span><span class=\"o\">-</span><span class=\"n\">mode</span>&quot;<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">setq</span><span class=\"o\">-</span><span class=\"n\">default</span> <span class=\"n\">tab</span><span class=\"o\">-</span><span class=\"n\">width</span> 4<span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"n\">setq</span><span class=\"o\">-</span><span class=\"n\">default</span> <span class=\"n\">indent</span><span class=\"o\">-</span><span class=\"n\">tabs</span><span class=\"o\">-</span><span class=\"n\">mode</span> <span class=\"n\">nil</span><span class=\"p\">)))</span>
</pre>
</div>
</div>" "http://qiita.com/items/d9f52ed75bd4951db63f" (20322 42434) old 194 nil nil ((id nil "tag:qiita.com,2005:Item/1402") (published nil "2011-12-18T19:52:16+09:00") (updated nil "2012-03-16T11:30:26+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/d9f52ed75bd4951db63f"))) (url nil "http://qiita.com/items/d9f52ed75bd4951db63f") (title nil "Objective-Cモードでのインデント設定") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\"></span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">-</span><span class=\"n\">hook</span> <span class=\"s\">&#39;c-mode-common-hook</span>
<span class=\"s\">          &#39;</span><span class=\"p\">(</span><span class=\"n\">lambda</span><span class=\"p\">()</span>
             <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">style</span> &quot;<span class=\"n\">cc</span><span class=\"o\">-</span><span class=\"n\">mode</span>&quot;<span class=\"p\">)</span>
             <span class=\"p\">(</span><span class=\"n\">setq</span><span class=\"o\">-</span><span class=\"n\">default</span> <span class=\"n\">tab</span><span class=\"o\">-</span><span class=\"n\">width</span> 4<span class=\"p\">)</span>
             <span class=\"p\">(</span><span class=\"n\">setq</span><span class=\"o\">-</span><span class=\"n\">default</span> <span class=\"n\">indent</span><span class=\"o\">-</span><span class=\"n\">tabs</span><span class=\"o\">-</span><span class=\"n\">mode</span> <span class=\"n\">nil</span><span class=\"p\">)))</span>
</pre>
</div>
</div>") (published nil "2011-12-18T19:52:16Z") (updated nil "2012-03-16T11:30:26Z") (author nil (name nil "yamaneko1212")))) ("Dropbox のディレクトリにバックアップファイルを作成しない" "<p>検索してもいい感じのがなかったんで調べてみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">backup-directory-alist</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">&quot;/Dropbox/*.*&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;~/.emacs.d/backup/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">))</span>
</pre>
</div>
</div>" "http://qiita.com/items/c97d10b5abaec0437106" (20322 42432) old 195 nil nil ((id nil "tag:qiita.com,2005:Item/1279") (published nil "2011-12-03T18:44:08+09:00") (updated nil "2012-03-16T11:30:24+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/c97d10b5abaec0437106"))) (url nil "http://qiita.com/items/c97d10b5abaec0437106") (title nil "Dropbox のディレクトリにバックアップファイルを作成しない") (content ((type . "html")) "<p>検索してもいい感じのがなかったんで調べてみた。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">.emacs</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">backup-directory-alist</span>
      <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;/Dropbox/*.*&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;~/.emacs.d/backup/&quot;</span><span class=\"p\">)</span>
        <span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2011-12-03T18:44:08Z") (updated nil "2012-03-16T11:30:24Z") (author nil (name nil "okkez@github")))) ("emacs で , や ; を入力したときに、自動でインデントするのをやめさせたい。" nil "http://qiita.com/items/2fa140c93c9ef2b0a7c4" (20322 42430) old 196 nil nil ((id nil "tag:qiita.com,2005:Item/1108") (published nil "2011-11-20T21:56:01+09:00") (updated nil "2012-03-16T11:30:22+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2fa140c93c9ef2b0a7c4"))) (url nil "http://qiita.com/items/2fa140c93c9ef2b0a7c4") (title nil "emacs で , や ; を入力したときに、自動でインデントするのをやめさせたい。") (content ((type . "html"))) (published nil "2011-11-20T21:56:01Z") (updated nil "2012-03-16T11:30:22Z") (author nil (name nil "tomy_kaira")))) ("ruby の xmp や lispxmp がアホみたいに便利なので、 clojure + emacs で似たものをさがしています。" nil "http://qiita.com/items/b0d663acf04b1589adff" (20322 42428) old 197 nil nil ((id nil "tag:qiita.com,2005:Item/844") (published nil "2011-11-04T11:26:42+09:00") (updated nil "2012-03-16T11:30:20+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/b0d663acf04b1589adff"))) (url nil "http://qiita.com/items/b0d663acf04b1589adff") (title nil "ruby の xmp や lispxmp がアホみたいに便利なので、 clojure + emacs で似たものをさがしています。") (content ((type . "html"))) (published nil "2011-11-04T11:26:42Z") (updated nil "2012-03-16T11:30:20Z") (author nil (name nil "tomy_kaira")))) ("拡張子と言語のマッピングが欲しかったのでちょっとしたelisp書いた" "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">(</span><span class=\"nf\">pair</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">pair</span><span class=\"p\">)</span> <span class=\"s\">&quot;:&quot;</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">symbolp</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">pair</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">symbol-name</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">pair</span><span class=\"p\">))</span>
<span class=\"s\">&quot;unknown&quot;</span><span class=\"p\">)</span>
<span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">)))</span>
<span class=\"nv\">auto-mode-alist</span><span class=\"p\">)</span>
<span class=\"c1\">;; outputs</span>
<span class=\"c1\">;; \\.md:markdown-mode</span>
<span class=\"c1\">;; \\.mk$:sh-mode</span>
<span class=\"c1\">;; \\.scm$:gauche-mode</span>
<span class=\"c1\">;; \\.rb$:ruby-mode</span>
<span class=\"c1\">;; ...</span>
</pre>
</div>
</div>" "http://qiita.com/items/a16478ed5d5fb8e6ab74" (20322 42428) old 198 nil nil ((id nil "tag:qiita.com,2005:Item/819") (published nil "2011-11-02T15:20:19+09:00") (updated nil "2012-03-16T11:30:20+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/a16478ed5d5fb8e6ab74"))) (url nil "http://qiita.com/items/a16478ed5d5fb8e6ab74") (title nil "拡張子と言語のマッピングが欲しかったのでちょっとしたelisp書いた") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">(</span><span class=\"nf\">pair</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">pair</span><span class=\"p\">)</span> <span class=\"s\">&quot;:&quot;</span>
                           <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">symbolp</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">pair</span><span class=\"p\">))</span>
                               <span class=\"p\">(</span><span class=\"nf\">symbol-name</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">pair</span><span class=\"p\">))</span>
                             <span class=\"s\">&quot;unknown&quot;</span><span class=\"p\">)</span>
                           <span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">)))</span>
     <span class=\"nv\">auto-mode-alist</span><span class=\"p\">)</span>

<span class=\"c1\">;; outputs</span>
<span class=\"c1\">;; \\.md:markdown-mode</span>
<span class=\"c1\">;; \\.mk$:sh-mode</span>
<span class=\"c1\">;; \\.scm$:gauche-mode</span>
<span class=\"c1\">;; \\.rb$:ruby-mode</span>
<span class=\"c1\">;; ...</span>
</pre>
</div>
</div>") (published nil "2011-11-02T15:20:19Z") (updated nil "2012-03-16T11:30:20Z") (author nil (name nil "yaotti")))) ("recentf-save-list から呼ばれる write-region のメッセージを出力させない方法は？" "<p>&quot;Wrote &quot; とミニバッファに表示されるのがウザいので、以下<br>
の方法を試しました。write-region 自体が呼ばれないようで、うまくい<br>
きません。どこが間違っているのでしょうか？</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;;</span>
<span class=\"c1\">;;; 方法１</span>
<span class=\"c1\">;;;</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'cl</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">'original-write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">'write-region</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">recentf-save-list</span>
<span class=\"p\">(</span><span class=\"nf\">around</span> <span class=\"nv\">no-message</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">flet</span> <span class=\"p\">((</span><span class=\"nf\">write-region</span> <span class=\"p\">(</span><span class=\"nf\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">&amp;optional</span> <span class=\"nv\">append</span> <span class=\"nv\">visit</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">original-write-region</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">append</span> <span class=\"ss\">'nomsg</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)))</span>
<span class=\"nv\">ad-do-it</span><span class=\"p\">))</span>
<span class=\"c1\">;;;</span>
<span class=\"c1\">;;; 方法２</span>
<span class=\"c1\">;;;</span>
<span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">'original-write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">'write-region</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">my-write-region-nomsg</span> <span class=\"p\">(</span><span class=\"nf\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">&amp;optional</span> <span class=\"nv\">append</span>
<span class=\"nv\">visit</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">original-write-region</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">append</span> <span class=\"ss\">'nomsg</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">recentf-save-list</span>
<span class=\"p\">(</span><span class=\"nf\">around</span> <span class=\"nv\">no-message</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">unwind-protect</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
<span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">'write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">'my-write-region-nomsg</span><span class=\"p\">))</span>
<span class=\"nv\">ad-do-it</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">'write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">'original-write-region</span><span class=\"p\">))))</span>
</pre>
</div>
</div>" "http://qiita.com/items/8b68c246bbdb81622f5b" (20322 42427) old 199 nil nil ((id nil "tag:qiita.com,2005:Item/764") (published nil "2011-10-29T22:15:43+09:00") (updated nil "2012-03-16T11:30:19+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8b68c246bbdb81622f5b"))) (url nil "http://qiita.com/items/8b68c246bbdb81622f5b") (title nil "recentf-save-list から呼ばれる write-region のメッセージを出力させない方法は？") (content ((type . "html")) "<p>&quot;Wrote &quot; とミニバッファに表示されるのがウザいので、以下<br>
の方法を試しました。write-region 自体が呼ばれないようで、うまくい<br>
きません。どこが間違っているのでしょうか？</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;;</span>
<span class=\"c1\">;;; 方法１</span>
<span class=\"c1\">;;;</span>

<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;cl</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">&#39;original-write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">&#39;write-region</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">recentf-save-list</span>
  <span class=\"p\">(</span><span class=\"nf\">around</span> <span class=\"nv\">no-message</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">flet</span> <span class=\"p\">((</span><span class=\"nf\">write-region</span> <span class=\"p\">(</span><span class=\"nf\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">&amp;optional</span> <span class=\"nv\">append</span> <span class=\"nv\">visit</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nf\">original-write-region</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">append</span> <span class=\"ss\">&#39;nomsg</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)))</span>
    <span class=\"nv\">ad-do-it</span><span class=\"p\">))</span>

<span class=\"c1\">;;;</span>
<span class=\"c1\">;;; 方法２</span>
<span class=\"c1\">;;;</span>

<span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">&#39;original-write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">&#39;write-region</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">my-write-region-nomsg</span> <span class=\"p\">(</span><span class=\"nf\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">&amp;optional</span> <span class=\"nv\">append</span>
                                             <span class=\"nv\">visit</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">original-write-region</span> <span class=\"nv\">start</span> <span class=\"nv\">end</span> <span class=\"nv\">filename</span> <span class=\"nv\">append</span> <span class=\"ss\">&#39;nomsg</span> <span class=\"nv\">lockname</span> <span class=\"nv\">mustbenew</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">defadvice</span> <span class=\"nv\">recentf-save-list</span>
  <span class=\"p\">(</span><span class=\"nf\">around</span> <span class=\"nv\">no-message</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">unwind-protect</span>
      <span class=\"p\">(</span><span class=\"nf\">progn</span>
    <span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">&#39;write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">&#39;my-write-region-nomsg</span><span class=\"p\">))</span>
    <span class=\"nv\">ad-do-it</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">fset</span> <span class=\"ss\">&#39;write-region</span> <span class=\"p\">(</span><span class=\"nf\">symbol-function</span> <span class=\"ss\">&#39;original-write-region</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2011-10-29T22:15:43Z") (updated nil "2012-03-16T11:30:19Z") (author nil (name nil "masutaka")))) ("ddskk で \\ で記号入力モードに入るのをトグルする方法" "<p>下記のコードを emacs.el なり .emacs.d/site_start.d/init_skk.el に貼り付ければよい。<br>
&quot;\\&quot; を押したときに、skk-disable-kcode-input が nil なら今まで通り文字パレット？を表示し、非nil なら \\ を入力する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defcustom</span> <span class=\"nv\">skk-disable-kcode-input</span> <span class=\"nv\">nil</span>
<span class=\"s\">&quot;Non-nil であれば、￥キーによる漢字コード入力を無効にする。筈。&quot;</span>
<span class=\"nv\">:type</span> <span class=\"ss\">'boolean</span>
<span class=\"nv\">:group</span> <span class=\"ss\">'skk-basic</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">skk-rom-kana-rule-list</span>
<span class=\"p\">(</span><span class=\"nb\">append </span><span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">&quot;\\\\&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">skk-kcode-input-hook</span><span class=\"p\">))</span> <span class=\"nv\">skk-rom-kana-rule-list</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">skk-kcode-input-hook</span> <span class=\"p\">(</span><span class=\"nf\">&amp;optional</span> <span class=\"nv\">arg</span><span class=\"p\">)</span>
<span class=\"s\">&quot;skk-disable-kcode-input が nil なら skk-input-by-code-or-menu を呼び、そうでなければ\\\\を入力する&quot;</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">skk-disable-kcode-input</span>
<span class=\"s\">&quot;\\\\&quot;</span>
<span class=\"p\">(</span><span class=\"nf\">skk-list-chars</span> <span class=\"nv\">arg</span><span class=\"p\">)</span>
<span class=\"p\">))</span>
</pre>
</div>
</div>" "http://qiita.com/items/33bfefa78178782535f4" (20322 42427) old 200 nil nil ((id nil "tag:qiita.com,2005:Item/763") (published nil "2011-10-29T19:51:31+09:00") (updated nil "2012-03-16T11:30:19+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/33bfefa78178782535f4"))) (url nil "http://qiita.com/items/33bfefa78178782535f4") (title nil "ddskk で \\ で記号入力モードに入るのをトグルする方法") (content ((type . "html")) "<p>下記のコードを emacs.el なり .emacs.d&#47;site_start.d&#47;init_skk.el に貼り付ければよい。<br>
&quot;\\&quot; を押したときに、skk-disable-kcode-input が nil なら今まで通り文字パレット？を表示し、非nil なら \\ を入力する。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defcustom</span> <span class=\"nv\">skk-disable-kcode-input</span> <span class=\"nv\">nil</span>
  <span class=\"s\">&quot;Non-nil であれば、￥キーによる漢字コード入力を無効にする。筈。&quot;</span>
  <span class=\"nv\">:type</span> <span class=\"ss\">&#39;boolean</span>
  <span class=\"nv\">:group</span> <span class=\"ss\">&#39;skk-basic</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">skk-rom-kana-rule-list</span>
      <span class=\"p\">(</span><span class=\"nb\">append </span><span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;\\\\&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">skk-kcode-input-hook</span><span class=\"p\">))</span> <span class=\"nv\">skk-rom-kana-rule-list</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">skk-kcode-input-hook</span> <span class=\"p\">(</span><span class=\"nf\">&amp;optional</span> <span class=\"nv\">arg</span><span class=\"p\">)</span>
  <span class=\"s\">&quot;skk-disable-kcode-input が nil なら skk-input-by-code-or-menu を呼び、そうでなければ\\\\を入力する&quot;</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">skk-disable-kcode-input</span>
      <span class=\"s\">&quot;\\\\&quot;</span>
    <span class=\"p\">(</span><span class=\"nf\">skk-list-chars</span> <span class=\"nv\">arg</span><span class=\"p\">)</span>
  <span class=\"p\">))</span>
</pre>
</div>
</div>") (published nil "2011-10-29T19:51:31Z") (updated nil "2012-03-16T11:30:19Z") (author nil (name nil "mr_konn")))) ("((hogehoge)) のかたちになったとき、paredit のせいでカッコが削除できなります。カッコのペアを削除するコマンドはありますか。" nil "http://qiita.com/items/559959b4ae9062a7d311" (20322 42425) old 201 nil nil ((id nil "tag:qiita.com,2005:Item/584") (published nil "2011-10-20T14:03:38+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/559959b4ae9062a7d311"))) (url nil "http://qiita.com/items/559959b4ae9062a7d311") (title nil "((hogehoge)) のかたちになったとき、paredit のせいでカッコが削除できなります。カッコのペアを削除するコマンドはありますか。") (content ((type . "html"))) (published nil "2011-10-20T14:03:38Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "tomy_kaira")))) ("color-moccur にふくまれる moccur-grep-find ではファイル探索とマッチングが入力をロックするようになっているので、そこを非同期で実行してほしいです。" "<p>deferred でやってみましたが、うまくいきません。<br>
簡単なサンプルとして次のスクリプトを作成しました。<br>
deferred が while のループを適当に中断して実行してくれるかな?と思いましたが、そのような効果はないことがわかりました。</p>
<p>Thread のようなものがほしいんですが、簡単に利用する方法があれば教えてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">deferred:$</span>
<span class=\"p\">(</span><span class=\"nv\">deferred:next</span>
<span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">i</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"nv\">i</span> <span class=\"mi\">1000000</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">incf</span> <span class=\"nv\">i</span><span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nv\">deferred:nextc</span> <span class=\"nv\">it</span>
<span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Done!&quot;</span><span class=\"p\">))))</span>
</pre>
</div>
</div>" "http://qiita.com/items/44bc5147cea730f10d5b" (20322 42425) old 202 nil nil ((id nil "tag:qiita.com,2005:Item/576") (published nil "2011-10-19T18:29:15+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/44bc5147cea730f10d5b"))) (url nil "http://qiita.com/items/44bc5147cea730f10d5b") (title nil "color-moccur にふくまれる moccur-grep-find ではファイル探索とマッチングが入力をロックするようになっているので、そこを非同期で実行してほしいです。") (content ((type . "html")) "<p>deferred でやってみましたが、うまくいきません。<br>
簡単なサンプルとして次のスクリプトを作成しました。<br>
deferred が while のループを適当に中断して実行してくれるかな?と思いましたが、そのような効果はないことがわかりました。</p>

<p>Thread のようなものがほしいんですが、簡単に利用する方法があれば教えてください。</p>
<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">deferred:$</span>
  <span class=\"p\">(</span><span class=\"nv\">deferred:next</span>
    <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span>
      <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">i</span> <span class=\"mi\">0</span><span class=\"p\">))</span>
        <span class=\"p\">(</span><span class=\"nv\">while</span> <span class=\"p\">(</span><span class=\"nb\">&lt;</span> <span class=\"nv\">i</span> <span class=\"mi\">1000000</span><span class=\"p\">)</span>
          <span class=\"p\">(</span><span class=\"nb\">incf</span> <span class=\"nv\">i</span><span class=\"p\">)))))</span>
  <span class=\"p\">(</span><span class=\"nv\">deferred:nextc</span> <span class=\"nv\">it</span>
    <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nv\">message</span> <span class=\"s\">&quot;Done!&quot;</span><span class=\"p\">))))</span>
</pre>
</div>
</div>") (published nil "2011-10-19T18:29:15Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "tomy_kaira")))) ("私もさっき自分の投稿が２重になりました。" nil "http://qiita.com/items/138e9487223cba8d392a" (20322 42425) old 203 nil nil ((id nil "tag:qiita.com,2005:Item/527") (published nil "2011-10-16T01:33:00+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/138e9487223cba8d392a"))) (url nil "http://qiita.com/items/138e9487223cba8d392a") (title nil "私もさっき自分の投稿が２重になりました。") (content ((type . "html"))) (published nil "2011-10-16T01:33:00Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "mkasahara")))) ("markdown-modeを入れた．brew install markdownするとM-x markdownでhtml出力できるようになって便利" "<p><a href=\"https://github.com/defunkt/markdown-mode\" target=\"_blank\">https://github.com/defunkt/markdown-mode</a></p>" "http://qiita.com/items/7b04a4565f37a07f1c2e" (20322 42425) old 204 nil nil ((id nil "tag:qiita.com,2005:Item/513") (published nil "2011-10-16T00:03:15+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7b04a4565f37a07f1c2e"))) (url nil "http://qiita.com/items/7b04a4565f37a07f1c2e") (title nil "markdown-modeを入れた．brew install markdownするとM-x markdownでhtml出力できるようになって便利") (content ((type . "html")) "<p><a href=\"https://github.com/defunkt/markdown-mode\" target=\"_blank\">https://github.com/defunkt/markdown-mode</a></p>
") (published nil "2011-10-16T00:03:15Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "yaotti")))) ("自分の投稿が二重化してしまうようなきがします。偶然かもしれません。" nil "http://qiita.com/items/562c5b7ef3ad77209443" (20322 42425) old 205 nil nil ((id nil "tag:qiita.com,2005:Item/502") (published nil "2011-10-15T00:10:01+09:00") (updated nil "2012-03-16T11:30:17+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/562c5b7ef3ad77209443"))) (url nil "http://qiita.com/items/562c5b7ef3ad77209443") (title nil "自分の投稿が二重化してしまうようなきがします。偶然かもしれません。") (content ((type . "html"))) (published nil "2011-10-15T00:10:01Z") (updated nil "2012-03-16T11:30:17Z") (author nil (name nil "tomy_kaira")))) ("emacs のファイルコピーやムーブって非同期にならないですか。以前しらべてかんじだと、 emacs 本体を C レベルでハックしないといけないきがしますが、やってる人いますか。" nil "http://qiita.com/items/758a22708f4df733006a" (20322 42424) old 206 nil nil ((id nil "tag:qiita.com,2005:Item/446") (published nil "2011-10-13T08:52:28+09:00") (updated nil "2012-03-16T11:30:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/758a22708f4df733006a"))) (url nil "http://qiita.com/items/758a22708f4df733006a") (title nil "emacs のファイルコピーやムーブって非同期にならないですか。以前しらべてかんじだと、 emacs 本体を C レベルでハックしないといけないきがしますが、やってる人いますか。") (content ((type . "html"))) (published nil "2011-10-13T08:52:28Z") (updated nil "2012-03-16T11:30:16Z") (author nil (name nil "tomy_kaira")))) ("Emacsで他人のソースをほぼ丸写しでも問題ないかについてなんですが、" "<p>bitbucketにあるEmacsLispファイルが自分のやりたいことをまさにやっていて、とにかく自分の作りたいものを作るためにコピペをして作るか、自分の中でコードを理解してから真似る方がいいのか。自分はどうしたらいいのでしょうか。</p>
<p>&quot;all usages/modifications/distributions/whatever.&quot;<br>
とあったのですが、丸パクリは気が引けるのでどうしたらいいのか•••。 </p>
<p><a href=\"https://bitbucket.org/phromo/darkroom-mode/src\" target=\"_blank\">https://bitbucket.org/phromo/darkroom-mode/src</a></p>" "http://qiita.com/items/999797b66b8f25da0511" (20322 42424) old 207 nil nil ((id nil "tag:qiita.com,2005:Item/435") (published nil "2011-10-13T01:20:03+09:00") (updated nil "2012-03-16T11:30:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/999797b66b8f25da0511"))) (url nil "http://qiita.com/items/999797b66b8f25da0511") (title nil "Emacsで他人のソースをほぼ丸写しでも問題ないかについてなんですが、") (content ((type . "html")) "<p>bitbucketにあるEmacsLispファイルが自分のやりたいことをまさにやっていて、とにかく自分の作りたいものを作るためにコピペをして作るか、自分の中でコードを理解してから真似る方がいいのか。自分はどうしたらいいのでしょうか。</p>

<p>&quot;all usages&#47;modifications&#47;distributions&#47;whatever.&quot;<br>
とあったのですが、丸パクリは気が引けるのでどうしたらいいのか•••。 </p>

<p><a href=\"https://bitbucket.org/phromo/darkroom-mode/src\" target=\"_blank\">https://bitbucket.org/phromo/darkroom-mode/src</a></p>
") (published nil "2011-10-13T01:20:03Z") (updated nil "2012-03-16T11:30:16Z") (author nil (name nil "regluu503")))) ("今日は友人の emacs が、transient-mark-mode に関係なく、Ctrl + npbf で移動したときにマークしてしまう問題に遭遇してこまった。" "<p>emacs ではなく、 X のほうの問題で、 ubuntu の設定で Caps が Ctrl と Shift の両方としてはたらいていて、 Shift + 矢印による選択みたいなあつかいになってた様子。</p>" "http://qiita.com/items/21ea6bfcae8bed1a4c7b" (20322 42424) old 208 nil nil ((id nil "tag:qiita.com,2005:Item/433") (published nil "2011-10-13T01:01:27+09:00") (updated nil "2012-03-16T11:30:16+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/21ea6bfcae8bed1a4c7b"))) (url nil "http://qiita.com/items/21ea6bfcae8bed1a4c7b") (title nil "今日は友人の emacs が、transient-mark-mode に関係なく、Ctrl + npbf で移動したときにマークしてしまう問題に遭遇してこまった。") (content ((type . "html")) "<p>emacs ではなく、 X のほうの問題で、 ubuntu の設定で Caps が Ctrl と Shift の両方としてはたらいていて、 Shift + 矢印による選択みたいなあつかいになってた様子。</p>
") (published nil "2011-10-13T01:01:27Z") (updated nil "2012-03-16T11:30:16Z") (author nil (name nil "tomy_kaira")))) ("jabber(emacs 用 google-talk クライアント)で非同期に音をならすための設定 (elisp です)" "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-alert-message-hooks</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">jabber-message-echo</span> <span class=\"nv\">jabber-message-scroll</span> <span class=\"nv\">jabber-message-wave</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-play-sound-file</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">file</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">start-process-shell-command</span> <span class=\"s\">&quot;player&quot;</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;play &quot;</span> <span class=\"nv\">file</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-alert-message-wave</span> <span class=\"s\">&quot;~/.emacs.d/sounds/se_sad03.wav&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>" "http://qiita.com/items/cd94c53cf2d0d7de2169" (20322 42423) old 210 nil nil ((id nil "tag:qiita.com,2005:Item/406") (published nil "2011-10-10T13:54:40+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/cd94c53cf2d0d7de2169"))) (url nil "http://qiita.com/items/cd94c53cf2d0d7de2169") (title nil "jabber(emacs 用 google-talk クライアント)で非同期に音をならすための設定 (elisp です)") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Common Lisp</span></div><div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-alert-message-hooks</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">jabber-message-echo</span> <span class=\"nv\">jabber-message-scroll</span> <span class=\"nv\">jabber-message-wave</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-play-sound-file</span>
      <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">file</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">start-process-shell-command</span> <span class=\"s\">&quot;player&quot;</span> <span class=\"no\">nil</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"s\">&quot;play &quot;</span> <span class=\"nv\">file</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">jabber-alert-message-wave</span> <span class=\"s\">&quot;~/.emacs.d/sounds/se_sad03.wav&quot;</span><span class=\"p\">)</span>
</pre>
</div>
</div>") (published nil "2011-10-10T13:54:40Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "tomy_kaira")))) ("emacs -nwとか慣れないので" "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>ln -s /usr/local/Cellar/emacs/23.3a/Emacs.app /Applications/Emacs.app
</pre>
</div>
</div>" "http://qiita.com/items/75131a7be34b5e8a43c9" (20322 42423) old 211 nil nil ((id nil "tag:qiita.com,2005:Item/401") (published nil "2011-10-10T06:21:41+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/75131a7be34b5e8a43c9"))) (url nil "http://qiita.com/items/75131a7be34b5e8a43c9") (title nil "emacs -nwとか慣れないので") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Shell script, コマンド</span></div><div class=\"highlight\"><pre>ln -s /usr/local/Cellar/emacs/23.3a/Emacs.app /Applications/Emacs.app
</pre>
</div>
</div>") (published nil "2011-10-10T06:21:41Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "richard_raw")))) ("C-cC-o で org モードのURLひらけたのか。。" nil "http://qiita.com/items/ef7de0b7dedde0a27223" (20322 42423) old 212 nil nil ((id nil "tag:qiita.com,2005:Item/390") (published nil "2011-10-09T10:45:43+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/ef7de0b7dedde0a27223"))) (url nil "http://qiita.com/items/ef7de0b7dedde0a27223") (title nil "C-cC-o で org モードのURLひらけたのか。。") (content ((type . "html"))) (published nil "2011-10-09T10:45:43Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "tomy_kaira")))) ("EmacsでShell使うためのelispなにつかってますか？" "<p>multitermとeshell使って使いづらいのでぜひおすすめの<br>
shell用elispをお聞かせください．</p>" "http://qiita.com/items/9f1990ed78caac8bf061" (20322 42423) old 213 nil nil ((id nil "tag:qiita.com,2005:Item/380") (published nil "2011-10-08T19:34:20+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/9f1990ed78caac8bf061"))) (url nil "http://qiita.com/items/9f1990ed78caac8bf061") (title nil "EmacsでShell使うためのelispなにつかってますか？") (content ((type . "html")) "<p>multitermとeshell使って使いづらいのでぜひおすすめの<br>
shell用elispをお聞かせください．</p>
") (published nil "2011-10-08T19:34:20Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "katsyoshi")))) ("Emacs Lisp書くときは eldoc-mode が必須。ミニバッファに関数の引数とか変数のdocstringを表示してくれる" nil "http://qiita.com/items/7120345820121d7a4238" (20322 42423) old 214 nil nil ((id nil "tag:qiita.com,2005:Item/362") (published nil "2011-10-07T22:47:01+09:00") (updated nil "2012-03-16T11:30:15+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/7120345820121d7a4238"))) (url nil "http://qiita.com/items/7120345820121d7a4238") (title nil "Emacs Lisp書くときは eldoc-mode が必須。ミニバッファに関数の引数とか変数のdocstringを表示してくれる") (content ((type . "html"))) (published nil "2011-10-07T22:47:01Z") (updated nil "2012-03-16T11:30:15Z") (author nil (name nil "hayamiz")))) ("ファイルを開いた時、Emacsは自動で文字コード判別してくれるのですが、ファイル中の日本語の文字数が少ないため判別出来ない場合、デフォルトでShift-JISと判断してしまいます。デフォルトでUTF-8で読んで欲しいんですが、修正する方法どなたかご存知ないですか？" nil "http://qiita.com/items/8a6bf77bbb862400e45d" (20322 42422) old 215 nil nil ((id nil "tag:qiita.com,2005:Item/275") (published nil "2011-10-02T16:14:00+09:00") (updated nil "2012-03-16T11:30:14+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/8a6bf77bbb862400e45d"))) (url nil "http://qiita.com/items/8a6bf77bbb862400e45d") (title nil "ファイルを開いた時、Emacsは自動で文字コード判別してくれるのですが、ファイル中の日本語の文字数が少ないため判別出来ない場合、デフォルトでShift-JISと判断してしまいます。デフォルトでUTF-8で読んで欲しいんですが、修正する方法どなたかご存知ないですか？") (content ((type . "html"))) (published nil "2011-10-02T16:14:00Z") (updated nil "2012-03-16T11:30:14Z") (author nil (name nil "ymdsmn")))) ("erbテンプレートの<% if ... %>などをインデントで字下げしたいのですが、一体どこを編集すればよいのでしょうか？" nil "http://qiita.com/items/f5ed7aadf461c76c4188" (20322 42422) old 216 nil nil ((id nil "tag:qiita.com,2005:Item/273") (published nil "2011-10-02T02:58:21+09:00") (updated nil "2012-03-16T11:30:14+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f5ed7aadf461c76c4188"))) (url nil "http://qiita.com/items/f5ed7aadf461c76c4188") (title nil "erbテンプレートの<% if ... %>などをインデントで字下げしたいのですが、一体どこを編集すればよいのでしょうか？") (content ((type . "html"))) (published nil "2011-10-02T02:58:21Z") (updated nil "2012-03-16T11:30:14Z") (author nil (name nil "kumagi")))) ("末尾の))を揃えてくれるelispってないでしょうか" "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; before</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nf\">n</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">foo</span>
<span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"p\">(</span><span class=\"nf\">baz</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">quux</span><span class=\"p\">))</span>
<span class=\"p\">)</span>
<span class=\"p\">)</span>
<span class=\"c1\">;;; after</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nf\">n</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">foo</span>
<span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"p\">(</span><span class=\"nf\">baz</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">quux</span><span class=\"p\">))))</span> <span class=\"c1\">; (^q^)</span>
</pre>
</div>
</div>" "http://qiita.com/items/934a456415f21c54eafb" (20322 42422) old 217 nil nil ((id nil "tag:qiita.com,2005:Item/271") (published nil "2011-10-02T00:39:02+09:00") (updated nil "2012-03-16T11:30:14+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/934a456415f21c54eafb"))) (url nil "http://qiita.com/items/934a456415f21c54eafb") (title nil "末尾の))を揃えてくれるelispってないでしょうか") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">Emacs Lisp</span></div><div class=\"highlight\"><pre><span class=\"c1\">;;; before</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nf\">n</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">foo</span>
   <span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"p\">(</span><span class=\"nf\">baz</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">quux</span><span class=\"p\">))</span>
   <span class=\"p\">)</span>
  <span class=\"p\">)</span>


<span class=\"c1\">;;; after</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nf\">n</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">foo</span>
   <span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"p\">(</span><span class=\"nf\">baz</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"nf\">quux</span><span class=\"p\">))))</span> <span class=\"c1\">; (^q^)</span>
</pre>
</div>
</div>") (published nil "2011-10-02T00:39:02Z") (updated nil "2012-03-16T11:30:14Z") (author nil (name nil "g000001")))) ("emacsで、リージョン中の内容をre-search-forwardとreplace-matchなどの組み合わせで置換していくときに、構文のfooは置換したいけれど、文字列中のfooは置換したくない、という場合は、どうするのが定石なのでしょうか。" "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">ログ，エラーログ</span></div><div class=\"highlight\"><pre>foo &quot;foo&quot; foo Foo
=&gt; bar &quot;foo&quot; bar Foo
という風に置換したい
</pre>
</div>
</div>" "http://qiita.com/items/f8cf0871b326af453450" (20322 42420) old 218 nil nil ((id nil "tag:qiita.com,2005:Item/123") (published nil "2011-09-19T08:28:01+09:00") (updated nil "2012-03-16T11:30:12+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/f8cf0871b326af453450"))) (url nil "http://qiita.com/items/f8cf0871b326af453450") (title nil "emacsで、リージョン中の内容をre-search-forwardとreplace-matchなどの組み合わせで置換していくときに、構文のfooは置換したいけれど、文字列中のfooは置換したくない、という場合は、どうするのが定石なのでしょうか。") (content ((type . "html")) "<div class=\"code-frame\"><div class=\"code-lang\"><span class=\"bold\">ログ，エラーログ</span></div><div class=\"highlight\"><pre>foo &quot;foo&quot; foo Foo
=&gt; bar &quot;foo&quot; bar Foo
という風に置換したい
</pre>
</div>
</div>") (published nil "2011-09-19T08:28:01Z") (updated nil "2012-03-16T11:30:12Z") (author nil (name nil "g000001")))) ("Qiitaが緑色ではなく紫色を使っていたら、emacsの話題が熱かったと思う。" nil "http://qiita.com/items/2820acda4593a478f735" (20322 42419) old 219 nil nil ((id nil "tag:qiita.com,2005:Item/48") (published nil "2011-09-16T15:40:38+09:00") (updated nil "2012-03-16T11:30:11+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/2820acda4593a478f735"))) (url nil "http://qiita.com/items/2820acda4593a478f735") (title nil "Qiitaが緑色ではなく紫色を使っていたら、emacsの話題が熱かったと思う。") (content ((type . "html"))) (published nil "2011-09-16T15:40:38Z") (updated nil "2012-03-16T11:30:11Z") (author nil (name nil "_nus")))) ("Emacsをずっと開いてるとだんだん重くなることがあり，気になっています" nil "http://qiita.com/items/1cfc1bb96422786fde2f" (20322 42418) old 220 nil nil ((id nil "tag:qiita.com,2005:Item/7") (published nil "2011-09-16T13:38:20+09:00") (updated nil "2012-03-16T11:30:10+09:00") (link ((rel . "alternate") (type . "text/html") (href . "http://qiita.com/items/1cfc1bb96422786fde2f"))) (url nil "http://qiita.com/items/1cfc1bb96422786fde2f") (title nil "Emacsをずっと開いてるとだんだん重くなることがあり，気になっています") (content ((type . "html"))) (published nil "2011-09-16T13:38:20Z") (updated nil "2012-03-16T11:30:10Z") (author nil (name nil "hitode909")))))