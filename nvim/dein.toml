[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # {{{
repo = 'Shougo/vimproc.vim'
# hook_post_update = '''
    # if dein#util#_is_windows()
        # let cmd = 'tools\\update-dll-mingw'
    # elseif dein#util#_is_cygwin()
        # let cmd = 'make -f make_cygwin.mak'
    # elseif dein#util#_is_mac()
        # let cmd = 'make -f make_cygwin.mak'
    # elseif executable('gmake')
        # let cmd = 'gmake'
    # else
        # let cmd = 'make'
    # endif
    # let g:dein#plugin.build = cmd
# '''
# }}}

[[plugins]] #{{{
repo = 'Shougo/denite.nvim'
if = ''' has('python3') '''
hook_post_source = '''
    let s:ignore_globs = [
      \ '.git',
      \ '.svn',
      \ '.tox',
      \ 'node_modules',
      \ '*.pyc'
      \ ]
    " call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
    " call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')
	call denite#custom#source('file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
    call denite#custom#var('file/rec', 'command', [
      \ 'ag',
      \ '--follow',
      \ ] + map(deepcopy(s:ignore_globs), { k, v -> '--ignore=' . v }) + [
      \ '--nocolor',
      \ '--nogroup',
      \ '-g',
      \ ''
      \ ])
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
'''

hook_add = '''
    nmap <Leader>a <SID>[denite]
    nnoremap <SID>[denite] <Nop>

    command! DeniteBuffer Denite buffer
    command! DeniteFile Denite file/rec
    command! DeniteGrep Denite grep -buffer-name=search-buffer-denite
    command! DeniteGrepResume Denite -resume -buffer-name=search-buffer-denite
    command! DeniteRegister Denite register
    command! DeniteCommand Denite command
    command! DeniteYank Denite yank
    command! DeniteMru Denite file_mru
    command! DeniteLine Denite line

    nnoremap <silent> <SID>[denite]b :<C-u>DeniteBuffer<CR>
    nnoremap <silent> <SID>[denite]f :<C-u>DeniteFile<CR>
    nnoremap <silent> <SID>[denite]g :<C-u>DeniteGrep<CR>
    nnoremap <silent> <SID>[denite]r :<C-u>DeniteGrepResume<CR>
    " nnoremap <silent> <SID>[denite]r :<C-u>DeniteRegister<CR>
    " nnoremap <silent> <SID>[denite]l :<C-u>DeniteLine<CR>
    " nnoremap <silent> <SID>[denite]c :<C-u>DeniteCommand<CR>
    " nnoremap <silent> <SID>[denite]y :<C-u>DeniteYank<CR>
    nnoremap <silent> <SID>[denite]m :<C-u>DeniteMru<CR>
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	  nnoremap <silent><buffer><expr> <Tab>
	  \ denite#do_map('choose_action')
	endfunction
'''
# }}}

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]] #{{{
repo = 'vim-scripts/The-NERD-Commenter'
hook_add = '''
    let g:NERDCreateDefaultMappings = 0
    let g:NERDSpaceDelims           = 1
    nmap <Leader>c <Plug>NERDCommenterToggle
    vmap <Leader>c <Plug>NERDCommenterToggle
'''
# }}}

[[plugins]] #{{{
repo = 'itchyny/lightline.vim'
hook_post_source = '''
    call lightline#enable()
'''
# }}}

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_change_directory_for_non_project_files = 'current'
'''

[[plugins]]
repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'vim-scripts/scratch-utility'
if = ''' ! has('kaoriya') '''

[[plugins]]
repo = 'tomasr/molokai'
hook_add = ''' colorscheme molokai '''

[[plugins]] #{{{
repo = 'w0rp/ale'
if = ''' has('nvim') '''
hook_add = '''
" let g:ale_ruby_rubocop_options='--config .rubocop_todo.yml'
let g:ale_cpp_clang_options = "-std=c++14 -Wall -I../include"
let g:ale_cpp_gcc_options = "-std=c++14 -Wall -I../include"
let g:ale_c_clang_options = "-std=c++14 -Wall -I../include"
let g:ale_c_gcc_options = "-std=c++14 -Wall -I../include"
let g:ale_ansible_ansible_lint_executable  = "ansible-lint"
"let g:ale_linters = {
"    \'javascript': ['eslint', 'standard'],
"    \'yaml.ansible': ['ansible-lint'],
"    \}
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] [%severity%] %s'
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''
# }}}

[[plugins]] #{{{
repo = 'scrooloose/nerdtree'
hook_add = '''
    nmap <C-n> :NERDTreeToggle<CR>
    let NERDTreeShowBookmarks=1
    let g:NERDTreeDirArrows = 1
    let g:NERDTreeDirArrowExpandable  = '|'
    let g:NERDTreeDirArrowCollapsible = '>'

    " function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
        " exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
        " exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
    " endfunction
    function! NERDTreeHighlightFile(extension, fg, bg)
        exec 'autocmd filetype nerdtree syn match NERDTreeTxtFile #^\s\+.*'. a:extension .'$#'
        exec 'autocmd filetype nerdtree highlight NERDTreeTxtFile ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:bg .' guifg='. a:fg
    endfunction

    " call NERDTreeHighlightFile('txt', 'blue', 'black')
    " call NERDTreeHighlightFile('py',     'yellow',  'none', 'yellow',  '#151515')
    call NERDTreeHighlightFile('md',     'blue',    'black')
    " call NERDTreeHighlightFile('sh',     'blue',    'none', '#3366FF', '#151515')
    " call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
    " call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
    " call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
    " call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
    " call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
    " call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
    " call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
    " call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
    " call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
    " call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')
'''
# }}}

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
depends = ['nerdtree.vim']

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
""let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|build'
'''

[[plugins]]  # Japanese doc
repo = 'vim-jp/vimdoc-ja'
hook_add = 'set helplang=ja,en'

[[plugins]]
repo = 'mattn/sonictemplate-vim'

[[plugins]]
repo = 'deris/vim-shot-f'

[[plugins]] #{{{
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_autoshowtag = 1
nnoremap <silent><F11>  :Tagbar<CR>
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }
autocmd FileType python,ruby :TagbarOpen
'''
# }}}

[[plugins]]
repo = 'notomo/denite-keymap'
depends = ['denite.nvim']

[[plugins]]
repo = 'ruanyl/vim-gh-line'

[[plugins]]
repo = 'iyuuya/denite-ale'
depends = ['denite.nvim']

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'pearofducks/ansible-vim'
