[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]] # {{{
repo = 'Shougo/vimproc.vim'
# hook_post_update = '''
    # if dein#util#_is_windows()
        # let cmd = 'tools\\update-dll-mingw'
    # elseif dein#util#_is_cygwin()
        # let cmd = 'make -f make_cygwin.mak'
    # elseif dein#util#_is_mac()
        # let cmd = 'make -f make_cygwin.mak'
    # elseif executable('gmake')
        # let cmd = 'gmake'
    # else
        # let cmd = 'make'
    # endif
    # let g:dein#plugin.build = cmd
# '''
# }}}

[[plugins]] #{{{
repo = 'Shougo/denite.nvim'
if = ''' has('python3') '''
hook_post_source = '''
    let s:ignore_globs = [
      \ '.git',
      \ '.svn',
      \ '.tox',
      \ 'node_modules',
      \ '*.pyc'
      \ ]
    " call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
    " call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')
	call denite#custom#source('file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
    call denite#custom#var('file/rec', 'command', [
      \ 'ag',
      \ '--follow',
      \ ] + map(deepcopy(s:ignore_globs), { k, v -> '--ignore=' . v }) + [
      \ '--nocolor',
      \ '--nogroup',
      \ '-g',
      \ ''
      \ ])
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
'''

hook_add = '''
    nmap <Leader>a <SID>[denite]
    nnoremap <SID>[denite] <Nop>

    command! DeniteBuffer Denite buffer
    command! DeniteFile Denite file/rec
    command! DeniteGrep Denite grep -buffer-name=search-buffer-denite
    command! DeniteGrepResume Denite -resume -buffer-name=search-buffer-denite
    command! DeniteRegister Denite register
    command! DeniteCommand Denite command
    command! DeniteYank Denite yank
    command! DeniteMru Denite file_mru
    command! DeniteLine Denite line

    nnoremap <silent> <SID>[denite]b :<C-u>DeniteBuffer<CR>
    nnoremap <silent> <SID>[denite]f :<C-u>DeniteFile<CR>
    nnoremap <silent> <SID>[denite]g :<C-u>DeniteGrep<CR>
    nnoremap <silent> <SID>[denite]r :<C-u>DeniteGrepResume<CR>
    " nnoremap <silent> <SID>[denite]r :<C-u>DeniteRegister<CR>
    " nnoremap <silent> <SID>[denite]l :<C-u>DeniteLine<CR>
    " nnoremap <silent> <SID>[denite]c :<C-u>DeniteCommand<CR>
    " nnoremap <silent> <SID>[denite]y :<C-u>DeniteYank<CR>
    nnoremap <silent> <SID>[denite]m :<C-u>DeniteMru<CR>
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	  nnoremap <silent><buffer><expr> <Tab>
	  \ denite#do_map('choose_action')
	endfunction
'''
# }}}

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]] #{{{
repo = 'vim-scripts/The-NERD-Commenter'
hook_add = '''
    let g:NERDCreateDefaultMappings = 0
    let g:NERDSpaceDelims           = 1
    nmap <Leader>c <Plug>NERDCommenterToggle
    vmap <Leader>c <Plug>NERDCommenterToggle
'''
# }}}

[[plugins]] #{{{
repo = 'itchyny/lightline.vim'
hook_post_source = '''
    call lightline#enable()
'''
hook_add = '''
function! LSPStatus() abort
    let l:errors = 0
    let l:warnings = 0
    for item in getqflist()
        if item["type"] == "E"
            let l:errors += 1
        else
            let l:warnings += 1
        endif
    endfor
    return l:errors + l:warnings == 0 ? "LSP: OK" : "LSP: E:" . l:errors . " " . "W:" . l:warnings
endfunction

function! GitHead()
    let l:head = fugitive#head()
    " î‚ 
    return "\ue0a0 " . l:head
endfunction

let g:lightline = {
            \ 'active': {
            \ 'left': [ [ 'mode', 'paste' ],
            \           [ 'gitbranch', 'readonly', 'filename', 'modified' ],
            \           [ 'lsp' ] ],
            \},
            \ 'component_function': {
            \   'gitbranch': 'GitHead',
            \   'lsp': 'LSPStatus'
            \ },
            \}

'''
# }}}

[[plugins]] # {{{
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_change_directory_for_non_project_files = 'current'
let g:rooter_patterns = [
  \ 'Cargo.toml',
  \ 'package.json',
  \ 'Makefile',
  \ 'README.md',
  \ 'Rakefile',
  \ '.git/']
'''
# }}}

[[plugins]]
repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'vim-scripts/scratch-utility'
if = ''' ! has('kaoriya') '''

[[plugins]]
repo = 'tomasr/molokai'
hook_add = ''' colorscheme molokai '''

[[plugins]] #{{{
repo = 'scrooloose/nerdtree'
hook_add = '''
    nmap <C-n> :NERDTreeToggle<CR>
    let NERDTreeShowBookmarks=1
    let g:NERDTreeDirArrows = 1
    let g:NERDTreeDirArrowExpandable  = '|'
    let g:NERDTreeDirArrowCollapsible = '>'

    function! NERDTreeHighlightFile(extension, fg, bg)
        exec 'autocmd filetype nerdtree syn match NERDTreeTxtFile #^\s\+.*'. a:extension .'$#'
        exec 'autocmd filetype nerdtree highlight NERDTreeTxtFile ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:bg .' guifg='. a:fg
    endfunction

    call NERDTreeHighlightFile('md',     'blue',    'black')
'''
# }}}

[[plugins]] #{{{
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
let g:NERDTreeIgnore = [
\ '^build$',
\ '^__pycache__$',
\ '.pyc$',
\]
'''
depends = ['nerdtree.vim']
# }}}

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]] # {{{
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
""let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|build'
'''
# }}}

[[plugins]]  # Japanese doc {{{
repo = 'vim-jp/vimdoc-ja'
hook_add = 'set helplang=ja,en'
# }}}

[[plugins]]
repo = 'mattn/sonictemplate-vim'

[[plugins]]
repo = 'deris/vim-shot-f'

[[plugins]] #{{{
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_autoshowtag = 1
nnoremap <silent><F11>  :Tagbar<CR>
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }
"autocmd FileType ruby :TagbarOpen
'''
# }}}

[[plugins]]
repo = 'notomo/denite-keymap'
depends = ['denite.nvim']

[[plugins]]
repo = 'ruanyl/vim-gh-line'

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'pearofducks/ansible-vim'

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
build = './install.sh'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
